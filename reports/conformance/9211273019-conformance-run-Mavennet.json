{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9523ce10-bd79-4dbf-a0c8-2b3671949444",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a6382b9e-6ad9-45ec-8259-549cc2340dd3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2e892d5-53c7-4eff-b362-677aada0e0a4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f777c2c-24f0-4f0a-9ad7-66839b08f78b"
                }
              }
            ]
          },
          {
            "id": "48ce7325-5d80-4e7e-9447-182d7c3dafbf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97144b55-08ed-4223-9696-d75c6899b515",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81a7084d-c63b-4be4-8038-b424b5ace6c8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa5164ec-9028-4882-9486-6d329b24a38d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "01bcaa53-3f8f-45aa-b9aa-ede24c93901b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f5f20b0-4235-43c3-b0ec-a2e838b02712",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58042e36-e773-492b-b755-ffad89ed17e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1389db9d-14a6-418f-94c7-87b2d79a12fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63fda808-62a1-46c3-acf7-5d226606421b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02067329-d8d1-4b32-83ec-9b090f81184c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07c4ceb0-1c46-4918-ba73-7b66ac0c5a48",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e5298bf-43fc-4043-8a52-125bd216d463"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77e6ffba-5418-4e66-915a-3e70be641c55",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "626d201f-a3a2-451f-b2c1-acd666133400"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "187f4e7d-a065-4f65-9da1-ac3e8cec9862",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57ee8d34-59e3-45fc-8076-41f28e57eea2"
            }
          }
        ]
      },
      {
        "id": "6b9c17d5-81b7-43fc-9ace-51aa3ed39041",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "00a3f8cd-4605-4132-ac3b-18451893a65c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1019bb6-05e4-4acc-ac40-abfc6f6f7845",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e43b2eb-05cd-4a2b-afd7-80b02544977f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241bd55-e8aa-4de9-8ed4-d468e68be1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e36f9f94-0839-400e-aa87-fcc2198978d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c44db38-b9d2-45ed-95c6-0cf109fe2d68",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a940792-49f2-4e9f-8f7b-4b53082b43ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "760fee89-0904-4255-9174-1c9996cb797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5243fae2-b680-413e-9d22-30868ad7af48",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42129129-0d69-4efa-b4af-3c74ed85b31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7c0edd7-ab77-414f-ab1a-ea718e69278d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5fabc899-ab70-49ae-96b0-f02b228bcef9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a33ebfc3-1f7a-4ffa-999a-75133786a1c7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c9d186-5740-48fe-b81a-5a3ffa6f589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45ad6c06-859a-4653-80ba-6de7e366f250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d97f0e-a8c2-4ed1-b179-8775da1f66e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e6211a-2ec7-4b58-95a3-4647a8e4859a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "578adf0f-1b92-454d-bd18-cb6da47938eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eebcd7b4-41bb-42e5-b294-907ae7a9e6dc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f03ded9-7e0c-40a7-a119-318201580c3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f3f4498b-5e69-4b92-8abe-08101db60725"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17a77680-58bf-4412-8761-ab41dd554af5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c786bcdc-d1fe-4ed4-963b-6d9a4759ae9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03749176-7181-43ea-b531-5a37dbe8e87c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10c6acdb-effd-4ec9-b90e-e0fab8791f05"
            }
          }
        ]
      },
      {
        "id": "5a3d1b8d-0aa6-45f2-a20a-a005e77483b5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b63be6ef-dcd1-4494-a6a4-c8831efb6ed8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b6ee2f1-7964-4b9d-a9e6-b19c5c253a89",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ed2afa18-cafb-4130-ba22-73f14b075626",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeca667-df2a-44e0-98d0-4ebafb1340c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364dd8fa-c5b1-4d14-a822-742ce8a46da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a03733-6d21-4df2-8ddb-6967ddc26343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dcdb381-ef90-4030-964c-9f12d73c8302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d6f8a9-44e8-4ce1-973b-b0b21e01534f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36f4f83-3e32-4aef-8fac-b699acd673b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab0b68d-7933-4ebd-9696-39f227721103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b321f-df84-46d0-ac08-64542d1179c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71428dee-59df-49d2-b082-a0a9432c32f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b0ac87-aa29-4dec-a519-8d9362614e8f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ace15c-7775-4f6f-91e4-fecd16534c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09203a5-9b32-4311-a612-274c3f90f8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916ec54d-de31-4c37-ad3a-5e562ea9c621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52ce678a-2079-4b33-95a9-a4615f0912b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2843b8e1-e3bb-4010-bdd6-33ec9559f9bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffd7195-51d7-4a02-b76d-2d526c62f4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec6647b-fad0-4c9d-9068-701f7f4ad56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e329d2bc-1930-4653-bee4-ab334ad02167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abae5d82-5e0b-4c33-9fd8-3ea25d56e5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320c3b82-89b6-49e9-9b1d-c57d193f16b5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e7d09-e35b-40ed-aa55-5a3283bf30dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2348cf-02a7-4a3b-b688-7fcb8d542a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74679cd0-37e4-49ea-b623-b4eebf596bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3448c3ed-81e6-474c-bc20-a762d4914f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae134133-2fcd-4f42-89f1-6c0e92417d7f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8fa9d-6fa3-4910-afaa-ff6ccafa0068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e866524a-fec9-48fa-99d7-9f29ff2975a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87954b14-a61c-4a98-8c7f-3917d540533d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e1cbf5-947a-47a8-b543-9efc4aacc242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103f7862-cf5f-4d3f-b2ff-8cdee5e5c45e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f13db4a-5336-44df-a98b-2b7d47d202f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aceac83-8db6-4f38-8932-7fd75431417b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d934f06-3470-499a-aa92-9d3b3fa2bb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1b830ee-41ab-4df1-a24b-d8374d538371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3b62a1-1c2f-4904-9d86-4c87660a88f5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2862dd-f8f5-45cf-9770-6f88a85d019b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb70dbb5-5c95-4b4f-8a31-72370c4fd6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06be9268-c191-45c8-b759-1f2a0d087395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21c48437-2b08-4f05-b09d-18887e968516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9d0461-6817-4a02-9e11-542937bbbe91",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114557ef-3386-43e3-b03f-e2616ac9ec60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c41f7f-0916-428b-8c27-491545eb355c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b19cebf-7662-4e5d-ba9f-12b39fcf48dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f645d639-eac4-4f96-a765-77c29c139e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca94ca59-28dc-40f9-ae41-99f621fbaaa8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6078a252-a006-499c-814d-d03e0b449823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e7f503-5922-4490-92bf-91df1fc8061a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e7738e-5574-4248-b424-724842c13910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f56addf7-0229-41dc-a923-81ed07cc2807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46b5525-f2f7-49d7-9796-1394c44256e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bad1a4-fbe6-4900-9e20-53f24bce55dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955a09c2-9cdc-47fc-9431-410314a5801e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5390ec6-2cf2-47bc-a1a7-881dc6b894ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac999ec-e64e-4f2d-8160-cd723de93d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0cd54a-af57-4989-9c5f-d07e8dee685c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4ce4cf-53e2-402d-92e8-f755631938c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d94819-f148-404e-a66f-4422f8549afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35136d2-9fd2-4d57-b516-c844c40628d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b03cdc4-58c1-43c9-afd4-44e6777cbabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ebd4ca-dfae-4350-945e-e461e83c210f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49168e27-3e1f-49f5-9dea-a521a026302c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72581ef6-7cc5-473d-a6c1-76bf71234e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a4ea6f-5783-44c2-ab99-2fbd5ef3a131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cb577d7-4aba-4e69-990c-442cebd94085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0dbc11-7365-4e8f-9a47-fce5953c2e39",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023eee71-37e1-4992-a980-36bd5783e35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b398b9e-2f54-43cc-ba65-1205508bc14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c95f44-7d9b-4a33-ad2c-4556b35f7870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73dc61ce-2aa9-4cfa-bf3d-2656ddc820eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b174a1-23a2-4b6d-ab65-51382690ac0a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54464e36-2688-4ba2-904e-08b90a5b2b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b655624-88ca-4776-95e6-95b85fbe5650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0221fe8-4dd7-4802-af9e-c3cd1004399f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58d52f03-2aae-4ba5-a6e1-7559e63d237e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395bffd0-00ca-4deb-b4dc-1a0525eb7ef6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211cf643-3bd2-4967-9955-b3150db28ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7553efb5-5e11-4435-aaf1-3e3abbaacdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d4965f-81fe-4409-b171-82b285374cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1d8e099-a8ba-4c94-b3df-ccce1032117d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e73119c-1309-4d77-97ed-3798dddbfd11",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa7df5b-b2c1-48a8-909e-856c776cd6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b312d877-6a01-44d3-9202-ab49c41a2161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c345c2-c803-4039-8d2e-c402cfdf979a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e911ef2d-63c6-460c-8adb-99fafaf3c1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d0ab21-b170-417e-9244-416bac99b495",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0f60e3-97dd-4612-8f3a-5de2b940d50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7f0ce7-bfd2-4a4a-ace7-0cc24a85d7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458bad51-3be0-4740-a870-680d3b16e649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ba7787-8b78-4d63-939b-9286b6272c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f71fce-da63-4353-b64f-58a28a30e0ee",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd2c449-ad51-467b-b5dc-602746e1d63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d2f4b3-ee7e-4028-848c-6a0a23521df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131d74c0-f0f0-44dd-8370-587f35417e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06e59cc2-2aa1-432d-8334-647734fdfda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e896bc8-50b4-43ea-aa8d-54a77d76dde3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557079f4-2106-4404-8e7a-3a6ef506d59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f66024-5bf0-4cf9-bc45-ce5cda068d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fe5c6d-7212-4dc1-a39d-1416a1ae3bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5719326-53cd-4528-bb03-d3c3d126800f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7557979-05e6-4e4b-baed-ee4373b3d5a3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12d4196-2754-46e6-b7f5-52e5c6eaf72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1019a431-942f-4ae1-8d38-cc4ea4788b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d557e6-9472-42e8-8a38-25b90088f578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f83ced3-b571-43ae-8299-0337b7416095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1e9794-2da5-4d6e-8cc8-1b4bba6446ec",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b5339-ed89-43f9-a67e-e352dea94a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed1df5a-754f-4872-93d0-5f33e1efbef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1715a67-9027-4dd8-b261-008943724dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae48204a-766d-4625-bed1-2ad2a0c74802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ce341c-89c3-40b9-964e-60a4648265bd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bf47db-703d-4da1-bb59-940a6c8b61e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fe1e7e-c6a5-4da4-843d-943985479003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b17e96-f29f-485b-9996-e763775cf254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5117623f-eb4d-4795-b66b-4a5c9fed7c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7bd088-04ac-4067-9a9b-9a587a0a1b8a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbfa8a9-6271-42d5-a02d-2f95b1b87175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb8bafd-3d19-45e7-b5d0-8fdee7b51149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c720ae5-5b65-484d-ab89-8938a6f3dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cf7366-a275-4984-bb34-d514f0b53879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e35702-6732-49e8-a1ae-10325ec10358",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08734d5e-8b59-4841-9640-3902ddd60587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34ca27e-96f0-4ae6-aea2-004f673dfbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75eedb96-586e-44ae-8fe2-bea3df4bc6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b15023d8-9846-42e4-a717-0d46831cda4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a17f464-2374-4a10-8bff-bf2bf6b95208",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae870b99-55bb-4561-aa41-a5b6136e333b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f883e36a-3c61-4ccb-a5ee-eafbfc85b6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7095b90-695b-4cd1-98dc-d2c24f857a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "909700bb-59b9-46a7-9e3a-1e9370364a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a71200-4dbb-48e9-b40f-20780fbaefa7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0cd81b-b9ca-4403-b30c-9dd17eb1ea9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956ed74e-8ca1-475f-893e-832fd3923f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07218f01-bb7b-46df-a559-ea35aacfe3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "644772cd-f851-48e0-a2c0-a9e6cceea4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7355f2-a3fb-4956-8aa1-1f33301a31ed",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f103e5-d662-4a9d-ac54-7ccfa5bf2ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ecaa15d-0e9a-4d59-a723-bb98d811c9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f8cea9-a0fc-49a0-932d-389112037c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44670902-1658-4d38-892e-7020c9241dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54d8def-f37d-4d62-aa94-5756bc96f217",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9166673-f35e-484c-92c4-e0c8f5e98daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0d4732-6529-4e55-8cc0-ee983b43477f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4951ba-91f1-467b-a98b-008ac232e521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acafaacf-fa38-4d37-a236-0b11f003e90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf89534-e09a-4226-9851-2a91cde65c09",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ac817c-df43-4a46-b9dd-71054797e828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fa7d58-aa16-40b2-baeb-3dcf15d24e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d770351f-32ef-4f54-a9a3-929814de40b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff25738b-6394-4dfd-9834-45ddc12f70b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c179653-edad-4666-8004-94a6c9960c71",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c42c1da-8dfd-4cab-a1dd-6626b3faefce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94705461-153c-4813-994d-40290b180a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513d2c96-e30a-47de-9872-fbb004305e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa50de1-e91d-4802-98b2-3664b83c0840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e34ec9c-56b9-4034-8ed7-ac3a0eb5c36d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7e7471-8c60-4b89-aa35-5210990ac627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dace7c72-c61e-40b4-9254-8a9b4578533c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a922c7-dc6a-46dd-b7d4-b2e4cd58436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c23f66e5-cc6c-43f1-9862-c36e3cbe0a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be82241c-c6a9-4daf-a69e-87ded60baca9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0a50d4-44ad-4ca3-a15b-d20d607968f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb9e8cf-d049-49f9-ac50-ca5cef87529c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db5a7ae-c725-41a5-9419-83e22c7beab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14ffc4ce-e2b8-4aeb-aef2-cea549a4ccfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fab0e33-9546-4d3d-bcd1-d198ef0a72b1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b865f07-5ce2-47c8-acd3-295f415cd0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8d79e0-a1a4-4084-af97-cc3935c86246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165ef698-2cca-4344-81d2-1325c5158105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7d3ada-fef3-4f42-8be4-97655d97d3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7488bf-9f26-428b-b2c5-14bffaa9d7de",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2906c602-6d09-4440-8677-a738bbd51922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638f049c-6922-402d-8421-06f6c24555a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3c4efe-6287-422f-858d-79f0c9e59ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1efcac-ff2d-4d1a-b69c-e9d86bb4b1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed29d8c-d6c9-4b85-b102-aca289de90d6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4487cc-6fd0-4248-8a6a-7c2d97adc6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b998dec1-cc0e-4ef7-9d5c-5644136898de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6c4203-167e-4ce2-be9a-45dec411a127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a22818d-4c6d-4078-8bf5-60c02fb6179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827ff928-2219-45ee-a2b9-1f47ae06ce2b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7e4fb5-2efa-4733-bbb5-c0590c8554d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91d606e-baa2-4689-8986-854b0d64181a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d26f50d-fcbc-4e44-bd7f-c4a285cea98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "819c63a1-43fc-4cc3-8a7f-56a46346c4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ae8237-9a07-46a5-aeea-298069f8a0cd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ce2e81-a643-4451-87ca-c53ec36b8cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f7bb42-6214-43bf-b7b2-9b31692b7d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6131ce70-b368-482e-b3da-03ee4bfbe5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3314cc40-9029-442f-9c58-c6e38ccda25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebcc6e1-21d9-4fbf-82b4-facbce9f1347",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b614f8ad-10eb-4b8a-9dcb-484bb5704040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6ad83d-ce41-4e71-be7c-2018093ddba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa21f918-dbf6-47c7-9c08-d74ac4727d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aefa10b8-586c-42b4-91b1-b7d1600087c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443e2786-94b0-422c-9bef-df22a05a86f7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfbd872-150c-4604-a3c8-1ea7395289f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fca949-2f12-40c1-931f-0daeec98692e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf58d0a-a613-4bcc-8e19-f07cd699bdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3706ef-cb70-49d0-b860-0c3e714584c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aae95df-e910-4251-85c3-f0cf56616c9a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0680e03-8ce9-49ef-ba08-eeecc6a35305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5067ba7c-112b-4f7d-9997-75e50aabd176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dd85ab-78c3-4565-8a2d-4b95135de1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50919295-63fc-4dde-a1db-9a951f85f4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d5a859-926c-4e0a-8dfa-b5ab386fc9d6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e631e21-9779-4f79-bc0f-f6b0c2aabf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d3152c-5e81-4870-bbe8-5b1105b216ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff7c646-de3b-4eae-8961-3c347f0b82ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ad22a95b-dd6f-41d9-a7f8-84067e72dde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84e860a-0381-4b98-87d0-ed376c67188f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5198179b-2ff2-4fcb-81af-5a7d9ba4b548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bbf8ec-d519-41f1-892a-f9f56efa4dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e65fa08-bbd7-472c-b776-9497d36dd42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "06be3e6b-4be4-498b-9420-d684f36d4746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3186b93e-bf58-41d3-8805-04ddb1598066",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0101e1-613f-459a-aaac-1409498ddd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c092dacf-e8ba-4702-b74b-5353aa44f389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252ebceb-3a23-4ebb-82c8-7c64116ebbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "135000e3-199f-4561-896f-1a56e2f2519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3190ab-ae63-49c3-a88c-3a2d10f12746",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52d3c55-4570-40a5-b0dd-d22323c65f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6744108c-fb4a-49df-ba07-a205664c9e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b711f21-e962-47a4-b2a5-6fbe582a37a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb7e312-2e30-405d-bf99-2dd187d4322f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cb72e9-41b6-47d3-aa15-efbb601dea44",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac47f72-2145-42f4-bc3f-8a5855ded535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c550435-2bea-40fb-8ff6-95a110dfb960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4531cf3a-a5e5-4a1b-8b8b-ed614ddebc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a71f40-3de3-458b-b4bc-18a15c9cb515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79970ab-640a-4898-9ce9-7c0b5ce9520d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e1f3f8-e089-4226-b337-448f4759963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5c2e8e-642b-4a41-9d6c-6a6d3f614971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e22722-53f9-49e1-9aef-7b4b7696f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2661f462-dcf8-4d51-8d68-2a0b82cc8bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600efbce-c1e1-4b12-800c-2ef98671e608",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0caf7e5-73ac-4d03-b63e-10d0953768cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4d66dd-4254-421c-8999-9522eb0ba31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6e99a7-3f85-4a6c-95b7-165daa21fc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a09f0a0a-44f3-4aa0-882d-4ace5f07f7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d01ed-7817-4c29-b9a6-afd8b5535dab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c66a89-f824-4f85-a588-6446f542456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c36a81e-648d-48df-8ed7-7b618cffd74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5718282b-62a5-4c58-8a58-c9188fed72a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0a0d73-ebd3-4971-8387-893753f38f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9a09ca-1d7f-4bf6-86a2-5c6c6fe61e6a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08531135-e1a5-4fa8-9d44-a846e1824d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4523f309-8ae4-4163-9cff-cf3be0025f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d235e9e4-d913-4995-a696-be37e3032cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ee85c9-8b4f-4719-b9f1-b185eb853b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bccbbf4-47e7-4ba2-ad5d-daec75283aa7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6856d79b-099b-423c-89d9-c7499eb9b525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02709aaf-ce5d-4e0a-8541-7b02f840b811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f6bce2-0870-4355-b8e6-7cac3d1e43b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f7456f-e1c0-4d72-8602-23db4f4d570c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df8d36b-3f83-406c-8e71-e56b50466824",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f11a0c-97e8-4ded-9b3f-36ed1e11b85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e8e8f8-5e9a-4614-863a-dd5c7cde348d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e818954-2579-4c84-bfec-3124cf7af595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f94062-1698-442c-b574-9f0fc704fb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12706320-bafa-4272-b0ce-815493c2ab1a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c8e17-f25f-4e39-91f6-bbc71e676341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9106b311-0248-4e46-bd90-eba8f1a4ea63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce70956-66d8-405c-8847-c73a0565a502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44e01005-0a78-4ea6-8c1a-b861478a009f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a166b730-5675-4e3d-b8b7-913e2c01a0d4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b00191-0928-4cfa-8959-fee2890c05dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b4fc9f-b0b4-4995-ba89-c00ce4834fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4d00dc-00f6-4ef2-bb67-7a18f9a6f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7f01e1-f42d-4bf3-829b-6e83485f2190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b721a610-6b36-4cd6-b252-829fa4032e81",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ffbf6d-e34f-4b81-bec4-00d8ab86d3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0920f3f-0825-4d97-abb0-015f4ae451da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e1d39d-99ef-4a97-bec0-5862130b7844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb410f0a-bc6c-4ba1-9391-6ae4ced30dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b328506a-ed75-4700-80d2-270d29307292",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c66f5a-a682-42fb-b101-eca44707b324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb381c5-6751-4826-be4b-bc149a12fd79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e619e13-2f66-4d1e-a355-c039927d6589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "258a4aac-e1e3-4bdc-b4b0-2d15f28214bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea3f7ea-3367-4c5a-a58d-1519946767f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62436701-4593-47cb-98c5-bdcec2015c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d909ce3-f070-4a29-a2f6-d60fb823423a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc74b14-ff6e-4e58-ba9c-92d1fd517051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "589afa80-a471-4a9f-a599-4063cb489652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4826224-9e25-4e8d-a060-5471d5195887",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a05164-d387-4617-8f7c-98b91258514d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5cc92e-a240-4311-ba69-1e0542425e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0b4ac0-c44f-4554-9d55-ada1b9708513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78dafff4-5b0a-4414-aea8-e258559ffacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82240f7a-5b03-464f-b390-6af5a7c8a861",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c83192-eaf9-4c5a-ae5e-5940d64a4e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f7fb20-aa4a-4729-a0c8-39816c7014a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108453b5-d47c-4100-8adc-06747cc77610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af150bd3-0444-4dcb-8cf7-6b61b0b7d998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac548ca4-bea0-4eb5-ae18-a38290a96dc3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff60880-436e-4b96-b30d-b8322d41a89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71438a0c-d9cb-47b5-93d3-5da81aaaa0c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9812acc4-a1bd-4244-91e3-f8d0d2c3db5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0263e5-4ea3-4bd5-a46e-b628988a495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e452fe83-9df2-4727-b1a0-42603ea9e74b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab38970-b123-42ce-a598-a6b35b9e0a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7b8f8f-a3bf-40bc-861d-2540ab71322f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97206f4f-26b5-49e1-9695-3f665b421759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e450eceb-cdf2-46c2-9afb-8b08952d5d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12250f84-e39a-4f07-b40e-deb951a88715",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879a0697-c86f-40c4-a269-5334cd837cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8f7ec1-df42-44ae-b867-ce510ea1386b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c1a8ab-c210-4bda-ae42-25912e0e1fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "67675970-9919-4c71-b264-806b8facc674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae41c0cd-d159-4f60-ae1b-36eab123f5d7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fced5b5-c053-4573-840b-aa90a7d2b1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7127324-b763-4f16-a524-7a1cb6a0c93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187122d4-442f-4e3b-b7c0-b99d20b66171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "156aaba7-7b8a-4ec9-a467-caef9cc6de3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55920903-ad0b-4e69-9126-ca07c02873e8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267ffd9d-392f-48db-9f2a-b159db0aa887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fe1738-8097-4f24-a163-564ee7db25ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a38852e-e643-44da-9bc5-14feec1376b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8408bc95-a9f5-4ae2-89ec-3f3e26879974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f1424e-de9a-4a8d-b218-b38def919866",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597ce840-0a11-4199-bab1-1658a000a6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd93aea0-c08e-4b34-9001-5dbc984850f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff12e38-4af9-40d5-b6a3-7ebedd9c66a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3842ece-eea2-42a2-8df6-ff9bf1fa6be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15770e33-8614-4096-8c3a-30f34b54a63b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ae250c-c934-4969-b8fe-d398d965015e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d347044-3607-4e25-a6e5-30513bb751b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e652d4-57e8-40b5-aae7-80ee6697f341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a719fe7b-3515-45e6-aa59-0539a00a9b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58010630-2c7f-4bff-a92e-ea07bacb7682",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04848bc0-1768-4843-a6e4-74fbbd35f7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80eb8e11-af89-425a-b000-c8ebf5b345dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21710aef-a7f6-4392-b103-cd65b7c53f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31431b6c-5b01-488e-8318-a2c64802dcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb53ca5-c470-4a3d-9518-d6dc0fc8314d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f666e156-0c42-427b-b69d-a092aaf357f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27d5ac4-714e-4e41-9b94-12ef27fb5298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a2544-f1e2-4ae5-89d2-f8a6cc1c0f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "039b18e2-ec65-4d89-8a7d-b4550d397de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e81066-f6f4-492f-a321-ea0134f1ec6d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063dbd83-ee0d-4a2b-84f5-916894c38068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fad17b-4364-4bed-b2e1-00a05137c83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4f0ffe-7ca3-4938-a34e-81070a4b0091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f8d4a7-7fb8-405f-8670-d328d0a2794c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f015e2-9287-49f6-990f-03ad21e02805",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b073bb56-a963-4440-b388-3289b64b0eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2881c9-5af1-4be5-a2a7-2c8bd5edb6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02caa0ca-dc21-44e8-8708-25a40e975b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84e34058-6fbc-48b8-8adf-2853641716ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4991f682-6c49-427c-8039-9e6a6c059907",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2aa2774-1837-430d-ae1b-de0de2225d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7d2706-8ef3-45dd-90a3-0ec681216eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0622b26-f772-474e-8941-a966371bbc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0d142d-08d6-45a0-8f04-7f447f370b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0393c265-e2bc-4f1c-9b43-bb740085e8ff",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef7556d-9d91-4b28-ac4d-87e8066532b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ceb860a-b649-4552-88e6-46683bbc8c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3bdcef-a41b-48e3-ac08-9c762631fe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55cadd9f-99a9-4a4b-bd24-fc92d88ef83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9c5a74-579b-4b39-8dc6-652fc136c4be",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a1ea1c-e17a-442e-9d55-aee473ff8793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42ed14f-b009-44b3-a0bc-f924f19ca0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9db85d-cfa0-4eb3-bd03-265c4c9ee3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf1fd72-1ab7-4cf7-9c0e-af2b0a61f944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b53eac-f707-46a8-adb2-17b9a02554d6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e2f3a5-6cc9-4d24-8173-2de8ae67cb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a2bb67-0964-439e-bcc4-5f5a23a91947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed10de7-8ff9-44f6-b34d-9951ee78d1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6179659c-a8a1-4794-9f43-cc9398eb3b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6342166-a0b4-4f31-892c-cff170df7b07",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e5e10a-b510-4579-9c57-5eec4bb6ae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98d1228-1e58-47aa-9c6a-1cd9f62e1ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6a8edc-45c3-49ec-8d83-5a792d403b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c60f33-99e1-4889-8aeb-f693be305e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cbca42-e845-4bee-aaa3-211ad5a38538",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac09326-e223-46e0-ab4b-a14e55889d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409403e3-a303-4b8f-9398-6242b697ca09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3561236b-a5ad-4210-a3bb-74cca796bbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b132d05-7c9b-4b2e-a9ed-db04fb619027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db64ccf-8987-4d75-9fc4-d7ce948e4b41",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369f01c0-c5b9-4506-945c-40f948f90cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22ff534-65c3-4fb8-a824-f3194b39d66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd1ca0f-2b76-48a2-bdcf-7c7e113618c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d630426-5bdc-4b02-9e9f-6525adce4301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd76523a-ca63-45ef-868d-17e440e39bfd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46af4fc7-5ce0-425c-89a7-74645c2b6176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e332b879-9224-4598-8c56-200c49a596ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ed805e-a924-43bd-a251-501d40626240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41a4bb0b-d42d-4e69-87dc-ba11f812df03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e39aa85-ead9-497e-b763-7ff28e9851d2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446ea315-38cd-4c3d-b12b-5acc49a827b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9324bea-0ca5-4593-a378-c9cb8d612107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beef07ba-d1c8-4a6e-87fa-bbe5a77f799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c86699af-e2dc-4596-83c4-0f6ca431fcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7305ff32-982c-4b07-9969-6ba2b98abe76",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3635218-d46a-44c3-bf8f-70b85977cf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af259a1b-0a77-4d3f-95f7-cc7550164ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6700a34-812a-4ddf-a13b-2a285392780c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aba67637-dd9e-4816-a7db-d33ecc9e87a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d47b69-831a-4f31-889f-5c3a4f629c01",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e89699-8fe1-4075-be01-4f9a88d10d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ba711a-11f2-41c5-a1c7-f0e41e2010a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8adfa6-b3d4-4f7d-bb93-e70059c6a47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e05c0b66-700a-4ef4-b2fb-72c81ca67b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba786eb6-8164-47d9-a62a-c0ff0007d7a8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93c1d0a-7e15-4863-83f1-6bb01fbb6bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fb00f9-8ce4-4ce6-8641-01d97b104c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e748dc3b-4b8c-444c-8908-056cc64ed89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c68b303a-4261-42b1-93f3-80e21e303cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d4b48-74c2-45d2-9abf-f37a0c594f62",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1168ee-a3fa-423a-90c6-54fcbff6d36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12dbdfe-bd48-40b0-a0cb-a40e4796f1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26eadb0-d8fa-4527-a9c5-bbaeeef21997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c067b462-132f-4331-8eeb-d481cbb5d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95121f74-23b6-483a-8df7-a7d472b8c679",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359c76c6-8f96-4d39-bd27-f13672d6ad69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac77cf6-65ed-45fa-81bb-33ec66c19efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b71374-cc7a-401f-b796-ab27599acf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4360f6-afdf-42d2-aa19-665affd97175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0bb934-14a6-4559-b838-3b4fbe4a65ed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e5c55-5eed-4548-bacb-4fe5da235124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0f4198-1dde-4491-86d2-6d55cfd99a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46efc002-14e9-4b3c-91c2-51fb57bf8313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "673ec56b-82ca-4486-a123-a9a384cb7a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9752ae-e034-4d75-8f09-070c1ff2d654",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30387ffe-3b88-4b25-a1c6-8a0485e639d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9066ba17-0a17-44fb-818c-58a7b2dd835b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc8c1a8-234c-4a91-8a22-5bc10b96dc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42616304-5b37-4153-b357-a8989178203a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2f9db4-6d17-4441-a57a-039fcc2445eb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43de479a-1fa3-4e18-9bf2-682c947681e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48335e7f-ce01-4775-b64e-5b0aeaead47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5d54a1-82ce-4b23-bf7d-94a57e72188a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74131155-6c67-4620-9de3-1785e5c724bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f8f3d3-d687-466e-bbc3-5545621f91b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ad125c-655c-4766-9d82-f5ea388712f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782d6bf1-8f9d-4f1d-8ef7-38519df73906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a78f1c-06be-4b59-8af6-d95ae2cefdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be3784b2-d444-4197-a2c8-d65937f52d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf43ad0-e901-4d2f-96e4-cc205e81dc4e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c983d940-6186-4b6a-a71a-e3383b82abc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa21b30-3854-4789-9b45-4b5f9ca6950f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95f93ea-100c-4044-8a60-3fa9d13220e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b19b70-640f-4590-b93f-1e82e496028a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca695d61-e4ac-4361-bc65-9e0488e2429f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b5f006-e456-40e6-9a86-2502f31087d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c59f23-94e9-4e8f-a960-4a73aec80324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd97723-3720-4d2d-898d-cf0356a3020b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "56543d16-3e50-4188-ad3a-6d831651f4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a8c48a-8e0d-45aa-9f1b-b43b44961281",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7a2a1a-cba3-47b9-a154-61729941c37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61d1541-a38b-4202-8417-15a74b4c31cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05326766-ea23-400f-912b-8171a4712600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a9bf04-9f0d-42bb-abc6-843e083fcc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f1d362-8388-4acc-9c5a-fa3cbdbec8d8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b306244-0456-4bb5-91b7-c1a2cd15220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "39b315a3-3fce-43d3-9bfd-09c5acccbedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2ddddb-869e-4d71-b97e-e23416f4dde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d4994f-85c1-4eca-b7e4-eeea2c789d82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fbde308-edb5-4e7a-a034-2e4e93347f51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a511838-8104-44ed-8762-6bea2062d7a6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4687cdb3-3a42-4bf9-8dbd-7515654af037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af96a3d0-9880-4881-ad2b-33683cff3614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485619c3-e00c-4a34-89cf-b464455a5060",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "624a298c-dd11-41a9-862e-78f5f5f552e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b61384ba-9acf-40bb-ac53-73b9435e6563",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf03d3bd-954b-4fc2-adf6-7246cb30b4a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85f0d603-35c8-4893-babb-18aad78cd752",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d500842-c22a-4cae-8a2a-7f056bfceb64"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c618dde9-5f55-443f-98de-a7d1062b5ea0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "457dc9e4-67ce-4a44-b265-9c79b053407a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41206b30-0feb-4631-becf-9a15f8f70dc1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "014a25af-6202-4ec5-97d3-02d4a98b0ffe"
                }
              }
            ]
          },
          {
            "id": "af91ce2b-a77f-4d17-b627-2d46e68e9ad2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a3c38ec-ed4d-49a5-8ac8-392b50ee3149",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "da127b50-4ca1-4e59-b754-f4a202678c80",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed8260b-94b3-4ceb-8647-3e679c5db393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2334505a-5caf-47d5-b2b9-0bf8f46b2d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1493467-7c65-43ba-a7a5-1492d5ba8eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75056f9f-ec8a-400b-bdee-1b8f9f513a09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e7b0e89e-37f8-44da-9e5b-eeff366205b2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa197eed-0e56-44e0-acae-2c79bf96b3b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b1a0c12-d0d0-4ae3-a5ea-f454ee00b0e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd6d292c-3705-4e81-8e61-f1169a46dedf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6d905435-b621-4932-8338-76eb667032e5"
                    }
                  }
                ]
              },
              {
                "id": "ed43afec-1cee-45bf-91e6-aabd70cb1808",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38ff8d27-f5c6-49a9-8b10-2d2439565298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e440a8b9-e42f-4b96-8688-40314baa1c0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "870ef406-74f6-4255-b575-08e0b2f168ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d3f276b-026d-4fdc-aacc-70db716229aa"
                    }
                  }
                ]
              },
              {
                "id": "98cae6b1-e8f6-431d-9188-0248ea6e2b4e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48921259-20d3-410e-9ccd-1b5e49f27fe2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "552e15d8-4e82-48c4-a011-2094f8cf6adf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b045f5e-0e27-4762-95d2-c406992452fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d48e9fb9-4c24-416c-a663-e7de113be2bd"
                    }
                  }
                ]
              },
              {
                "id": "0696a1e8-9bea-4987-b4b4-e1606ec95afd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d87bdac8-8c53-4bcb-bf4d-c48809585d8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5b16afc-6dde-4835-a1a6-e04f64c01e54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb911edb-56ac-4d89-b212-dbd2cb7bde7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8f46cc12-dd5b-4a4a-a0d9-1452e37a8562"
                    }
                  }
                ]
              },
              {
                "id": "73211dfd-b459-44b3-9775-3ffbcd227959",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d569aaf4-d041-480f-b4c7-98aece0e0498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb24eaed-1e78-4530-9d70-8679d98b2640"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0383253f-607e-4c39-ae1a-8b5d23c52efa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "de408991-2a8e-4262-9fe8-407bd64e135b"
                    }
                  }
                ]
              },
              {
                "id": "7d9e9e66-4401-4144-9657-88e490b7f457",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52025806-a66a-4a60-b841-886434455b35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82a48ae6-9590-48f1-9433-a817b57891c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51ad4f4d-eb07-4ec0-a46d-e600b271b885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0c09235-6d06-4f0a-ae7d-bc3594645bdf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "355bf72c-37de-4179-b1dc-4f70c26c75b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16b64481-3f7a-4bb0-ac73-ebb207a3fa5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef44a051-92d7-4b76-b0ce-d7528b1cd634",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99e0c2d9-f272-4ccb-b6e9-ae3f90eb72f2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9eb15f29-564f-491a-a393-8d58f39b8f03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8677872c-9f79-414b-8280-ea48f8ac9765"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dedaf3ca-24f8-425a-b644-bb64a846745c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b751d09-2ed1-408b-a3f6-8f28ce6630ea"
            }
          }
        ]
      },
      {
        "id": "10665eff-4e70-41b3-bff9-c7f5cfbce563",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0cbe5b84-2971-463f-a4c0-a1b991200abf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cffa0a9-92db-46da-bcd2-631aaab9fe9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cee83b2a-8ceb-45ed-9b32-36bf4deb105a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa85a71-2de9-4d7b-ab30-7017c8d8251a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cfcf0e-9c41-473c-8748-5a568098cf58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25219704-7eb3-4e79-8aa6-2e6a3445f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c76e105-114d-43fa-82d7-10af5a318108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e93c3a8-2797-49d6-a008-f4cab19380b4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd8c4f1-69a4-48a1-8f14-6402be74dc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c581137e-c4ae-4ea1-be3c-bc0ab628f1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eb051a-cea5-4aa0-a689-d14215a13984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb01c5fb-f4f5-46d1-9b86-33ebd583cce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467a56df-4b65-420e-a856-2c0a2a539510",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402f0619-914a-41b5-8e9f-8ee229ded185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4908dc5c-e5f6-401c-9996-4a5133a08eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd96451-2ce5-4013-a3a3-057cc183b517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fe6385-10c3-48ec-9813-3ec04f0807cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0458ec1b-71ec-42ce-90ac-f9425c5857d1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc7531c-f21d-4aaa-9521-4bc82215f121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073568a2-11eb-465b-93ee-a1cf54ae7cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f201d9-d7c5-42d9-a7c9-2e898933bf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6872f82-f74f-4165-968a-0d628d36e231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed0dc13-8b1c-4830-a596-63c8cff37ffa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcc126b-ee91-4fc0-b0df-ff9a662a979f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8103aaf1-6630-43d1-80a5-cd198b8ac4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d2d4ee-468d-4d9f-8320-c1a3370814bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ff7671-6728-4d3f-9d7a-c941b1bafd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6252bd95-3203-4cfa-b763-51dda1aa3b20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2dadd2-1bf5-4499-b073-43804ac6b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c798405f-5c8a-4160-ab16-6182bf3df9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5282c96-1e4a-434d-b152-05458436fd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3f8d35-133b-4696-b705-df3da3ec3618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016249ac-3080-41fc-9a25-1e28e769f018",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505f7b74-f66e-49b1-80df-1627a8a5c01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcb0406-5336-4129-8032-8308ce3b83f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ee7220-2b51-4a31-a4d6-b27fc7c4c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "868ffa4f-2ffd-4d63-a423-28e64960f55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82977fa-f774-40c9-ad57-da27e37f9cba",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a22670-e56c-4205-a54b-dd9b6b20966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a407b9a3-0911-4f39-bf7d-1e0241a95906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f355ed3-94ec-4f1c-b110-ba9311559507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e381af9-9fca-40b6-91c6-29c97c2615fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de4e855-39b9-48e5-bb31-c5c012123b2b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89046c6-0b12-4366-8b6b-a0ead22e3088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebda78fe-a2c1-40d1-961c-f321e12ddfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f38c60-00db-4ce7-8da9-f20d56d7ac08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6c84f5-042c-4df7-b333-578008371efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6ae48c-13ef-4d86-9a8f-d3c8a8f3aeb4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccb41ed-8160-486f-86f7-7a6eeb2feb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5468d22a-ed9a-4ac6-8873-faf4ceed6c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5678c4-c066-4597-9686-7270cc7273ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59573a01-c17d-4ab0-aa19-b9fe631d1a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9c04a6-3b68-4a76-a165-81ba9c4c197e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38aa7532-793d-46c7-bf23-110868d750bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4932b2-bf5e-4d84-8977-04f1924bf89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da228f62-0fe9-4358-bb9c-2a95d23c52bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "949db9e6-cfbc-4974-abb9-f5bd4155781b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fe52fb-6943-4ca5-8e58-493f818a6ddf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c705f6-414d-4432-9014-b5c208e4870e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f5e52f-8e1f-4c26-ba40-47a80be71cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab181f2-e1db-40fa-ac12-4bd7075cc81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "767c0284-efa8-4482-8d4a-92ab5a31b0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4710ce06-2071-41db-a213-1606d7df7e5c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd2538d-c0d0-4419-806a-ad4b801e7948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4044538-acf0-4b60-8756-835b0e9b09df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c038f89b-fd3c-48e3-9a53-80dd1e305136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92481abd-f3c5-49e7-af98-cae97e68613a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abe1d26-0fff-4726-ba58-dc4ce6d762e1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b46826-e085-4ca6-83e5-609fe7c98345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72f287d-2398-410b-973d-60bd1da09376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37639c17-c10d-43bd-acff-e4cf86059742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dee357-a2bd-4f86-83d9-bc7435dbbd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62b3f41-47d5-4a24-b10f-aa9c5eca4ef0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5e89bb-aec4-49a5-b0a2-49dbacb5645a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a27cdd-f6d0-46eb-830c-ca44e14fa033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2ca42c-54c3-4be6-8eba-4d994dad61ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77a187a-336b-4e6e-a269-5480f39237ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42316946-a475-42c4-8da5-3187e83d5f82",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c88498c-b155-4ecc-b9c8-82883182e3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c294f2a-ada7-4d87-ac52-e4a4a8440ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8dd42f-ef80-4f20-9ae5-59ecf8d1016e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "76acc2c1-c11b-4565-bb77-73b375252511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0396e3bd-bb25-4da3-9d00-38ce7135a62f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f18a91c-3e45-41c5-9147-8fb72f5def29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab572e3d-7f20-43a4-8541-ca52d1a17c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f47add-ee97-42d0-b466-4f51e1e9545b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4a9609-80e9-44c0-8dce-f1273db62218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea90d786-89d9-4bbc-b0bd-87991a4fb080",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dbb5b6-5002-4c32-afe5-5b938263dc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73223c94-0adb-442e-b204-8e9be7bb30d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21aea5cd-46e7-4a00-81ea-a21880c07107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2183f5-c6d7-43b6-8436-0c5157a205da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd16867-5175-428d-8cb6-593b959289ae",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2374da86-ab5e-4a2d-ac64-babe5739d34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1ebbda-a672-49d5-b614-5a93e6007897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f16db9-b468-4b54-8951-320817633c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d95834-6ccb-441b-b02b-3aef014fda9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554044d3-56d0-4e57-8f3d-b03625ef85ca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f710e0e1-7bf2-49ca-8e48-598f8e461192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e21fb3-654d-420c-869a-f03853485698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e952bd-00db-4278-9322-6ead756dbad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab0392e-e164-4b28-b402-f3a4fb0a214f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d54642d-ea9a-4d91-b4c0-43d8db15dd21",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a58e3a-b3aa-4a35-a481-bba56925e4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2becd682-1882-48c1-b31c-20346735bac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818ed9d1-97f6-4d93-a246-1b91d2a6038e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b04707b8-0992-44ba-8772-62e607f88ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9552d5b9-4960-4237-98b5-5964fe9f5142",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51b02b5-bf84-490b-8cb2-aa8f4a28e768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2370f481-afbc-43f4-8802-149461c89325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c75610-9cef-43da-959f-445a66ca8437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff55086-ad3c-47ba-9b04-df9f9806254e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5676c18-8a2a-4df9-ab13-4c0b9735d792",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27a902c-ef81-4542-a132-2d24456b8b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3bfed5-6c6c-48a9-8252-0cac9ab16a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70fb76c-71c0-45a5-9ec1-194bcc179cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f57457ab-fe31-4ca9-8f83-3af50b50e978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739b583f-f2eb-4652-8068-12c4917927ce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9c06cc-a9e5-4056-8c32-4ac791e33523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0fd4e4-f0a9-4e6c-aae4-b93cf9652ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48df065-983a-44c4-aa46-21952f148427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "575492a3-1fe6-4256-adca-358e9e209eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419f2e6e-2300-48cb-bfd0-0df3f7d1a3a2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4393d039-035c-4bce-a412-fcd0b315c3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b587d72-70f3-446e-aa47-5086098bdf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4958fae3-b623-4894-a04b-cefdf3ef6bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77fb7bca-32c6-48a8-9b98-d74f2f6a6783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b51af8-7d79-4dab-a2a0-c787ce09f906",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1698d6c6-83d4-4231-a805-a6898a401718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce6cc4f-851a-4319-bf67-165d5e6cdcad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74abad1e-854b-48a1-b7fb-f6ce90e37bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "817859b0-7216-46e8-9e35-825b16716bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c827fe0-ff4e-48c5-93f7-d0f7cd714e67",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a640fb05-45e8-48ae-9a47-50347b34ea4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d4dea3-e4cc-469c-92e2-7aa547cc13f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8588b54-9d03-4d94-8bd6-1dd96df3273d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd165595-cbf2-4991-b9a4-5bda1b061468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75c361d-0678-46db-b603-3f33e1bc0fc6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27217eb5-b184-49f5-b3d4-f9d9fb9a72d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45efc3f3-2a7d-4cc8-a340-e64cf4ffad08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23feefcd-9e86-4c1b-b851-9d303d4478d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e597ef-9d21-4c0c-98e6-925d973e317e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac32cf6e-b6c0-447e-b0fd-41006fe57c7d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a7cf51-082b-4760-84ff-1066f476b215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6228866a-da0f-4f5c-a51b-3dd4c9706483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21df7bf5-679a-4f1a-8320-c328d048d123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ec1f2e-3bf5-44bf-852e-319da7a453ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edaff31-fab5-4172-902d-45e9f20397de",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ada358-4cc2-4c2b-a8dd-a498c292fa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50772f55-7732-4873-bf20-a952d000ac78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8419c355-3d9f-45e5-a053-850cdbbf3ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1edb3675-5223-4999-909a-77b6ebb53a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232fd9ce-4a88-4b2d-8739-75380d5fe937",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680ad36b-18de-423d-b864-5d5d0f6bbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48f50b9-c9eb-424a-9a3a-4fa24172ebe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe247a34-6bcb-4d23-80b4-4c05375943e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46feb349-e0e7-4542-a656-5d1c7d9f2003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729624c2-fcb4-4dde-90f3-3fa5ab4f0372",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c778dc-9661-40d8-9dc1-4756d699b01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb570caf-8adf-44af-b681-20e3faa39bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7b4b11-9457-4650-a718-1f1a18456146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f11745-0631-4e30-9c02-2f32a0e345fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0aa897-1e7c-436f-8ad0-83bd4d94eb41",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cff414-2310-459d-ac58-2da9e00137a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b66802-863c-4b7c-9c89-f0310afb94eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1074ea8c-a8d8-4cfc-b4c3-e58c82c7a590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf08515-930a-47cf-a7d2-0dd0e525a998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18c7eb5-4f1e-46ef-88ee-06cbb19b2e15",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d352a913-5c0f-48e6-a8ac-5d517ba317f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa606c5a-cafc-45de-8e25-84f18015a947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa6ed3c-34d4-45cf-9e93-7e2468b1d6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a089184-b8e8-4d4e-9911-f40cfe617a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c9d4d4-24b9-45eb-8e66-40ee1697b1cf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd76db0d-f2a8-4783-b6ab-ce00a93073ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f4face-85d0-416a-afac-77ff0bbcc4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5598be50-647d-4ac0-855e-e689e17417d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5967907d-204f-49a9-acde-69ed3cdc9a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facb5cae-e9f8-4e87-9f21-650f8dad6dd6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b7e5cc-6647-4e4b-af40-5955eab7f544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0a8f5f-c0ce-413e-9606-e2d5b6bdbff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a11905a-0634-4959-93e9-f7cb666771b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75fee40-1328-4ad3-8d76-f8be3ffa87c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3b4921-828b-4484-accc-0c6195dee724",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c640f55-75e3-4867-9d6d-83c56d7edc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7477224a-9e2e-41a5-b769-190b21d598f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f757e90a-9c26-4754-971b-f2400dd46e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd75d0d-af75-48f9-a97f-e842c00ee1ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "37af09fb-e7d3-437c-ab2c-676f57d32cec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86202d15-33a3-4374-a1eb-ebcb262d896e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48f04bc-cd7f-485c-9572-9af9a262eefa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a71e32e1-be07-439c-8ed0-29487c00a2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a2a81e-1429-4aef-9dea-33454ecc9618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c7c7aa7-8620-4126-8a5d-df085089b508"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53aeaf6a-485d-4aeb-8e41-de4a07972498",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afcd0148-2f77-4dd8-af90-bdc71ab4df40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17c4dad2-a2ae-4825-8946-d20b861b7d0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a2a3cc7-f61b-43f3-8849-60d9b3e2c768"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba0b936e-d287-4135-ae5c-8bf8e8043da6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95ee8300-85e9-4e32-9f6e-6e7f15707e66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4685c13d-c405-4807-8c91-ecd7dd99f559",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2261b3fc-2eac-4ad5-9e7c-c2c545f086e8"
            }
          }
        ]
      },
      {
        "id": "8aa89f1e-b065-41cf-b971-1abbbfb4a89b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3ba0a290-2c60-4674-8d8a-39baa10b5cc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e925532-b659-4fde-a26d-436e237f95f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1076be2-112f-4a50-918d-c26cda08ce27",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bddb10-3ec6-4990-9d86-62d13bdcd3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5c8ecb-4629-46ba-b318-50980679ef44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351aa6e0-1330-45b8-89de-88076550bd6d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd3cc3d-434f-4ea0-ba3b-5550ccb0be92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9d23d7-1e32-498f-b204-1f05bbef8884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548c0aa3-e112-4dc4-8672-8d71d196a70e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc83825d-3596-4360-bfa2-e3342cbe5cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263b07a3-8917-4c59-b94f-578e967e885e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ae0dff-7194-4763-926b-61d95e85cbf1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9e5ab5-91f2-4da7-ab85-4c273de790c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729ec1d8-b757-408e-8587-7cf855b8e1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aac49a-dfda-4856-b604-6d4aebf2026b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc6c99d-b5fa-4814-8980-15f4400f2052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c988c91c-8e48-44cc-9cb1-45349ad5133d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0c779c-e06d-49b9-9d1e-bde9c3fce3f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c97a44-d569-473a-9935-f7e6ae3d8a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec02a2b-832d-46f2-9b0f-65beed990d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afc52aa-ed6d-46b9-a419-c55d3826226e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035cae5d-205d-4237-a389-1b92424da16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed5a598-d78b-4f68-8f69-3db289732c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28819357-9d2d-456a-a0ec-f088f5f45b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea0a6af-d18e-45f7-b44d-69589ba7e3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930f3316-a374-44be-a4c2-140e82ca8a60",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55294bb9-d318-4107-9f2f-26cb779de385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84245d9c-eea8-47f0-b31e-4754c37e5d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1deb3c6-c97f-4fe7-84d0-5e4954f59cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990b29ed-b0a0-4ec6-b9bc-cad1ec93e623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7422003-8cbb-49fc-8aab-23cb3c151fee",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a227355-2b68-4e05-b00c-2ede058947b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4935202-001e-4ab4-9b75-67a03643305e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced937c1-755d-464d-bc95-fbc3b50c5889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255dae25-90b2-43ea-ace0-54699b11fb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6706c4ac-516b-43a5-b847-f388268badfc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7790a6ad-ff28-416c-b9f8-1de0a9e3897b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4055aa3-f0ac-4aa6-a92c-16fd8752c1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f43e01-6b5f-4973-8932-759027383da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e65e5d-b950-43ac-8fc9-d8f5df53a81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c819562-346d-411a-b1fd-74ba5dff3bc4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dfc56d-9d26-4cfc-97dd-2c61213199ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3cbeba-89d5-48b7-a448-f91f894e3b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a6c481-689c-42a2-a8e6-de217caf696a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbe5240-d341-4cff-bd8f-74c4ce9f1557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ca3e3b-25cd-4734-8218-838999df6ff4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3a634b-e8ad-4dc6-b1d5-62beb387914f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77eeb8f8-4103-4c65-8f8b-d6a29881d59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2beed387-fd9e-45ac-841c-955cdbf80ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8408b792-5254-4e63-9e2c-5060ade628ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1345d01-945c-4593-b84c-82431edbfbfa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d20b7-a6e9-4353-aab8-32acb2070be0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d26aa972-269f-4064-9b94-a663e17b1a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfb4852-6649-465e-a5d7-f95036483196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925c4479-27b3-4c2a-bbd1-7b6cbd2f952c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a98313-c147-4254-af32-cfa0812832b4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3531de8-2485-4c98-89b9-2e7ce843e1f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42699cd2-eb83-4758-8bc2-ee0618e2b6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc2719f-5df3-45f2-9b6f-a648bd8b4592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c19d834-5583-4751-a93d-3af2a13cbcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1d9c90-7612-47ca-9151-caa7667850c1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a279c75e-5530-4142-bfcc-4f2edcb8718c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e2da3d-a4b4-4a9b-aa88-b5ac7ca3c62b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec6412a-fc58-4d5b-a4a8-e6564f881289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c74e2dd-6339-4993-87b7-030c976354b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6300dc8-fa7c-4321-a804-5f0ce5ff48e9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ea0584-83a8-406c-95b4-f27b8c2e64c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a3249d-31d0-4d61-858b-1e735eced112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccfac8d-a8ef-41bc-9367-45c795964cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3432b24c-55ca-4e42-9ff9-717b7bece52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4890a2c-0a8b-4944-9810-9895ee740dcc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54119ede-7d98-4e84-a474-c7aa9734438d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c961c6d6-080a-4dba-890e-344a28171aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd699556-6307-4ce0-869f-0647f7438ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3a944b-401e-4ae7-ab95-41fb3e4baa45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359a4312-2881-4660-b63f-1f8d4200ecc8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec03d07b-05e7-47a9-8b02-047e81ba1c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ef6aa8-e9f9-4c15-b664-cb0b5d6a0349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42d56e0-3f29-4adc-adf7-7761e3a58c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64f91ca-88f0-4423-a8a3-8a99019f855e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bf7c81-9368-473e-9166-1b728cbe496c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935c2180-a353-4eee-9639-fc122b2ebcb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03de3999-d003-4ee4-a7fb-28c60ea4f697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bee58c-735a-4873-8359-6d351e281b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef3a372-e6ab-4e74-af3a-30ef7a73e8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8daf75-16f8-475e-91ec-d7d598df77f2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cdcd18-cf68-4c8c-a44f-c722301b2e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38c8566-dc68-41ab-a3ee-c4c58f9103bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a52d0a4-3e2f-41bd-bbbc-2a7ba1ab16a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5188dd0-664f-4bf8-9cc0-f97123478f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eeb6fc9-1b91-447f-9945-c62f35b3935e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e104481d-97d8-4b27-8a9d-35e3db38fd9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a4595d-5e4d-48af-a0a5-411f8637d2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9451edc8-6ecb-4423-bebd-4f9acf9517f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2665bb9-8314-4274-ba84-a5aacf4b5791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272ba8b3-4a3f-4993-8980-1f9b7f3f57a4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cf4a41-ce2b-4fd2-8f7e-5dcab1b22261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01cf94c8-c10d-4bff-8303-a1b891a1efb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5c1ca1-6012-4073-b006-d1008d0204b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d123fd69-dcef-41a2-9add-94b4c5394554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3712261d-9562-4710-b4c7-b21b3dc26512",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c0e18d-3ec3-456f-9834-547b53c2a3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfac4415-a5f9-44ba-b663-a7023830a821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86e9969-9b60-4032-89f7-e1406fc52f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373c0c8f-7d95-4b5d-81c8-dee021a58075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdd3c63-9317-4b3a-b21f-b07701828602",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4987a0fd-67bb-479a-a632-a1ef435de0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ddc158-1278-4da4-98e2-27468851788d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e38d8be-8089-442c-b3de-9ab4e91dc57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03355d83-75e2-400c-887e-73ab30b1b496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e77c599-167b-41f1-89f4-691deb856ebe",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7289a3-e373-459d-a5be-5507f4181300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ec3fdf0-b433-4044-9438-a63d68e1f5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ca6077-870b-47fd-8b5a-cbf2f8da81ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edce5f52-453e-4407-8da8-2afc8f0d177b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6858449-b2e8-455b-a6a3-8de925b887e8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7d2fa6-a67a-4b31-9b9d-63c96d3d79a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242794d7-0a18-443f-8188-ed50f70b4cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec97d77d-6290-45cd-ab33-a6b25509a5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978e76fd-f503-47ce-acff-056f4082aa44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e4c035-f643-4d5c-99e3-edf96e61d6b8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bec67d-7dd6-4201-b4fe-7e16712449af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4070eac5-1180-4259-aaae-241a3b63f5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cd6a8f-7f9a-4953-9502-0d97d54bb0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81193889-03e3-484e-96a9-a356d8884f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c00ef1-e712-4e3f-84e9-253af4fa0800",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c082f45c-5bd0-4a5a-a7b0-073ec7380697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ef3292-55dc-41ff-90c0-7a344fc4f425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39445f86-a9fd-44bf-8ed1-dc3e2f3c0969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff915f30-09e3-4bd1-a33f-d3ce932b62c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576d0175-4b88-4ff4-b044-412148a380ac",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb62712-9ec1-4be8-b78e-50d835c455e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da8047d-4750-4307-adbf-37343970e724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e410ee66-e735-49af-bfde-4ced1558f823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e6dbd5-6191-4041-8703-a2611496016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fadedcb-e994-4af2-a13e-378bfaa6e58a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ce8d84-6710-40f5-939a-cb278fc8c89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8880399c-4c2f-4d24-b03a-04c8d0b3bb58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9202a3-a69a-40f9-904b-714deef7a4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252d7b81-aa00-450f-9b45-c615080489ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3590972-a02c-44cd-9664-8ea2cb03e800",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abfc469-9947-4000-8e9d-64558e024450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd33bc1d-b5a8-474f-b453-a300684f4c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18fe26e-3983-4518-85bb-1ef7955cb57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99eeca47-9ce4-4c69-a774-787bf6952c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dd6a27-3c7c-4480-aa0a-9a366d4f2853",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c738f281-2eac-4e00-a58c-41e97a77d21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f80e0ee9-745d-45cf-ad98-5b655751ece4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0a435e-1f32-4953-b6eb-1da9ead5fd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c259a2c6-ade5-4ba5-8324-9046df19077d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a3db6a-2679-4fd9-87a6-4e79b754d4ab",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746a9c9d-6975-43e9-a5f6-6131a78ce3ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a330fc5d-28ed-4e71-b58f-448db1b9430f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54cbdd3-42ab-49d9-abdc-ac80830c81a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23becb66-a71f-46a4-b061-d1a6a58a9405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6f40cd-a846-4d62-9417-5b8571640aec",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647f910d-b877-49b1-ad8b-e6e1c7e28d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3a642f2-8561-4e4e-8b37-bda53ca11911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02de6578-7e31-4bd9-b284-e3ab41b17802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31e37c1-b1f7-4777-9a32-ab57db66e654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376aecb5-bdbe-4074-affc-10abb5358d27",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476c0997-822f-4855-b83b-a80ad31f9fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0865da-0d21-4170-96f8-64dc525c4832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e42f0c-2d21-43cd-a3dd-3a9ef0e2b26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378f9255-ffe6-41a8-8b90-cfe8355fa24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac267fe-a6d4-4a98-b740-d21290322d43",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0a9b9e-3418-40f9-bc4a-5a4986afe05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5526d0e-1563-4374-83f7-c82be74132c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42371ca0-9ac0-4960-b013-cb584f3bf429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55294205-21c8-421a-9890-6d1ec885bc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb0bdcd-a438-4552-af47-eb22044d808c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2c706f-2344-4eb5-b758-2db57c7353ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60024503-b29e-441c-9898-b7edf07fbd75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ade0567-cb5a-4fdc-be18-f0f02c809a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a0244d-669d-4d68-986e-3e9203e027e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3662d36a-8df0-46ba-bb3a-28e56720ef9c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10faefb-c063-4985-b881-263302e49499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb323314-bf06-44fe-a4bd-4d9ec402795c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6b16b7-4932-42da-8656-d7ea6060a471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0909fe30-27ab-4497-8c13-87ab202e292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdeb400-8903-4aeb-b684-4fd0e4bd2bf7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b95008-0429-40b2-8456-b9f5bee47f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5caf3a5-4011-4d2f-a38a-8087aa1be70c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbc2b28-2edd-4166-b74b-c276f06a6a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83511f7-5421-4a44-91df-39609f74b000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e068dab1-3f9d-46df-89fa-f0a7375b5252",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7ccbe2-f6dd-4c7b-aca9-a7b4e76840b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e833185-3557-49c1-bede-aa4049604bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a024ab26-5786-433f-a98e-28881ab72ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1065a686-33aa-4fdc-b1db-72c19885a530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e83a23-73a1-460d-a040-117729824c63",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0622157a-e3b5-4ecf-a1ad-443194d6ca88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a692bd1-029a-434c-84c1-9e757d983058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996529e3-93a5-4cc5-ae1c-216160db6895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b3c027-eeb9-42e3-a932-22dbe1f6a26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d952e7-56bc-4af9-88e5-45aa2e8dd0cf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10532eb-b399-44c7-83ab-10e5442dc65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3375ada-5f21-4b21-91ef-2c9ac5eee23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bfaecb-d8d3-4b77-b8be-d7f22b47c107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cb0306-f935-4f50-a5ae-f0cf028c2e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbf7bc0-d411-4ea9-a254-5b89e6d9eaa7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584e43d8-a4fd-4444-beda-3d4af959e9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1e8a0f-fbe5-4d81-963e-f4f650959810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f7977c-3c4b-4e1a-b1ae-3f5ca2e5a94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29faf57-0922-4039-967f-78d49b5d90a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddc8eb4-8292-4419-94e3-26031ba31360",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c62bc38-78d1-4a3b-83a7-beb7e97f619d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b0389f-2107-4729-936e-9d50ff3394b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b68237-d489-4a9f-8888-520e9a1e4e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ac515f-6b2e-4cf0-95e0-1a784fb63135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f34cc1e-7171-4bb4-af1b-69f7a4a18656",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccfdb83-f6ad-49e8-b387-cc7b7e93ed18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d31b93-0a78-498e-a20b-8119317cd619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94976ad8-2619-4e4c-88f5-9c1808693610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96871ef-6589-439f-84d2-30f7bd4b4bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4351b48-828d-4479-b692-e53ea9ab6ea7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd31cf1-c790-4157-ab09-907d7a4e0bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb271f38-e9ee-460f-9393-6d8dda4efd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c334508-2821-4f87-81dc-33601548155d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a97c1b-6dd1-45e7-95b6-86173eb578bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9828283-9290-4e3e-94c0-9e390aab12f6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af41df04-03fd-4553-a2eb-4ae365a63a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2d99e4-5151-4050-89a5-ce30425d539a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406b183b-5b07-43bb-a122-322904b2e4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe7b3c0-0b44-460a-ae1a-aa989383faaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17d1d4b-f590-42d2-af0a-491a80083600",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d73c08-5388-4906-b59f-c8687f5e6d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77416be-668d-4462-8b27-702db788b1ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426d622c-f13d-474b-8516-ccd862183e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b619589-15bf-401f-9314-e2b1261e7711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f477be5-0d87-4c5d-97ad-6d79cad82ee4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976fcd2b-20b8-45da-a22a-e90513a85bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a9201c-6eb4-47a0-b9bb-434e7fc7784c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110f23f1-6321-4bd4-9ca2-c9e672a6dad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea79ac54-9ee9-4a8a-b5c9-f3522bab822a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b23fac1-66e2-4778-9890-3e4dee385f57",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9b3077-8065-4125-a071-cfcedcd76a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254cc6ed-d4ef-4dad-b742-0eba782bf0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81314b3e-af4e-4ccd-a8c2-912e5a557c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48225d0e-c72f-4241-83c9-7a78f7e5fbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a4a5cb-4c90-4763-98a1-de3be065edf5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e9d89b-c54d-4b44-ac69-ff7ce6a10e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41af2e23-1ba0-4056-abd7-b633852289de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d5c54c-5de1-465b-8646-6ba18f5a0504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3f6b44-29fc-4c1d-b054-f3495fddd986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f83ea50-4e48-4b92-a1a8-4941460b23ce",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb37acaf-fd37-4662-8719-3b768243b801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e7b130-58c8-46d6-bf78-b0a496f6ef95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff4191b-d7d4-4aac-aa1b-71fb9b66969a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f5c7ab-dad0-4c6b-b274-9dcccb6db08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92399138-6cad-450d-b5eb-ea40f1eca205",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b23a5c8-edaf-4aa4-83e6-2afbb0c82968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccfcd67-e896-4aad-b7f1-686c849e2c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f240203e-b7f8-410e-b942-abe39bdf66e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b76b59-6ade-401b-b838-700789975e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf17292-bcb3-4888-a30c-3281e8cef605",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38464dc5-9efe-4220-b965-b4e17c690a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e0853c-f380-4c39-acb1-e7b0a7c24b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eaad9c-fc06-4d77-aff3-f5230c8978e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edecde57-7d23-45b0-b914-3cec298a0627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88052684-339f-4878-9d64-fad51d434331",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14614e68-2150-478a-8138-8bd52a17cae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc9b9eb-8417-44db-9782-6697aee6f058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b224886-d49f-42b1-b371-0aee795a01d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4083ab44-b33d-459b-8714-fa6f220fdacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd64e3c-8218-41a0-98c9-57030ff193f7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5344f2f6-eb6c-4f5a-b2b4-8a4b30cc6a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29649356-3224-4675-9cb9-0e8143d1a492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63a27c7-5747-4b72-8bd8-6708356a27f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c44c34-e353-48bb-bd54-5ce580bf6bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c13339-d2d6-4ee3-ae62-613570dfac85",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0066cb2e-48bf-48fb-837d-8e80547aae1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a00f2e-e677-4aae-82a5-eab779809832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23de12b-3d36-433a-8002-dd1dfde80bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e61393-fede-40a3-a0ae-8cc69de6c442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb54f64-c01d-4c60-98de-43565c6d3e25",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf62374-5eaa-40c8-96c3-046a6683485a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519ada27-3640-4899-bce6-ebaa7e6ffcaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba88015-c22a-44ce-9306-03078db81735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8732ec65-04e4-470a-80f9-be721a3ecedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cfb972-2d95-4fbf-84fc-57f53e6a4b09",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbddef17-b76a-487e-9aa9-a0f02a9e6776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7e638f-bea3-49d3-b0b6-203cb35cb3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ebf67d-5d94-4dd0-9e78-f0f218d1f326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e7a3ec-0c12-4dff-9e2c-9e9ad6793664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47163abb-ac53-4991-9cb0-f19a94d26a22",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da52e114-e490-4929-ac2d-b355584e82b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ceaa90a-c75d-4c21-8547-cc72b021b49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965e28df-cceb-4350-a88b-b9f075bab77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824a1325-b5bb-4fa5-a540-f7b21d327bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7157ab53-8606-4ad4-9a74-8bfed892bb0c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93884f10-9be0-4abb-8eba-dbf1f58f5e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd56df09-78fc-41db-a60b-e42113f0c7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d8234e-2e4b-41bd-9a02-9561a29fa38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f512630c-5dc1-44a7-88ae-e21815d66d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bb1523-f5bc-459f-a873-98a7d4679252",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a79501d-e151-4ff8-8e94-e30de92b3706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab710ec-5a84-4d1c-8bc0-386152a6ab9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b263ed3f-7e60-4954-9a34-34e41279214c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266f77d0-3f6e-4d91-bb50-69bbe9e6b8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f36b2ef-c042-495a-a494-e31f2d1a2b84",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5248dcf-5179-4caf-8b81-b0c927880518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992c4d3f-6412-4bbe-8661-a3a25bb9da54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca4ce78-2096-408e-98a5-65dc87f07fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f44ee8-f9d3-4234-b37e-7028201fdc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b51fc7-1637-4efc-8781-6f6cd00e42ea",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261ae98a-c1b7-4956-8351-e343e8f6d6c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f8b252-beb5-4815-8a55-1ee474cd7abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4ff8ea-a160-40a5-80c3-a757e6263bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04898fac-f184-4abc-9571-be6c5a8e4cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013016f5-2835-4f8c-929d-6d67fcf58416",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a5f2b1-24e1-414c-bce3-340b53806205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b907ec-9d0c-4839-bc1b-141868c0b1a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da30b22-563d-45de-9c38-f8f7553e74d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f83cf1-79bd-4e74-8989-36d17795af0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a19f5bb-ab51-475b-8bf7-13aae59ed178",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393f251d-0884-48e5-9b0e-a1bbaa4c95ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b24f611-cae6-4017-9eb7-795e5c4312c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2fd634-c0f6-412b-b4de-ece4da090996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00df66ce-d34f-4852-b192-1fecb074aa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e85e2a9-d235-48e7-9d81-ca3eb6550dac",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6df129-4f69-41c8-9bc2-870b93ecf8d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "065c3ccb-3018-497a-b07c-98c845e569e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc560b-f870-4f62-ac7a-8241813639e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb192998-5a8c-421c-a5c0-2031df6d06a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234c5ead-2f91-4e78-aeb6-2caaa8e5aa80",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989af7ac-b796-46fc-88c8-77af54f8f727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b06b286-5867-4313-820d-4ba12396d9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "035b08a7-d5cc-4c47-8c6e-1d1dba5ebe8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0cbe15f-b036-431d-be5f-81f34ec02140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f998feb2-d44c-4e66-bbc7-d0b64f3f9d30",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c6f433-6426-4a67-9ce8-978ce2c22fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad94720e-6a2d-46b4-95d5-9c4bee0520ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601a9710-1368-491a-8000-f8913d302a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a92039-f64c-462f-a043-5a55126880f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cceefba-75ce-4b78-9bef-df7b813cdf15",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4baab7-605c-4a7c-ac04-fb70d0f5804f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9f146f-1c02-4a1f-aee6-84b67510763e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c18aeef-352d-4be8-82db-c403e5d20684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ef5706-f078-41b0-b8a5-1dc98db3410f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f969c769-815f-4cba-9b5a-ed2a815a594f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0c6759-24ea-4e4e-abc1-b45c0616e298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe886878-2226-4686-90b1-fc5a5be5e4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e6c0a0-ac7f-46df-88d5-992b1e362dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035696c3-db51-45be-90b7-8c05e83e40c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63ac3ab-a40d-4ff0-885c-b7195ca27c64",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5125a89b-85c2-4345-8cba-0ac79651276a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0043f0fe-66dd-49e4-a445-681797e88c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81c3d51-98da-49c8-b1af-db0475004dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eed514-ef6f-4e15-b919-2ef28544c97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5362b7-59cd-4e96-b33e-6ecf5b86b7b3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0bf593-3467-49cd-9e4c-b8dd5c98697b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eba79971-ac1b-4c5f-b496-d5aebd27e30a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a66c9e-8734-4aa0-aa53-cef4dceb63f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8aa54a-b7b7-465c-8a14-88afed8314ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8181ce77-fc07-4c44-bc56-cb96697c2482",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799a516a-a6e7-4ef5-b349-7ac95aa84366",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a3a76d-e3b4-4f31-b47c-2f853c5883be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28874db2-a96e-448d-b07f-0d3fd70d76a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a924ecdf-2e83-4fcc-86df-97bba6edddfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68713f91-1423-432b-93c4-5e089dcefc3e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfc87e4-1eb3-48fa-a613-dbe3ba8dc5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2ac1f4-606c-4f05-9c6e-210dc9f4cffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e7e814-9484-46c1-869e-d06c24ca2b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920dc814-06c1-43a6-8627-541c57d32aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b598af-d510-4f7e-b472-e943a52f7216",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1937d9e5-7b67-4e86-836a-fd400a558bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5231a0f-b733-4f70-924e-9df189c52d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfd06b3-d2bd-4d17-9d4b-c917b7cc90db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43da5800-b4f5-4c74-8d12-c34a30b0c291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd20523-1a49-46f3-906a-9a9f9f9e5e4f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bcaca0-0ed5-4add-bd0f-15ba4a3cd41a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d70a7eb2-5737-444f-bf56-99f1a5f41f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e12a4a5-ce34-46a4-992a-6f7e30d9a969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3aa6fb7-ad5f-410d-a48f-30ae745b3472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faaa720-b19c-4ba1-aba7-f14c477bc88c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633a45f0-366c-4574-a833-18891d0c9784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6ceb7f-7681-4166-8149-6c0327259554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a83b42-d24c-48ca-9c99-eaf885ede7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af849ee5-909f-4e89-a678-1dcb887861df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d079514c-90ae-43d8-b1c6-0877dd126d64",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1244aea-bb05-4845-9254-c884d046e3d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13858999-9cfc-4888-80e4-b74cc545510c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c6a97-a7a7-4412-852f-e07b7aca49b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c53b8d-d2b8-4b0a-8ab3-95cb3031949e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603fb837-3593-497d-8fa0-794d743a9a10",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5295f4ee-cfdf-4b4a-8600-fa46b60c0259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95ab05f1-62f8-4e73-b4fb-f46f02221805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb61b7a1-553d-441b-be8a-721966fd1dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f79660-0fb3-4115-af2b-68be2c25d7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7281ca9-4830-42dc-bb16-16fdde690721",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d036c49a-115e-448f-a4d7-c34cd19e909b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f44df948-5c38-42d6-bf31-1836f7deceda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53291a4-b8d8-4482-89f1-1a7ea97b9c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384901e9-7c2f-4216-a797-6f63109d1f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7202cb-af04-4a71-a24b-a9c6c2a1b3b2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba6d864-6a96-4c30-994a-73400a731e09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f88a87-c165-42b8-9ece-731c27eeb741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb12fd39-b4bf-460f-b5f6-69640e7ffc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fcb20d-739b-4d36-99f0-f6b45f2bcfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b299b536-2d6a-4184-955f-2078e5c7094f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441f591a-40a3-4e02-8d98-e605d2087624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0219d54e-0095-49d2-80b2-6f06f5156468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307429c-5204-4a0a-87b5-1460bfec57b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daac360-f657-4a3b-99ef-813c295b2e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6236603d-1cf6-4766-9b6e-969eda3d64c3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b6b888-accd-4550-ad93-a91b534b54a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd00726d-bcfa-41a8-9ca8-e73febd9d354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d04bd0-0143-4c0d-a068-4c2818d2c573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ec38b6-a55d-46bb-b6b0-62ab1133da6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabfc795-eb41-403a-9430-c3df4ce01318",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0f3933-55c3-4cc8-b641-3fc4cd8b4e9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "463685ed-2e15-4f6a-a4fd-1416804c903a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf15551e-9f65-4db9-bdf2-714d4b8bc092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8acd0ab-6d34-4f90-a885-cf07265316d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fd6782-b3ef-487b-aee6-22ca9762097a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421e80bd-697a-4a53-b7c4-c2c523160450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5bed6dc-5b87-412b-b100-7040afc41569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c494de6-97df-4863-aaa2-7afeff1890c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034d15b5-a649-4a81-b35d-6859d1153be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf74e5ab-4752-4090-8152-f99801daec0b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcea64ff-beab-4e02-8d8a-717673d6ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee4bb68-e00b-4020-84ec-529d0264ef3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a752352f-b6eb-4345-953b-24a78c4d5e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6075fb-7772-4df2-9022-621bc5dc916f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8af465c-208b-461a-b26a-553ab933db3c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b5047d-1f67-42e3-87ca-4135652c041c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf0ea6f0-09bf-4abc-a827-3f2278502d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0c82ab-6fed-4c17-926d-9350d49b727c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c957a2e-299c-4d8a-a730-b5b4fc675dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7c5076-bb64-421e-8368-8e3206336a67",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd39378-3ede-4f94-9877-951c65c793e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716497d7-b42f-4600-b0df-21126eda6825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbc61f6-9584-4292-9fc6-1362bfc99e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e5a68c-b4db-4e08-81a6-2296ee3a90fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edda7c8-d20f-4e9e-8afe-a41982a8a461",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71260c3a-264d-4647-a2f2-177c6782dbf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d28ed366-5dfd-4adc-8cdc-536ea5ae81da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0c97ff-48c3-4f90-82d8-c6358732e995",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38633831-2649-47bc-98b3-01723705e401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e818e38-8066-4910-a2b9-1992bdfb1f99",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3712755-f0f0-4382-8e3f-a7f29be0250e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4007ec5-9553-41ce-a026-6c966e156806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81d801b-710a-49c6-b1af-e789653f47a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f998ab2d-bfaa-4f9e-98ba-8ad753e0551c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03a7f78-47af-40c1-9682-2ff159ccfe90",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7570b1-314c-4c3c-9247-faaec1b7011b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e29ff209-45f0-42ec-9ba3-bdc08d8982cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068bd863-e93d-46ae-af93-627aaa65181c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc246d7-71a8-456f-a965-78210becf33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8475f0c-095f-4e20-90b3-9c2c39749ffc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee810359-b63c-45e3-a03a-4ca73e8a205f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa453509-adb1-488d-b7fe-b952c3fc34bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb6bbc5-fc35-4f62-b272-84a4b42d1042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a68720-3835-409d-a051-1a5bed3aa692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8537bbbf-6fcd-4d89-8a4d-4ee9ba612c4d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2704b6a-61fc-4a06-93ab-c8fc33c4f284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b320f8-55a3-478d-ba10-f6780df60a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8472baa1-f8d1-4f97-a1f1-45b9827b9ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ac26a7-827a-43a4-b5e6-a11c8fe7c290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9822d704-094b-4582-b995-d0b4f8731554",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efa8f62-0344-4780-9199-e3cf2c74ea80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8d5067-adf0-44ea-9ccd-be77d528f07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4948c164-8d8e-41fd-a59d-df2957da941b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a98475-e75e-4535-ac2e-dc8c7ba8d532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfbe228-ec65-479c-a512-6a75a792f48b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c865d3e4-6727-4fb6-90f8-1b95079f294c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7367f9-dc51-4de5-aca1-18ec752029f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d089d14-4a9c-4b5a-b8ae-c049ad3433ca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162505e0-ce70-4e1b-9c4e-523f30e37a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecb3c18-ffa0-4b2c-88ce-30cd9000ac68",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e17eba-d08b-49b3-8611-f445de36479c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1cbabea-58b1-423c-85ac-fe2be40bf9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e4806b-fd34-468a-a835-5365f3d897e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3430417d-35f1-4d58-98ce-c6844c556864"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20bc2b9e-9123-4a98-9e82-7bcaed8af2f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cb7e127-98d8-4904-b420-3c02b0ce747f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41da9cda-a071-4335-a686-234ed38e528f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dab39f38-f959-41c2-87e6-4781d8fe8371"
                    }
                  }
                ]
              },
              {
                "id": "951a776a-fb97-4852-8ffd-420720775416",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8ec24b9-9a9f-44dd-af40-e52ece40d3ce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4604f549-90bf-49ab-adf7-dbd76b4f9748",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f742dc75-695e-428d-9fe9-0205eed95bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e781031-af43-429c-ad6c-9d08b9339a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2543cb9e-e8bb-4b69-9325-8c320f87a60b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5666f9c-130f-409d-a2b7-892e8938f39a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dccc4113-7c55-416d-a9c0-1e74f3c1f0b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49161742-d738-4bf7-a09f-6abcbd532705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "063a381e-8522-4617-b25c-239a40fde284"
                    }
                  }
                ]
              },
              {
                "id": "8784e4bd-1fbf-4840-8844-9ef3a99f86b0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "df4c645e-ec18-42d6-8a25-ebf1f73513f0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60b67ad-ee24-4154-9bcf-89cfc8ddbe09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "60664081-7790-4cef-921b-da4f7d28dd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531c7153-1a15-4f14-b89a-bb6b09c86e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2226fb5e-7dad-4ee6-8921-50282ad0fe63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f9d03d66-e6df-4bd2-9776-64d8d3ffdc86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fae9b6db-ba72-48fd-9771-0cfa197b9f9d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "540cfa59-11ad-4a56-a543-2dac5b00d491",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "58f860ce-138c-471b-8d3b-5ba1d03cdffd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fba6bc3-59ac-43fd-a68f-550b58d9ebdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c18c64dc-7a6a-4a5f-9b75-1931436ee5f4"
                    }
                  }
                ]
              },
              {
                "id": "10c6d483-c576-4925-a4fe-2a972f30bfdc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74ec42c6-ba5a-4a7c-b75a-20ff5a37cd52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9fce1c70-2893-4be5-a986-957b6a3cbb83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64e52c95-091e-4b6d-9c81-9cc2c879dec3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31a26619-9f8f-454b-ac0d-57710072d8e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d94d9b6-6014-47e4-8809-be254ff25bb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a2566ca2-363c-448d-8787-7b2b9bb53b90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6d658a8-23e1-464c-bb62-6033965276f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d47cfa93-31ff-4291-bfee-6fcd12d83a88"
            }
          }
        ]
      },
      {
        "id": "41c691df-4f8f-4d82-b67c-08c5dec8349b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "55eebfdb-4482-48cc-94c7-8da9141da397",
            "name": "Negative Testing",
            "item": [
              {
                "id": "833825e7-73fc-40a9-b23e-c1af340c1275",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2f56974-0fae-4718-9d21-f96d2707b810",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2595c6df-5999-4573-8b2b-6136362c0ca7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e8723d3e-74ee-48c1-8802-7f432615dd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e82e5a0-8d52-4f5a-be8b-82e6a5fbb9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "301976d7-1351-4a17-9e80-bbe76a6331bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5defca0-8906-49bc-956a-ddd1f5d75fd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5dac8a4-f958-4238-aef0-bc3658c0398f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f5c8eb8-5bd0-4879-8a28-5c6d22895a1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e4fd47c-dc1e-4f46-afb5-3fc7eeb7bada"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "463dfc2a-4a0d-4b9a-8d78-d80a79fef583",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8aa0f061-0fd2-4293-8691-ee0ac9d85e7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e8a9411-8f3b-4591-817d-28799be1fd53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c755396d-d376-4cfb-95e7-c1e38777d4d6"
            }
          }
        ]
      },
      {
        "id": "4190daad-5c82-4843-9b30-ecec760fa43e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c16f1936-1537-4964-ac16-0de47dffb503",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc43d93f-9d5c-4ac4-b7ab-b2321ca70975",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e1668e0-6008-47c7-8bdd-4b46657bff10",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc307a89-217e-486c-8c6c-0cb936ffe82e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c8989a1-51fe-4412-a3f0-9ca4fa48291d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f84e51-8093-4cc7-8129-99ced6286b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "268e51a8-2731-4a8c-aa8c-1fccbd6c081e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b68b856e-4392-4e85-ab67-0be348562494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "059bd82f-e90f-4efa-8352-03339c2444fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcc766c9-5acd-4292-8a09-800250e3a148",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efca203d-e634-428b-b90f-a990f002adcd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "888516f0-2e96-45d4-b92d-b42d1e8fc964",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e38d655-a659-491e-9f61-de71055988c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e96729c-3c9b-4c4b-bc69-c65098afd2ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3391e8c8-439d-4b04-a0f6-940367fcbc31"
            }
          }
        ]
      },
      {
        "id": "429fa123-c645-4710-8f1c-4296ee2b39d5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "80d6a12c-3295-4bea-9498-e1fffdc4ed54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b2567cb-c645-48ff-9a39-131b2287f26c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72d917de-5d5c-41a2-8751-9aa5e65fd35e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a311b09-d84a-44e3-a9e6-3f8966f1d893",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0404361c-98a5-4654-914c-7d8db36a0321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa1669b-23ba-48cf-a738-03fe64bf2adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "104ff078-7dc2-4c00-a715-d5552edc540e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a327dbc-1036-49f3-8a56-65073bf379aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3b99d3b-ad41-419b-81ff-69ca35b4a4a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "120e8fbc-8ec8-4963-b8ec-46d7b312ba2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d79c576e-a7c4-48fa-856b-1b1afe28ae6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15fd900a-6ac0-4417-81cd-a321766fb989",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74884929-84de-4974-aacf-f0221cec8a6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76834c5a-1c03-409c-8bc4-e1086388f2fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20aa8009-d9e4-4a09-befa-099cab3ca870"
            }
          }
        ]
      },
      {
        "id": "9e791a9a-567d-4188-84c1-c9347c616f05",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a0e6863-b5f9-4caa-8151-dcbe96b4cd6c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffaf229c-7355-4b26-87ae-d91dd1026811",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "abcad8e4-4145-4738-aabf-b97ebaf02054",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "812148a4-7308-46f7-8315-c1db6b536643",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84182d51-6769-48db-b354-262f517553fa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.46428571428571,
      "responseMin": 12,
      "responseMax": 626,
      "responseSd": 81.81101622204332,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716480321176,
      "completed": 1716480345948
    },
    "executions": [
      {
        "id": "a6382b9e-6ad9-45ec-8259-549cc2340dd3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "99094b87-7d2b-4c95-bb9a-49dd57a8cbfa",
          "httpRequestId": "dce162fa-7a72-49f0-aab4-9e247b0b4c10"
        },
        "item": {
          "id": "a6382b9e-6ad9-45ec-8259-549cc2340dd3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2169c919-ecc9-4bdc-8efd-c2e84e2499d3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "48ce7325-5d80-4e7e-9447-182d7c3dafbf",
        "cursor": {
          "ref": "caf18f41-3c4a-4324-99a0-1a202048ddf9",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0f1885bf-2360-4b45-af58-6aca31ee723c"
        },
        "item": {
          "id": "48ce7325-5d80-4e7e-9447-182d7c3dafbf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6e925b2e-8f4a-4054-9f79-56d48e8cfd35",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "8f5f20b0-4235-43c3-b0ec-a2e838b02712",
        "cursor": {
          "ref": "057a11b8-4486-4d86-9872-f78bc950f891",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d9ab4543-3523-4964-8967-d092856c7faa"
        },
        "item": {
          "id": "8f5f20b0-4235-43c3-b0ec-a2e838b02712",
          "name": "did_json"
        },
        "response": {
          "id": "6d32160a-557e-4cec-bca0-67fa9d25614e",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e43b2eb-05cd-4a2b-afd7-80b02544977f",
        "cursor": {
          "ref": "cc2ea753-4c67-4c08-a754-8a2d97992916",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "158d8e01-b98c-494c-9346-7067b336381d"
        },
        "item": {
          "id": "2e43b2eb-05cd-4a2b-afd7-80b02544977f",
          "name": "did:invalid"
        },
        "response": {
          "id": "30619660-3bb7-439c-95ab-8fc074cf1174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e43b2eb-05cd-4a2b-afd7-80b02544977f",
        "cursor": {
          "ref": "cc2ea753-4c67-4c08-a754-8a2d97992916",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "158d8e01-b98c-494c-9346-7067b336381d"
        },
        "item": {
          "id": "2e43b2eb-05cd-4a2b-afd7-80b02544977f",
          "name": "did:invalid"
        },
        "response": {
          "id": "30619660-3bb7-439c-95ab-8fc074cf1174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c44db38-b9d2-45ed-95c6-0cf109fe2d68",
        "cursor": {
          "ref": "92b69f6d-21d8-400f-a81f-5511428497be",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "41db9242-774a-4bfc-a6e2-4b6c78f84051"
        },
        "item": {
          "id": "7c44db38-b9d2-45ed-95c6-0cf109fe2d68",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2a14b591-284b-4248-bd14-a89d15ee935c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 329,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5243fae2-b680-413e-9d22-30868ad7af48",
        "cursor": {
          "ref": "5e1716eb-0cb0-4235-94cd-9636cc0dfeff",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a5b11ef2-f174-4257-9522-c42d61cbac00"
        },
        "item": {
          "id": "5243fae2-b680-413e-9d22-30868ad7af48",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7c960b2d-e70e-4cb0-b652-69dba722ddf0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33ebfc3-1f7a-4ffa-999a-75133786a1c7",
        "cursor": {
          "ref": "1fa07fbb-71e2-425a-a7f1-2f12ad963315",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a32c9bab-0b12-42a1-a3cf-ebd4c223f823"
        },
        "item": {
          "id": "a33ebfc3-1f7a-4ffa-999a-75133786a1c7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9753f4d9-bea1-406b-8bf0-b5c3ef9546ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebcd7b4-41bb-42e5-b294-907ae7a9e6dc",
        "cursor": {
          "ref": "4b2e208c-7184-4983-96b2-f378a31aaf88",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fc26a254-88ef-49cc-9823-e39db829f24f"
        },
        "item": {
          "id": "eebcd7b4-41bb-42e5-b294-907ae7a9e6dc",
          "name": "identifiers"
        },
        "response": {
          "id": "0e2c8733-4c8c-4f47-9007-893fd76cd202",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2afa18-cafb-4130-ba22-73f14b075626",
        "cursor": {
          "ref": "9ece9a8c-c393-41e3-a3de-e1d803379201",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ecd36b2e-4a31-4ab5-8dc2-594d7b194536"
        },
        "item": {
          "id": "ed2afa18-cafb-4130-ba22-73f14b075626",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f4da036b-e1f5-4a9c-936e-3d2cd1716689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d6f8a9-44e8-4ce1-973b-b0b21e01534f",
        "cursor": {
          "ref": "cf352d4a-63cb-4b8e-b59b-6315a538ce53",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "826331af-97c8-4c31-b73d-280109b5c26b"
        },
        "item": {
          "id": "43d6f8a9-44e8-4ce1-973b-b0b21e01534f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d040dc81-2443-4702-88d8-4a8500bb845e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b0ac87-aa29-4dec-a519-8d9362614e8f",
        "cursor": {
          "ref": "1433698f-ad84-4a78-b4ef-1fec073a7410",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f379e236-981f-4de7-8a3b-37a885ea53e7"
        },
        "item": {
          "id": "92b0ac87-aa29-4dec-a519-8d9362614e8f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0535bab5-7d46-4194-8d8d-15b5d7260d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2843b8e1-e3bb-4010-bdd6-33ec9559f9bc",
        "cursor": {
          "ref": "17fcddf9-381e-456d-8207-923789ccef44",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f095c2b0-b679-4e01-84fe-5b081a933eab"
        },
        "item": {
          "id": "2843b8e1-e3bb-4010-bdd6-33ec9559f9bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5c4bf541-a89e-439c-a95e-d9bec5ca4c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320c3b82-89b6-49e9-9b1d-c57d193f16b5",
        "cursor": {
          "ref": "a56133ba-cbf6-4d2c-b271-073ba6a904d7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5a36b882-6e6e-4e21-a28e-63c688770fc5"
        },
        "item": {
          "id": "320c3b82-89b6-49e9-9b1d-c57d193f16b5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "05a5344b-35b4-4091-ba89-f22d0a42d938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae134133-2fcd-4f42-89f1-6c0e92417d7f",
        "cursor": {
          "ref": "2cc26575-5b60-4a8b-8945-86e17d7c73aa",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1b7af1f5-7f5d-47d3-a07a-bf1a5c1f770c"
        },
        "item": {
          "id": "ae134133-2fcd-4f42-89f1-6c0e92417d7f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "554c7742-c827-4e39-892a-e4b45f59d46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103f7862-cf5f-4d3f-b2ff-8cdee5e5c45e",
        "cursor": {
          "ref": "57d7d456-23ca-4b59-8974-c7be3bc455b1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ff2cf85a-7abb-4d46-a76e-83fe39a23074"
        },
        "item": {
          "id": "103f7862-cf5f-4d3f-b2ff-8cdee5e5c45e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9fbfdcc5-cba3-418a-a090-da9966464f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3b62a1-1c2f-4904-9d86-4c87660a88f5",
        "cursor": {
          "ref": "d16ffb72-59f8-4e0b-b0d8-ada4297b666b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7209caa0-76ed-4a6b-bafd-02c6222c3a14"
        },
        "item": {
          "id": "8a3b62a1-1c2f-4904-9d86-4c87660a88f5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "69116873-d0a6-4f88-8b8b-7f1bae098e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9d0461-6817-4a02-9e11-542937bbbe91",
        "cursor": {
          "ref": "95145835-2eb5-4965-8a93-37ed8ab0df74",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bbe98f67-285d-4fed-9aa9-28e8e12fef38"
        },
        "item": {
          "id": "2c9d0461-6817-4a02-9e11-542937bbbe91",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d0721499-ffd3-4f0d-80b5-3229bbefd27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca94ca59-28dc-40f9-ae41-99f621fbaaa8",
        "cursor": {
          "ref": "e5c4a01a-6e45-42bf-b8e3-5824fb031e26",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3d3bb79f-47ba-4a2c-9fb4-bb3d1e617839"
        },
        "item": {
          "id": "ca94ca59-28dc-40f9-ae41-99f621fbaaa8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c88b7afb-5df6-4b09-8654-777e24587bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46b5525-f2f7-49d7-9796-1394c44256e5",
        "cursor": {
          "ref": "58ccfd5a-bfaf-42dd-8875-41d92b617d89",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "107c051c-d827-4fbe-a704-1ea6f6047cba"
        },
        "item": {
          "id": "a46b5525-f2f7-49d7-9796-1394c44256e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6d314ba8-c9fb-423f-9e4f-c5f1df9f29ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0cd54a-af57-4989-9c5f-d07e8dee685c",
        "cursor": {
          "ref": "b253c9be-aee8-445a-af4a-79c51c328c08",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b2e09dc6-d3ae-4945-a1de-d3238679a338"
        },
        "item": {
          "id": "ec0cd54a-af57-4989-9c5f-d07e8dee685c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6b9e360a-3a8f-437e-8531-6c5394f74824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ebd4ca-dfae-4350-945e-e461e83c210f",
        "cursor": {
          "ref": "207253a9-20f0-4d3e-9a9b-1eb5d4645660",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9d15d1e2-4512-46f2-8656-4f876c1fd7ec"
        },
        "item": {
          "id": "82ebd4ca-dfae-4350-945e-e461e83c210f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ee473e30-093a-4a9e-b91c-25b504a103e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0dbc11-7365-4e8f-9a47-fce5953c2e39",
        "cursor": {
          "ref": "f717f188-861b-4d65-8566-4f0a8a302f29",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c5f5f538-9499-42f3-b02a-04b968673dba"
        },
        "item": {
          "id": "ab0dbc11-7365-4e8f-9a47-fce5953c2e39",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "06f53e6b-8175-4d8c-a0d4-ce11b6842877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b174a1-23a2-4b6d-ab65-51382690ac0a",
        "cursor": {
          "ref": "40ed94f5-7264-4426-a5f9-16656928b832",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "53f8cde6-aaf4-44aa-9d3a-36355ca0c8df"
        },
        "item": {
          "id": "f8b174a1-23a2-4b6d-ab65-51382690ac0a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bc88ee82-1d51-47ba-94a1-bd98bdd50712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395bffd0-00ca-4deb-b4dc-1a0525eb7ef6",
        "cursor": {
          "ref": "47c7b0ec-f1c9-4e35-b84a-023b02c9740b",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e23d659e-80fb-46dc-83b5-ffad2e9fded8"
        },
        "item": {
          "id": "395bffd0-00ca-4deb-b4dc-1a0525eb7ef6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "765bd83f-d5a5-4827-a135-d94ee7cdc48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e73119c-1309-4d77-97ed-3798dddbfd11",
        "cursor": {
          "ref": "13d6d62d-521c-4f29-91a1-bf0ffda45b42",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f42bb36d-2985-4e3e-a5be-02f8485a23ba"
        },
        "item": {
          "id": "5e73119c-1309-4d77-97ed-3798dddbfd11",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c46916c8-abed-4fde-a636-e086f11e032c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d0ab21-b170-417e-9244-416bac99b495",
        "cursor": {
          "ref": "6aa61211-ec99-44ea-b707-c826abfb8990",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7180dd1e-1a28-4063-8b7f-0fc0bd9229d4"
        },
        "item": {
          "id": "79d0ab21-b170-417e-9244-416bac99b495",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0bcdebaf-620d-4f7b-a28e-7a633e528a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f71fce-da63-4353-b64f-58a28a30e0ee",
        "cursor": {
          "ref": "a4059fa8-a87c-45f4-a43b-29d89f786245",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4027ce86-c570-4433-8bf5-c7a18c35c4ea"
        },
        "item": {
          "id": "c4f71fce-da63-4353-b64f-58a28a30e0ee",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d7c55f88-fe10-4851-9f4b-11ceb14dd4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e896bc8-50b4-43ea-aa8d-54a77d76dde3",
        "cursor": {
          "ref": "b5b9fb89-b124-4dc3-9e66-721cdfe3aa18",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "73d4667e-bf4a-437a-bc37-729e4fafeba9"
        },
        "item": {
          "id": "3e896bc8-50b4-43ea-aa8d-54a77d76dde3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a98239d9-d571-452c-a29f-eb3b6e34c4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7557979-05e6-4e4b-baed-ee4373b3d5a3",
        "cursor": {
          "ref": "35bd2fb5-71ab-48c4-b4f3-15c9c53f7728",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2d955b90-7f13-4e28-a2a3-a8bd3428485a"
        },
        "item": {
          "id": "d7557979-05e6-4e4b-baed-ee4373b3d5a3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "37123d38-56ed-4be0-a720-e644af93e62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1e9794-2da5-4d6e-8cc8-1b4bba6446ec",
        "cursor": {
          "ref": "2e7f0517-51d2-4a22-9f56-9a6c27f518d8",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc27df56-8ac9-44b8-8165-0535a1054611"
        },
        "item": {
          "id": "bd1e9794-2da5-4d6e-8cc8-1b4bba6446ec",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ab306b9-7df1-42f9-85e3-efd3dc1dad18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ce341c-89c3-40b9-964e-60a4648265bd",
        "cursor": {
          "ref": "b9a8f4da-e1d6-4103-a5cd-34d93b5c3495",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ba14a25b-ec05-4070-b64a-9392dfbd7e38"
        },
        "item": {
          "id": "a4ce341c-89c3-40b9-964e-60a4648265bd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "58726758-f184-4862-b896-a910b732afed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7bd088-04ac-4067-9a9b-9a587a0a1b8a",
        "cursor": {
          "ref": "81699582-72a5-4261-9f68-24b953b63600",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "80ba6dc4-c007-4efa-8ff2-ef7817b7fb89"
        },
        "item": {
          "id": "1a7bd088-04ac-4067-9a9b-9a587a0a1b8a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d8f989c1-9200-4a68-895c-f1e84092e35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e35702-6732-49e8-a1ae-10325ec10358",
        "cursor": {
          "ref": "3683d76f-cb2d-47a9-9fbf-b18d96d7353e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "25174434-face-4c34-ad77-0264f77128be"
        },
        "item": {
          "id": "71e35702-6732-49e8-a1ae-10325ec10358",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9489551b-0d01-40a6-b2a3-41669dbb0607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a17f464-2374-4a10-8bff-bf2bf6b95208",
        "cursor": {
          "ref": "7ee09613-ca7e-47c5-9377-9e3e51a4cf07",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f8495892-6b0b-43a1-8116-b3fda0b8df29"
        },
        "item": {
          "id": "6a17f464-2374-4a10-8bff-bf2bf6b95208",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "15680a92-bbbb-4404-af7e-1b319c6dc3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a71200-4dbb-48e9-b40f-20780fbaefa7",
        "cursor": {
          "ref": "9d4645f3-ef57-4188-b155-04125697ed80",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8cd1b9b0-9e7a-43f3-8de5-996b4216bdde"
        },
        "item": {
          "id": "19a71200-4dbb-48e9-b40f-20780fbaefa7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "201fa871-eea2-488d-a7d8-91fd84a26d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7355f2-a3fb-4956-8aa1-1f33301a31ed",
        "cursor": {
          "ref": "7cc9de7d-1cc4-4767-97ca-96001b2fe3f0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0fae8ed6-3a19-4d82-8049-b9045bdd3eb8"
        },
        "item": {
          "id": "ff7355f2-a3fb-4956-8aa1-1f33301a31ed",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dad973fd-d174-4233-85c0-1632d43678fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54d8def-f37d-4d62-aa94-5756bc96f217",
        "cursor": {
          "ref": "e0725cff-a2ba-4cc4-bd63-d80987d17442",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1102ad47-787d-4afa-8e01-99ffb2707b73"
        },
        "item": {
          "id": "a54d8def-f37d-4d62-aa94-5756bc96f217",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ba304cfd-3367-4c85-b0c5-6a3550163f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf89534-e09a-4226-9851-2a91cde65c09",
        "cursor": {
          "ref": "aea08060-8fb5-4018-abe6-e57e4da56fea",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4add3b51-cc8e-41a9-8eae-62ab8dd75cb4"
        },
        "item": {
          "id": "ddf89534-e09a-4226-9851-2a91cde65c09",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0c068c92-ed8d-4047-9693-3410d72d416b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c179653-edad-4666-8004-94a6c9960c71",
        "cursor": {
          "ref": "dac095b0-4479-4e9a-abe1-757fce7b85ca",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "731502fe-d3bd-4cec-980e-e907db5c3c8b"
        },
        "item": {
          "id": "6c179653-edad-4666-8004-94a6c9960c71",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e42d2a52-823d-43f3-a636-3841078ddac8",
          "status": "Created",
          "code": 201,
          "responseTime": 626,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1e34ec9c-56b9-4034-8ed7-ac3a0eb5c36d",
        "cursor": {
          "ref": "1ded34c0-1670-4cb4-acd7-d6bb2a99b268",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7102d820-eaf0-43b6-865d-e242425ee9ee"
        },
        "item": {
          "id": "1e34ec9c-56b9-4034-8ed7-ac3a0eb5c36d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "537afaac-ebaf-439c-9096-9c2e781b4946",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "be82241c-c6a9-4daf-a69e-87ded60baca9",
        "cursor": {
          "ref": "05276bc3-ac1f-48d6-b905-3311ce336675",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "36d77e06-08ac-43a2-a38e-6c62825037b6"
        },
        "item": {
          "id": "be82241c-c6a9-4daf-a69e-87ded60baca9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dd0fbbba-4e26-455d-a617-297755d7d824",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5fab0e33-9546-4d3d-bcd1-d198ef0a72b1",
        "cursor": {
          "ref": "fff8a422-21f0-4d25-b585-4c6366cf18ce",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e532d30d-262e-48b7-82f2-0864a742add8"
        },
        "item": {
          "id": "5fab0e33-9546-4d3d-bcd1-d198ef0a72b1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e1664b2e-6360-4ee5-a46a-52fc1a5c7f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7488bf-9f26-428b-b2c5-14bffaa9d7de",
        "cursor": {
          "ref": "f8ccdcc7-e859-43a7-91a4-cd42ad68f7ac",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7a290983-1fe7-4a60-8d73-2135b938ba24"
        },
        "item": {
          "id": "6b7488bf-9f26-428b-b2c5-14bffaa9d7de",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0a09f029-51db-46ae-be03-4892a7d683b1",
          "status": "Created",
          "code": 201,
          "responseTime": 426,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bed29d8c-d6c9-4b85-b102-aca289de90d6",
        "cursor": {
          "ref": "fd516a76-096f-4943-8196-e28ccd2987bc",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa4f090e-edbb-4e70-af65-e053854a0052"
        },
        "item": {
          "id": "bed29d8c-d6c9-4b85-b102-aca289de90d6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d5bfaffa-e40d-40c1-a53c-568e5659fd65",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "827ff928-2219-45ee-a2b9-1f47ae06ce2b",
        "cursor": {
          "ref": "1debf23b-c8a6-4699-8333-9d32d6730757",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cbaf3491-8922-4a68-b4d1-2ea028b3a253"
        },
        "item": {
          "id": "827ff928-2219-45ee-a2b9-1f47ae06ce2b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f91bd848-8d6e-4671-bb38-328b2c937196",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "99ae8237-9a07-46a5-aeea-298069f8a0cd",
        "cursor": {
          "ref": "92d177fc-ae4a-415d-baa8-fb6ee501ab5b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ee731610-760f-4adb-995c-4cb22f0891b3"
        },
        "item": {
          "id": "99ae8237-9a07-46a5-aeea-298069f8a0cd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "621510b7-fe3a-443f-9be6-e73c36417240",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5ebcc6e1-21d9-4fbf-82b4-facbce9f1347",
        "cursor": {
          "ref": "639fcd5e-44eb-4e47-bed6-14245b35f828",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88bb63e1-af18-4247-a1f3-8f250fbf6df7"
        },
        "item": {
          "id": "5ebcc6e1-21d9-4fbf-82b4-facbce9f1347",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "848882bf-d90f-4d53-b3c8-d3a7f17ebecc",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "443e2786-94b0-422c-9bef-df22a05a86f7",
        "cursor": {
          "ref": "0532a020-7be1-477c-8079-d1df6900cb29",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "13244f6c-d225-47ef-95bb-5a834570f73d"
        },
        "item": {
          "id": "443e2786-94b0-422c-9bef-df22a05a86f7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "196923da-6adb-4b48-bb0c-07bcb1243655",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1aae95df-e910-4251-85c3-f0cf56616c9a",
        "cursor": {
          "ref": "11bf3b2b-0110-4024-823d-57f3d011594e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6aa61df4-97ba-4fe6-9e2c-99c03d8c540c"
        },
        "item": {
          "id": "1aae95df-e910-4251-85c3-f0cf56616c9a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ff1ed78f-7244-4abb-95ef-9ecdf4281310",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "09d5a859-926c-4e0a-8dfa-b5ab386fc9d6",
        "cursor": {
          "ref": "b3b259e0-73ae-4583-8ac6-76b9ce37f7d3",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f38bc1c9-4a48-4d53-90a7-1b0dd284c254"
        },
        "item": {
          "id": "09d5a859-926c-4e0a-8dfa-b5ab386fc9d6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c7e8ceb9-899c-4feb-9589-39834d4276fe",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e84e860a-0381-4b98-87d0-ed376c67188f",
        "cursor": {
          "ref": "cab25dba-3237-436a-862e-26ad72b46d2a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "010003ee-08dd-44f2-967e-04b6476d9686"
        },
        "item": {
          "id": "e84e860a-0381-4b98-87d0-ed376c67188f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e69550ef-7f79-48a0-8070-1130580787ac",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3186b93e-bf58-41d3-8805-04ddb1598066",
        "cursor": {
          "ref": "b0125bd6-49e2-48aa-bfec-fa051ecaad28",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "89d2a149-ce21-4f98-ab8b-a3485c6d6b74"
        },
        "item": {
          "id": "3186b93e-bf58-41d3-8805-04ddb1598066",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "447414fa-a308-4404-b09c-38d2247fa708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3190ab-ae63-49c3-a88c-3a2d10f12746",
        "cursor": {
          "ref": "9975ab22-8275-43d4-a021-ed0df11d1e7a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "55839629-e0c8-43b4-b28d-39c618a9c5e2"
        },
        "item": {
          "id": "ec3190ab-ae63-49c3-a88c-3a2d10f12746",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b0a9d597-3e00-4b98-845e-5112de83164c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cb72e9-41b6-47d3-aa15-efbb601dea44",
        "cursor": {
          "ref": "968af849-c762-45ce-8c07-01ee800bf861",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d1c04198-8bde-42ac-9e92-9a4b949c2bc9"
        },
        "item": {
          "id": "e0cb72e9-41b6-47d3-aa15-efbb601dea44",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "439c8154-909f-433e-ab2f-8b2335e903bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79970ab-640a-4898-9ce9-7c0b5ce9520d",
        "cursor": {
          "ref": "942646ef-57dd-459f-bedd-278e7b023c5d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ee0da78b-91cf-45fa-96b1-0953f619ffa8"
        },
        "item": {
          "id": "d79970ab-640a-4898-9ce9-7c0b5ce9520d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23e3b5f4-0068-4e13-9883-22040b985dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600efbce-c1e1-4b12-800c-2ef98671e608",
        "cursor": {
          "ref": "d508eee0-58bd-4ff9-9ddb-cca08b0471a1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "55730358-611c-4fa1-89cd-e62a37718acb"
        },
        "item": {
          "id": "600efbce-c1e1-4b12-800c-2ef98671e608",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2f4c921b-9583-45c2-9b68-71361db18f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415d01ed-7817-4c29-b9a6-afd8b5535dab",
        "cursor": {
          "ref": "627b4e12-c1ab-41a9-846f-935d7ba72e5a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8e01e9fa-fd4c-42cf-bcf1-922ad2104b8a"
        },
        "item": {
          "id": "415d01ed-7817-4c29-b9a6-afd8b5535dab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "97aed8a9-8c26-4532-a473-f9a10f16defa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9a09ca-1d7f-4bf6-86a2-5c6c6fe61e6a",
        "cursor": {
          "ref": "ace541e7-7446-4763-ac46-9b146396aefd",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "665335bd-ea24-4b0f-84c3-51a8ac651a6d"
        },
        "item": {
          "id": "fc9a09ca-1d7f-4bf6-86a2-5c6c6fe61e6a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0638c358-1207-4e48-8499-617fbae32638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bccbbf4-47e7-4ba2-ad5d-daec75283aa7",
        "cursor": {
          "ref": "5c689668-96a5-47ab-a640-ffa80a14651c",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eafac36a-3482-40c7-831f-0739956d656e"
        },
        "item": {
          "id": "4bccbbf4-47e7-4ba2-ad5d-daec75283aa7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "37781211-b406-4b4a-8cfe-e283e6e62b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df8d36b-3f83-406c-8e71-e56b50466824",
        "cursor": {
          "ref": "6fe77075-4c8a-4981-9042-348412037226",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d738a8f6-a7cb-43ef-a871-f277d5cd2892"
        },
        "item": {
          "id": "1df8d36b-3f83-406c-8e71-e56b50466824",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ebf3ce40-19d2-4fed-aaea-c8fc79eece8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12706320-bafa-4272-b0ce-815493c2ab1a",
        "cursor": {
          "ref": "dd007897-bcba-4582-b846-a05e0d683bff",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2487c448-a855-4d52-95c0-76ff803801c7"
        },
        "item": {
          "id": "12706320-bafa-4272-b0ce-815493c2ab1a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "291a51d9-8572-438f-8bab-2e80919f87a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a166b730-5675-4e3d-b8b7-913e2c01a0d4",
        "cursor": {
          "ref": "377f8305-65a5-415a-acf4-43765c34d1e3",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d0f76ffd-0cea-47bc-a75d-7cb382a66449"
        },
        "item": {
          "id": "a166b730-5675-4e3d-b8b7-913e2c01a0d4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c21bf9b3-3ee5-4523-8b42-1420a9d6e282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b721a610-6b36-4cd6-b252-829fa4032e81",
        "cursor": {
          "ref": "2a418d18-ac2f-4cd3-ad79-7d60f31ebf5a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3b01ec8e-c1f9-4b5f-90f7-badba331e418"
        },
        "item": {
          "id": "b721a610-6b36-4cd6-b252-829fa4032e81",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0c22f65e-7565-4145-83b2-83c69ffc3abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b328506a-ed75-4700-80d2-270d29307292",
        "cursor": {
          "ref": "f8ba0e5c-278c-4c39-aaf7-104376ab9be2",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cbe994d7-12b6-4521-bdcd-93ae6a8fac61"
        },
        "item": {
          "id": "b328506a-ed75-4700-80d2-270d29307292",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "28e5b598-b2b8-406c-8a78-296d3cc16d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea3f7ea-3367-4c5a-a58d-1519946767f2",
        "cursor": {
          "ref": "8af9ab43-b319-418a-8bda-69ea4c61a79c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "db94f152-a697-408a-b5ac-bf85db44a57c"
        },
        "item": {
          "id": "4ea3f7ea-3367-4c5a-a58d-1519946767f2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e46d2486-3eee-45e1-80e7-b19af2d90ffd",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e4826224-9e25-4e8d-a060-5471d5195887",
        "cursor": {
          "ref": "40061753-ad41-4e83-aaf8-54734228eb6e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "aa7548f2-5e6b-4819-b299-a48e77a23bd6"
        },
        "item": {
          "id": "e4826224-9e25-4e8d-a060-5471d5195887",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "422574cf-a97a-462e-b61c-9381b12aed2e",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "82240f7a-5b03-464f-b390-6af5a7c8a861",
        "cursor": {
          "ref": "121c0cea-fff0-4874-8d25-105100e8fef8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "62baabb5-7987-4796-b173-24f80edc416b"
        },
        "item": {
          "id": "82240f7a-5b03-464f-b390-6af5a7c8a861",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7636ad44-c86c-434b-84de-c75ad52d958a",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ac548ca4-bea0-4eb5-ae18-a38290a96dc3",
        "cursor": {
          "ref": "f91345df-996c-4311-960d-cf746d81d898",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a8df72d-fd29-4f9a-a806-9556141e01f0"
        },
        "item": {
          "id": "ac548ca4-bea0-4eb5-ae18-a38290a96dc3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7f6a819e-74b5-4ab1-958b-ba023e6d84ce",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e452fe83-9df2-4727-b1a0-42603ea9e74b",
        "cursor": {
          "ref": "8fa28a41-2658-47ce-852c-619c5dc17987",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "72412da1-24c1-493e-bb49-1bf0dee3e30e"
        },
        "item": {
          "id": "e452fe83-9df2-4727-b1a0-42603ea9e74b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5ee39395-e0da-423a-b3d3-2f5400c9274f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "12250f84-e39a-4f07-b40e-deb951a88715",
        "cursor": {
          "ref": "4deea783-6cf1-47b8-8f7e-5e4541a14ced",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6c131499-d72f-4ae1-a42a-7ca2d1222c13"
        },
        "item": {
          "id": "12250f84-e39a-4f07-b40e-deb951a88715",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "892bffb5-fd22-4c57-99a5-9e10a0b82611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae41c0cd-d159-4f60-ae1b-36eab123f5d7",
        "cursor": {
          "ref": "69f762b8-9398-4417-8bb0-38de268db1f0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9f33f725-900e-44ab-a2d3-1cdd7768251e"
        },
        "item": {
          "id": "ae41c0cd-d159-4f60-ae1b-36eab123f5d7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "94371ef3-5737-45ab-8624-a65b1776f939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55920903-ad0b-4e69-9126-ca07c02873e8",
        "cursor": {
          "ref": "23640bf7-76ca-4519-8665-d25318efadd5",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fd288416-fdbe-4422-b5a5-c914a402d7c1"
        },
        "item": {
          "id": "55920903-ad0b-4e69-9126-ca07c02873e8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "49b0b2c5-adf8-40cc-b906-e1a86bd3a45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f1424e-de9a-4a8d-b218-b38def919866",
        "cursor": {
          "ref": "8524ba45-1768-4ff1-8006-6a26799818ab",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "31eb9692-f64a-49f3-9923-bd128ac7c64b"
        },
        "item": {
          "id": "b3f1424e-de9a-4a8d-b218-b38def919866",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d34bb8ec-6a53-409a-88a4-eafdbeff10d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15770e33-8614-4096-8c3a-30f34b54a63b",
        "cursor": {
          "ref": "6b658965-22af-4c7e-a3e7-0fe5bcabbdf6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "eeeb523c-6e99-4165-afe8-d0888fe4253f"
        },
        "item": {
          "id": "15770e33-8614-4096-8c3a-30f34b54a63b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b96f54d0-08f6-484d-9d32-08fd8991d6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58010630-2c7f-4bff-a92e-ea07bacb7682",
        "cursor": {
          "ref": "d6c710e5-5ff9-4fad-94f0-89ca29b545c6",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "99fb20e2-e9b7-4322-801b-884bc270f793"
        },
        "item": {
          "id": "58010630-2c7f-4bff-a92e-ea07bacb7682",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0de3f7c2-e05a-4545-ace4-e7828f33099a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb53ca5-c470-4a3d-9518-d6dc0fc8314d",
        "cursor": {
          "ref": "cc97fd53-ea46-4bfe-bbd2-326735a80335",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eb2b4c45-d022-4ab0-a2b1-bcac1c7b58fa"
        },
        "item": {
          "id": "dbb53ca5-c470-4a3d-9518-d6dc0fc8314d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0cfe360d-ca6b-4582-bd4c-aa7e127a2409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e81066-f6f4-492f-a321-ea0134f1ec6d",
        "cursor": {
          "ref": "3e8ce222-975e-4e4e-aa5f-a27fc59b4ba4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2a8a4f45-4190-42bf-8e05-7a3fb0935684"
        },
        "item": {
          "id": "a7e81066-f6f4-492f-a321-ea0134f1ec6d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3d9762e1-b808-4e33-a5f6-e582fc126806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f015e2-9287-49f6-990f-03ad21e02805",
        "cursor": {
          "ref": "0f051789-f3c9-49b1-9eff-4f8014918096",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "09706f21-549b-490c-8af3-68bb1a103f0d"
        },
        "item": {
          "id": "79f015e2-9287-49f6-990f-03ad21e02805",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1d063959-fa01-43c4-a3cf-b911e2c3aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4991f682-6c49-427c-8039-9e6a6c059907",
        "cursor": {
          "ref": "3fd6eadf-6aee-436f-a79d-39835e89c02b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f736c516-7ded-413a-aa64-0f57fdde572a"
        },
        "item": {
          "id": "4991f682-6c49-427c-8039-9e6a6c059907",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cbbb109f-8587-4508-9ad3-72e0e4002657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0393c265-e2bc-4f1c-9b43-bb740085e8ff",
        "cursor": {
          "ref": "f45b8cbb-00e4-4d79-a30c-686a6c6d5bfb",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eb1dbade-18c8-4b04-9d9b-89d0bdc7d433"
        },
        "item": {
          "id": "0393c265-e2bc-4f1c-9b43-bb740085e8ff",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "08e0c3e5-3cbb-4551-b185-b30b940795ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9c5a74-579b-4b39-8dc6-652fc136c4be",
        "cursor": {
          "ref": "56e951f7-995c-4108-9f88-fb9e082c6a75",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5d710329-5394-46d4-9317-a35f74ce1ff7"
        },
        "item": {
          "id": "2d9c5a74-579b-4b39-8dc6-652fc136c4be",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "69af6ae4-36a5-4b05-b384-b61cd02cf3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b53eac-f707-46a8-adb2-17b9a02554d6",
        "cursor": {
          "ref": "f44a2e75-1e4f-4950-9326-7795cf5daf98",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f8f8ecc7-4f99-4111-89f7-aef202995996"
        },
        "item": {
          "id": "f3b53eac-f707-46a8-adb2-17b9a02554d6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "19a7f344-ba67-4807-841e-5ef60a4bc72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6342166-a0b4-4f31-892c-cff170df7b07",
        "cursor": {
          "ref": "0d8da6d1-e050-4715-bb60-afce6fad6bd5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e08ddd78-288a-4e8b-9ba9-a9bba92afc3a"
        },
        "item": {
          "id": "f6342166-a0b4-4f31-892c-cff170df7b07",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "012b0109-0283-444f-ad5d-6ff289336afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cbca42-e845-4bee-aaa3-211ad5a38538",
        "cursor": {
          "ref": "495f71f5-bab6-46a5-b55e-9c541d9407f2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad71e84e-62f1-4e29-9a4d-3a204fa9713a"
        },
        "item": {
          "id": "a7cbca42-e845-4bee-aaa3-211ad5a38538",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "20097d68-2855-468e-8347-4712e484640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db64ccf-8987-4d75-9fc4-d7ce948e4b41",
        "cursor": {
          "ref": "02b2858f-451b-462c-b9e4-6a88d0cc6120",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6864cb22-113f-4282-bcb9-f9bf3c55c08f"
        },
        "item": {
          "id": "1db64ccf-8987-4d75-9fc4-d7ce948e4b41",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "149945f8-c74f-45ea-b02a-1bec8a13f3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd76523a-ca63-45ef-868d-17e440e39bfd",
        "cursor": {
          "ref": "8bbfabf1-4047-46cf-9417-c56372d9b4b4",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c54b6283-bfea-42e2-89da-9259c7110459"
        },
        "item": {
          "id": "dd76523a-ca63-45ef-868d-17e440e39bfd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d52d2f77-250f-42af-a496-873df62e87d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e39aa85-ead9-497e-b763-7ff28e9851d2",
        "cursor": {
          "ref": "392e724b-eb91-4452-aa20-1f27c9a95afd",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bd336005-b46a-44fb-8f9c-7e94b07d833c"
        },
        "item": {
          "id": "6e39aa85-ead9-497e-b763-7ff28e9851d2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b9833f10-df61-4700-97e9-0032ee0e12f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7305ff32-982c-4b07-9969-6ba2b98abe76",
        "cursor": {
          "ref": "dd4c1d8c-5b6a-440e-9876-cdb4fd8d0d87",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ec7924aa-b5d8-48fe-9e0d-d08c8334e378"
        },
        "item": {
          "id": "7305ff32-982c-4b07-9969-6ba2b98abe76",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fc514c1a-396e-4850-968b-6fe7451b06f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d47b69-831a-4f31-889f-5c3a4f629c01",
        "cursor": {
          "ref": "48b22ef9-7b84-4021-b251-ca1711e1bfc4",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "930ab961-7594-4e84-8ee7-bed5cbeb2067"
        },
        "item": {
          "id": "f4d47b69-831a-4f31-889f-5c3a4f629c01",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9480cadf-60e5-40f4-80ec-e4f601d85fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba786eb6-8164-47d9-a62a-c0ff0007d7a8",
        "cursor": {
          "ref": "9176eaa0-dc53-42d7-8905-176a399b8d82",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f59542a7-c057-4ecc-a580-80189e5b7dfc"
        },
        "item": {
          "id": "ba786eb6-8164-47d9-a62a-c0ff0007d7a8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4a7ba4a1-eddf-4573-88d5-77619c26c3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4d4b48-74c2-45d2-9abf-f37a0c594f62",
        "cursor": {
          "ref": "6d9c45c8-c717-4caf-bda8-ac016149045e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3f4b9b43-f700-4a99-b9c9-5f87173c7b01"
        },
        "item": {
          "id": "af4d4b48-74c2-45d2-9abf-f37a0c594f62",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2f564291-ae47-43f2-9e11-8dbb7686317a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95121f74-23b6-483a-8df7-a7d472b8c679",
        "cursor": {
          "ref": "7d76b11f-9fa2-4c68-9a82-41ae1e95ac40",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "46c5b9d7-3d8b-45f7-8a6f-9e54b2e855f8"
        },
        "item": {
          "id": "95121f74-23b6-483a-8df7-a7d472b8c679",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "94454d8e-a8f6-4a36-a885-26eb51ec37c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0bb934-14a6-4559-b838-3b4fbe4a65ed",
        "cursor": {
          "ref": "95867cc5-b313-4cff-a920-0fd7013bd085",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6110b1f7-dab4-4f96-a092-4d54d9803717"
        },
        "item": {
          "id": "5f0bb934-14a6-4559-b838-3b4fbe4a65ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9d192c5d-8cb3-472e-88ab-25f221aab5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9752ae-e034-4d75-8f09-070c1ff2d654",
        "cursor": {
          "ref": "44d96194-1e40-4897-ac8a-7b6db0581e5a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4dbede9f-f073-4a34-bab2-7655a5f60470"
        },
        "item": {
          "id": "4c9752ae-e034-4d75-8f09-070c1ff2d654",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cdfd3267-f069-4fee-aeae-a39c3a07ffe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2f9db4-6d17-4441-a57a-039fcc2445eb",
        "cursor": {
          "ref": "3ba2ec0a-728b-4aa8-8efa-f3646c7f2b54",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "43bdd309-d3c7-44f1-8875-3c9e6372c2ad"
        },
        "item": {
          "id": "ae2f9db4-6d17-4441-a57a-039fcc2445eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bd927f81-d656-48d3-be09-870914607179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f8f3d3-d687-466e-bbc3-5545621f91b1",
        "cursor": {
          "ref": "e00c78be-7de9-47db-b145-a6c2b1b3758e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b0a16f59-2ba9-4bcd-a50d-db2e065f5ccd"
        },
        "item": {
          "id": "f2f8f3d3-d687-466e-bbc3-5545621f91b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4c39b563-a157-4da8-987c-5964d34f83cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf43ad0-e901-4d2f-96e4-cc205e81dc4e",
        "cursor": {
          "ref": "98a7a9f6-89d6-48c2-bc90-6350f1bfd477",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "67596606-2753-4115-b1cc-794d098dbb57"
        },
        "item": {
          "id": "2bf43ad0-e901-4d2f-96e4-cc205e81dc4e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3aa0205d-9a01-4c56-bf4c-145cdfe4f7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca695d61-e4ac-4361-bc65-9e0488e2429f",
        "cursor": {
          "ref": "41adaf3f-1980-462d-af8a-b633bc62413a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "55cb94a1-88d9-490a-a7d8-5e74691a0c23"
        },
        "item": {
          "id": "ca695d61-e4ac-4361-bc65-9e0488e2429f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "39671683-a24f-4bed-92aa-ca55daa4b8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a8c48a-8e0d-45aa-9f1b-b43b44961281",
        "cursor": {
          "ref": "e9e43b3b-f341-4e0a-9fd8-3ffdf003c80c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0511a1f7-8753-449f-b856-c038a7e21289"
        },
        "item": {
          "id": "d3a8c48a-8e0d-45aa-9f1b-b43b44961281",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7a1757db-b04a-42fa-a9f9-3948b247cb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f1d362-8388-4acc-9c5a-fa3cbdbec8d8",
        "cursor": {
          "ref": "30f966b7-b3d6-4ab7-b505-0a396423bf12",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c0970be6-01c0-4725-af77-3c00e6d100ba"
        },
        "item": {
          "id": "23f1d362-8388-4acc-9c5a-fa3cbdbec8d8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fc4529e8-892f-4dd3-b815-725f462e466e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a511838-8104-44ed-8762-6bea2062d7a6",
        "cursor": {
          "ref": "ef15361b-9421-4f3b-a8a4-7a0b7bf9d91e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d351bdad-6ee9-40c8-9e2e-b92601ab4795"
        },
        "item": {
          "id": "9a511838-8104-44ed-8762-6bea2062d7a6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ac0696a9-32f5-4bc4-a67d-e25871958189",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da127b50-4ca1-4e59-b754-f4a202678c80",
        "cursor": {
          "ref": "b1bc6620-807f-4431-905a-a31f01baabaa",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5cb3b1bf-f5d0-44c4-b5a6-164f2ea7e016"
        },
        "item": {
          "id": "da127b50-4ca1-4e59-b754-f4a202678c80",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d347bc55-cdc6-4338-a88b-1b8d89810f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e7b0e89e-37f8-44da-9e5b-eeff366205b2",
        "cursor": {
          "ref": "81f4a565-812f-43f1-a707-f74cee95a3fd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "74e8f6cd-69ea-4a65-a64b-655dcafc57a2"
        },
        "item": {
          "id": "e7b0e89e-37f8-44da-9e5b-eeff366205b2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e68a8b35-5ca5-4fe5-9d89-ce7792b4c2c9",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed43afec-1cee-45bf-91e6-aabd70cb1808",
        "cursor": {
          "ref": "4de9ce19-a1b9-415b-8c25-619f2db7eb4c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aa427f1b-c5a6-4e36-9a32-55fa82f9ced3"
        },
        "item": {
          "id": "ed43afec-1cee-45bf-91e6-aabd70cb1808",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c21d59e9-714a-4e0c-8f24-d0aec869317d",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cae6b1-e8f6-431d-9188-0248ea6e2b4e",
        "cursor": {
          "ref": "5ca643b4-2dd4-42ec-baf2-58f98978d8c6",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "20b93d2a-08f5-4497-8813-96ac648631a4"
        },
        "item": {
          "id": "98cae6b1-e8f6-431d-9188-0248ea6e2b4e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fae97616-594f-4d00-bf4c-88429915488c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0696a1e8-9bea-4987-b4b4-e1606ec95afd",
        "cursor": {
          "ref": "ab6fe213-b0f8-4a68-bc95-a3df2876a58a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a1599c1d-3c0f-4009-b57c-4fbd0a17d82d"
        },
        "item": {
          "id": "0696a1e8-9bea-4987-b4b4-e1606ec95afd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "38038875-5d93-48fe-b68b-c1d62a20a604",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73211dfd-b459-44b3-9775-3ffbcd227959",
        "cursor": {
          "ref": "493d40aa-13af-4583-a191-73f592206195",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bc9d340e-25fd-4b1e-b1f6-71dad6d96405"
        },
        "item": {
          "id": "73211dfd-b459-44b3-9775-3ffbcd227959",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "57a76b7a-f1b2-4a74-8dcc-8f0a7394cba0",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-23T16:05:35.218Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-23T16:05:35.218Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7d9e9e66-4401-4144-9657-88e490b7f457",
        "cursor": {
          "ref": "1c9fad97-fcca-4e14-aa68-2605bfd647cc",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "04c1de83-22e5-42dc-b81e-daac16aa76a5"
        },
        "item": {
          "id": "7d9e9e66-4401-4144-9657-88e490b7f457",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e0a39e85-206f-4302-833f-6ad77c12a2f5",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee83b2a-8ceb-45ed-9b32-36bf4deb105a",
        "cursor": {
          "ref": "a727d8d6-92f6-4baa-8cf5-6ba9cae1da70",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "254e40c1-9c88-42ee-9ca3-7cd38a4a3d4c"
        },
        "item": {
          "id": "cee83b2a-8ceb-45ed-9b32-36bf4deb105a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "633461ea-5e85-4740-872b-84343d361b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e93c3a8-2797-49d6-a008-f4cab19380b4",
        "cursor": {
          "ref": "87401cd3-0068-46a7-a21d-575e01aafe7d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e83277da-42a4-4bb0-80b0-024f9f69e7c4"
        },
        "item": {
          "id": "4e93c3a8-2797-49d6-a008-f4cab19380b4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f82e041f-3d37-4fd2-9fb4-0a6fff3625c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467a56df-4b65-420e-a856-2c0a2a539510",
        "cursor": {
          "ref": "0019e859-e9ef-46a8-a03c-aa9da5d2b34f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0e7bbccd-775f-48c1-ab6b-d9225fc33f85"
        },
        "item": {
          "id": "467a56df-4b65-420e-a856-2c0a2a539510",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "868d7dcd-bd50-4124-9c1d-5ecd925ece27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0458ec1b-71ec-42ce-90ac-f9425c5857d1",
        "cursor": {
          "ref": "76f75f18-d344-4374-8271-adef94fe93f5",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "757930b7-aa6c-4f66-96e0-e775b54711a0"
        },
        "item": {
          "id": "0458ec1b-71ec-42ce-90ac-f9425c5857d1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "71f63a92-a275-4588-9818-f7018ce12be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed0dc13-8b1c-4830-a596-63c8cff37ffa",
        "cursor": {
          "ref": "628075ec-1bf7-4e17-8b01-363f27f3d2ec",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "98fdd88f-05c4-44ec-bc47-aa9de742f4d9"
        },
        "item": {
          "id": "0ed0dc13-8b1c-4830-a596-63c8cff37ffa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2a41600-7e55-48fb-afd7-a26c8b4982f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6252bd95-3203-4cfa-b763-51dda1aa3b20",
        "cursor": {
          "ref": "a9f897a1-c685-4279-b203-b3ad3f1a3842",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "980f9525-b5f4-434c-b088-a29421e84efd"
        },
        "item": {
          "id": "6252bd95-3203-4cfa-b763-51dda1aa3b20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3c43b55c-6b6c-449f-a2a5-a67584a5c87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016249ac-3080-41fc-9a25-1e28e769f018",
        "cursor": {
          "ref": "f113ccbb-5187-4c0e-92ce-78231f69597e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1cdaa1e3-bf8c-4820-9f18-ebb51e6d3df8"
        },
        "item": {
          "id": "016249ac-3080-41fc-9a25-1e28e769f018",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bc26a549-070d-4b67-ae7d-b9fc61438e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82977fa-f774-40c9-ad57-da27e37f9cba",
        "cursor": {
          "ref": "50264d3e-d4be-4f13-9169-fa4f9c74f0f8",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a258c2fd-7cf9-45e3-9db2-e1278374083c"
        },
        "item": {
          "id": "b82977fa-f774-40c9-ad57-da27e37f9cba",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16bc905c-2b2c-4b46-9d98-6b489ddac246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de4e855-39b9-48e5-bb31-c5c012123b2b",
        "cursor": {
          "ref": "78ddef0e-5eab-4026-a80b-43966c7f76c2",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d6d0db14-c9b1-4491-9b7a-4af517577f5d"
        },
        "item": {
          "id": "3de4e855-39b9-48e5-bb31-c5c012123b2b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "463859cd-0317-4951-b6a1-9d6a5c98e0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6ae48c-13ef-4d86-9a8f-d3c8a8f3aeb4",
        "cursor": {
          "ref": "669d1ae2-2eb6-45de-98f4-9a29b33909b4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "31761661-3a44-4557-a610-d715a14e1c7e"
        },
        "item": {
          "id": "ba6ae48c-13ef-4d86-9a8f-d3c8a8f3aeb4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ee4564fd-fc8e-4dea-a82e-6f442dee4b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9c04a6-3b68-4a76-a165-81ba9c4c197e",
        "cursor": {
          "ref": "e12341be-aa9b-4623-8f47-f7c035e1e734",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "00e68ba6-a05a-499c-8757-15a661d5b1c6"
        },
        "item": {
          "id": "dd9c04a6-3b68-4a76-a165-81ba9c4c197e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3038c8b8-c2b6-4d7d-b3cd-69f78498f3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fe52fb-6943-4ca5-8e58-493f818a6ddf",
        "cursor": {
          "ref": "095bebfe-036d-455e-b7be-d4d74b488146",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "62563517-1793-4d43-a080-7637b25d65c0"
        },
        "item": {
          "id": "26fe52fb-6943-4ca5-8e58-493f818a6ddf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "93d726ad-5890-4f81-a9a0-02d40387e69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4710ce06-2071-41db-a213-1606d7df7e5c",
        "cursor": {
          "ref": "a8a5cd6e-08c2-41c5-b2a2-94273be6d899",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "705bb90b-9916-4f97-ab6b-3c1ee1f2d9b9"
        },
        "item": {
          "id": "4710ce06-2071-41db-a213-1606d7df7e5c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2bd509c2-3686-4465-86ec-bb23dc4425f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abe1d26-0fff-4726-ba58-dc4ce6d762e1",
        "cursor": {
          "ref": "b4a4ddbe-4388-4462-9711-01af70897273",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "35a0f394-b73c-4e91-9b6d-556dcc96f0a1"
        },
        "item": {
          "id": "7abe1d26-0fff-4726-ba58-dc4ce6d762e1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dfea07eb-d363-4d32-88d5-74dd991cd9cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 178,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e62b3f41-47d5-4a24-b10f-aa9c5eca4ef0",
        "cursor": {
          "ref": "93587e68-c6ff-40fb-86a8-bce974433274",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6cb58695-6641-40ff-bf67-e5acc2c66795"
        },
        "item": {
          "id": "e62b3f41-47d5-4a24-b10f-aa9c5eca4ef0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "de6ce846-a6c7-4e7f-8949-5dd1bbe5bca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42316946-a475-42c4-8da5-3187e83d5f82",
        "cursor": {
          "ref": "c3b64f8a-bf70-4b46-b5d6-c52d7ce1fabb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e6d02c07-2616-4ef7-ae49-5bd6868d5337"
        },
        "item": {
          "id": "42316946-a475-42c4-8da5-3187e83d5f82",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1a62fe26-5a0a-45d1-8e2d-c6c7d22132d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0396e3bd-bb25-4da3-9d00-38ce7135a62f",
        "cursor": {
          "ref": "4353432f-624b-4fee-bd3e-f5ffbe06e9e7",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4e0a2c2c-c7b6-4f49-9b19-5ce4cc49187b"
        },
        "item": {
          "id": "0396e3bd-bb25-4da3-9d00-38ce7135a62f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a749cc2d-a46d-463c-9386-3b427b0789b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea90d786-89d9-4bbc-b0bd-87991a4fb080",
        "cursor": {
          "ref": "cfbe095e-f3b9-4024-b4dd-42fd1c97409c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "41092fed-e7b6-47d7-94ac-f9a41d66e77f"
        },
        "item": {
          "id": "ea90d786-89d9-4bbc-b0bd-87991a4fb080",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8e25b09e-be32-42f4-8b2a-bfade95b45b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd16867-5175-428d-8cb6-593b959289ae",
        "cursor": {
          "ref": "3138de57-f9a8-4757-95e6-687fb2dd62c7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "06ba22a2-fde4-411d-b651-aa624dde918c"
        },
        "item": {
          "id": "9bd16867-5175-428d-8cb6-593b959289ae",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ef590852-f505-48b2-837a-9a2d76e3e8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554044d3-56d0-4e57-8f3d-b03625ef85ca",
        "cursor": {
          "ref": "2a8fd105-ba74-4e46-90da-aa9f1b2dba20",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ceda5523-0f7b-459e-bd14-0fc337d01d0f"
        },
        "item": {
          "id": "554044d3-56d0-4e57-8f3d-b03625ef85ca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "274658a1-2985-498f-8ac9-289b2fa7bbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d54642d-ea9a-4d91-b4c0-43d8db15dd21",
        "cursor": {
          "ref": "ff293add-decd-47ab-8568-a828eb546d7c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "174cb73e-9718-428f-9453-71e1a3b13074"
        },
        "item": {
          "id": "1d54642d-ea9a-4d91-b4c0-43d8db15dd21",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1d41ea87-a6ce-4440-8d52-e365381d1f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9552d5b9-4960-4237-98b5-5964fe9f5142",
        "cursor": {
          "ref": "751e52a0-2413-4d64-a63d-c313031bfd09",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e6c43b8c-f977-4b12-ad26-8649b82fbb41"
        },
        "item": {
          "id": "9552d5b9-4960-4237-98b5-5964fe9f5142",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4ca59a65-4a0f-425f-aced-976a0cacff26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5676c18-8a2a-4df9-ab13-4c0b9735d792",
        "cursor": {
          "ref": "b8abdfd4-d2e8-4001-9d71-c84e8ea057e6",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8e097ff8-e601-4b28-833e-0f6950563372"
        },
        "item": {
          "id": "d5676c18-8a2a-4df9-ab13-4c0b9735d792",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "487ede18-b601-4c66-80d5-6aec47ba68cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739b583f-f2eb-4652-8068-12c4917927ce",
        "cursor": {
          "ref": "26ea4c62-d711-4c82-a4ac-f7c842e9ff6c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea742856-8c40-4f7b-aaf5-cbf303f47976"
        },
        "item": {
          "id": "739b583f-f2eb-4652-8068-12c4917927ce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8ea4fb2a-ecbe-45ca-8882-775a4b69746c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419f2e6e-2300-48cb-bfd0-0df3f7d1a3a2",
        "cursor": {
          "ref": "fc24fb04-7d61-4bc0-a720-c93c33badcbc",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c097f846-cfaa-417b-9995-65da8afb5bba"
        },
        "item": {
          "id": "419f2e6e-2300-48cb-bfd0-0df3f7d1a3a2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1e026bdb-a8c1-42b6-a970-856b7ae5cf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b51af8-7d79-4dab-a2a0-c787ce09f906",
        "cursor": {
          "ref": "76e7af31-7098-46bd-bca0-0f7571404256",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cfce6174-46da-4b33-8e62-c829b32d29ec"
        },
        "item": {
          "id": "95b51af8-7d79-4dab-a2a0-c787ce09f906",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a8b3b33d-5a00-4e33-ad65-e1c6e12cb438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c827fe0-ff4e-48c5-93f7-d0f7cd714e67",
        "cursor": {
          "ref": "6a57a9d6-af75-48a9-a74b-8a7698e43b3a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d58a5761-c4c9-4928-8eeb-89e8d89cbc57"
        },
        "item": {
          "id": "5c827fe0-ff4e-48c5-93f7-d0f7cd714e67",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fcc4513f-ba18-400a-8d68-7bfc0771dd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75c361d-0678-46db-b603-3f33e1bc0fc6",
        "cursor": {
          "ref": "ced38df3-1f2f-4369-bb16-4001c1f808cd",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "60e8f726-324a-4092-ba14-e8c1379a4439"
        },
        "item": {
          "id": "f75c361d-0678-46db-b603-3f33e1bc0fc6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28714248-2945-4bfe-a1bf-854e345247c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac32cf6e-b6c0-447e-b0fd-41006fe57c7d",
        "cursor": {
          "ref": "e160ecd6-0ea4-46c5-95a0-e260d9ba421a",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "264ffa67-8b5f-4817-a50c-6489fd9a76f8"
        },
        "item": {
          "id": "ac32cf6e-b6c0-447e-b0fd-41006fe57c7d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6190972e-71fc-45fc-ad65-f51cb7e2b7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edaff31-fab5-4172-902d-45e9f20397de",
        "cursor": {
          "ref": "f8c3819c-43c8-4661-b2bb-98a1931377ea",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aa7bc84f-a32d-4bfd-b210-c6a7359b6e5d"
        },
        "item": {
          "id": "2edaff31-fab5-4172-902d-45e9f20397de",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "37ab33e0-8c30-4ce5-95d6-cf7b2c721bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232fd9ce-4a88-4b2d-8739-75380d5fe937",
        "cursor": {
          "ref": "c2556e17-33dc-447e-9a79-8a6c885b3407",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "138ba628-d285-44c9-a8ca-0a254ee12aad"
        },
        "item": {
          "id": "232fd9ce-4a88-4b2d-8739-75380d5fe937",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8da80845-386a-4237-abc9-a2f130117b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729624c2-fcb4-4dde-90f3-3fa5ab4f0372",
        "cursor": {
          "ref": "76eac2d8-384d-4e9b-80e2-0ae1743f8bde",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1ad81fd4-ee7f-432e-90b1-0acc6ee624e2"
        },
        "item": {
          "id": "729624c2-fcb4-4dde-90f3-3fa5ab4f0372",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d7faa180-0ca6-4209-a623-af4cef08b327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0aa897-1e7c-436f-8ad0-83bd4d94eb41",
        "cursor": {
          "ref": "7f0ca2f3-6b1a-4330-94cb-52a7c5e4c023",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ebbd2ead-ba49-4e3e-88d6-b3427e6a1dc4"
        },
        "item": {
          "id": "7c0aa897-1e7c-436f-8ad0-83bd4d94eb41",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "265fdaff-49ac-4f23-a5cc-b43c66497fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18c7eb5-4f1e-46ef-88ee-06cbb19b2e15",
        "cursor": {
          "ref": "32462660-228b-4296-b26c-8d5952da7dc9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f3952d68-ae31-4828-846d-aa845020dcad"
        },
        "item": {
          "id": "c18c7eb5-4f1e-46ef-88ee-06cbb19b2e15",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f750534e-eee0-467b-9ad9-3b94d877c59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c9d4d4-24b9-45eb-8e66-40ee1697b1cf",
        "cursor": {
          "ref": "b91bed83-f74e-4ec9-9ee5-9f8c949cd21d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "745da87d-3e8c-4cb1-9861-36c1991e08d6"
        },
        "item": {
          "id": "27c9d4d4-24b9-45eb-8e66-40ee1697b1cf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f412130d-35fb-4ee1-b9f9-e27728bf8f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facb5cae-e9f8-4e87-9f21-650f8dad6dd6",
        "cursor": {
          "ref": "4fb42cfe-d1e3-4515-ad6c-264641a6feaa",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5ed92171-c4ce-408f-b418-9ba065a14882"
        },
        "item": {
          "id": "facb5cae-e9f8-4e87-9f21-650f8dad6dd6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "48700aa7-4880-482e-bad7-bac19a057ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3b4921-828b-4484-accc-0c6195dee724",
        "cursor": {
          "ref": "a66ec0eb-89b5-4a26-a8f3-bd7371738087",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c06b0b32-74ff-4a63-b76e-86ca277f12bd"
        },
        "item": {
          "id": "fe3b4921-828b-4484-accc-0c6195dee724",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9e1504c4-1fad-4df7-b94f-1f11e070f1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86202d15-33a3-4374-a1eb-ebcb262d896e",
        "cursor": {
          "ref": "621285d4-0cd5-4fe4-b0a2-cbee5d625303",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12c8cba0-577f-4cd0-830e-2c6d9a8f38af"
        },
        "item": {
          "id": "86202d15-33a3-4374-a1eb-ebcb262d896e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c3f66fd6-1ac1-4c63-aa69-407ee79cbf1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1076be2-112f-4a50-918d-c26cda08ce27",
        "cursor": {
          "ref": "260dc447-1893-459f-8a43-110fba2de035",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f8725410-effb-4cdb-b9a1-935d10a94017"
        },
        "item": {
          "id": "f1076be2-112f-4a50-918d-c26cda08ce27",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6d97611e-098c-4995-8e88-943c5ed14dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351aa6e0-1330-45b8-89de-88076550bd6d",
        "cursor": {
          "ref": "1f19d8af-3668-48c0-93fe-3525f19d2b33",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "05c7471b-bee3-4ebd-b5bf-4d8baa64e987"
        },
        "item": {
          "id": "351aa6e0-1330-45b8-89de-88076550bd6d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7967023b-5bf6-47c0-a3bf-1b941353a0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548c0aa3-e112-4dc4-8672-8d71d196a70e",
        "cursor": {
          "ref": "438a42e9-116e-4984-a580-055363652762",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e6ef6125-92b5-43c8-9682-c2d66b6fbd5d"
        },
        "item": {
          "id": "548c0aa3-e112-4dc4-8672-8d71d196a70e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "25047e38-b8a1-40f3-9139-8154db47b988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ae0dff-7194-4763-926b-61d95e85cbf1",
        "cursor": {
          "ref": "e5efb72e-f9ef-466c-a159-3e9de903d71b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a3084e08-8d1b-4d44-abb3-62d153bccd67"
        },
        "item": {
          "id": "f3ae0dff-7194-4763-926b-61d95e85cbf1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "13cefe81-b8fe-4a74-8514-3ab7d664432c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32aac49a-dfda-4856-b604-6d4aebf2026b",
        "cursor": {
          "ref": "9b507fce-700d-492f-8526-fd65e62c20b4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0a3033b7-2d8a-4601-a795-41343d4f0737"
        },
        "item": {
          "id": "32aac49a-dfda-4856-b604-6d4aebf2026b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0c3eb65f-9b31-473b-8d2a-f10315f61e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0c779c-e06d-49b9-9d1e-bde9c3fce3f5",
        "cursor": {
          "ref": "9992c740-4921-4273-8c7c-ed9b3dee6a5a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8f324516-0ff6-499f-8f81-6b3f8573c7b3"
        },
        "item": {
          "id": "0d0c779c-e06d-49b9-9d1e-bde9c3fce3f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f286a2f0-21c8-41e6-8d9c-d9368eec52d6",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "3afc52aa-ed6d-46b9-a419-c55d3826226e",
        "cursor": {
          "ref": "a4d7d0fc-8ceb-4b85-adaa-82b137d344f8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b2ce59d4-0c58-420c-93a7-cb338cc414df"
        },
        "item": {
          "id": "3afc52aa-ed6d-46b9-a419-c55d3826226e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "59a1caaa-db47-4839-a400-d00c4af1c5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930f3316-a374-44be-a4c2-140e82ca8a60",
        "cursor": {
          "ref": "2920f362-d334-44d9-91a4-562ed38380ee",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "75fa6f60-cf37-4921-9615-573cf902f34c"
        },
        "item": {
          "id": "930f3316-a374-44be-a4c2-140e82ca8a60",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "91e588c4-0e9b-43f3-8030-f7aa8f27d920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7422003-8cbb-49fc-8aab-23cb3c151fee",
        "cursor": {
          "ref": "86623a6d-1857-4bdc-98fe-d647d12f9b56",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9d6cd8cc-9e3a-4715-937d-60c29eb8e059"
        },
        "item": {
          "id": "c7422003-8cbb-49fc-8aab-23cb3c151fee",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "61d06285-1202-4fb0-b9de-c54899298744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6706c4ac-516b-43a5-b847-f388268badfc",
        "cursor": {
          "ref": "36013545-6760-47a6-b85b-9d268271104b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "74c03ed5-daa4-456a-866d-9f95814c8de3"
        },
        "item": {
          "id": "6706c4ac-516b-43a5-b847-f388268badfc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "49f45276-81d9-4559-9fac-5516632169ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c819562-346d-411a-b1fd-74ba5dff3bc4",
        "cursor": {
          "ref": "22f77bb0-a99d-43d0-8aa4-eb2421427c1f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1a983eb4-614c-4814-ab00-1307d6e4c74c"
        },
        "item": {
          "id": "6c819562-346d-411a-b1fd-74ba5dff3bc4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "18ef9899-4473-43eb-90a2-342cd7876e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ca3e3b-25cd-4734-8218-838999df6ff4",
        "cursor": {
          "ref": "6c339cd2-23d5-47b4-8033-3e1c190086c7",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cab5a1ff-6c90-4aae-8cd9-60536d96f1ed"
        },
        "item": {
          "id": "72ca3e3b-25cd-4734-8218-838999df6ff4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8ad316df-117f-4223-93dc-2e634d9fc4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1345d01-945c-4593-b84c-82431edbfbfa",
        "cursor": {
          "ref": "5d06d7aa-a259-461f-96ae-7e8be0b0ad1f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0ff49d07-6a7b-486d-a661-5889526cb8d2"
        },
        "item": {
          "id": "a1345d01-945c-4593-b84c-82431edbfbfa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e14140ec-5b30-4bfe-883e-ee01833acc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a98313-c147-4254-af32-cfa0812832b4",
        "cursor": {
          "ref": "7858e756-c7b5-4c5c-ae91-129e3abf8327",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4e25c3a2-b2e3-4c50-8178-4d3df0f7871d"
        },
        "item": {
          "id": "32a98313-c147-4254-af32-cfa0812832b4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2e894a2f-efcd-4bd6-b296-f70ce8b89540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1d9c90-7612-47ca-9151-caa7667850c1",
        "cursor": {
          "ref": "28334341-f274-4fa9-a1fc-3a8c76d1b037",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f0324ef-5110-401b-a5ac-c58a5a3626c1"
        },
        "item": {
          "id": "bf1d9c90-7612-47ca-9151-caa7667850c1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fbed5ebc-d239-4b01-99bc-0b629ef41664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6300dc8-fa7c-4321-a804-5f0ce5ff48e9",
        "cursor": {
          "ref": "34d497dd-0569-4208-bcd7-5640ebae1bab",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "102ede07-c3b7-4572-a7c2-3cd3430142b9"
        },
        "item": {
          "id": "e6300dc8-fa7c-4321-a804-5f0ce5ff48e9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dabd0967-d055-477e-b3bc-b8f9c5cdcb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4890a2c-0a8b-4944-9810-9895ee740dcc",
        "cursor": {
          "ref": "f98ac3e2-21f3-4d60-bbe6-36e02ea41963",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e52a5b55-dfae-40a9-a6af-c4d55cf29348"
        },
        "item": {
          "id": "b4890a2c-0a8b-4944-9810-9895ee740dcc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b3002284-2322-45a5-96ca-1aadb38da0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359a4312-2881-4660-b63f-1f8d4200ecc8",
        "cursor": {
          "ref": "96e747fa-59f7-4f76-b7d4-9f3bc2419286",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f38701b4-9ed4-49aa-b3a1-c02922d5b6a8"
        },
        "item": {
          "id": "359a4312-2881-4660-b63f-1f8d4200ecc8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "346ca15a-3c80-40e9-9ef9-6b9b2730b1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bf7c81-9368-473e-9166-1b728cbe496c",
        "cursor": {
          "ref": "d481734d-c432-4ead-964a-f57b53f9faff",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8d205e1f-cb34-43f0-8743-3e3496aef940"
        },
        "item": {
          "id": "04bf7c81-9368-473e-9166-1b728cbe496c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ad91572b-97c8-478b-9069-d8d3abcde7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8daf75-16f8-475e-91ec-d7d598df77f2",
        "cursor": {
          "ref": "697b27c3-074f-4b23-962e-9d9d2b29ffdc",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9e42c4ee-ac6e-4696-81ab-f7cfa090c12e"
        },
        "item": {
          "id": "ad8daf75-16f8-475e-91ec-d7d598df77f2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6b42d27b-d475-4b57-99ad-9543cb366a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eeb6fc9-1b91-447f-9945-c62f35b3935e",
        "cursor": {
          "ref": "c4b8d3f2-2e82-472c-baec-cf88a12f37e4",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cee833a0-c691-46ed-90f7-7db931f4cb90"
        },
        "item": {
          "id": "2eeb6fc9-1b91-447f-9945-c62f35b3935e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8d616654-d6d0-411e-b4d7-5180cf939986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272ba8b3-4a3f-4993-8980-1f9b7f3f57a4",
        "cursor": {
          "ref": "4040d475-85ad-4ec3-95a2-40d6aebd5dec",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bd073b39-846a-4aad-b20e-eb1a4746ca57"
        },
        "item": {
          "id": "272ba8b3-4a3f-4993-8980-1f9b7f3f57a4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f359ba4b-7649-494c-b5b5-aad89533f75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3712261d-9562-4710-b4c7-b21b3dc26512",
        "cursor": {
          "ref": "74e9907e-a643-427e-83ec-b8434fffd0d4",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bc25136c-5e74-4afa-b738-85e73ab43fe9"
        },
        "item": {
          "id": "3712261d-9562-4710-b4c7-b21b3dc26512",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "344ccdbf-47c2-4078-835e-93371547357c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdd3c63-9317-4b3a-b21f-b07701828602",
        "cursor": {
          "ref": "54a8f6a2-a22c-47ca-a79e-99a19931c487",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0fc7ecc0-ca2e-451d-92a8-8da75920819c"
        },
        "item": {
          "id": "ccdd3c63-9317-4b3a-b21f-b07701828602",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "323972ab-4e48-4ef5-9a9b-21d529c85920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e77c599-167b-41f1-89f4-691deb856ebe",
        "cursor": {
          "ref": "779cbc00-1ed8-485a-b085-46aab825efa0",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c8527300-699c-46df-b4a7-47943f55b859"
        },
        "item": {
          "id": "1e77c599-167b-41f1-89f4-691deb856ebe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fc117f50-9722-4bde-a874-8081acd733a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6858449-b2e8-455b-a6a3-8de925b887e8",
        "cursor": {
          "ref": "2b3f0b7a-2761-4650-ad09-992e62340dd4",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "06783bee-449a-48ba-8096-13a274273d39"
        },
        "item": {
          "id": "c6858449-b2e8-455b-a6a3-8de925b887e8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f2e6169b-30c1-4306-8fce-8be02c29685a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e4c035-f643-4d5c-99e3-edf96e61d6b8",
        "cursor": {
          "ref": "98d90c56-b4cb-4f0e-b1fc-a288892d7f85",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c514db50-2a07-4cec-bd9d-f522dc6f6719"
        },
        "item": {
          "id": "29e4c035-f643-4d5c-99e3-edf96e61d6b8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "be7a4e4b-7aba-4d02-87e4-639d654bfd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c00ef1-e712-4e3f-84e9-253af4fa0800",
        "cursor": {
          "ref": "b655114c-a38d-4d64-9a80-df40c85655fc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7a317dbf-7477-4488-9de4-8a4c33fc977b"
        },
        "item": {
          "id": "40c00ef1-e712-4e3f-84e9-253af4fa0800",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "862ca45c-452f-4988-9d79-850b05274ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576d0175-4b88-4ff4-b044-412148a380ac",
        "cursor": {
          "ref": "6d15d0f9-ab18-4057-9d50-99388511945e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "80975f91-84db-4d5e-b717-19fb6b807eb5"
        },
        "item": {
          "id": "576d0175-4b88-4ff4-b044-412148a380ac",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ae0cc65d-32fb-47af-b93d-2ad331778867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fadedcb-e994-4af2-a13e-378bfaa6e58a",
        "cursor": {
          "ref": "6fd40d43-c01a-4b3e-a522-c91abe006eaf",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5e072528-d10c-49f7-b258-e2aaa1669c26"
        },
        "item": {
          "id": "8fadedcb-e994-4af2-a13e-378bfaa6e58a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1108017b-e182-4fed-9b2d-aaaf1b825362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3590972-a02c-44cd-9664-8ea2cb03e800",
        "cursor": {
          "ref": "48f72e9c-2493-4933-b160-0d38c01ade6e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6721ac01-fa08-4e60-af41-0074b4b648c5"
        },
        "item": {
          "id": "b3590972-a02c-44cd-9664-8ea2cb03e800",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3c01800c-733e-4042-87f2-070cdff12fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dd6a27-3c7c-4480-aa0a-9a366d4f2853",
        "cursor": {
          "ref": "586598dc-c42e-472a-acdc-a6920316004e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fbea9a83-a4b5-471b-b0e2-46ebf9f3c587"
        },
        "item": {
          "id": "b5dd6a27-3c7c-4480-aa0a-9a366d4f2853",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "428af976-ded4-4214-9788-800077579e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a3db6a-2679-4fd9-87a6-4e79b754d4ab",
        "cursor": {
          "ref": "36be0af4-f53f-44b4-b5aa-50c6747204fa",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9a1c784d-d57e-4de2-972b-afee34e7f803"
        },
        "item": {
          "id": "a6a3db6a-2679-4fd9-87a6-4e79b754d4ab",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3071c36d-1507-4064-a188-67b51b1064fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6f40cd-a846-4d62-9417-5b8571640aec",
        "cursor": {
          "ref": "48a656c2-c0b0-4e15-a5ca-383ea8385ed7",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d5bece8b-6850-48bd-978b-84868987a632"
        },
        "item": {
          "id": "ed6f40cd-a846-4d62-9417-5b8571640aec",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0c0e6bfc-b103-4593-bebb-791942a2f449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376aecb5-bdbe-4074-affc-10abb5358d27",
        "cursor": {
          "ref": "32af7a43-bcbd-40d6-b63f-af85bb006ef4",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aad9f682-d0a3-4d10-9bd1-90173b57f006"
        },
        "item": {
          "id": "376aecb5-bdbe-4074-affc-10abb5358d27",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "52933de9-2f6b-4696-9b8c-476393f0b873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac267fe-a6d4-4a98-b740-d21290322d43",
        "cursor": {
          "ref": "ea06e850-d97e-4a28-ae69-23c3683756da",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ad2e2282-f0bf-46a5-88f6-6eca5dbc74a9"
        },
        "item": {
          "id": "2ac267fe-a6d4-4a98-b740-d21290322d43",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07b6e800-7d95-4a86-bb82-52cf7ee380bd",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5bb0bdcd-a438-4552-af47-eb22044d808c",
        "cursor": {
          "ref": "4583b87b-407e-4a1c-8e43-aa4ccb542d7a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dd2ab64d-5501-4d1f-83a2-8a3d1911886d"
        },
        "item": {
          "id": "5bb0bdcd-a438-4552-af47-eb22044d808c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0f917dff-e46e-49c5-af64-a2b13c242ba8",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3662d36a-8df0-46ba-bb3a-28e56720ef9c",
        "cursor": {
          "ref": "d31c42af-ba42-4367-af0a-c080d67a0d06",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d86a50de-9777-4017-95a5-36a5080803f3"
        },
        "item": {
          "id": "3662d36a-8df0-46ba-bb3a-28e56720ef9c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2be12ab9-b1c4-4e83-a757-9433941be0b5",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ecdeb400-8903-4aeb-b684-4fd0e4bd2bf7",
        "cursor": {
          "ref": "bbf3b066-2541-4dac-8a09-3df76d3dec50",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea06ecc5-7102-4536-998a-21542586722b"
        },
        "item": {
          "id": "ecdeb400-8903-4aeb-b684-4fd0e4bd2bf7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "498444bc-e557-4c17-804a-67d2ed4170c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e068dab1-3f9d-46df-89fa-f0a7375b5252",
        "cursor": {
          "ref": "6c5bb03a-4edf-4d9b-994b-80fd5e7da9e0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "baaa9c45-e474-491e-bd9d-007eaf8b4131"
        },
        "item": {
          "id": "e068dab1-3f9d-46df-89fa-f0a7375b5252",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c520482f-2042-4737-b0df-c3fcfdc521da",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "49e83a23-73a1-460d-a040-117729824c63",
        "cursor": {
          "ref": "78c622cd-eab7-4711-b758-91d87fcf193e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0b5a6d6d-bfc3-4e19-880d-ed9df6f2f265"
        },
        "item": {
          "id": "49e83a23-73a1-460d-a040-117729824c63",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1769f50f-272b-4c1c-8d31-ada0bc181878",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c7d952e7-56bc-4af9-88e5-45aa2e8dd0cf",
        "cursor": {
          "ref": "09e9e121-1765-4899-93dd-6f8abfae4b1c",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ca0ba45-f530-4657-9320-2f61d447506a"
        },
        "item": {
          "id": "c7d952e7-56bc-4af9-88e5-45aa2e8dd0cf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1692fbd5-0f7d-4354-a085-48dccf62a2c2",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9cbf7bc0-d411-4ea9-a254-5b89e6d9eaa7",
        "cursor": {
          "ref": "a05d852b-a263-40d3-8c10-c82c92620643",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "04278aca-8c30-4e70-924d-bfc84aa16345"
        },
        "item": {
          "id": "9cbf7bc0-d411-4ea9-a254-5b89e6d9eaa7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "63c339c3-8a90-454f-b090-8778bfcd64ea",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4ddc8eb4-8292-4419-94e3-26031ba31360",
        "cursor": {
          "ref": "ecd5cbb0-cd74-4816-9eb4-d634f1a8d5d2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0c7dd6c2-44e6-4085-99af-4b2e6c7b16f4"
        },
        "item": {
          "id": "4ddc8eb4-8292-4419-94e3-26031ba31360",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "22130ba1-61cc-4fcf-9d64-751e04396aa6",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1f34cc1e-7171-4bb4-af1b-69f7a4a18656",
        "cursor": {
          "ref": "aa7860e6-fdb0-4206-ae50-55ad1d72adc4",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d4cd5db7-ca5e-4aac-8f0a-0b100da6a536"
        },
        "item": {
          "id": "1f34cc1e-7171-4bb4-af1b-69f7a4a18656",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7c557a97-60f4-4746-8baf-136b4112b35e",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c4351b48-828d-4479-b692-e53ea9ab6ea7",
        "cursor": {
          "ref": "338a8be4-8a78-4bdd-9ff2-69435caf9c8b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ae452612-aef3-438c-a821-8e08283fe6eb"
        },
        "item": {
          "id": "c4351b48-828d-4479-b692-e53ea9ab6ea7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "be635a9c-6817-41be-bcd5-ec71be39c670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9828283-9290-4e3e-94c0-9e390aab12f6",
        "cursor": {
          "ref": "50b55d01-5aa7-469a-82a8-5e71d4c3406c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2645ff1f-57f6-4957-949a-9f08271aa6c9"
        },
        "item": {
          "id": "b9828283-9290-4e3e-94c0-9e390aab12f6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a83a7c75-a536-4639-8cb3-16e2fd484858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17d1d4b-f590-42d2-af0a-491a80083600",
        "cursor": {
          "ref": "83f5ddad-ec98-4d93-a7f9-fb8531ee1494",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ca038364-3bb9-4ec3-aea4-38e7099320dc"
        },
        "item": {
          "id": "a17d1d4b-f590-42d2-af0a-491a80083600",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5ceb4222-4cf1-4f31-a44d-570cddfe73d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f477be5-0d87-4c5d-97ad-6d79cad82ee4",
        "cursor": {
          "ref": "3327bdc7-38aa-4bf4-9e5b-d6da880455fb",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3a9521cd-0098-4311-b316-7e4096d0aadd"
        },
        "item": {
          "id": "4f477be5-0d87-4c5d-97ad-6d79cad82ee4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "700ca942-98f7-439e-b610-3d36d03fe0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b23fac1-66e2-4778-9890-3e4dee385f57",
        "cursor": {
          "ref": "9d9f9d85-245a-4149-8cdc-374a09e668a3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "46c9d260-1e44-4e93-b732-1d4634860060"
        },
        "item": {
          "id": "8b23fac1-66e2-4778-9890-3e4dee385f57",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "afa1ab12-2d23-46f3-9181-79668122d3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a4a5cb-4c90-4763-98a1-de3be065edf5",
        "cursor": {
          "ref": "e72c3b45-baaa-4832-ba95-0baffbcf1b2f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "726b93b2-dd35-4a67-9a40-99e34f2c5841"
        },
        "item": {
          "id": "43a4a5cb-4c90-4763-98a1-de3be065edf5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0374205f-b2d9-4a8a-a20d-558ae39690bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f83ea50-4e48-4b92-a1a8-4941460b23ce",
        "cursor": {
          "ref": "36d8e80c-8a6a-4a40-a248-bd287df77528",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b0214937-e320-4eba-9854-ffc117a5a07c"
        },
        "item": {
          "id": "4f83ea50-4e48-4b92-a1a8-4941460b23ce",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "50c2b686-c1d0-432e-b1fa-50c3da5fbeb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92399138-6cad-450d-b5eb-ea40f1eca205",
        "cursor": {
          "ref": "07c6eb8f-317e-476d-bd1b-adc0b80c20ce",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2252cb1f-7456-4c49-96d4-45b237d25dec"
        },
        "item": {
          "id": "92399138-6cad-450d-b5eb-ea40f1eca205",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "06fa71a9-5891-4d78-80c5-790f82fec96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf17292-bcb3-4888-a30c-3281e8cef605",
        "cursor": {
          "ref": "419901fe-15cd-4899-9748-6d6254cb4ee0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5c0fa478-91e6-4ec4-a484-af7f3acb205f"
        },
        "item": {
          "id": "0bf17292-bcb3-4888-a30c-3281e8cef605",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "268ec024-302d-45cd-80ab-b7f69d6ddc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88052684-339f-4878-9d64-fad51d434331",
        "cursor": {
          "ref": "ea03e9ba-438c-4f54-928f-bc0aa0976654",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "22eadf35-9902-4094-90d3-5642e0ac40b1"
        },
        "item": {
          "id": "88052684-339f-4878-9d64-fad51d434331",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0fd0cccd-4af2-44c0-8e98-c82fa562cee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd64e3c-8218-41a0-98c9-57030ff193f7",
        "cursor": {
          "ref": "c341a91e-3ba7-4ef0-bfc5-7458a2c0f910",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5b66b891-117c-47c8-b93c-34e59c06edbc"
        },
        "item": {
          "id": "abd64e3c-8218-41a0-98c9-57030ff193f7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e7120e1c-f7be-4ac2-922c-f4f668b13625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c13339-d2d6-4ee3-ae62-613570dfac85",
        "cursor": {
          "ref": "04af1ee9-f5ec-4e78-b7ae-1971c04377ea",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5905c8d-889d-45fc-8cfe-b9d0a8d2a78b"
        },
        "item": {
          "id": "c3c13339-d2d6-4ee3-ae62-613570dfac85",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e1a1b742-e7db-4f78-85b0-204d97410ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb54f64-c01d-4c60-98de-43565c6d3e25",
        "cursor": {
          "ref": "4a6b4623-81fe-4821-99a7-e1dfdeb29d77",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "14be7018-589d-4c2b-adb8-d658ae47e1c7"
        },
        "item": {
          "id": "abb54f64-c01d-4c60-98de-43565c6d3e25",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "84d7712d-ea4b-4a5b-be9f-ed3b14b9b331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cfb972-2d95-4fbf-84fc-57f53e6a4b09",
        "cursor": {
          "ref": "954db69d-0613-469c-bcf3-0083b2569b1b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "61f197b7-5854-43f8-aa5a-e54a859c4fbf"
        },
        "item": {
          "id": "47cfb972-2d95-4fbf-84fc-57f53e6a4b09",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "75c04963-8f07-4da7-bf6a-cd55f9e45f2b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "47163abb-ac53-4991-9cb0-f19a94d26a22",
        "cursor": {
          "ref": "fe104de6-51a6-46c4-a8cc-7214662432d1",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "084c2bd3-52dd-4b2c-97ac-d57bbbbe106a"
        },
        "item": {
          "id": "47163abb-ac53-4991-9cb0-f19a94d26a22",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "61b4a509-ffaf-4ae5-a96f-393caff8fd42",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7157ab53-8606-4ad4-9a74-8bfed892bb0c",
        "cursor": {
          "ref": "59495471-ed8c-4e8f-aa51-54a4886407c5",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b61f27d0-970b-46bf-94c4-1e1933756213"
        },
        "item": {
          "id": "7157ab53-8606-4ad4-9a74-8bfed892bb0c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6359000c-cb93-401e-b6a8-ee4027e83167",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b0bb1523-f5bc-459f-a873-98a7d4679252",
        "cursor": {
          "ref": "2d6c7908-2d9e-47e7-a2e9-e91d19c22e10",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "32d8e170-5403-4e3c-b4b9-93b897160a3c"
        },
        "item": {
          "id": "b0bb1523-f5bc-459f-a873-98a7d4679252",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2c5ea924-8767-4503-b1ef-d976604803b7",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8f36b2ef-c042-495a-a494-e31f2d1a2b84",
        "cursor": {
          "ref": "9e487caf-f0bf-42ae-b10c-76c661cbc3d3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "46411679-2c7b-4b67-af8d-0e81768679b7"
        },
        "item": {
          "id": "8f36b2ef-c042-495a-a494-e31f2d1a2b84",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f69cca68-9ddc-4b66-8336-7a096efbc1e5",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "85b51fc7-1637-4efc-8781-6f6cd00e42ea",
        "cursor": {
          "ref": "9d3f9229-728d-41c3-ba74-d682ded7546f",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7451bb1f-87b3-4ad6-90a1-97b33692a9c1"
        },
        "item": {
          "id": "85b51fc7-1637-4efc-8781-6f6cd00e42ea",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4a43e7b7-5cd1-4339-b46d-86aa3c0cd893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013016f5-2835-4f8c-929d-6d67fcf58416",
        "cursor": {
          "ref": "5ee297dd-def9-446c-9e34-e44383afb711",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fde4b913-3ed4-419a-bce8-bb45a451cf84"
        },
        "item": {
          "id": "013016f5-2835-4f8c-929d-6d67fcf58416",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "be982ef0-efdf-4989-aa75-9529d89fafa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a19f5bb-ab51-475b-8bf7-13aae59ed178",
        "cursor": {
          "ref": "de5e715f-755a-4473-aa2c-c8e00e00dd5f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "026ae430-33f0-49ba-980b-8d7193e8782f"
        },
        "item": {
          "id": "2a19f5bb-ab51-475b-8bf7-13aae59ed178",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b971995c-eebe-4848-84ca-7fcdc4ab862e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e85e2a9-d235-48e7-9d81-ca3eb6550dac",
        "cursor": {
          "ref": "9bcaa357-6a9c-47cb-8f62-10601ad11dbc",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e5fc71f9-2fd6-426e-be39-f555cac20996"
        },
        "item": {
          "id": "6e85e2a9-d235-48e7-9d81-ca3eb6550dac",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "30563118-3b13-48a5-972a-6b70718bed07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234c5ead-2f91-4e78-aeb6-2caaa8e5aa80",
        "cursor": {
          "ref": "7944c2cb-5d9b-4784-8fe9-e5a335dea1c7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "97833b79-b534-42fb-8924-6c61e3c41cfe"
        },
        "item": {
          "id": "234c5ead-2f91-4e78-aeb6-2caaa8e5aa80",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cb544f81-afce-4c05-8600-2207a6f546c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f998feb2-d44c-4e66-bbc7-d0b64f3f9d30",
        "cursor": {
          "ref": "81d69ee7-aa74-46f9-a2f2-14caf031492a",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "77f0b6ee-dd08-4702-bd19-7975b2fa19ca"
        },
        "item": {
          "id": "f998feb2-d44c-4e66-bbc7-d0b64f3f9d30",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7d00884a-86c5-42b2-ba1d-ac58ba252f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cceefba-75ce-4b78-9bef-df7b813cdf15",
        "cursor": {
          "ref": "1d500912-cc6b-4ddf-b2c3-969fe8c4bf11",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b28e4eaa-435c-45e7-844c-de1304f4d1aa"
        },
        "item": {
          "id": "7cceefba-75ce-4b78-9bef-df7b813cdf15",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8defb266-25ec-4694-b7b5-ee5e6d750886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f969c769-815f-4cba-9b5a-ed2a815a594f",
        "cursor": {
          "ref": "881e15da-963b-4319-9724-eb486b665fd5",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9d571e17-aa22-441e-adcd-80c954600d78"
        },
        "item": {
          "id": "f969c769-815f-4cba-9b5a-ed2a815a594f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a43db76b-ff27-456b-9836-649c9e06952c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63ac3ab-a40d-4ff0-885c-b7195ca27c64",
        "cursor": {
          "ref": "f4072c2f-4c45-4c94-8509-58e3f3a27f96",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d7d826c6-b747-43fb-b3e1-51b1f24658b8"
        },
        "item": {
          "id": "f63ac3ab-a40d-4ff0-885c-b7195ca27c64",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ac1260cb-9487-493c-a4c1-b3610ce92673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5362b7-59cd-4e96-b33e-6ecf5b86b7b3",
        "cursor": {
          "ref": "dd1507c4-3a56-40fd-a1dd-adf9af787bee",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "76974450-99f2-404d-b7a3-2d727d31abde"
        },
        "item": {
          "id": "9e5362b7-59cd-4e96-b33e-6ecf5b86b7b3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d08345b4-17cd-4024-b958-ba5f159df019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8181ce77-fc07-4c44-bc56-cb96697c2482",
        "cursor": {
          "ref": "09fae4ba-636a-4681-8139-9ad5fbed9e2b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "521764f2-6767-457c-a25d-4085a51afeca"
        },
        "item": {
          "id": "8181ce77-fc07-4c44-bc56-cb96697c2482",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "890605b2-3c70-4cb1-9b5e-8c4975823c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68713f91-1423-432b-93c4-5e089dcefc3e",
        "cursor": {
          "ref": "c2c24c59-431f-4c29-82b4-bf9f3dfd1f3a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "743d665f-bbe3-40f9-ba02-32be65e438db"
        },
        "item": {
          "id": "68713f91-1423-432b-93c4-5e089dcefc3e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f27813d8-eda8-4ec0-9757-633efead787e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b598af-d510-4f7e-b472-e943a52f7216",
        "cursor": {
          "ref": "493bc455-4f21-4747-9419-c72a8445e587",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0ec06434-02a1-42b3-ad49-892f7fa3d36f"
        },
        "item": {
          "id": "d6b598af-d510-4f7e-b472-e943a52f7216",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b97a11f9-7dbd-4a7e-bf06-f7f8a62ffcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd20523-1a49-46f3-906a-9a9f9f9e5e4f",
        "cursor": {
          "ref": "c2a6ce7d-f429-4b32-8c9e-ccee3a89f340",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c4f3607d-4c2c-4aed-b0f2-09732b3a9dbf"
        },
        "item": {
          "id": "ebd20523-1a49-46f3-906a-9a9f9f9e5e4f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e36e79b6-4486-4671-b999-b6a152993694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faaa720-b19c-4ba1-aba7-f14c477bc88c",
        "cursor": {
          "ref": "67793130-eac9-4d58-906e-258903ae5d7c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e631eb94-6409-4272-a689-2a345cc8a74c"
        },
        "item": {
          "id": "1faaa720-b19c-4ba1-aba7-f14c477bc88c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3b0595ca-1837-415b-a789-9274eee446dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d079514c-90ae-43d8-b1c6-0877dd126d64",
        "cursor": {
          "ref": "4df3d450-e78f-4043-8dec-5c2e99624481",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5ceaf9a8-5025-42f5-8db1-8007e468ec30"
        },
        "item": {
          "id": "d079514c-90ae-43d8-b1c6-0877dd126d64",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e4e08a14-a129-4fc3-9b17-8cd2e3e0c22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603fb837-3593-497d-8fa0-794d743a9a10",
        "cursor": {
          "ref": "576531a1-f313-4c7e-8950-def37a732327",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c92343fc-e693-4928-8cf3-87537b1979fb"
        },
        "item": {
          "id": "603fb837-3593-497d-8fa0-794d743a9a10",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "94942cf3-df64-402e-82a9-cf1cc60336c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7281ca9-4830-42dc-bb16-16fdde690721",
        "cursor": {
          "ref": "49897657-96c9-4b45-9de1-1468d6aae918",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3a5f3288-9ba4-49ac-9bfa-76e64595f255"
        },
        "item": {
          "id": "b7281ca9-4830-42dc-bb16-16fdde690721",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6e870b75-fee6-4b8e-b230-4ecd374f890d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7202cb-af04-4a71-a24b-a9c6c2a1b3b2",
        "cursor": {
          "ref": "93622c23-4bca-45c8-b152-2b5a73eb8d66",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ff8573b6-225c-446f-b641-357df1c97d87"
        },
        "item": {
          "id": "9f7202cb-af04-4a71-a24b-a9c6c2a1b3b2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b968463d-971d-459a-b946-d18f2a22b7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b299b536-2d6a-4184-955f-2078e5c7094f",
        "cursor": {
          "ref": "9e94c624-5d40-4547-9c8a-2378d9eda864",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6ab27d83-0eb5-4274-899b-0e35ced70b59"
        },
        "item": {
          "id": "b299b536-2d6a-4184-955f-2078e5c7094f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "95a70063-2c2b-4d2a-9e1a-94271f29b5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6236603d-1cf6-4766-9b6e-969eda3d64c3",
        "cursor": {
          "ref": "ee5b6b36-e997-4ede-975a-ac7727af2278",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eea525e3-8c96-483c-a83c-145ace6218bc"
        },
        "item": {
          "id": "6236603d-1cf6-4766-9b6e-969eda3d64c3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "99c67154-0541-4525-9c45-4e2aaed4433d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabfc795-eb41-403a-9430-c3df4ce01318",
        "cursor": {
          "ref": "4932c1bb-31a0-4c0c-a36f-42f9a839d9e2",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "56f66da0-0198-420f-9498-bbb1cdc6730f"
        },
        "item": {
          "id": "dabfc795-eb41-403a-9430-c3df4ce01318",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9629c8c7-c0d5-4703-8b30-25a2adc85b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fd6782-b3ef-487b-aee6-22ca9762097a",
        "cursor": {
          "ref": "58ae04ca-5a8b-43ec-a52c-a86acaa17af5",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "609317c4-ae4d-4a6a-8bde-08e63f0ee347"
        },
        "item": {
          "id": "45fd6782-b3ef-487b-aee6-22ca9762097a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cf06a1ae-27e4-4f73-b72e-b10ee85d4cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf74e5ab-4752-4090-8152-f99801daec0b",
        "cursor": {
          "ref": "79746f0d-52b6-4c25-a09e-f90981f16d24",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "92b6809a-2e97-4356-80af-d8d67bbbf881"
        },
        "item": {
          "id": "bf74e5ab-4752-4090-8152-f99801daec0b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5278e7a7-8787-431b-ad29-0d83a62f609c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8af465c-208b-461a-b26a-553ab933db3c",
        "cursor": {
          "ref": "094e2ff0-b02e-449a-a729-06a52745a855",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "94bee1ba-08da-4dc4-952d-88b53b52f0a1"
        },
        "item": {
          "id": "e8af465c-208b-461a-b26a-553ab933db3c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "717fc226-de30-4c45-89a3-5939a4799721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7c5076-bb64-421e-8368-8e3206336a67",
        "cursor": {
          "ref": "0fa27702-c22d-4db6-b7ae-0cbb4df2ad81",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2c246d29-5ddd-495b-8cfb-9f6ba6438ffe"
        },
        "item": {
          "id": "6c7c5076-bb64-421e-8368-8e3206336a67",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "57a8d16e-3fa7-4da1-9774-43f77873fb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edda7c8-d20f-4e9e-8afe-a41982a8a461",
        "cursor": {
          "ref": "78b383f9-f055-4720-aa4a-66f62d636e97",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f5c5b983-2d4a-4f3e-9e86-521ffb69d671"
        },
        "item": {
          "id": "0edda7c8-d20f-4e9e-8afe-a41982a8a461",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e89d89f8-3967-442c-8443-d581c02ac01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e818e38-8066-4910-a2b9-1992bdfb1f99",
        "cursor": {
          "ref": "1c7ba1a5-cb78-4906-875f-23f7a5a691a3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "24fae170-15e8-4899-88c8-f60caa5e55aa"
        },
        "item": {
          "id": "1e818e38-8066-4910-a2b9-1992bdfb1f99",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "672172c2-59b9-4feb-8667-d6cbf0a34da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03a7f78-47af-40c1-9682-2ff159ccfe90",
        "cursor": {
          "ref": "18ab8aa7-16aa-4c4f-8a4a-04d679def230",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0c957a81-2b45-48fc-a15a-2ed40fe9ce06"
        },
        "item": {
          "id": "d03a7f78-47af-40c1-9682-2ff159ccfe90",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7ee6978d-83bd-43fa-affe-c561c740a83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8475f0c-095f-4e20-90b3-9c2c39749ffc",
        "cursor": {
          "ref": "fb43743e-9721-4278-a701-29179a705326",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "26d49e55-f028-4a38-ae3d-73e24c764c54"
        },
        "item": {
          "id": "d8475f0c-095f-4e20-90b3-9c2c39749ffc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7b6061f0-a4c8-472d-815d-714f03477fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8537bbbf-6fcd-4d89-8a4d-4ee9ba612c4d",
        "cursor": {
          "ref": "2946cab2-43cd-428f-843e-626995b3312a",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "94f1265e-4c9a-4273-8672-1dd6d3e2e475"
        },
        "item": {
          "id": "8537bbbf-6fcd-4d89-8a4d-4ee9ba612c4d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aa8345d7-ef21-4bfa-a715-c1c7f894a87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9822d704-094b-4582-b995-d0b4f8731554",
        "cursor": {
          "ref": "1ae6153d-6932-4d6f-924f-7f0cf67d6838",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e8f2fc8c-8ab9-42d5-976c-5083606e3598"
        },
        "item": {
          "id": "9822d704-094b-4582-b995-d0b4f8731554",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3a7b8175-a857-4d3e-85cb-3747c9a5e65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfbe228-ec65-479c-a512-6a75a792f48b",
        "cursor": {
          "ref": "4ab3f592-e219-4579-b733-1030d33bca87",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a074e5f4-0902-4213-af16-5278b1722414"
        },
        "item": {
          "id": "4bfbe228-ec65-479c-a512-6a75a792f48b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d3c1b2a3-e04e-41eb-a1f3-f6633bc53bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecb3c18-ffa0-4b2c-88ce-30cd9000ac68",
        "cursor": {
          "ref": "a8fef799-c300-4de7-94fc-323f2aa7e65f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1e996418-53ed-4e01-a7d8-e24596548e51"
        },
        "item": {
          "id": "7ecb3c18-ffa0-4b2c-88ce-30cd9000ac68",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6e7c04c-f5a8-4f34-8897-c376819e367b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ec24b9-9a9f-44dd-af40-e52ece40d3ce",
        "cursor": {
          "ref": "d8e6b3c2-a09d-456f-8abc-6486ee8f698c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4b1b172f-6c21-4b6b-8eaf-370b4129eeb0"
        },
        "item": {
          "id": "e8ec24b9-9a9f-44dd-af40-e52ece40d3ce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "848946e4-fdbd-45d3-a400-940a44b65845",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4c645e-ec18-42d6-8a25-ebf1f73513f0",
        "cursor": {
          "ref": "d2a49532-577b-4fb6-b628-4668a559b7d6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a82c88e5-2766-426f-8d45-88bf53978104"
        },
        "item": {
          "id": "df4c645e-ec18-42d6-8a25-ebf1f73513f0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ddaf95d4-cb48-4ba8-a4d9-85766ad335e8",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "fae9b6db-ba72-48fd-9771-0cfa197b9f9d",
        "cursor": {
          "ref": "cad64c0a-c33f-4b92-abe3-86cf8c57bb91",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "90217f5e-7e03-49fd-9a4e-d01e1368542f"
        },
        "item": {
          "id": "fae9b6db-ba72-48fd-9771-0cfa197b9f9d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e0047e95-6b81-469e-a094-444a98e2f158",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6d483-c576-4925-a4fe-2a972f30bfdc",
        "cursor": {
          "ref": "bba2768f-c192-414b-b38c-f2bcb8ef0925",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "225f4dc8-2811-45e2-b0db-224fd3ba8020"
        },
        "item": {
          "id": "10c6d483-c576-4925-a4fe-2a972f30bfdc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3838b925-bafa-4e29-9445-0c09a9c22a35",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f56974-0fae-4718-9d21-f96d2707b810",
        "cursor": {
          "ref": "01f91abf-3b56-43c2-ac6c-14b382267e01",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6b6f8bb1-f6a1-49c8-8aae-6e555e6bdcaf"
        },
        "item": {
          "id": "c2f56974-0fae-4718-9d21-f96d2707b810",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fbcefd61-2e68-4dd0-ac63-b73b3adaf0c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f56974-0fae-4718-9d21-f96d2707b810",
        "cursor": {
          "ref": "01f91abf-3b56-43c2-ac6c-14b382267e01",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6b6f8bb1-f6a1-49c8-8aae-6e555e6bdcaf"
        },
        "item": {
          "id": "c2f56974-0fae-4718-9d21-f96d2707b810",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fbcefd61-2e68-4dd0-ac63-b73b3adaf0c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1668e0-6008-47c7-8bdd-4b46657bff10",
        "cursor": {
          "ref": "cf82a0cf-498e-4ea6-b2f4-8d130c1d6b43",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "be591d40-b3d5-4f67-be23-fb9746638038"
        },
        "item": {
          "id": "2e1668e0-6008-47c7-8bdd-4b46657bff10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f254bd22-2b31-4b34-9949-bfd0e850fc16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d917de-5d5c-41a2-8751-9aa5e65fd35e",
        "cursor": {
          "ref": "4a343339-b48b-49e9-8816-57ff3ff6c925",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "897d2312-86d0-40ad-980e-56c4ffeb1847"
        },
        "item": {
          "id": "72d917de-5d5c-41a2-8751-9aa5e65fd35e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "73b60f03-be71-4b33-8618-77da4eeb7565",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}