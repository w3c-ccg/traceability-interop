{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "de4499e5-4f65-4ffa-b5f5-222fc43b26f4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8047edbe-af56-4433-8d44-e7e87c220b46",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9d07b67-e92e-4365-a3aa-846c57f6b7c9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f8264c36-3349-4203-a3bd-5e2d95885e0a"
                }
              }
            ]
          },
          {
            "id": "f50e8b3d-74fd-4d88-a15e-58e3a0332649",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c239dbc8-d10a-4a8a-85b2-77113e051968",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98efe1b6-6702-40d4-9a06-497c51769f64"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf7aa79f-56d8-4baf-b033-b08da9fbee0c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8a3abd00-5d27-4227-a956-f729f31c3fd4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4306012-d79e-4b54-b01b-375614423882",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd707b97-b6a7-4167-8da7-e60229094732",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54348f29-bd00-4282-a787-11c1ff53d920"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a65177ce-c665-4621-b1d4-6f5fed8fa84e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2d3d934-da0c-4ccc-a8d6-3a6a509701ef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61f3c6ab-d33d-4ffa-8c2d-47943f255c75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b80852e5-651e-4ffa-8371-80d3949e8b27"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81131a29-108e-4441-8d9b-84291db7d2c2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3ee7cae3-59f4-44da-8f5e-954e08305abd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4a7f4fa-00e0-41c1-98c3-f3f6859f008b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ced2760-963b-46d6-9d29-75893df79e0f"
            }
          }
        ]
      },
      {
        "id": "f5fb2370-0dca-42e4-9fe7-f568bd1301c3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "25d25258-c2b2-40fe-a3bc-1b89e6e47285",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e30009c5-2dfe-4867-ae15-70f164459090",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2721105-0981-4cf8-b279-d4a21a052daa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668e2281-1adf-4a71-a41a-c8b4f7cbe7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f92d32b8-19b3-4178-965c-b41343e0a0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e92b1a-2c33-4a3f-9d69-ba2df075c6c6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e20877b-cbac-4b5d-82c8-188395543499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "366cf388-f5b8-4e66-b135-5c31e58ce431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476f2eb3-2c36-49f3-b833-b131f7d9cb51",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86d79e7-040a-4038-ae80-943327873b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0e806bc-f38e-4142-a509-f0afe1821f94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91dab8f1-76cc-492e-9548-48cf8a10061b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a9dcb5e-833f-4f60-8050-d43834b3473e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61a259d-d6ce-4486-8ee2-9cb6f4d38cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7c00b24-4c39-4ce2-8c55-d1dd9a2d6306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079bf065-9f77-448e-a30f-731f845f6544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725d4f17-cee6-4667-82f8-b7037c2af421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bac50ef-b10e-4af3-8db3-bfbeead90741",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d567e36-d922-4792-b1d4-2357a73b7003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd83fdd2-c91c-400c-ba0a-b8b71e0cf20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d525017b-65df-4006-ab9f-a0207cc1562e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "aee0fdc3-be73-4e62-aaa5-0a815c37fa94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3432a4b9-7dcf-4eac-9a93-05e6595498ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5091bc4-9ba7-4cc6-a547-b407beae78b1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "503b2a53-e264-408a-a4f3-1992c94e3e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b066bb1-6cb3-4fe4-9699-782fe4c9db83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "223853e0-69e4-4c4c-b986-db517dbdf1d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4242b65c-4444-47bd-9fd4-90c7798bc33c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48b112e0-aba1-4b3f-80d1-ac11025b8378",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "def34133-76bb-4f96-9318-be738843c944"
            }
          }
        ]
      },
      {
        "id": "721b2aad-7d2f-418b-9043-e70f561d50ff",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5fe2eaed-cc6b-46a5-baae-1438b6fc697c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0091cf66-832b-4594-a87b-3b3c3997204f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "304ac48f-e424-4c51-80c4-c161f100d28a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd9f528-4366-446e-99f3-71c165df63d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cb31ac-9066-4cf5-b0ec-79b0dd43ca3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a641688-5dfc-4514-86dc-756280c0a63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b1cecf2-5ee3-46e0-bb3b-2a71a3c6c91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a441dfd6-a917-4e02-bb92-a15ab7d2b045",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c21af45-ddf7-40fb-ab4f-08a0e5dcd2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84d193c-920b-42a2-b101-427f0b4767c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61406958-f265-4f64-be35-bbd9b34f6490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6350d518-45f3-4b86-8f92-eeca18d51938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebbbcac-6283-41de-9b5d-b76aa18a7154",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc45875-f44d-4e5f-94f9-4cb26cd05c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff189a71-4e8a-47f9-b57c-fb3492a072ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9263610-0be3-4a65-ab58-892120e62952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62928dd5-f8b9-4e28-b824-a1f4d944f681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98217e3-420f-4d72-918c-3c799d8a5957",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d4759f-c796-4383-bbbc-a4cb0ba1ea02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658c3976-0eb0-4b4c-9145-9aa4a4e09165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980342c4-525d-47aa-b9e0-5b4e36a105c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a415f9ee-c9a3-4706-a77a-d87da2874493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50de45a6-5cf5-4c5a-bdbc-90880ce3c41a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acb08c3-c6e5-4ad4-835a-a3d8d0c32a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba2fa78-63b2-467e-8c44-1bda739f014f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e849bf-7334-41fe-9cb9-3753688b04d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47f00c1-3af0-4f65-8a5b-a4a924714906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6e88b-a6d5-4cf9-9dc0-96c952bea1cb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d11fccd-528f-49bf-82a5-ad1402cb7086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bfb500-7885-40ce-be71-db351969e8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ed9851-c79a-4aad-bd74-d45a53eb4245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "709a2196-a131-4e5b-a53a-65c7a29bb935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04fb6d6-3284-4689-a37f-db7cf2285cad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc00025b-d8ec-4b0f-8b73-f41fdde6d4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e970d8f-5836-49c6-9ff7-c62bf517fe40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b923c4f7-2596-4c42-b70a-555343822bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa9f04e9-b7c2-400d-8d50-716fa8383407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064ae900-49f1-4ada-b2f2-49eefb7aae36",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49077f2-5714-417a-9fcd-90c2b07c130a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b71ecff-2595-461d-bd3e-c7f1b605bd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620abbf3-201c-47e8-9d2c-2c90f6813777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d6ff9b0-933e-40d9-b201-494f9e9e1197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae04e10-0777-414c-94e9-3554cd179238",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff63716-d237-4286-a176-40fdfe39dfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62125538-028e-46cc-94ed-aa0124a2def5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7612c759-4007-400c-894d-339af372f7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b9a79b-5fd6-4875-9dc1-0256a788fb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30554e03-9e39-4ca0-af03-16283a655f4e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e222724d-3a46-4900-b29a-c5e7de086930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c948431-b690-46db-a922-82cb68c32538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d491cd48-ae5c-4869-8e10-23e3448bacc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d6e1d66-aade-46bd-944d-bf4f48579be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b74606c-2bf1-4a65-86fc-9c65c446f3be",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a3909e-f407-4c12-96c6-af51a5818f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb3d9aa-a921-47f5-82fe-cb11390ccb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66875749-522c-4268-82b3-a5cfead4292a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac8afb6d-eb76-443f-803c-dedfeb30a584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f8401c-7429-4939-a717-82542ceb7cbc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728d80c3-09e5-4e8a-9ca9-0dbba3737f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3521c7-939a-4d87-8599-79cb06415956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae24ddf-112e-4cc8-86b7-020b18851b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf744567-a460-4a0e-b586-6fc1529d19f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ade3bec-5ff5-41a7-b805-cefb6c0c61be",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f250936-0094-4961-9cad-1cb6400649a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bc20dc-647b-4ff2-ac13-8a71c03fcd67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bedcc2a-21a1-481b-8602-2d846e7c10a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac56c374-63c7-4f4d-9b76-23d600d2af6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af57d905-5916-4b7f-9c43-069e00da548e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5955d4f9-be76-4719-b380-cae1c405bfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdcccc2-ba40-4452-83ca-08a6114951da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3177f4-bf51-4436-9a62-4cb9bf9ce754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f70eac9-954d-4d2a-8ecc-05b63f4f4516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b404daf2-3947-45cd-bb67-a9b97135078a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a73ef45-2382-4ab9-9c22-098270c1bbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a024a57-4ea3-4aa6-abef-a9c95187b70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95d1b13-e1ca-4b19-83a2-a8fbdb1d5d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45dbc7c4-d275-46b3-b586-e515050160d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7196249c-850d-4699-abc1-83cfa7989133",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949e08dd-1feb-4dc3-9019-18278d507bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4b76c9-c530-43da-90a5-28821a3f5986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6121df91-8bdf-4ae6-9f2b-45963d3c0304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1318482a-7fd7-450f-a02f-51528a068743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dff44e-facf-4b47-a8a0-10b921e1d51f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b62616a-be23-4051-9828-8b34c75028d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5404a22f-9bb0-4910-ba1a-83678fa61e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5854a4-721e-4b7c-b12a-7519307a3879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6630c508-445a-4a80-8065-8f5350fb6d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd73f93-bcaf-4f60-bda4-5d3afc55180e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c684f5-dcb0-454a-b5bc-52709ef0a55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a3d2f9-e8c4-41cd-be75-1106014affbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172c674d-91b1-4f93-bb09-68d5060bcee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4658c1-0fa7-4588-a2c7-6844c7a22fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3f739d-2a78-4634-bedc-96511bb5fe91",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0000bd-b3a3-4597-ae2e-c15db15d404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68936f17-61fe-4e20-a8f7-5cb29cccfe04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cba9b86-653d-4537-a210-afedb4217c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d738f8-1754-4bd3-872c-0730a781a1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7672b76f-3d37-44ba-a480-dfff3c0549cb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fa30ba-dee8-4a29-9840-b5a6c8009583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fdc364-0187-4b8d-8dc1-550b9fc5e056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd38824-6c68-484d-bf9d-3937db0aa973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddac98c-f2f4-44d1-91ab-ec6305c4d875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8376c766-5ec3-4074-b611-c1ba9b94e28d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb03ba1f-0bc8-43dd-aea8-412d401f9486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198f69d3-c27c-4aa3-a834-1775e6be1380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c116af-377a-4e1b-9de6-b4a295732c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fce1a52f-dc0f-487d-9f95-ef77f2559a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f981a80-bc96-4769-b618-0f42e426e874",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dc68ff-ed5e-40bb-9e54-5acd9ae17990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b8fd49-83fc-4d1e-8cc3-81d475ac48a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e4910a-b4c5-4d5c-b2f2-6ec3023ee798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "221b7a27-5b15-470e-9418-a62d2341c909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331377d0-fb86-4812-84cb-d77fb81b3ef5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe0b99e-9bdb-4dcb-923a-8848e1327c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862a48ef-ac08-4d8c-8cb2-126673a5dec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68422db9-c5fc-41ee-8b83-36b797b44141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "391609a4-f1ef-49dc-b2ce-d480f901c142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3e6460-4a57-4193-8335-139cbc3575ad",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07a46fa-5031-4911-a196-16d9d089b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bab6af-a3c3-49a2-a22a-c1d1959408d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8ef346-d03c-4e10-b8c1-5df83dfe55a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1384c8-fa70-4aba-93c3-f78362ebb1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece8bfc8-208d-427e-998e-b814c4456f57",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c011ac4-70ee-4763-99f5-7b605a04b108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c707b33-229c-46ad-a3fd-9abe207ca4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f20a37a-606e-4ac6-98f2-3d0caf6b3b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6f99d9-984e-4b17-9c74-b18e5e9a6a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655ba15f-6e93-4d7d-9608-b64ea8f0541f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f1f786-e76d-41e8-931f-f372180ceddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09eef2cd-ce4a-416a-9431-60d259b99e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016627ac-f6dc-4ac7-8572-825662e447fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b15adf2f-6cfe-4a8a-a9ca-a13eb3779007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170574fd-e62a-4ef2-b954-3538fb9428dc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac4f73b-cffb-4421-9d7e-d825b5a38c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c177f01-a229-47d2-add8-1020579fe36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69775788-35ea-48c2-a8c8-dad7e58fa342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9328f461-cc4d-439e-831f-7d9fde527693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1717f5-d45b-4ada-988a-97a86e6942ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8a4871-356d-4d80-83bd-7c295a583896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0f4d76-9e5f-4d5f-ae73-b7c607174a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d846664-399b-4248-8f82-9bd5ae1917eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b5c851-f7a7-4f74-9ae4-ca18b0166bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da889c16-477f-499a-af3f-5e55f9e53a7d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20006d2-f359-4cf3-8ec6-13f2fa6ff836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06664dca-81ec-4a00-aae6-d88eb035cf1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448e4a76-7dc9-4e33-a7d2-76cce8439ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ddb665c-ac31-4c3d-962b-eb485e361991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20671ec4-e8cb-46eb-bd8f-33a616031995",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9659d210-bf57-47b6-a372-c82d0c05d19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bec1020-302e-44f9-8279-9aef8985baae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd6cfc5-af2d-4012-bbdf-ccde2d784f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "695c4396-6484-460d-bdd6-4b4791271a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054ee276-470d-435f-b7bf-acc9fc564da4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175fadd8-e6ac-4151-80a6-208d03b290f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814bd2d1-9732-4b41-b76d-fa6644b2165d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7213c8-3656-4407-aa24-ee97ee4ac456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c56344-ded1-4345-9696-1a4ed6518559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428da0ae-1352-4f7d-ada2-61b614088094",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c89a56-5661-4530-8184-172572b295c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad70855-215d-4208-8720-e70688672ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dad411-569b-47b6-9e05-02ba45f9571f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9092bf2f-4da8-4281-bb86-06436b81e593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccae342c-2fc2-4a5e-81e4-47b21baab096",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0410e061-7fc2-486e-a10c-5767d79909be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a33f7dd-f23f-441a-bd42-b269335458ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a28176-6963-4b26-950d-0278bc6bc85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13ee148a-3b47-4032-9f35-522fb696e495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d533aab5-2211-4b73-ae8d-149d4cd25670",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac7f8b5-fd45-479c-91c3-4b952d2fc592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6c1aea-beff-46f1-aabf-1e20170ab7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ad0d87-0d26-439f-afd9-552798b5d30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beaa388f-70c2-4415-a5e1-717c5e9c0e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ca9ca0-9e40-481a-82cc-33e1deafeb8f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50faaaca-c70d-44ce-83ce-2a8e03a3da6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742ed4c8-87f3-454a-98a0-289dac1a3c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d96e69-6339-424f-910d-312333b1d813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "57a0930d-04cc-4789-8915-279bfd0a2ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9a6815-efde-4912-9515-c418d84d84b5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b57a78-78c5-42f8-9e04-b53b427891e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bee42ce1-e666-425d-935c-c33f86e9138b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df42754-d47c-428b-8d2b-58887aa96de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26d2bebd-26da-419d-adef-892e30b29031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f75c8b0-3fe6-43c8-ab67-2ad3f50417c0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1ef55d-5bf1-40b5-9fa4-c629b4decf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1554f5e-627d-4d3f-b761-3866e55cd465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f49c2a-d97e-4121-87ba-8baece799911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dab5bf62-5dbf-4ec7-800d-f19f0c891c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca81978-40f0-4d27-95dd-01dbf1076f5e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0563c163-c0f7-48f9-9631-7a79c6759f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf04e3bb-f07d-4e52-bb1d-11aa2eec72e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7d7795-9ac6-40d7-af6d-fdb2215dc4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9816ab6-d91b-4a38-a8ff-dc99772ef82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3eeb18-143b-4b3c-9a2c-e4a2091927b8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d61dc3d-2a06-47a2-98f4-236b4b4f4e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc7673d-12f9-4431-b87c-02af3cedad8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9bef3c-7e33-4464-9528-918527e8e6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e924b3c1-17b1-4d5f-adb8-35bd9564d50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c954f97-f5e2-44b7-b52e-65e891a03402",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aa1569-d362-41e1-8638-30dd6064dda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efacd52c-51cb-44db-92c8-0e4d2f77d7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18004ab8-381d-4801-9f1f-b40f5d520fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d95b8607-f44f-40a7-b0b6-8b1f50f3e856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce72e2d-91a4-4dc2-b01f-7e326507a657",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c591b60-e08e-40d3-92d8-aa87e5378dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a32a5e7-10c4-4926-a61d-ad3422c1ccc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c42749f-1278-47d7-93f0-d1932fa3aeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a25a8aab-a349-48b0-8a37-4173a66ab38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c486dc33-5400-49c6-a191-82ab8550f296",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e1685b-61f8-4b5a-afb3-813449de52a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4577d7d9-d72b-40b1-b3c9-c800ac4581e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26c4822-1c51-44e9-8726-6d6fa9f64c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4a917273-8306-4837-a88b-5027d38fef84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c7f580-0d73-448f-ad16-91329faeb8b7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043fafee-191d-44df-b495-a547c48af806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d0b247-d768-4a00-b87c-669f8e9df81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe45fe0-167c-4b29-b86c-3f903b518a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bbe647-b3d4-4ae2-8fca-6d88d9e3d46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a596fe-163f-4b34-8cc2-3adf34599668",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df92da9f-a634-4a2c-86a0-b0be80d194f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9043e71c-42c0-4d5c-a4c4-b03ba129c74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f4c995-4b61-4f66-9b35-64e49f40a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d9e0fb-181b-473b-a10b-5664847b4f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd4f725-c5ca-4d7d-ad4b-6942273ce95a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0a5cd3-6703-4b13-922e-b1a039f40d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b899b14-1e72-4dad-8488-726fde45a4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fba9af-5d80-4dc9-82f9-efdfbcf5fb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "794b097e-e1bc-4791-b841-d9d939de9b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bb3bbf-9be9-499a-89b4-6aca2b77a52f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ff3305-6d99-4509-bdb6-6a2fa0359dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4928f8-1581-4c0a-9465-f74ece896b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b35b9c-28db-479e-9d3a-8cb383588efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef302679-fb57-47ab-ae29-fa65aaf1551b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b408d5-ca73-4fbd-91c9-65b278e3757f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ede7d14-5918-4a6f-8f62-1cd09f6aa38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5452f0-e648-408d-9b44-5dc53de78c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568d1cb1-22b1-42bb-862a-b8b230fd1f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49e0767a-b1b6-40b2-bec1-e460dbd90d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b33f07-e419-49c6-8629-0e7108f62517",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba1b0df-30f3-47eb-bbc0-ad501e6d8e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9c584c-db7a-4d9d-9c3c-7ac00c0c6746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8326630-cf14-43b1-9c12-90e4da2736fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df4a493d-a145-4d96-adf0-23daac45cf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6adc03a-4634-4d7f-a8e3-88b04a5ddcd9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a42d02-6602-45ab-ab1b-240011d33e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6334dc-41e1-435d-83e1-a79bea69727f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81c5136-6bca-4c5e-8fe7-abfe3c9b3c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cc05e7-9444-4b21-bcce-9320ef44279d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7769adb1-481f-4ea8-9657-480b0a1841de",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d253172-0c73-4854-a9a4-81f49b820720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe415a43-95b7-4f6f-aeda-c4dd623a1b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fade07e-3540-4e1b-abb3-ad0d43ed33f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "caa0c3fb-7de8-48f6-8b7b-39c6cfa39f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4aeab54-c2fa-4601-9579-8fd996df8faa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b175b198-daaa-4a9b-9552-7ab132741243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcc1913-2d6f-4bf1-9965-06d4c6c7d294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00420e9-b77e-4ca4-b771-311cd483c69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f71b1b-f737-484b-b14d-6e8a80191915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf9d842-2873-43ca-9d82-4ec4adb999f9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897c5468-bb1b-43d0-a9bd-8ea6c1c49994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7cc3593-2a35-4f0a-abd2-4fa2e079f850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e094b5-4257-42ff-bdb2-540d67b67d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a126476-dac3-4355-bc3e-0ad751be475c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf32a238-cd0b-4b0f-8c99-28dc40855e6a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1147777d-7d1a-4a61-8ef8-894452cbe60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72138660-ffa8-4116-aef8-00fe0cae4dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d13d507-f955-4dcf-8054-bff559ffd12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c810c18-876b-4128-af62-d0a99a6b7504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da8b73a-f923-4240-bc41-e0567f03618c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5faf924-cf71-431a-b612-2730a69a1e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4faea873-272e-4511-8e38-42edecb63b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dfa1af-c086-4cdb-8618-d2092f123582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa83648-74ef-45c5-acd3-85af0af955a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c3df4e-00f1-4f9d-8709-17784ca75cb5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b9232d-c6b8-4a61-b9f9-50078e93ef01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f099a140-06a6-4cd8-a537-c0ae70f513da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d5b859-ba73-4042-8de5-667c0e882219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9032f231-61c2-45b8-bb36-7afd4e0fb4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb8b979-a480-4047-9405-98e63cef4740",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36eec06-47e5-434b-96e5-1cd8cfbbf9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c041e5ee-47ea-4725-8500-1cdca0f04edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2defd986-f500-445d-b7a5-b5b472bb0df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf61fb5-c64c-49b9-a978-dc7b158adef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca3b14c-534d-4e3c-afc1-5b1b8fa0326d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892820f0-3b7c-48f7-9a56-c462146f3275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ef2229-a32c-497f-8cbf-d564cc61b9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590989ac-ed32-4f74-adb5-8dfe48a69381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "865e1338-6f6e-448e-ac43-2813416e4e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958bd9e-af18-4292-aff2-80f036e5128e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8697de-ec60-4e22-9abb-94b203ea82d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c1edda-1ad2-4316-93f9-7093c7fa3511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610f4136-074b-4b93-936c-fe22c70b0357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89bcc7e1-8fda-4804-9c91-39995a5bc689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bf175f-32a6-42ca-b008-348f50230296",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d46ed7-7d1a-4598-9de2-c17ee358b65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6e3a2b-cfdf-47df-9c4d-dc5d1eae32c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d143eaa-6c0a-4468-83b1-dd3607f6a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7d0680-2281-4510-bb3b-dca203630b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9b5dd4-5f80-4f0a-ba46-6f6a845259ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675ed14b-dfac-4bec-829c-9ffcac47abe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db218611-2ddd-4d1f-b974-64404f3f9817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ef60bd-6d7d-4417-ac82-06a9f6533847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d84ce4be-c028-4bb0-9787-1a34205ff4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9edd697-8202-494f-a149-756b8674e477",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ec255d-c015-4979-8c85-4d0f19f8f0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8a2a7b-02b9-436f-a04f-f4167903910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41336542-dd83-4680-a26a-d07137bb34ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6258f9be-4b3e-47c9-b334-bba11b2e59c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342735b0-ae63-413c-9222-a255081446cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc35d130-59a3-4245-a1c1-12cb4f262eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08acf98-87a1-49e6-b87d-158149431f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fe8e70-656a-48a3-95aa-6e36131fc207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a448b8a-7844-4aa7-9a46-cbe60d9fd430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442add8d-ec65-4d3b-bbc2-cfe605d3887b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec75c9bc-f12f-4d68-86fe-ecad705a47a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007ac557-d345-4e46-83f1-f044cdddfb3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32bb504-d984-487a-92b6-c316f1d4a1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbb069b-6133-4416-9129-d166fe04a41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d592ba-ff36-4b3e-a5a2-b92093b82d12",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5afac6b-b6d2-46ca-876e-0a6df5214339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df30640-f484-4d2b-af3f-c51b7f943891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824bddb2-1440-4e32-a202-cd424456d394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efb57bb-e07c-4cdc-ae54-0e3d759d2185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b9257f-2c86-4d8a-8b14-98e1f19a5ff6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2962e542-64b9-48a8-9dcf-e0ea7863bda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8adb0e-ad5e-435d-9b9b-4321d5454cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c82063-40d5-4b22-ad84-577f607b73c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "483e5495-b59f-4d7c-b270-80bdcc0634e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c9c821-829b-4b39-b9a6-dbf640c2295a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83a07ea-07a3-4629-9c11-1f52eecfb607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6764ac1d-77e9-498c-a24f-aca7b9dca421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3e03f2-d889-422b-b12a-cbec36deef4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c120a5b0-fa0d-4cab-9d05-bb159d3bfb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37610136-9502-4f3d-8662-c2f916d9e3e6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232573b2-d17a-4bd4-946c-eedb53a6aa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f343a8-a761-4698-9990-86d721d68464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d696906-c4fc-404e-9a7d-9f860e57a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b874f562-482c-4716-ac93-0f60ea280ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db02224-18cf-4304-8962-ad11a852e293",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44672fb6-d937-425a-9789-e2e5ddc1852d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b997679-3e0a-44b1-918c-8fd74c8e3549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fcd1b6-3053-489f-9c8a-c67d77ee1f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdbaade-0dde-4392-9426-b84dd407e723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80097a39-cda3-4fa8-9425-cecd5b07d7c1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56284eb-9558-4922-8009-ebc2a5124797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c1fd77-1abd-4bc5-9469-9a0d01aa0867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23264560-b5e0-46d2-8ac6-091e90d586ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aafa3b-9b8a-4b4b-ab5a-904fd8d96aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfa2acf-a46e-448d-8295-2ec3a7425139",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ca797a-4130-4990-9ecd-ff5b22b0cf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295f964e-ab99-4b2a-80c6-3a88845ff786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b618e36-f61b-48c4-b6eb-345257b4077c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a4de04-4dd0-483f-a9d9-365484f43271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b0e508-ddfe-46b4-a563-26d16c1bcd5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ad827c-e4a6-42de-a196-f4243052badb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618f7747-5052-4312-bbc4-7e3d11391a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f12f251-e1ba-4c1c-899e-1f91b48d8266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e37e720-ace6-474e-8a5f-780d27121b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbdcd15-a17c-4454-8c23-ab7b5c2bbdef",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca82032-3db7-4e4e-901a-ce5fa3dcce6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61493002-3bab-4014-9a91-fa074ecc2d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c5374c-09a9-4b2b-9998-aa64548574f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75dabf41-f105-42e2-bc91-ab0db74f68a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd95e76e-1ea2-4aa5-b567-57624908961c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73730042-178c-44a7-816a-e5ea6d67804d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bca67ad-5a69-445d-85bc-f8e9c1768588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0f6afa-0fad-4959-8fcd-8e15755e4a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e65c58b6-7ca9-4773-8782-290821eb7cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747a46f7-decd-4f6f-b804-c07d3e89d0e3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0161a00-a21c-4d78-af97-f1d0eb957faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babb1568-6b24-4b0e-b310-8339adb836fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2574f722-5833-4ea8-a910-eabbd64942ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa8eaea-2f48-4a21-87df-e7c3fda745f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e19cb1d-f33c-4999-83ea-24da184ccb2d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea02776b-fbea-4712-883b-d017979fdcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60449f0c-b279-4a00-8e23-d998effd4da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7700c64-91d1-488e-b53e-b0bc5330dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9157f7-926f-4e3b-8c72-43bf75ca9f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b6ac03-0fe5-4523-9345-2451b162c5b3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15079e0c-d5c2-4f69-a05d-8abd5dbc315d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b42507-6de4-44fc-bf17-1f101a933b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae43de2-38d8-45ea-840e-983e9e94a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "727b129f-49c1-45ab-af3a-8d036a08816f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dec5637-444d-4e92-821f-e10279010649",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae17165-eb5e-4115-9d36-9b85512155c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4bd4e4-c53d-4dbd-a0a7-cc3171328d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc47cbc1-e250-45ff-acee-19d60a1af76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cebcf3e1-fe42-464c-a3a6-47b08260a83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5872ccd2-c3d6-43df-b967-1c4c2319f90d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4079d57c-d019-4db6-8fa5-a2be48e17597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7614e0c-5ed2-43f5-98bf-a8bc5f635671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74aff039-be94-4a81-a9f8-2ec3ef231491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a64fbd52-6797-4cc7-9dc5-f10452c7b1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66d6912-f570-486b-ae4c-23c548552ce1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04435085-67b0-44b6-a294-8d4ea54fa40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ac9852-8992-4315-926f-a6ebfeca72fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ade93e-bfa0-4628-a5aa-1fbeaa213546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dca95d73-7cd9-48ba-9b7e-60c513c10b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2146a65e-9888-4370-ad19-b397dffdb14f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d44f50e-f3d3-46e5-ac41-00c0ccb50292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c9a373-b44b-4aa9-9c6e-c72f6cf6106c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1f6449-6621-4c8c-87c1-5476ef367ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfca264-e145-4934-8a2a-d5db9e30c5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d1a7bf-d6f7-409b-ae10-7b8f28459491",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67759409-f044-4f7e-8b53-1afd50b39cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d09aeb83-e0f0-44a9-aa61-627bd61975bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e21a08-82e1-4992-90ea-069f0fe3d960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a50e065-a3d8-436f-8e4d-0e892f544a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789895dd-dc74-4139-a1a1-29fa809a7777",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe31d1e-0499-4fcc-bf15-8e36511ba7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43ec580-56a6-4490-b996-efaea5f0fb7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1781ed3-7f40-4957-b999-cb92d386186c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76eec7e8-5d12-43ee-a3f3-db6496a3486e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baea5a9e-296e-4058-b62a-b3d0188edbb5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f65ea71-9579-4489-b14f-b79885f4417b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2a8247-2017-46be-8925-25eed9d3243e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255b194d-64e8-4326-ab8b-548309508b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8897242e-aeb1-4cb5-a8b1-eec951a1b222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aaa96f-b439-4328-b1fc-4968600b1c56",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1789cfae-6f17-49b1-9fa6-ea0eca5277b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef20bb3-8525-46bd-bff8-f047a5e96512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bbc791-a9c6-46f2-a6b3-198afe4812ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6832f16a-54ce-4ae8-94d9-6755f85308f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fefdc2-8db5-4b2e-8306-571ee2dc2d70",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa41f9b-a6cb-4943-9a49-65d22f7aec1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7445b80-f857-46a1-bc9b-5e8d7fa734a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44873255-a1b9-421b-9f1b-427ac2274663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f33192d3-f885-4e06-8b38-ae920a6778e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747db55e-35c9-461b-9429-9feb9bafc96e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19692a2e-bf52-4ba6-9e30-ca76e2adc51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a3d54f-3403-4c47-b444-e8425ce65576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2972b77f-f74e-4fe7-b7da-3f70a0b67707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bf8419-f85a-4ac2-a23c-fdcf78c6b798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a90f8f9-71ed-432a-a7b0-22f285445c12",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbc3880-1c8b-405c-8cf1-760b6341b316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c83988d-8c6a-42ec-b6ed-1b094f333ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e354ef4-759f-4ff4-aa84-40013005d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade45b3a-cafe-4e3a-9d29-cd915af0b9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9541be-fa32-4da6-95b6-febb3e5c2bc5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524ab62a-961f-4dd5-a821-0e57bb308050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fd667f-b748-4f62-9d7e-173479570af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6111fbd4-d1b5-4cf9-8243-3ee80e70d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78fec70c-06a0-44be-b1d2-010f95768ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b890bb-230b-4b30-8b80-7e85366f262c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad31337-fa00-4a57-969a-6c24bc87a6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fad02ed-ebd0-4320-836f-81de498ed9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2f6880-c0e1-4692-8179-979417326004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1f9e76-09cc-40dc-9cf0-3e7f6816ad1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a69e8-75df-4c21-b4c5-7f832f35daf8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616de5ca-9ad3-4451-a883-ba6384336eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7040bc6-19cc-44e3-b7d6-4f88fa4021b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c188abef-981e-435b-9c9c-1b3973964681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90525ef6-1925-4691-b3b8-03515840894f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924461c8-0fa4-45df-950d-798ff41cc213",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fad593-c190-4758-9705-831700c7e319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eaf3da9-2536-4577-88ab-54422719d41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea76cb1-a209-4c33-9cff-487ce2a23f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f53426a-50c8-4738-8ae8-32276541fc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d100a7ea-e127-4f10-9b08-4a305428189d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8449094b-3b70-413c-a0e7-6999fc6d3ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7b2f469c-773d-444a-b8c6-acbc4d71172a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff756f4-8fcd-4204-82ad-980141f541e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5caf8f2d-7447-4a99-9342-960ff3c99e33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d1a5179-dab2-4403-9cb1-131e24cfe74f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27e3f247-dd00-4129-96bf-0738f6a70bdb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17132200-cc3d-4511-bad2-6b93364cf3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f251411c-073a-492f-9366-c90995863975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10fac4e-59be-48a9-bae7-1959e84dbbe1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "69926839-d71c-4b4e-bb8b-afa02507bdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334d0e86-3bb0-4309-a467-11be80ded246",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c038b9-b37e-4896-ac2f-73d537bd351e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ab157d8-eff6-4ce0-a18a-378e57f16203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74da35be-32f9-4d13-9ee4-969cab78136d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "31988def-c462-47cb-bcb2-357caf4c5193"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75841ecc-ff4f-4491-9fa8-291bc6b8791d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1b73a19-e79b-43dc-bfd8-dbc800e4226a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e793d7c2-a264-44c6-997f-153e37c32f68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae240530-c94a-4adb-8705-aea5a0248d9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c1c28ad-3540-4ea7-9507-4aa03260924d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95fbfa80-d2b4-4cc5-8d64-a49ab70aa5d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "590725bf-0b38-47e1-b751-8673e2b4584c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fc796b1-ab0e-48f7-930c-314fd0a0b2af"
                }
              }
            ]
          },
          {
            "id": "4b803495-309b-40e9-bed5-12705aab1cc7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3048ed8f-c0e5-4805-986d-810646c819c2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dc301ca-2df2-4f33-9505-9ad0f10df0e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31ac7839-cf17-4da1-9c33-75917deb5b92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68591c63-fac2-4e6a-bbac-39ab8c8446bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11fcc053-b0ee-4f42-8d70-66c70475159f"
                    }
                  }
                ]
              },
              {
                "id": "dc4f03fd-75bc-4957-93e1-632dc9b47b5e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dee63fd-3ad4-4bd5-9ab3-78eff521c655",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d0f25d2-8775-4b44-ab18-5a45741e57bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c22e6843-20dc-464b-86bd-161743d6eb3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d313b28-4a38-49f1-8a8e-5486aef95771"
                    }
                  }
                ]
              },
              {
                "id": "e99e1fef-f7dd-489a-ac7b-977d89c6bb15",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05e086a1-e933-464a-8a4b-a7fca5029f5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1b91f64-ad6b-4708-8b0e-2cbd057a6749"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab6ab21a-f075-40ba-9bdc-d11ec0ef5e28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bd91d465-b65c-421c-8ea4-10964b8ba99e"
                    }
                  }
                ]
              },
              {
                "id": "448553dd-4066-4668-88f4-e01d4ae51706",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "757ca3ea-8b6f-47c4-819b-50bdddc84f61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dedb2cef-2df3-468b-b7fa-ee5bc012933e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a9a9368-5bb7-49de-97a5-2803a594c9ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d9bb6ab8-013c-4e2b-a32c-a9b2d3a05d1f"
                    }
                  }
                ]
              },
              {
                "id": "3d0e3d47-9e08-4c77-8d91-0e9c846a8d5f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75972699-2feb-46c3-a6b9-dddbb47fa6e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd4bd8d5-2a26-4e7e-8720-8cc492ec460c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "635450a3-889a-4525-9862-7a1fd63183c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a889eb80-c54b-40ed-a6f9-50310022f908"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81e7e180-062e-4a79-8ea8-1113681ef0ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c30f0524-7028-44ef-aa26-36c3d280fa5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f158a43a-608c-4ab1-a57c-6aad02a56205",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b901cbe0-5809-4fa0-8770-0348598cb1bd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3d94a48-b2e4-4c09-b495-9f2162bcc4a8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "60212b62-c017-4979-ad54-8e4d0221a8b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef83795d-fb03-4946-8265-a71ccf8b6109",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1c8d4b4-ec82-4eba-a6c7-1518a841e80a"
            }
          }
        ]
      },
      {
        "id": "1ee50a5a-c902-4efb-976f-ac8c86e194da",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0ca9fac6-de40-42cb-9442-1a6fc4e6f69e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49c6ca0e-e790-44a9-81f0-371f381d99a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d30ba042-626b-40c1-a172-f96699d06b34",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010e0a96-82bb-43f8-bf27-88f2b7b03335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef709fe-3632-4af3-8d25-b3f0528aa349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590e5551-96d2-4bda-9a04-e12224c120c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b18cb8-24e9-45d6-ae0e-2c3b6d1b0694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f56d79c-c95b-44c7-ab66-1ca1449035eb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168aad7b-bd71-47ce-a741-e35e0826f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364ac822-eb90-42d0-8016-5029c977c496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cedd97-dbd6-4bb0-862e-6520902d4312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62bff1c0-2b84-47f9-b33d-215701364ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd798c0e-1c94-4152-9258-7303fdc8207c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2f2882-d4e6-4562-8d45-fe70f0781c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032df917-2fa2-4da9-bcf1-d24040c2e2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0523ec-0fdf-4f17-834e-935102073a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0cbd9d-0b1f-4b16-bece-36d236a3c37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5a653f-b44a-4a2b-a1f2-5ff1d9c6a821",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d131fec9-24d8-43f8-8aca-040c91686400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bc3d77-6935-4a74-9f62-76f418642847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e4ae24-d562-4de5-ad4d-530df68d9a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4021277-580a-43fa-905f-c894885b2061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7006a54-6ddd-4605-b958-e267ed04a271",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79da988-270c-4b6a-b88d-58f478a5ec43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a6c3e1-31bb-4abc-93f5-8b77515f1784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38aa40d-969f-4c25-93ad-09a77a734b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7009f25f-6cf6-41df-abba-bbead5d2328e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc53d44-7b6b-4f8b-8729-e1b022693b50",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4ff453-8244-4ac4-88f3-7f882bdce800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13348ef0-57ed-4547-b32a-68f0c0219acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8669215b-2570-4401-8080-e3c8a814a56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d54ec85e-f483-404c-96c0-1bed14c207fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ec1848-04ac-42d1-9fe9-5029bbe32c5a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3cfb9-7280-4bf3-95d0-40ff2db628b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9aeea38-46de-403c-8fca-53f53260f159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f5fb88-414c-4d78-8ce9-fe90c930a92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab399c6-dba5-40ab-b725-cdddfa5df937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b74350-6d5d-4ee8-a0d2-24f4d9c251f4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531802f5-34db-4c3d-a05b-e1a0b2d125d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddce91e-d412-4f1b-8053-050641de41f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2588b0-c9e9-4937-b24e-f4a6cc715e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9bd7ff-6ed6-43de-8c76-3fc37f9e7171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca3f639-a880-4be0-9e56-6830a15d2d61",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa23b0d-8add-4f03-92d3-589bb2515b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3235dab5-857a-406e-9cad-8d5c12e4a62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cab857-e480-4acc-84c4-63ac3839c22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b136cf-d6b2-4ce2-875f-dabbef4ef21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d966639e-7129-4df8-ae4a-02f53ace9f95",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b08ff9-65a8-4ac5-9264-97d2a3846fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb3e42f-6187-4d9e-bdde-810c5c5bc5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702cc8a0-28f7-4977-9c4a-2e688c2b1194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a4bae9-f92f-4fc4-8bae-22147f29b29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8951d575-a87b-4fe7-bfe1-836c90553b0f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da287e45-63b5-4a28-a1ff-6199c985e1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c269c10-fdfb-4830-9d61-51aace335f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f76987-09e8-4bbb-b789-41eda58c0605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "52b13b7b-7807-4d9c-b118-42b01978ba14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d611dd98-11b7-458a-bf4b-2416cc9fbb08",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f30576-43fb-4aa9-ac97-f4a3e6a2876f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6728c57-097f-417f-b06d-f9eb44af4130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf200b9-02ac-4d0c-8f0d-b64192f5e12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96a72a6e-b217-4e6f-82a6-a6aa64bd8b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b165e2e-43c8-441a-849f-a1550873d08d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f876e43b-43dc-43ca-816b-e7f0d7f3206a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2531c381-cad8-41bc-bd00-7a0e6291906e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94342a7-4496-44ca-af4e-50762a5aa44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe6c74e-bd8d-4c22-ad24-92bb71dd280e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa0bd38-c604-48a5-97fd-9c44822b746f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fa6aeb-14db-4d73-ab61-db3250cc42d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed0fc59-b26c-4797-96f9-5fe97eb1a92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29be2d8-ce67-478c-bdd0-31bae01d12c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "82afad11-18c9-4062-8e98-31c38a4fd58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e83459-77c8-4b1f-acd3-abd31b2e6e0d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f8d188-8da6-4e3f-8e26-ab52e1de32c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c420217-1283-40bc-a454-a5033343bdc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac58127-4931-4cc5-a5fe-dda2051dea07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dafca2f8-9584-4c23-810b-7398ff96c529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b1944c-0eb2-4ac3-b4da-bdf7c5319c1a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ae2411-bb5b-4df6-a638-feb085586fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab76d1f-117f-4355-ac46-3a1f496bcc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90c30f9-6c24-48ea-a4f4-6f338b1250a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eabd146d-ae6a-4b7a-9426-63cd608d3aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa6c9fe-f39a-4775-8d7f-e472447455e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c4744e-473f-4518-91f9-2ffcaaccfc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138a6b72-226b-49da-8a97-e3ec14fd4ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d9e9fd-0f07-481f-af6f-30c60113b349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc053eea-06ec-48cd-a4d7-d616d0818df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acf65b9-451e-47ff-bac2-0577ddefb062",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd21cbdb-d4db-49ab-ac11-ab1389912bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e79cd6a-9b01-43cc-a0d2-1badd06a7b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bcf35b-5d57-4d0d-8a9c-5bf6950a5db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0631203c-75d1-4cd3-846f-a5867f92888a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8005394f-8ef8-457b-8bb6-e89727cd8d0a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe1e003-ebfe-430f-baaa-d85c6485e971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf70365-8a97-47fd-a87b-cd8d82ecd0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d517f1-ba79-48ca-96e1-a99c728dfa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d0bb36-e76b-4665-94c0-92611d66168f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f957bc24-c175-4f46-a7e3-ca3403d9bb0c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb52fcf5-8e4d-480d-8356-e748aacf4762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526d256c-2efc-403d-8480-420a8eaa03d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89166200-9657-401b-a8fc-483a88f2caaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88b7ec66-5bcf-4fb2-89b3-967f1e701c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54741ce-1980-4dd8-95b7-9ca7dd111de5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4212018a-1bcc-4f9a-a5e8-943cee8f0637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44bae2f-7cbc-4b84-9df9-4533ae9cc20a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa08d5a-fe6f-4014-b397-0d1123126bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fc179f-84ad-4ddb-9166-95849ea89e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48566cf2-79f0-4e58-b6c9-981ae581dae5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f050a5-0ed2-48da-872a-445f02ebab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578bd1db-dbf9-4f98-89b0-03d99516365c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e356a68-584b-4265-ab33-19e55678b63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e4dabe-2cd0-4789-80b9-a50656d43d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bb869e-bfcd-45f9-af44-bdcbc62eb694",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d2b777-4c39-40d5-920f-ec86c6b98867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b10d06c-d313-4300-9f5d-c6958314fe7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282f2a3e-db8e-4610-8d2e-e3e913fa115c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f8eeb84-55ae-4a85-9822-847c0b3ab200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4c4fe1-b8d5-459c-b71b-a4b3921945f0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3294e-aec3-4bed-b78c-ac158a41b198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebf86b5-a85c-4292-94eb-c55daa9388bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6793d891-6356-4a9d-908d-90a09b937cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1cee5c-7d89-4ccd-86ed-91de326403ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dc1f0a-1e06-4335-a705-055a376cdb88",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63223d27-b417-4c9f-b827-e5f4f124a603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d18d4f-2ae8-4b67-89d9-553515514991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08e9c09-898c-4385-a103-5829f9a62fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df610f22-b1bf-45b2-a989-8fa757137bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2d97f3-5d5b-46ec-90d6-ccd62496ffa8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e69d41-61a6-4558-93b8-4429a31def51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78b67a5-bdcc-484a-a76c-a1cf73be95af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19480610-1852-4366-9ba3-de4e272cb297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb1d66f-595c-441f-bcf2-ad6ff1128b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fe103e-20bb-4d01-8557-6392315b3ce0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e2fd53-677d-43eb-aa11-499ba1cb329f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6ce2c0-5ca4-4359-b61c-58330a3201bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde5eae8-3334-4d75-b627-760f121dff2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27fa637a-63b7-44d6-accf-9d24480b2dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6875134a-956b-463f-aa06-07ac2aa9c978",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c670e0dc-a04a-4584-91cc-eaece6503103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccae6e7-e0b1-4576-856e-e3c8ab265b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2373a0-00a6-4a82-98a3-a5d45640061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65fd6be5-e1eb-4128-8ada-4ee42e6cb281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc35f3d-fc49-4e6f-bdf3-9cd4853de4c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5bf8c3-cc54-43f1-9128-1c0529264eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddd5ec0-965c-4bf2-9691-f5d268641fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1343b78-f2a6-484a-873d-77a77013fe79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3262beb-0754-4eb8-b604-cb26573603d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4d4088-47bb-440c-b252-fbd45f1d103b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a36daf-6191-47df-a4c0-e6e01dee228a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0183f7bd-d416-4f92-bfd3-5a2fe3a983e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb7d4fd-003b-4df1-8b3a-2e817d051ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6877494-82dc-472c-bb41-f0f1fb41d539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f495ae-0c19-454c-8544-9a653f358fc3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f42a63-9dce-4b05-96e7-ed6a1a7967b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f8e816-af41-41d7-860a-75018f32904c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88598de0-341f-4bf2-a173-5ef91f32195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f084ff9-17ca-4e2c-93e5-fe7242c03789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4794d26-81ed-4f78-95b4-89ce6b26e80b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de4e29d-4e09-49d2-a7cc-efa64d466abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae44d107-1bf6-4159-acce-d7a8220ac480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b6d018-2bcd-40ca-910a-6672363fc1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36158494-8774-4f1c-8ebc-95f01069bd46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a896858e-2dd4-4058-bba0-a56c8e427caa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db71ad57-7374-4b0b-ac69-9316a7de3f18",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9330a8-7a94-42f0-9197-bee5316b221f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868fdb0a-9869-4ed8-aec5-7381919cb8ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1ffe7d-83d8-4f56-ae96-87f2a1f82fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ef40ab3-4eb6-4a7c-9bf7-d9c492416349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8d9df5-1a5a-4de3-bfe9-e742bf28d23a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e91b9a6-b875-4fc5-b8e8-93009bd7423c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4b984bc3-c5ef-4725-b0c1-71c917a91573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd957428-8ace-4aa9-8b08-cfba1efa9fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf9de863-882e-49ec-b483-0b37878f292e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d052c58-ba63-459e-a112-061e84aecc4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "124f4c24-c74f-4f3b-b3f5-346462929a0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fd29df5-a2e4-448d-acc8-33242792aded",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ff1501a-5aa0-4279-8d0d-9152bf98f2db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32af4ce6-ab44-4472-8b7e-cc77ab502247",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f380c3d-bcc0-49cd-8478-55671e3e0b73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ba4c4d2-1aa3-4887-9625-b5d31b0043ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18896d31-d525-477c-a0d6-976be0043e6d"
            }
          }
        ]
      },
      {
        "id": "59fc9e44-45e4-4ea0-bd5e-60bb48d57b68",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "358dffed-880e-48b8-8c5d-2fb4c13e725d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "326e9421-0441-48d9-9032-cf3747d3c81b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4d7bb7b8-8a4b-45dd-9901-f7d63cf410df",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145713b7-3901-46a2-aaef-bd78cebd8775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd243693-beb6-46b5-9e46-7a1b98d0a279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb623e2-55c7-4777-afed-f4e48b710bb2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43255de-f500-4e0d-9fea-91c06f83f40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9042b-d034-4a8f-9028-296b433166ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f85a56-0d37-4b2e-9ca6-177e3db6a437",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f70110-f3e5-417c-9289-06dcea28b789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90cf91e-8973-4a1d-b083-1141609b97ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098149ba-8851-463c-8901-6392f34a3d19",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f07415-6ad3-40d1-98fd-f1c36eae5978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122fc169-d056-485d-8323-0b79d2202112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc15a648-cdd5-4a2f-945e-f57327d980bb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70170fab-1456-4519-8f16-0aac8dfee3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fceb2d4-e929-47f6-b032-e5381ddf05a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce02339-55c9-4ff6-89d1-204ecf3a91ef",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a20fffc-afad-4430-812a-feb0c6415741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edb0b99-85db-40be-99bc-4a85a7c65fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceda510-7fc0-43b9-9ac2-bb929a83c655",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70f8ac0-c6a8-465c-87a7-b27a90b44b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c2e527-d876-4f60-af20-4415c15439d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09edf77f-e627-45e6-b377-eb455cc1cabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8272d4-fcfc-4a14-9b69-95d6d51709d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdead55-8d4c-4cec-9769-bedac0fc43af",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d586dd52-47e6-4372-a7ba-d66e3b2b89a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4344b513-f79b-44db-8896-1a5da737a829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1428ea27-b466-463f-9cb7-31e0318c8f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a1f312-52e4-4960-8aeb-a335ea2ab175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c578fa-b992-4f8d-a095-f5f473774048",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e75da1-17c5-4b13-b64d-7f7c9d0c0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6135f1fe-a5c9-42a2-85fb-cb4e878b6b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c39bbe-28a8-496d-accc-b8e779d04062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd3368f-81f5-421d-8555-3a124f065ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe9bea3-ac92-40dd-96c3-864a17fc4544",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03aabdf-edaf-4e76-b184-48fded05b665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36653fea-aecb-4878-84ca-2ffca10a51b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2192a398-ec49-4898-a940-79b00d38c3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d28d89c-2881-4fee-911d-b332a02d9576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8d0c4f-2356-4e99-9e3a-dc52d16e0013",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cea62b-ec36-473b-ae90-44a90dc02c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc18a84-0190-49f8-90f0-4c3ec0b08820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fbdcbc-269a-4071-983d-7040a6e3416a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f668574-b3fc-4a3a-8715-2cb8d96e28b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff20e6c-4a53-4b7c-a9b5-d3ce13d25f41",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ce1a99-178a-4832-af93-d56bbd753210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e17b45-7be9-41f4-8d72-c65b746702cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e0f0ea-8b09-4014-bdc8-977b72ae335e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0badf09f-f881-478d-a7d5-5a0c3e87f86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91ef041-abaa-4679-ab9d-c1e9bd596a6a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb0e420-dbce-4277-9bc8-a3adeb0bcd2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28e2bb4-753a-4f4d-b6fc-c50ef0a18c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc907c-9745-4cb5-9ab3-8d29f2f4d09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01236c6b-45ff-42ff-be2a-a0d9836448a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412aef07-5280-49c9-aa73-f954bdd47570",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13819747-d99b-4846-a08a-a157c70f8fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1122e8df-ce5f-4d7c-8d63-1fafd747a087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86db909e-e467-4ea7-86c2-91fd26a2bd25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2004ad-a394-4d2f-bbd5-5741078de218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb05bfe6-2139-430f-8dfd-c45d03a393dc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846aa98d-def3-442d-b638-8d62e04a534d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae422a5c-0d0a-4cf1-bc72-63368a1605c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70a6573-1d14-4887-aba3-966258e1f9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9425a4b1-0573-46e5-b4a2-e35706eae8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2c850-c71d-447d-baee-942105fdbc1d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65cc802-4edb-476c-b5fd-05ddcdbb82f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e44882e5-2530-4bbd-8240-feb886d1ad4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b617bb2a-b899-4112-8cde-33b215b20826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66616e56-0ad7-46a7-a25f-2c83360ef891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00aee2fa-836a-44ca-9c32-65c9bc7d576a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b50e0d-4f81-4601-99dd-3ebacda88250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560bf769-c4a4-4182-bbcf-bc70b1373355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59adc70d-a71d-4869-b4c0-70cde525821a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5172f02-d7be-4529-a543-b74e4a033ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0598d4-d28d-47ca-8cf9-77aca7707f0a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658e8876-5ede-4ce8-a4be-b29f05cf848b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ba124c-648a-43ee-a234-2945ad99bc05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "330c272e-e6a6-4cf3-b519-fe78d2ea1ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359ac889-e977-4702-a396-acb91507efff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330f79e1-86d0-4b7b-b29b-cc0ca5dc78ea",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5999a48-9b97-4de8-81cc-3a922daef349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5234bca9-62f0-41d1-825d-767bc329ce45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488dccac-9f33-4a82-9a5b-b425f85819d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e64410a-8b8c-421d-bfc3-4eeff4b0b77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0bd4c8-1a77-498a-b774-2dde10969d50",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb03ab21-4dfc-465b-92e6-5479b28431d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa8c93f-7b2c-403b-b3f9-63077b842501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6513dec-a10a-4f6f-bb1c-e671a4345f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e5c911-7ffc-40c6-a71d-0fea8edc780e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb469bac-a241-4364-9e50-e7fdaf0439da",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328c1e69-5b84-4669-bea8-985d005949ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eb3679-4e48-4c20-a671-8104f8842b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9851b0c2-d0ed-45f3-8066-65fb11552bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342e1682-c01d-400a-8dc8-0dc1355e777e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e95ada2-dd93-4a83-b11f-817abdb3c53f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef742f5-f013-4ebf-ab6d-3476c5735117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f137f-b2e6-4b67-955a-cb75d6900fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1614da45-b49d-4869-a04e-01164a6e46b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6605c0-ac2c-400a-b72f-ac2eca1b4c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d3351b-24b3-4298-a6f8-17a935def5ca",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1918736b-597a-4c07-89ae-721dad6e7657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17342614-9584-487b-8a2b-58f64a0c2649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dae118-b80c-43c6-aad0-1f054a5bcae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c000519c-9e6d-46f1-ab7f-a002fa60a03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafebdce-526d-489d-aaa6-9783f7fe3b11",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26e108f-6c97-4e26-8389-c2fe9c46b71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab9f74f-898f-4705-9ae9-4c8173bae3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004d87e0-2de3-47e9-b6c3-77591bde7fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fc5cb2-d4f4-4fbc-a738-98bb4f13e521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946ed432-b448-49e3-8923-b63fbe56ab47",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35026bb4-1329-435c-b6b4-17aea4d59edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09565c31-7b2c-4b94-bea8-3edfc04e81ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df3946f-df84-4124-afd3-58b5a5bd240c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7baec3-5540-443c-a2e1-0dd6087ee2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8847c4ad-6546-46de-89e5-8748bb3cb1c6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc49a0b-2695-4d08-84b4-0f22371d5692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73ad7fbb-bd08-4c72-9a42-3b7d111e4a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06553252-3ed2-4cf7-abcb-c7720e6a011d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12d98be-069a-4628-aebd-ee8477cc9d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5d10f2-b34a-4d09-a0f2-cea98f4649ba",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64d61e0-caa0-4381-9aed-c2c9fd9ff116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76156e2e-efae-4540-bb63-7bc7ef9529bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afc451b-86ad-49d2-96f7-2b8d2f9b4ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9036ef-f8fa-464f-9ebd-b011b2e009d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5f6111-fd32-49a0-8d38-b811f56f23be",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6326dc7e-e10a-4d6e-93c6-565e24b0eb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9af160a-a204-4378-a513-24834aedf2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a049a3fb-f45b-40a1-81ef-e63ae13a603a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2969871f-2cee-4564-91bb-0d498deb97e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af875477-1e9c-43ac-92af-3fe44b1ebc7a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d03f1f4-6550-42df-8e04-ee677884205a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524ffd48-b413-4898-bf97-abc0dd5a70d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a245ca-8cff-4a15-ae72-3e499b06611a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f90c34-afa4-4aad-bee6-bcc13836f6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f07bede-b14b-4e4f-aa8d-bde6af53cbe8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfff8434-0be8-4111-81ab-6dbbbfa43046",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c99ce4-ca28-450d-9d54-3e37d7aef748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2d5ff6-689f-47fc-b069-ca31545ab138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71a2437-30ab-40d8-8d4d-d4f8cd03a7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9321cc-45bb-4e75-9585-0aed1b1cdbf5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f34a20e-fbd5-4a22-a6fa-82d9d5b3dcc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a563481-e2ea-445e-a93f-7f3addc61b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ff9089-a930-4828-b644-7e1254827dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abd8502-f702-4430-9080-374d33f68116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87e931c-6219-4b21-94ae-91471cc572ef",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a53c48-2a1d-48a1-831f-6f49d5e45e18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58bb2fc-8b45-4282-8ea8-640ec302b68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f52717-9e2e-4518-a603-4767a15d1164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f845fa4d-c9a3-4356-9c26-cf528e7636d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f70e820-ebe1-4619-8030-885f1a5b4277",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deb969c-291c-4090-ab42-19103e90fc03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1f30cd-7aa0-424e-932b-1ceccffe0a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cff1bf-259e-44fd-9e3d-d3b82104c82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3b22da-adc5-48f1-9387-c4f99e90f361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55095d3-7f74-4bf8-97f2-b1cfd7bdc37f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fee55a1-54ad-439b-8058-a5edae830caa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a274b186-19bd-450f-8708-53c5b249c14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4f6397-8f05-499f-8b0a-057467323543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f85c9d-ccd3-42ed-83ca-fc1f8e60e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44a6353-47ca-4da6-b286-08bdbeae70d0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ace22a9-def6-4498-98c4-b8ccbdcf2ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4844018d-da7d-4f5b-83d1-8564f5719285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea253d43-1eef-4a6f-ba77-1c1166d177a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bce79f-669f-4448-ad77-6a405b8094dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa2bb88-95c1-4262-8e25-83ae4d8475d2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afaccf0-cbb0-4ee5-8c57-f7a88e9fa91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a69c601-28bd-42c2-bf3e-4073c26efd48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252a85dd-ec7b-4d6c-b03a-8f9e46b92ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66c6fda-02bf-42d5-8f59-74fbdcc57625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26d3478-1671-4e0e-8c2d-a1a538a7f20e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7741c6e8-6cd4-4339-8f35-5e62b33a32b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390fcd5c-439d-4d90-8173-837a6899c56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368caf52-c366-49eb-baaa-46713d090cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13be7428-b724-4a3b-a27c-f1a361422cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a695a791-54ff-49bb-a9ca-598c30ee38e0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01db3f05-f82e-4f2e-9680-4164e99c4b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b882663-4126-4c5d-ad3e-af90e83de7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac68aafb-a743-4f69-ad3e-dbd47340d21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf8bbfe-cf30-48db-98f3-cdca083d6f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca041315-c5bc-4581-ad83-ae0bbe82131f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e744443b-391c-4e51-ac51-ef1bf2322366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1cef48-7de3-4b22-84db-f16c19762270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca87d35-e122-4d13-9dad-0bb400861976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76aa572-4400-45ff-86c8-ef9b430207b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4f277b-9a56-49f5-a79d-043301cd79e4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b8fa63-2752-4b22-85cf-7c829e90de63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6376d3de-3ca3-41f5-a47c-37d783969c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab9609f-39a3-420d-9856-5aa861a95ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6303b2b7-c269-4e8e-9e18-4b8dcb486e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3d9d32-4871-4b17-847d-bfe8f0e4a42d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182a9744-d10a-40c0-8e9c-bd7fc76f1989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2344dddd-db0a-4c76-b189-de95619f0b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e0d164-9069-4cb4-8da7-57a65f56ca55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d4299b-0214-452f-bc5c-b4cc65ae0d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26263fe5-8203-431c-9d85-97ba8a6e429a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cacf4b-b656-47fc-a65c-7c20ab8b8b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4514f5-603d-4180-8d8e-9176c0ac28d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d833ae7-9ef4-4c5c-8286-fe8a382c200d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc16031-3e5d-48b6-84ad-b515ae014385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2829397c-f193-4210-bf0c-34e9cc730bb4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09b1db8-333f-49c3-9112-bc9bb9e1b5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc07a983-a2d1-46e1-96db-211b6076ea9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca0ca09-bc9a-4537-ae9e-022551e8d05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72f2c12-5179-482d-9713-c79b9ff2779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f435880-d138-4bf7-9b89-e59d03e1cf4c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3ad3c6-2a30-42e0-aeb5-8d25559a1c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968a7c86-1de8-49be-a2be-bd44e25c06ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9df2da5-5d9f-48f7-aeeb-7cbe44214f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d871dcdb-1913-4e63-bb0e-89efa13d6746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c678b01-f4e1-4e10-93b5-4fe95359ffd4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f1c330-cf5f-4c0e-a6a3-c76e73b27737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce0984f-796c-43e0-bea6-51111a521c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f209ee8-a902-46cd-8815-354dab5c9c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f70ee1-6bed-4190-95a1-70be3c9853f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d8c6ae-0e2e-4c9b-b554-8b77ab51bb86",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae4c34e-cf52-4f91-95f3-971daed60a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5215b1-da78-4e2f-a445-552ff37611c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5928df-17b1-453b-ba03-f38fb1294043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b3d6c1-2b96-4640-a7c9-75c25a65d1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08acf6ff-ac1e-4a32-a49c-39d6d7d20387",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9129413-a441-46b1-871a-e46fe5d76667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d060359a-97e8-4d94-94a0-4226a32ba367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7ffbed-0673-447a-9c6f-a27c4524d075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccf33fa-6b90-4414-8b32-03ecfdf4824b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10dbf73-126a-4777-8663-a88b2a7736af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6528d85-524d-42e6-9a43-1afb35f75049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91755b96-032e-4c59-9804-ae173bc1a75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b64892c-a4a1-40e5-8050-a05c02a535e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9528843d-b7dc-42be-aa00-bfb27162768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704d0496-b54c-4f22-af18-3b3683f171ff",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450e3b35-cf60-487d-b341-7302bef87b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cbf7426-eb20-44b4-b7c7-77fa567fb877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbec3b4e-d47f-4ff8-a520-a410b527e322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a657037e-e4d7-4968-a673-054e2740ed23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23df08f7-8e51-452f-8017-b625db7578ff",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0eb0171-c6e2-4bf1-9d89-fa6a085258b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9d63fb-d8b9-4ae4-8a30-65da808e6a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5354bdec-c2c7-4819-b429-31348d42b95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5dab7fb-c6a5-4252-abdf-9d8055ead264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21f93d2-2197-4141-83e7-ca5a19df5e52",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0804ab7-db46-408d-a8fb-a043de14e93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3448ae17-fe7e-46b7-8db0-0d20cc0126b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557ae83f-5a82-43aa-ba1a-3d896fdb2da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c38cb6-009f-4b06-958b-0dba597bbac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd38c2d1-fb09-40d6-afd4-04e04d7459a4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68b557c-6186-4db8-b18d-5728957ba46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0eab30b-8fb9-4d0d-bdf4-6caae304a3a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a8c8ce-37d4-4b04-88b9-92e6114b7ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b6e198-75ad-4780-bced-337a68320a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e577d54-5934-46de-bb97-ebb8e8a72936",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2102f52c-cb3a-496b-9f5d-b74a3b5a5284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca090284-e6bf-4bbe-bc3e-65d5c2cfd9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e856b0a4-5fe6-4465-aab6-b878cca03c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6bf33d-8265-41ba-8f40-e1152349bebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e429748-a460-46b4-bca4-e339ec6daae0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f73e0c0-d291-426f-b077-a523af26dd97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c627eda7-c4e4-4d7f-bb0b-0784b4284432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761eb5a7-e0d5-44d5-9f31-b6218e814fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0405e1c2-b124-4f5a-8459-cc2f1b0fa206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a664e51-6a62-45aa-928f-907bbdf66b90",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed1098d-7cc3-44c6-b71c-fa1114e2b76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a87c83-a5c7-43f4-8dc3-b7227d9b791d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc4c02f-4812-40a8-83a1-8d6b95cebbf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e3c107-aa30-4ffa-bfa1-2fdf6f0892c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb1d7bc-ded4-4db9-912f-637225660f1d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7572e1-6e13-4d16-9f8c-e459d4bd96ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb9bfd0-9b32-4b2c-be46-e47d1d7c9def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc5d25f-17ec-4762-8e3e-003ab0a495bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d192fe-9390-499b-bb9a-6c954f8ef91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e95bdf-524a-423a-a865-ba8bafaf6699",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0893c3-92b2-4a80-a4f8-bde471c5bff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d85e0f6-1b52-4f47-b36f-283b6ae44350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1850889c-0194-4ac8-9ff4-ee3355056998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae56f05-14bb-4e9e-9465-8333c6edef76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864d2338-c2d3-446e-adef-c205fb489d1d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e3273c-90f6-4742-8677-eef4e74bcb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "addd373f-aff7-4240-8520-c94b2ec0ec5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e690d834-acf6-4bbd-bb8d-026cdba97a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d28245c-9bdb-4160-8564-41d6841bb53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0701ab-bb81-41eb-a3cd-3e08f84612ce",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d7c10f-64f9-4b5f-a299-081e9e26d6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9d9473-d9d6-4ef9-bb52-adde9703dab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc8e41f-b8f2-4761-8b58-d2c30d2ef6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3334e75a-dfb0-4713-bda7-53974bb133ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3f662b-b32d-427c-a57b-83ebcd86cf8f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540d2b42-acb6-4d60-bc0e-ced6fc6e1e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba74258c-047c-444b-8a2b-bfa4f67366c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4de70b-a788-4568-ab11-3b4fae351546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c24f63-5da3-4737-b27a-41ba9cb293cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb167d2c-c33a-4590-8545-897cee124bfe",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b30d2c-afc0-4265-95a4-836daa8f9941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff125c83-8103-4719-8955-9099a07c8854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c210bf42-6ee8-4ff2-8fcb-3c6f365c3ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95722d74-a7b2-40c5-8eac-0441c86e816e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eb8d4c-5bae-4518-ba97-3da119764331",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9887a5ed-918d-4b2c-b01b-96788866641e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6e5041-d8be-4430-8560-3a4a96544bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7787814-e4a4-4ea5-8fe6-d061d89ad196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b206d49-dd0e-4daa-80eb-fd75cb8af80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b65ec0-83d7-43ae-9402-9f621f1ad6b9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a44aad6-537f-4cee-86af-86e554ee0a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460368f4-1061-46a8-a5e3-8ed36e305fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470fe904-e096-4add-9f1c-957014a0a54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661205b9-65fb-4e24-8825-1156ab4600fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6a181e-acbb-4cf8-b002-20c7d0e74435",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b1ac79-c47a-48a6-a6e5-d873a3f09718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6fec328-0e9f-46ee-b4a5-b56bb261f56d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b2cf1a-55db-4ecd-b80b-7e2afab87924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5643652-faa5-44ac-85d4-0f52a16b2cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35380ecf-a9c6-4055-ba7b-e317517da71f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa02442a-ad7b-47c1-a221-ae47f4a61376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1f5ad87-38db-4e8e-b6fb-8cdc603ebc1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45743909-8dbe-444e-9c02-be54eaf08bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7601d1-3af9-4040-a5f9-471c9bdd4779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6eb191c-ba2a-41af-b0bb-331535b94e53",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6495db9a-2927-4672-ab07-41bad72c2159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc4a0678-0dcd-4fda-a60d-b676eb881f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0785d87-cdfa-41c6-81a9-7b3537417d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b2f260-db5d-4c4b-b3bf-64ec1d7df317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc4d172-2cfa-42e6-9e77-1288e0a1e61b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52163be-88f8-4d6d-a4ce-8ffefb65366c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6e7dcf-1b72-49b4-bb65-bcf02c625c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad2d0b2-b651-4848-8d08-8732256e5a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf6a71b-c262-40db-920c-4c2a73a15b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475321d6-95da-4123-ad0b-33ac36b38feb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bb9242-e003-408f-a4c1-22556e3364df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10c2bf96-e255-42ae-acdf-a3db2a8383c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8999ad-12ce-4e01-913a-41868a5bdeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c887e6b-281d-4506-b26a-bdec2d6fb852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8615b738-f417-40a5-a5d8-08771c1298a8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4376d6ec-3f4b-4920-a7e0-5ce773106ed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d915694-dcad-4069-ab9f-6b2804ba7f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d83a052-27fe-4bf1-886d-7150e835de48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909a7363-52ad-4efa-9aec-1e8cd4b915b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc84c8b-0e47-4ac4-a43b-6ef62069655e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7044766c-913d-491d-8942-5a9fa7dab383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "954494b6-5c7e-4a9a-b940-2ee63cb31b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201d0e2c-6807-4334-8844-b0c11d7ea28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c4f486-9e23-4b57-a07f-6541f73a2758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac53b3e-22e7-4d74-8f24-80e1505590df",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a517e14-5868-420c-a5c9-5d1d375e2595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c383da37-973a-4f74-8492-0021416edc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3867e124-5cdc-47d0-88f5-c0ac68854e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7759233-b4b6-44de-845c-5dd66d407fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad15923-4807-48c4-bfed-85e8c7a75bb1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf24fed-1537-4550-bd90-b3f3736099de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa825c8-a751-403f-9a21-fb20573ea69b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a611666-0631-4d54-aa3b-1e701ee4ed90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b862ae50-dfc4-4a15-8c2b-09725d43af27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ed3827-8ac5-4952-b21a-b48f010072e8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b1acb5-a4cc-4e19-b466-4f4dd0439f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb0c1a9-fc40-4b4e-8719-ad79986b9dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b9e3b2-f071-4200-91df-6390c10c2e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac97118-539a-4fef-a291-2fc50f99f98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b029913-36aa-4117-8a8e-4acf75f73081",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99212335-44b5-4c13-b728-45564f0ac624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62014cde-fc69-4a53-8f29-d2df02929ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7a09b4-2e7d-40a5-9567-2751a52feff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d002993-ce1b-46f6-9495-fc3db884f1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442585e7-8f68-4bc6-861f-cfef1cfd855f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1288d4-6cbf-4bd3-8294-061d4a1af089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cdec540-b3c3-45a0-99e5-021f2b662849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0aa4ed-1249-47ec-9ade-fe0267149488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463dea7a-01e2-40f6-891e-39d0b2ffabbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b463bfeb-a82f-49fd-90b1-9bfbea378892",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80adc0f4-baa4-4a9a-9fdf-8eefda465d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7a0ff7-8c15-4bac-831c-d3a7e613afea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c433cb6e-3f66-41f7-9322-a1e78eee4391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3997308a-a5eb-4eef-81a0-4926022213a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5f8beb-9b8d-47f4-afbf-efd656ae0ad5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a694fbc2-3566-4fe8-8233-d368ec6d00bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250a543d-9dfe-4dfc-a0e5-014daf7696f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0967422a-a3e7-4383-9abb-b58a114b3533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d8069b-b5c1-4b0f-a5cd-9dbb604344ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7f3af7-98e0-416c-9073-78766992273b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918c3831-1811-4544-a5d5-c485d6423fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78063a8f-16e0-46f6-b63a-9e51ee6c0962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3150c8-4999-49bd-9263-e9db35ad8a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d679d64-fed8-4731-8684-1f6965372448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f076672-1d4b-49a9-83e2-7bf35ec0b079",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e72f9e-6597-44d1-abb9-10e7f92429c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "263ad818-6e08-44de-a7d0-9b0bf1f15cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf3f02e-4780-48d2-88e8-89b0e86ed305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ef5f9a-6132-4bc6-beb5-3d1cddb1ee04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba9d323-5d4b-4855-b3f0-88eea959ed7b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af14970e-f3ac-448c-afd3-64c0888ceaa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5019dbbd-7d06-4f86-8329-b722b9897e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de6725a-aa66-4dc6-a0b4-36085fd5c023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad450dd-086e-43a2-9aec-338571603292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770f6240-366c-4ccc-ba09-518d223805ac",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a129e2d7-55b4-4796-bcc0-5dc915158cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ea0220-f8ed-489f-9c4f-47192e6b9b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e14817-5009-47fe-9d6a-21ec8e22d93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e895e67-78f0-48d0-adc5-5623360001fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02017b23-dc91-4de1-8370-262a713de4db",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6745a201-9d95-4939-b331-f71f9d748609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d356e4b5-f26f-4ac6-a137-26850c7fbe01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb21403-a3bb-41c4-8510-04e7ec09a47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6d3906-3c8c-4adb-b0ec-e54867d3643a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6281c3f9-c517-47f0-9b30-aa3c3360003d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89f9fb7-8e1c-4e1e-83f1-ee5f0abb3e46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f95bcb5d-f37f-46ae-8469-d06e6cae9703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace940f2-7e79-4121-871c-f2e41d2a134b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdee15f-6538-48f9-9a99-1062e1d80e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba9b9f0-9f20-4fa4-ab70-033ac4094f89",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c347351-609e-4e61-8db6-d02c16fe8da7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18cd6f93-ed07-4717-8a17-ba63cb19bd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d66892-e7fa-4a22-b5cd-3cc1b061f0fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a40f4d0-3fc3-4828-a514-95a37b7e80f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c4165a-d39e-4177-83c7-8bc1a76a6ec0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27cedee-8af0-4c2d-8d6f-29f660bec093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e74990-158e-47fe-9369-62a3920209ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42210a5-d90c-4f4b-bf8a-9785e9aa1479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39409741-25ba-444f-a292-5978a8ea9cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2064c8-0162-47c1-9f5b-653bb457e78c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef6596c-7511-4b0a-820c-9b087d342dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6882a878-3d31-455d-9eea-469b9c34756d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ae384a-ab67-41d7-ad32-880cc7cb6ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f9e170-2810-4f68-a37f-a502547b8d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35629a4-9488-4d6a-91ec-fc32e8075fee",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe42ed2-cc61-4af0-8fd9-d88466fe2e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc7a1f7d-4ea0-4e16-8e79-2a2ae2985f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2d6b01-166d-4999-8eb3-cdf178fc1c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15467298-8599-4608-a27b-b6d8de188ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7621b92c-2e2f-4191-9245-4c704d03dd57",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fa6b79-9664-4246-9412-2fb4a520d4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21e074c2-1fb6-4abe-a043-52ffe371d367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca68711-d82c-4f9d-9bd7-54ec4f971eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf26e47a-e77e-40e5-a1ce-35786296831e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7cc22b-8a50-44b9-b333-204bad59bd85",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0132dd61-250f-468d-b78a-b101aa7ecc6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f03ee587-9b93-4442-9042-0808a5cede39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8b7e0f-d890-4bc9-9a0c-e999786efbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f06a72-46ae-4f58-be1a-b69a6dd818dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1fc011-4dae-4dc5-8dbd-e8d9961528a3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c177baf4-024f-4ca7-b649-9f7983bf8a1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b37e804-cd88-423f-b40c-3d408fd62aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8f025c-902d-47a3-815a-b1346baf3fce",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6cdfa4f-c09c-42bd-ae49-56e3cdf84141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98484651-3f93-404d-81cf-955ce61cf972",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8650a6f-cc31-48f3-a396-3d1550043d14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23504cf1-2906-458b-a5e2-0ec36ccd9de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a33cec-d701-4848-99b8-5c10f4ebca3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a14519-d2bf-4e8c-9610-591115c07f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7482c51-0ed5-4102-a799-900d1ef4457f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d2835f-58fc-4a1f-8470-6c58f2281f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1754b6d-3200-4888-b7d3-62da9c63fff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558ac165-11fa-40aa-89ca-379a795ba729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a4e4e6-cf2d-4cbe-8c55-86f1ab627c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2458056-3034-4e5c-ab98-7158c3696c0e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca04055-5c9d-4481-a2fb-35c159637ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c85f241-10c4-418b-a1cf-605a734cc088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb671948-ceeb-4499-a07c-a50d8aa5e449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670877b5-f6aa-4c9e-83f3-d8299e78a95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511e4776-5894-4346-bbc2-87bc08a99da6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a555b6fd-e7ba-4b72-a027-a52269b8045b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c69582-eb5e-4de2-99ff-463d6a1ac936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1964ce96-47d6-4ea9-b11d-7c7119426689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba482617-d1af-4000-8531-ffaaddc39717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dacecc-eab5-4fce-b55b-c20cf3a79228",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd25bb2a-7a51-4844-adba-4245c93f9e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32af0ce7-e194-45e3-945b-a55640c8c0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34839204-8b25-462c-ab1c-b0e6cd0a5710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f1f2f5-a131-4c72-a7aa-f5cc4b0479c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01c86a7-1f11-4694-af2e-a0b92c5f3d0a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb785a41-e6a6-46d5-966b-9daef30a2c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f89cbd54-6cd9-40cf-b324-de838df62738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b41e2e-cc13-4c93-a348-daa2038ae59c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11ef258-e6dc-4d40-8f55-83dd680d5ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9786d36a-e22e-4003-b941-5c118156e5f2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d5a528-d8c6-4723-8c70-e4c6f40a152c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f170acef-2290-496e-82e6-7a92522d2365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc760e5-45ed-4b9c-a7fa-718aaf3dfcc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5b1b49-faec-4ace-a520-385dbe98c63b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "161f4d81-14b4-4eff-8ac5-e5ec7b951b63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f87ae613-64dc-4ee5-9c76-268e0ceab19e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ff96e76-6aac-42cf-b6fe-d99ab71c72bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1eed3e2-bc06-41e9-b30a-295c7bc0bfb8"
                    }
                  }
                ]
              },
              {
                "id": "8b04b2d2-1d76-44e8-918f-bd6a58af999c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f370b835-3bc4-42c5-90f3-3667dc23d345",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b098320-39d1-4ad3-a1a4-ad79f4b2aeac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "11a2b1fe-6495-4737-8bc5-38fe5b3d0928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0648b531-7cb2-4007-b672-b6c0f85c4c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e32de082-ed8b-41da-82fc-dafac3021df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1ff435-32af-453e-9969-fae37d28cf50",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf20ae9-284d-43b2-8ded-474d539a5b16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7db2c72d-a43c-4026-8eab-cdaff88ba585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109cfce5-4fbd-4fde-866e-cdad9e637309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bfd522a-0209-49e2-992f-0a40cd7d86f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2c536c0-2ef8-4a4a-845c-42a2088a977a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62d1a0d0-fa78-48dc-97d9-2226406ba095"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad4ae84f-e45c-4030-b9a8-935a260f73f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d2169f4-270a-4393-9122-6219a60d967d"
                    }
                  }
                ]
              },
              {
                "id": "fe1d2b64-d721-462c-8fcf-bb0df68c8ba0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0a12e6b7-9507-4cf1-8af2-c59a63b56b34",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b33efd-b19c-4d17-ac21-ea94a3013b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e4f4bd2d-bb56-462b-b84a-a741c8264471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893d61c7-cca2-4c6d-ae22-fe25d551a488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ae652c-58c4-4ca6-ace7-397bf2fff1eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ce4eba8a-0ede-4e2b-9668-c4c34210127a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ba015e2-722d-425a-80d3-1780409f33b7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64fb08b0-3bfe-4024-8d0e-74f53aa93b84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "89f7125d-1321-4a3e-ae46-f3b00a917b0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0571498b-31a8-4eff-ab33-d6e460dd1a4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c15517d-2ed5-4553-bd2f-3496707bf028"
                    }
                  }
                ]
              },
              {
                "id": "4bbcb4bd-6e2d-4c03-a436-89438cb16d26",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccff8997-018f-41fc-99c8-34894969a2ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "afab2278-6315-48df-99db-3b649426182e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d21414c0-52f5-4a53-a80e-4474a22d4f06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95cff778-38ec-4885-9515-d89b8689a1f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "179569b3-b64a-43b7-b242-b005dade170a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "40f49483-7515-4829-87e5-a15e112c7f43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0ab651-0e99-42a4-91ba-dd50572e8860",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d3a1026-1fa3-46dd-be1f-083a2698f27f"
            }
          }
        ]
      },
      {
        "id": "94b67888-37e8-4fd8-9901-157bba21882d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b362903b-5072-4091-a148-fb6e327f4684",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07a9feab-473a-44ba-af71-b4c90f8b44e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ddd56a-e6ef-444b-a1d2-37f5a8293cf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "163e4460-ae18-44e9-9a3f-51a064ad6acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad0c2f7-7ad0-4f95-ad3e-97b424effbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dd0f24e-1303-4c17-81b2-df8f0b7df509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e6815f-8395-4823-9a68-efd8edb1b060",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60e31e6-1f29-4740-a9fa-7235544ac8fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4f5248e2-c02f-430b-be3a-984c481ef282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40789d0b-9b37-409e-b36b-5663f87c3f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "668ab486-ca35-4886-96bf-ae9d5161386c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7595cf7d-3a85-42a3-9843-0840e9b2e755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ca9da42-4fde-465c-ab7d-2c49e276d4b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcec4296-2d1b-424e-8ae0-177908a258fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "826c19d3-05e6-48d7-994c-c992c8d7aa31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2fe9de8-a209-44ac-b992-a7a5d6ed4c0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7ff01818-caea-479f-97d1-307620669aeb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8b3a173-b255-47db-ba7a-bdd2fe308d59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d4831b8-06ac-40de-b84b-729a92f840cc"
            }
          }
        ]
      },
      {
        "id": "d56d6c47-c735-445d-8ebe-cb0de4fe41f8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6b29baa3-5936-4adc-bf3c-94909b7ecdba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5919ac9-f358-4c97-a8a9-a4ce2d751854",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "298e2cfe-0997-416e-a721-92a962fadec6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549eae49-aa66-4330-9965-7fe28662056b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01c5c011-b711-4ec2-933a-2d742e637965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989dab74-cee0-49c1-a84d-1d50ec77a17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e39184e-8774-4584-939f-c2fa9a660533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71a72b2-baa0-44ad-8041-182956738d94",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a6da1d-d3d8-411a-a402-fbd3417efc79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3feda184-ccf1-4b3a-a23f-4fa0c6225ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397f646a-35c4-42c0-913e-dd54f21e9ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e279f114-301b-44f9-adca-abe859525e36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ddce37a-88f4-432c-8d28-d8e852c4357e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e7a1ec2-8d35-4bad-bb49-5d4f20026061"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "668ddaca-6fc1-4582-b557-c39d3d1359b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ba4fdba-abdc-4fcd-b5d9-6b23671e821b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f198587-54e4-4a00-b7d8-45cee746fd62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e92cd374-abd7-414a-8674-9acc0a851e64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2cdc3d6-864e-4974-ba47-79ce78a90c6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1ab761b-a571-4378-936f-fa8da2be9157"
            }
          }
        ]
      },
      {
        "id": "5c5386e2-6323-4f28-8c81-e4ac4890c8e9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6a1ae666-760d-4f56-8f2a-dced9adcce2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "837c1dbd-e55d-4715-a4e6-7abdaabc7820",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1864d5ce-9a92-4e9c-b34a-c9d56c228981",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5574a1-2145-478b-8e37-a8a495ef404b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0bd417e7-ccd9-49a2-aeaf-56afa155771c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd4daa7-6988-40da-8df2-b4bcf77b886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17467de1-4df1-41be-99ef-f604e7b209cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9676be-e29d-442b-b333-0cb57dd1a832",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9691c2a-ee45-4a12-bb5e-f773c9fbd149",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de112a87-6f2e-4940-8685-618ad0d3ebf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf13198-ef22-4ebe-860f-f8584475145f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9dc0aea-9388-4b28-b414-2088c605496a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "887b20e5-db4a-452f-8f3d-faee9d2711a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a3ae185-ae26-427e-8d4e-1b4a476e65c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e3b555f-51c4-4893-b40a-464b5ba20279",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16ccb3da-fbc5-481c-83fa-eb843c939351"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36422cb5-8d43-4ebc-9258-cb46e089be22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7def0be6-465e-4d5c-8ecb-a7d229bb6b5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c18db1bc-c5af-41bd-a966-f7e2a557ffe0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1580d3fe-95e8-441e-8fa1-a7a18fa8d0d5"
            }
          }
        ]
      },
      {
        "id": "4933c071-a482-49fe-87ba-56ca06cea848",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2e492f2-1835-4979-a31b-807d44972c8e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "036b2aaf-e8c0-4413-a7fb-0fc8d64d6517",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bf1480b1-eefb-4001-bd04-09fb791b47f9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eca742c-e1a5-4a31-ab42-d290bfc91d39",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f743b230-dfe0-4196-afbd-fc73bcbaa464",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.77220077220075,
      "responseMin": 7,
      "responseMax": 233,
      "responseSd": 26.358060158347048,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676767319777,
      "completed": 1676767352576
    },
    "executions": [
      {
        "id": "8047edbe-af56-4433-8d44-e7e87c220b46",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c17fd64b-e9a2-4e1e-8e5b-4f802321c111",
          "httpRequestId": "6e4378e0-5e4c-4513-b2fb-be1aca83ba94"
        },
        "item": {
          "id": "8047edbe-af56-4433-8d44-e7e87c220b46",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f60a331d-1c73-4954-9072-b9bdec6df0fa",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "f50e8b3d-74fd-4d88-a15e-58e3a0332649",
        "cursor": {
          "ref": "4c68656e-a8bd-423a-a8f8-97a312b0c6ae",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e3c0688e-10ee-4264-b285-294e7138f4cc"
        },
        "item": {
          "id": "f50e8b3d-74fd-4d88-a15e-58e3a0332649",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c4241f13-a3a6-4f7f-a455-df4635cf5eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "e4306012-d79e-4b54-b01b-375614423882",
        "cursor": {
          "ref": "b49dd7e0-8275-494a-8df4-95b420c63544",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "743d79a0-1574-4748-ba4a-10072d5c254b"
        },
        "item": {
          "id": "e4306012-d79e-4b54-b01b-375614423882",
          "name": "did_json"
        },
        "response": {
          "id": "022705f5-1230-4055-aec5-7e28109d2454",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2721105-0981-4cf8-b279-d4a21a052daa",
        "cursor": {
          "ref": "29189ab5-df50-483d-91cf-0b5f1588e6c9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aeef2d2e-6104-4978-90ce-bcc1d31576be"
        },
        "item": {
          "id": "a2721105-0981-4cf8-b279-d4a21a052daa",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e40cf41-0298-414a-a932-ab7f994cd5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a2721105-0981-4cf8-b279-d4a21a052daa",
        "cursor": {
          "ref": "29189ab5-df50-483d-91cf-0b5f1588e6c9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aeef2d2e-6104-4978-90ce-bcc1d31576be"
        },
        "item": {
          "id": "a2721105-0981-4cf8-b279-d4a21a052daa",
          "name": "did:invalid"
        },
        "response": {
          "id": "1e40cf41-0298-414a-a932-ab7f994cd5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b8e92b1a-2c33-4a3f-9d69-ba2df075c6c6",
        "cursor": {
          "ref": "84c7bf28-9250-4102-bc6e-e7e698cdef2f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "326df90c-5a2c-4908-b5d8-024f20ba8b09"
        },
        "item": {
          "id": "b8e92b1a-2c33-4a3f-9d69-ba2df075c6c6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9886e35a-df7b-4c9f-a23e-ce7b4909b3b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476f2eb3-2c36-49f3-b833-b131f7d9cb51",
        "cursor": {
          "ref": "66b0979e-a401-4fc8-b885-63b10b5ffa31",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "82e7e922-7894-43bf-9382-b991e5f3c22f"
        },
        "item": {
          "id": "476f2eb3-2c36-49f3-b833-b131f7d9cb51",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d0fe3715-46b9-4cd9-8480-9b07418596b8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9dcb5e-833f-4f60-8050-d43834b3473e",
        "cursor": {
          "ref": "be8f66ec-4f6d-4c67-9fe0-45667a5b5555",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1f068010-a920-4931-8c86-ad6205f19d90"
        },
        "item": {
          "id": "7a9dcb5e-833f-4f60-8050-d43834b3473e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7fb80261-49c6-433c-bcf6-7489d8b96437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bac50ef-b10e-4af3-8db3-bfbeead90741",
        "cursor": {
          "ref": "960d5be8-2f0c-4b1b-99ef-ac7ef883da78",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f67499fe-c12a-4aad-9613-afdee0354136"
        },
        "item": {
          "id": "6bac50ef-b10e-4af3-8db3-bfbeead90741",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "22eee303-069e-41ad-b8eb-9c3c4972d713",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bac50ef-b10e-4af3-8db3-bfbeead90741",
        "cursor": {
          "ref": "960d5be8-2f0c-4b1b-99ef-ac7ef883da78",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f67499fe-c12a-4aad-9613-afdee0354136"
        },
        "item": {
          "id": "6bac50ef-b10e-4af3-8db3-bfbeead90741",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "22eee303-069e-41ad-b8eb-9c3c4972d713",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5091bc4-9ba7-4cc6-a547-b407beae78b1",
        "cursor": {
          "ref": "0ba271c8-decf-4de9-8e85-097f3b928618",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "63dab5b6-8a02-4500-a8a3-0374464cf48c"
        },
        "item": {
          "id": "f5091bc4-9ba7-4cc6-a547-b407beae78b1",
          "name": "identifiers"
        },
        "response": {
          "id": "2df3b313-da3a-4d73-ac31-34684d555cb3",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304ac48f-e424-4c51-80c4-c161f100d28a",
        "cursor": {
          "ref": "41e37d3f-7240-4e7f-98ba-a3de25a97651",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1f79d307-f521-46a3-b434-6cbff50cb8e1"
        },
        "item": {
          "id": "304ac48f-e424-4c51-80c4-c161f100d28a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21b61076-44c4-4a61-93bb-56796ec8f75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304ac48f-e424-4c51-80c4-c161f100d28a",
        "cursor": {
          "ref": "41e37d3f-7240-4e7f-98ba-a3de25a97651",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1f79d307-f521-46a3-b434-6cbff50cb8e1"
        },
        "item": {
          "id": "304ac48f-e424-4c51-80c4-c161f100d28a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "21b61076-44c4-4a61-93bb-56796ec8f75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a441dfd6-a917-4e02-bb92-a15ab7d2b045",
        "cursor": {
          "ref": "2556a144-9505-44ab-9d38-2cab0d016fac",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8c623f8f-c497-45e7-95ed-ede0dee9791f"
        },
        "item": {
          "id": "a441dfd6-a917-4e02-bb92-a15ab7d2b045",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d5fb09af-b5eb-4161-bf74-1d1bdde2851d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebbbcac-6283-41de-9b5d-b76aa18a7154",
        "cursor": {
          "ref": "a9eba9d7-0a66-4a84-ae7d-67f508926e0e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "615cf328-4ef5-43ef-91b9-8cdc25163fec"
        },
        "item": {
          "id": "6ebbbcac-6283-41de-9b5d-b76aa18a7154",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "351d35fa-5c47-4e94-a737-595fe5b77d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98217e3-420f-4d72-918c-3c799d8a5957",
        "cursor": {
          "ref": "3f82a026-af22-4f30-abd2-1132e1a11281",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "08989f71-f3fc-478f-bf6a-4bfd17a0c504"
        },
        "item": {
          "id": "b98217e3-420f-4d72-918c-3c799d8a5957",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f0af0ab0-d46b-43ad-abb3-c0f9e05a66df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50de45a6-5cf5-4c5a-bdbc-90880ce3c41a",
        "cursor": {
          "ref": "9746860d-9df9-4677-8ce0-1c0fad5e6a5e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f79a2c4a-fe7e-4b73-af8b-caa1eb8317fa"
        },
        "item": {
          "id": "50de45a6-5cf5-4c5a-bdbc-90880ce3c41a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed5ffe2c-b9c4-4540-88d6-9ab9383764cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6e88b-a6d5-4cf9-9dc0-96c952bea1cb",
        "cursor": {
          "ref": "56f852e7-970f-4345-9c58-f4c44fc48a10",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6eef3d16-eb0d-4d43-b01a-3ee39dd34566"
        },
        "item": {
          "id": "fcb6e88b-a6d5-4cf9-9dc0-96c952bea1cb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e775c06e-26d6-4806-9c5d-3976f783a1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04fb6d6-3284-4689-a37f-db7cf2285cad",
        "cursor": {
          "ref": "e41390f8-abc0-49be-be92-2db20a808a2c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "512c0d3a-17f0-420d-b946-e08674c86e5a"
        },
        "item": {
          "id": "a04fb6d6-3284-4689-a37f-db7cf2285cad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4cfaf080-3859-4836-8733-401587431d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064ae900-49f1-4ada-b2f2-49eefb7aae36",
        "cursor": {
          "ref": "8dc7d349-cc9c-4a64-89c0-a7b486997c37",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9190e220-7df5-470e-bdd2-c6144213b4fe"
        },
        "item": {
          "id": "064ae900-49f1-4ada-b2f2-49eefb7aae36",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "78f27e21-7a65-47a9-83c8-1402f75c1059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae04e10-0777-414c-94e9-3554cd179238",
        "cursor": {
          "ref": "318f286f-497d-4d87-a11a-c9087c014fd7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6118e891-5d56-4cea-b75f-7f2a46508a55"
        },
        "item": {
          "id": "5ae04e10-0777-414c-94e9-3554cd179238",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fe0b3713-90c4-42a5-bfb8-56abaf908f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30554e03-9e39-4ca0-af03-16283a655f4e",
        "cursor": {
          "ref": "abe09a8f-1c89-41f9-b917-9e0ee0102a2e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "01992943-5829-4cdd-ad8d-84f1c2dd0e7b"
        },
        "item": {
          "id": "30554e03-9e39-4ca0-af03-16283a655f4e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "64359949-cc58-4fc2-8351-31a56886f299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b74606c-2bf1-4a65-86fc-9c65c446f3be",
        "cursor": {
          "ref": "1d6b0d9e-9951-441c-af10-3d72bcb01eee",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a8c45951-f374-4539-9562-82bdbaf79e8a"
        },
        "item": {
          "id": "2b74606c-2bf1-4a65-86fc-9c65c446f3be",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "abaf5163-912b-405f-aec9-772040f75c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f8401c-7429-4939-a717-82542ceb7cbc",
        "cursor": {
          "ref": "eaf6441d-f9b1-47b4-878f-fb4c9d382415",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "884f6663-4434-4624-9995-5eb9cfeac02d"
        },
        "item": {
          "id": "a2f8401c-7429-4939-a717-82542ceb7cbc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1c691495-efa6-4f6b-81e6-9517802c870c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ade3bec-5ff5-41a7-b805-cefb6c0c61be",
        "cursor": {
          "ref": "b1f87fd7-64d5-4c7d-a542-0891a2f9e98d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ac68dbe4-9252-40a3-aebe-a1102ccdaec9"
        },
        "item": {
          "id": "1ade3bec-5ff5-41a7-b805-cefb6c0c61be",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "14653ac6-132a-45db-8524-dac9e886e2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af57d905-5916-4b7f-9c43-069e00da548e",
        "cursor": {
          "ref": "7729a1b9-9ae8-4c0f-a5e4-7eb0bbcefb98",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "433681fc-e9d5-47b7-b62b-da372743b623"
        },
        "item": {
          "id": "af57d905-5916-4b7f-9c43-069e00da548e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "616b4398-cca2-421c-ae28-ac1eaed3f6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b404daf2-3947-45cd-bb67-a9b97135078a",
        "cursor": {
          "ref": "44cd932e-bc3e-45e7-af9f-15e384aaae3b",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4f30013e-872c-455c-81e7-aaa977543e4a"
        },
        "item": {
          "id": "b404daf2-3947-45cd-bb67-a9b97135078a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0aa013f7-26ba-4184-9f27-9b648d1a7e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7196249c-850d-4699-abc1-83cfa7989133",
        "cursor": {
          "ref": "b056a193-bb47-4cd1-bdaa-b0773bee483b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e926b312-4fe6-4f4f-b844-9102837a2cef"
        },
        "item": {
          "id": "7196249c-850d-4699-abc1-83cfa7989133",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3505be9f-d896-41f9-b0ae-7cda8a9d0d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35dff44e-facf-4b47-a8a0-10b921e1d51f",
        "cursor": {
          "ref": "6535e3a4-c0c1-4297-a12f-987e27cdd0df",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8b6c9dba-1b16-4b86-ab87-ee61f67e6958"
        },
        "item": {
          "id": "35dff44e-facf-4b47-a8a0-10b921e1d51f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "415a7848-6cd7-4030-a686-d0a290bdb417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd73f93-bcaf-4f60-bda4-5d3afc55180e",
        "cursor": {
          "ref": "b0ce4709-d27b-4e47-bbaa-ffde9347ccd8",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "204cadff-7cd4-423c-81f0-44d5580a2869"
        },
        "item": {
          "id": "acd73f93-bcaf-4f60-bda4-5d3afc55180e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bee342b2-6f8d-49eb-a27f-553de3ed5152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3f739d-2a78-4634-bedc-96511bb5fe91",
        "cursor": {
          "ref": "a84fe56a-5499-4d69-9966-3486ef48fc69",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "215c8a18-31f1-4182-bf7b-98f210781921"
        },
        "item": {
          "id": "dc3f739d-2a78-4634-bedc-96511bb5fe91",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e05eb181-0a26-4719-973c-ed425985990f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7672b76f-3d37-44ba-a480-dfff3c0549cb",
        "cursor": {
          "ref": "1f40bfc1-0781-49ff-860e-a34826f036a2",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e6531ee-a2ba-42eb-ab27-9b397f41ee31"
        },
        "item": {
          "id": "7672b76f-3d37-44ba-a480-dfff3c0549cb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9f0586da-bd0f-445c-9e20-ad5e15597961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8376c766-5ec3-4074-b611-c1ba9b94e28d",
        "cursor": {
          "ref": "cfe49d15-2146-408c-964f-d8947603ef9a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bd1b24ab-b5c5-4602-818c-a1ddd5d16a67"
        },
        "item": {
          "id": "8376c766-5ec3-4074-b611-c1ba9b94e28d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "64de31da-cf44-4c6a-a7c9-b8065f364b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f981a80-bc96-4769-b618-0f42e426e874",
        "cursor": {
          "ref": "489eba9a-1dbf-477d-abc3-2ad8e63e6eff",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "563bbee2-b301-4397-a6ad-ccaf46b37998"
        },
        "item": {
          "id": "4f981a80-bc96-4769-b618-0f42e426e874",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2ab6a2f3-0195-46ae-8fc3-8ab03dec732c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331377d0-fb86-4812-84cb-d77fb81b3ef5",
        "cursor": {
          "ref": "8810aaa0-4f10-4bb7-8d63-e641b00815ce",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "defff145-dd91-4b9f-8de0-1469cf136bf1"
        },
        "item": {
          "id": "331377d0-fb86-4812-84cb-d77fb81b3ef5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5fe8bbee-4a77-44f8-b5a7-41512130cee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3e6460-4a57-4193-8335-139cbc3575ad",
        "cursor": {
          "ref": "85cbbecd-acf2-4a2a-9984-86cdd3a69d8b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "42f92bd6-8310-4687-835c-5794ae07982e"
        },
        "item": {
          "id": "cf3e6460-4a57-4193-8335-139cbc3575ad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "912fb66c-d347-4365-b52a-da63f00f91ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece8bfc8-208d-427e-998e-b814c4456f57",
        "cursor": {
          "ref": "a20b0882-c0ce-4ae2-8581-da9b391bf9c7",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "aa9b9b52-ddb1-4839-ac23-537063eb13a8"
        },
        "item": {
          "id": "ece8bfc8-208d-427e-998e-b814c4456f57",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d5dff19f-1f47-4b96-b584-51c60962cb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655ba15f-6e93-4d7d-9608-b64ea8f0541f",
        "cursor": {
          "ref": "7b8de3a5-d102-4cfc-b25c-7bb7e42639c6",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fa58b9c9-92ef-46eb-a34f-8e8ccf03422d"
        },
        "item": {
          "id": "655ba15f-6e93-4d7d-9608-b64ea8f0541f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f85c89a7-5fab-4297-965d-8f0c6cc233c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170574fd-e62a-4ef2-b954-3538fb9428dc",
        "cursor": {
          "ref": "3dde2f6f-7538-450b-b4a0-7e47b72891fe",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "53d97fc9-e0e0-4848-924c-51f6e43a966a"
        },
        "item": {
          "id": "170574fd-e62a-4ef2-b954-3538fb9428dc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "083741b6-e58e-4728-9560-ef9e4843f069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1717f5-d45b-4ada-988a-97a86e6942ad",
        "cursor": {
          "ref": "63e3f9fa-3ee7-4854-852f-629d033aeeb7",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "128f3dca-35cd-4e95-ac16-8437ec859b98"
        },
        "item": {
          "id": "1b1717f5-d45b-4ada-988a-97a86e6942ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d9223766-e340-4e7c-bcca-d1cf10f75638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da889c16-477f-499a-af3f-5e55f9e53a7d",
        "cursor": {
          "ref": "3f8f3f42-15c7-4028-9281-fd7dcd1ee7cf",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "49890578-b997-4622-9335-527ebb71bdcc"
        },
        "item": {
          "id": "da889c16-477f-499a-af3f-5e55f9e53a7d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "17444815-ad0e-41ca-b636-60cbdd92ba98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20671ec4-e8cb-46eb-bd8f-33a616031995",
        "cursor": {
          "ref": "410d5213-128e-4ca0-b3f8-b4222d846d04",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "572d4bb3-5c67-4e8c-bb2d-bee96b534b72"
        },
        "item": {
          "id": "20671ec4-e8cb-46eb-bd8f-33a616031995",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fb06e45b-683f-440c-9484-9f4d045fe115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054ee276-470d-435f-b7bf-acc9fc564da4",
        "cursor": {
          "ref": "094049f8-1ae3-4355-9e36-bcb50824533d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "999286b1-426f-44cf-8884-ab134f1ce01b"
        },
        "item": {
          "id": "054ee276-470d-435f-b7bf-acc9fc564da4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ace6046f-9625-43b1-97c0-6dc19dd6681e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428da0ae-1352-4f7d-ada2-61b614088094",
        "cursor": {
          "ref": "ddbe93c3-d22c-43d9-ab3f-6305fa993974",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f85a729-76a3-4130-9ee8-5fed2b420b63"
        },
        "item": {
          "id": "428da0ae-1352-4f7d-ada2-61b614088094",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ac4da28-dd4a-45f5-9149-410168ef9b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccae342c-2fc2-4a5e-81e4-47b21baab096",
        "cursor": {
          "ref": "007473d6-bef0-4874-a793-a4504c14dea4",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9b2608b4-2a8a-4273-9e81-9cf82bbb1940"
        },
        "item": {
          "id": "ccae342c-2fc2-4a5e-81e4-47b21baab096",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a13c8ca6-5596-4406-8158-63df2ef952f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d533aab5-2211-4b73-ae8d-149d4cd25670",
        "cursor": {
          "ref": "c3c32128-6753-4651-b0f5-d51aef07bc9a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d3dd706f-b499-4047-865e-9387e4bec6a5"
        },
        "item": {
          "id": "d533aab5-2211-4b73-ae8d-149d4cd25670",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "eaa38679-284b-4d2b-95e0-929de05c389b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ca9ca0-9e40-481a-82cc-33e1deafeb8f",
        "cursor": {
          "ref": "7f2e75bd-7d6d-4c7a-be29-316dcad9b40d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e0e9546-d7c4-4fa2-9c06-8a680f174679"
        },
        "item": {
          "id": "80ca9ca0-9e40-481a-82cc-33e1deafeb8f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "03825bbd-7a61-4a08-8559-77a0c5e4f868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9a6815-efde-4912-9515-c418d84d84b5",
        "cursor": {
          "ref": "f0f7e0f4-4c0c-404b-8b97-9d59a4ececde",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "766f383f-e9d5-47ee-a9f7-368eec20cdf2"
        },
        "item": {
          "id": "3d9a6815-efde-4912-9515-c418d84d84b5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a5fc94f-147b-4882-b84b-154216c00704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6f75c8b0-3fe6-43c8-ab67-2ad3f50417c0",
        "cursor": {
          "ref": "dad3bf26-c1fa-4b36-abba-92798bc195e2",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4b5ebfd7-2447-46e4-82d4-c0c5898cf8a0"
        },
        "item": {
          "id": "6f75c8b0-3fe6-43c8-ab67-2ad3f50417c0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b216a1b5-6258-46ab-b445-a15a809b7bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca81978-40f0-4d27-95dd-01dbf1076f5e",
        "cursor": {
          "ref": "01c1ab6b-5112-4bab-8124-77f6307d027e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c621be9f-cff5-4687-9f3e-4ea897be957a"
        },
        "item": {
          "id": "aca81978-40f0-4d27-95dd-01dbf1076f5e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "daec65a6-4665-4142-9263-f8ba0da3f874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3eeb18-143b-4b3c-9a2c-e4a2091927b8",
        "cursor": {
          "ref": "738371a7-0b80-4a02-ae15-d4a84718af29",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7056cb0e-5b2b-4baf-a85c-3b2e6e0a4674"
        },
        "item": {
          "id": "3b3eeb18-143b-4b3c-9a2c-e4a2091927b8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "edd9b1fe-2ea2-4717-8b05-daeba9ca1ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c954f97-f5e2-44b7-b52e-65e891a03402",
        "cursor": {
          "ref": "c01bb03f-4bec-4282-9a68-4ae71d94dc9b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0b6a9e9f-ff94-4c2b-b655-70720d2faea6"
        },
        "item": {
          "id": "1c954f97-f5e2-44b7-b52e-65e891a03402",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d41ee28e-da47-4f78-8c06-7ae911b85349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce72e2d-91a4-4dc2-b01f-7e326507a657",
        "cursor": {
          "ref": "92a55b67-d99c-4d0b-94ca-a525222104ca",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "204c6567-b462-4996-9880-d146e922d9a0"
        },
        "item": {
          "id": "7ce72e2d-91a4-4dc2-b01f-7e326507a657",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b0f4df59-8d9f-4825-b56e-ae76266c07db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c486dc33-5400-49c6-a191-82ab8550f296",
        "cursor": {
          "ref": "42eb8292-35cc-4a6d-90f6-8f9f807b402d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "136fad38-5304-4945-8e2d-2283c30b664a"
        },
        "item": {
          "id": "c486dc33-5400-49c6-a191-82ab8550f296",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a94af68b-7ee8-4e60-91d2-bde45d5206cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c7f580-0d73-448f-ad16-91329faeb8b7",
        "cursor": {
          "ref": "38889e28-965a-4fc7-8b47-ae8cf1f0c78a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ee2e659d-9fce-4a4a-9762-dffa7f1abdb0"
        },
        "item": {
          "id": "93c7f580-0d73-448f-ad16-91329faeb8b7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "74f3148a-e120-4172-acd4-6128a051752e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "97a596fe-163f-4b34-8cc2-3adf34599668",
        "cursor": {
          "ref": "a6358d9d-0b9d-4f28-8efe-4554790df360",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ec7b951c-a545-41a6-94a4-e08eef6b30c6"
        },
        "item": {
          "id": "97a596fe-163f-4b34-8cc2-3adf34599668",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2e39ce30-aa12-442b-8950-52e731885de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd4f725-c5ca-4d7d-ad4b-6942273ce95a",
        "cursor": {
          "ref": "eae21d1e-1837-49c5-adb5-baad473a0b1b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3e3f38aa-58ac-41ec-86ed-11d6f532baf6"
        },
        "item": {
          "id": "7fd4f725-c5ca-4d7d-ad4b-6942273ce95a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a34ac9d5-ecb1-4813-af1d-f3943d376c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bb3bbf-9be9-499a-89b4-6aca2b77a52f",
        "cursor": {
          "ref": "49cad43f-7641-4217-a2a5-8bb81d7faeb5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7b23a66a-3cb9-49c4-ac23-cc79577ee8e3"
        },
        "item": {
          "id": "74bb3bbf-9be9-499a-89b4-6aca2b77a52f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ad3e6eb0-3d25-4d60-83f5-601b5709756d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b408d5-ca73-4fbd-91c9-65b278e3757f",
        "cursor": {
          "ref": "70c72318-4824-4d79-b45c-854cf119ad97",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "adf54554-73d6-458e-bcbb-d87fa077fdd8"
        },
        "item": {
          "id": "77b408d5-ca73-4fbd-91c9-65b278e3757f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7d04f8fb-f4fc-45af-b0c3-66e1245805c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b33f07-e419-49c6-8629-0e7108f62517",
        "cursor": {
          "ref": "6ababcee-4fc9-4614-bb8f-5633bc2335d6",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d8ddd95d-658b-4ed4-89a1-9e20ac133f01"
        },
        "item": {
          "id": "48b33f07-e419-49c6-8629-0e7108f62517",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2dba5601-6f69-449d-9b06-895f5ec5a9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6adc03a-4634-4d7f-a8e3-88b04a5ddcd9",
        "cursor": {
          "ref": "620e0e1f-344d-412d-a21e-0daeaabb0f96",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c180df37-a1d9-40be-b593-e776361e8223"
        },
        "item": {
          "id": "b6adc03a-4634-4d7f-a8e3-88b04a5ddcd9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f4202714-4f6f-4853-adc5-f7b724cb0e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7769adb1-481f-4ea8-9657-480b0a1841de",
        "cursor": {
          "ref": "1ec32a62-d93e-4c8b-9358-d1387ba0df71",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5d897842-a16b-4047-82b0-1ea3c655b8bc"
        },
        "item": {
          "id": "7769adb1-481f-4ea8-9657-480b0a1841de",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6e975d40-a03c-446f-8e18-b21f5a4e3f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4aeab54-c2fa-4601-9579-8fd996df8faa",
        "cursor": {
          "ref": "536ab41f-c326-4f60-9879-72598f75022b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2c73b60d-59b8-44ba-9c29-efed55a2fdbe"
        },
        "item": {
          "id": "c4aeab54-c2fa-4601-9579-8fd996df8faa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dfb4b039-ea95-4371-95ab-7d6b2f65eb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf9d842-2873-43ca-9d82-4ec4adb999f9",
        "cursor": {
          "ref": "b2d5e1e5-ee74-48b6-9bf5-7057d9dd5666",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "47ef7be7-00fc-4882-a3ce-122e4f3c8a16"
        },
        "item": {
          "id": "cbf9d842-2873-43ca-9d82-4ec4adb999f9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "02148d92-dba9-4fa6-ab38-01bccb07b7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf32a238-cd0b-4b0f-8c99-28dc40855e6a",
        "cursor": {
          "ref": "8c9f258b-6ec8-4c35-80cd-59bbd8c37aef",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bf015cc3-b291-4f5a-a312-4729b7122868"
        },
        "item": {
          "id": "bf32a238-cd0b-4b0f-8c99-28dc40855e6a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6d790fc3-5609-486d-9b35-7b7ff38012d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da8b73a-f923-4240-bc41-e0567f03618c",
        "cursor": {
          "ref": "f543ecef-e3f4-4578-adda-76f4a3762421",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36c73f9a-564f-48ff-a0d4-3369f2cd0c12"
        },
        "item": {
          "id": "9da8b73a-f923-4240-bc41-e0567f03618c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2bf4370d-a6c7-4304-a04e-bc16d4281b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c3df4e-00f1-4f9d-8709-17784ca75cb5",
        "cursor": {
          "ref": "0a4cefeb-3dff-4160-bda9-1c396a944835",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6ddc74c7-27f3-4629-8975-698cb00588fd"
        },
        "item": {
          "id": "f9c3df4e-00f1-4f9d-8709-17784ca75cb5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6bb7a076-742c-42fa-b152-411986b9cacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb8b979-a480-4047-9405-98e63cef4740",
        "cursor": {
          "ref": "ca6a3b29-1c45-4a56-8c76-e418ce91f02f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7c4e92ee-73af-4a62-a237-bd7e15dd2458"
        },
        "item": {
          "id": "bfb8b979-a480-4047-9405-98e63cef4740",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a64646e2-6018-447f-87cc-657398702dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca3b14c-534d-4e3c-afc1-5b1b8fa0326d",
        "cursor": {
          "ref": "a08000be-e6a9-4048-8998-b6624fb22bcc",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "82928787-849c-484e-bb57-e2cf5cc231cb"
        },
        "item": {
          "id": "eca3b14c-534d-4e3c-afc1-5b1b8fa0326d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a854a39c-1408-429c-a541-09770508acee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1958bd9e-af18-4292-aff2-80f036e5128e",
        "cursor": {
          "ref": "780af9a3-9a1d-40b8-a855-d9d2c0ad4f90",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c3301684-a510-40bb-8e22-7cff9f8e02b8"
        },
        "item": {
          "id": "1958bd9e-af18-4292-aff2-80f036e5128e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a42bd81b-7f3f-44ca-b0b4-d56d058444f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bf175f-32a6-42ca-b008-348f50230296",
        "cursor": {
          "ref": "2dfe5223-6c47-403e-837a-4a13c1cadd23",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5864eeac-88e7-4c6e-97c4-8f3495f86824"
        },
        "item": {
          "id": "90bf175f-32a6-42ca-b008-348f50230296",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "295c47e4-b4b9-4e9c-86eb-a644af754afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9b5dd4-5f80-4f0a-ba46-6f6a845259ba",
        "cursor": {
          "ref": "20a2e1f7-3013-4628-a10d-7c1e09089e47",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7c9493a7-0f52-4e07-bf41-25d6f44621bd"
        },
        "item": {
          "id": "3b9b5dd4-5f80-4f0a-ba46-6f6a845259ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6666d8b1-44e3-46d1-99d9-e58f1fa7ea5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9edd697-8202-494f-a149-756b8674e477",
        "cursor": {
          "ref": "bff7f3a1-0ec4-47e2-90c9-a351a60c93ac",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f9086383-9bbc-42c3-a0ce-588e10602cfd"
        },
        "item": {
          "id": "b9edd697-8202-494f-a149-756b8674e477",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d7d4a5d2-ae3f-4506-af06-1c1a4fb595c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342735b0-ae63-413c-9222-a255081446cc",
        "cursor": {
          "ref": "bfe79909-d565-4b0d-8c96-e545ffb4a6f8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "332adb46-b170-4f27-a742-4c828c6073c4"
        },
        "item": {
          "id": "342735b0-ae63-413c-9222-a255081446cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f1815b70-43c2-4b45-967a-212787182baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442add8d-ec65-4d3b-bbc2-cfe605d3887b",
        "cursor": {
          "ref": "6d396a5a-acb4-4d16-99c3-1d42e30fd1e5",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7b1b5fba-6ea9-4579-a927-f538cc3602d5"
        },
        "item": {
          "id": "442add8d-ec65-4d3b-bbc2-cfe605d3887b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8dd8dae2-2722-413e-a81a-917a5e7b770b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d592ba-ff36-4b3e-a5a2-b92093b82d12",
        "cursor": {
          "ref": "476aa1fc-a17f-42fb-91af-cf2a81861f2b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3543ec2f-3b3b-4220-b2b2-8e4f602dabe1"
        },
        "item": {
          "id": "d6d592ba-ff36-4b3e-a5a2-b92093b82d12",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9b3d11f5-bb04-4cad-81eb-31a0b85927f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b9257f-2c86-4d8a-8b14-98e1f19a5ff6",
        "cursor": {
          "ref": "c50c0dc5-8c63-4d8a-95cb-cce1d6a825cf",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1c311fef-b20e-40ce-ba2f-88b50ed49ee9"
        },
        "item": {
          "id": "a1b9257f-2c86-4d8a-8b14-98e1f19a5ff6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84571a27-d93a-48c5-b086-f6e6fa3b813c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c9c821-829b-4b39-b9a6-dbf640c2295a",
        "cursor": {
          "ref": "a644f2ec-a13e-484b-8a12-56c22889aa26",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b82f656d-a21c-4229-b3c7-c87a53a35676"
        },
        "item": {
          "id": "59c9c821-829b-4b39-b9a6-dbf640c2295a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "71f28df9-004d-4f2b-ae74-2c84e414893b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37610136-9502-4f3d-8662-c2f916d9e3e6",
        "cursor": {
          "ref": "1017a282-bd4e-451f-93d8-4f9271ab03e9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9592d96c-ce56-44d2-a674-a9b0a75dbec7"
        },
        "item": {
          "id": "37610136-9502-4f3d-8662-c2f916d9e3e6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "18219c86-1233-40ec-81be-71c20a9a427c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db02224-18cf-4304-8962-ad11a852e293",
        "cursor": {
          "ref": "fe89770a-4ef0-4289-985c-395eaade71c7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7d311d43-8875-49a4-8d6f-b13f9bd0d5b2"
        },
        "item": {
          "id": "3db02224-18cf-4304-8962-ad11a852e293",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6d635afc-6432-41d4-b615-571944c625b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80097a39-cda3-4fa8-9425-cecd5b07d7c1",
        "cursor": {
          "ref": "55b4f982-164b-4b4e-90dd-7203b17d20bb",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ab23f530-9ad0-4d4e-9423-10daaf29b650"
        },
        "item": {
          "id": "80097a39-cda3-4fa8-9425-cecd5b07d7c1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ed80622f-aa6a-4d62-9fba-4e1c35150ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfa2acf-a46e-448d-8295-2ec3a7425139",
        "cursor": {
          "ref": "256ebc75-490f-4b42-897d-fcc71579d3b5",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a4aba5d-e5d7-4479-ad67-b09bcede4bbd"
        },
        "item": {
          "id": "fbfa2acf-a46e-448d-8295-2ec3a7425139",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c096fad7-680c-4888-a28c-769219d7dbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b0e508-ddfe-46b4-a563-26d16c1bcd5d",
        "cursor": {
          "ref": "6c712f27-7eae-4b09-9545-e28df50a3286",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fa7a1d8f-75a3-4198-acc7-c9e6b62d686e"
        },
        "item": {
          "id": "77b0e508-ddfe-46b4-a563-26d16c1bcd5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "35e6b7ea-846d-44e8-a8c7-0f8b2d992a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbdcd15-a17c-4454-8c23-ab7b5c2bbdef",
        "cursor": {
          "ref": "75dd189f-cc91-42db-9f05-f095095baaac",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d5df2365-348e-4adf-8149-c1bc3e024c6d"
        },
        "item": {
          "id": "0fbdcd15-a17c-4454-8c23-ab7b5c2bbdef",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fa4f634e-7c82-4030-833c-78a03a69e25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd95e76e-1ea2-4aa5-b567-57624908961c",
        "cursor": {
          "ref": "c6c96da9-99b2-4e30-9da2-58c94e3d3aa8",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "366da47a-a79b-4c6c-8a5f-0316658aa74b"
        },
        "item": {
          "id": "bd95e76e-1ea2-4aa5-b567-57624908961c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ed48f9ed-cf03-4849-985e-5fdeb1b05f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747a46f7-decd-4f6f-b804-c07d3e89d0e3",
        "cursor": {
          "ref": "47872d21-67d2-4109-ad4d-dac89c6fb626",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6ee815e7-1225-44af-8ed5-1e3b7f957a4d"
        },
        "item": {
          "id": "747a46f7-decd-4f6f-b804-c07d3e89d0e3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "90046402-dc9b-46f0-89d4-a531a1610aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e19cb1d-f33c-4999-83ea-24da184ccb2d",
        "cursor": {
          "ref": "16683f1b-b810-4277-a2cc-cf482b12f626",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "38941169-3368-491d-98a8-198758f12dd0"
        },
        "item": {
          "id": "9e19cb1d-f33c-4999-83ea-24da184ccb2d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ae9d3f00-d5b1-4c20-b31e-c68e4fb54139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b6ac03-0fe5-4523-9345-2451b162c5b3",
        "cursor": {
          "ref": "20dd232d-2dc4-4415-8c53-4a26dd613147",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9f00e0d5-932b-423c-90ac-1a95a3f45b59"
        },
        "item": {
          "id": "94b6ac03-0fe5-4523-9345-2451b162c5b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ec60cd33-7248-4fa2-99cd-438b9354b05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dec5637-444d-4e92-821f-e10279010649",
        "cursor": {
          "ref": "ac4eb428-a557-46c9-8edd-8f70406ad3f2",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3491be0b-3ae1-4e76-972a-b6a92d9a0896"
        },
        "item": {
          "id": "1dec5637-444d-4e92-821f-e10279010649",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dfe759e6-d3b3-488e-898e-c00923f4508f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5872ccd2-c3d6-43df-b967-1c4c2319f90d",
        "cursor": {
          "ref": "2473cad0-19af-4ce4-ac9d-958e5ba50684",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "353128a7-0800-4239-881f-2c56f8e666af"
        },
        "item": {
          "id": "5872ccd2-c3d6-43df-b967-1c4c2319f90d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9ead9bb2-9e08-4a1e-8f78-ac0592446f18",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "d66d6912-f570-486b-ae4c-23c548552ce1",
        "cursor": {
          "ref": "afe6caef-d8b2-4c32-b679-0841175be891",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "13973af2-221f-4467-b169-adf6bc95d08e"
        },
        "item": {
          "id": "d66d6912-f570-486b-ae4c-23c548552ce1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2b07dd6c-cf48-4f63-80aa-0f6a7a9f3d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2146a65e-9888-4370-ad19-b397dffdb14f",
        "cursor": {
          "ref": "e5075a25-da06-4823-9587-e44b590d4f04",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b5878c35-7a30-4cce-bc9c-100fa4d112f8"
        },
        "item": {
          "id": "2146a65e-9888-4370-ad19-b397dffdb14f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "acbdad57-9109-4866-bc19-eb425f232826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d1a7bf-d6f7-409b-ae10-7b8f28459491",
        "cursor": {
          "ref": "ca7ec02a-c3a1-416d-b2a2-a152f5353880",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "46485376-b411-49c4-ac28-2660ce457cdd"
        },
        "item": {
          "id": "73d1a7bf-d6f7-409b-ae10-7b8f28459491",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "08c4274c-f752-4ffa-9526-cfe93cd04717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789895dd-dc74-4139-a1a1-29fa809a7777",
        "cursor": {
          "ref": "ade919e5-7505-453f-8556-843047083da8",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "98c3a367-7e37-4866-81f3-9dba962e06ba"
        },
        "item": {
          "id": "789895dd-dc74-4139-a1a1-29fa809a7777",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e9596b41-d692-4e5a-922f-ec269d5d5ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baea5a9e-296e-4058-b62a-b3d0188edbb5",
        "cursor": {
          "ref": "62e3e350-c25d-4d42-bada-05ecab148793",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e80fdab0-3fc7-4d10-a57c-3b5744c90ebe"
        },
        "item": {
          "id": "baea5a9e-296e-4058-b62a-b3d0188edbb5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8555b324-7bc2-41ce-9edd-6b7c1fcd4571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7aaa96f-b439-4328-b1fc-4968600b1c56",
        "cursor": {
          "ref": "92cb5f90-6008-4ff1-9362-cc2f399dcf4e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3b479aee-af35-4c11-a8ef-8678731cf1f2"
        },
        "item": {
          "id": "a7aaa96f-b439-4328-b1fc-4968600b1c56",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "29383d3c-99ec-4aac-82b2-770dfe72f930",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c6fefdc2-8db5-4b2e-8306-571ee2dc2d70",
        "cursor": {
          "ref": "b1a1cf45-4b84-4d5f-b553-91b3668e09aa",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3d656183-daca-4841-be6e-a13bd5b785fa"
        },
        "item": {
          "id": "c6fefdc2-8db5-4b2e-8306-571ee2dc2d70",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fbc31e9e-17d7-4c1c-ab6f-1eb0662f5965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747db55e-35c9-461b-9429-9feb9bafc96e",
        "cursor": {
          "ref": "7ef64c8c-afd8-4413-aadf-86b1ac5b8e41",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "845d7ca6-f31f-4f8b-a03c-58fb833c0399"
        },
        "item": {
          "id": "747db55e-35c9-461b-9429-9feb9bafc96e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d2d5d21e-f02c-4b13-b01b-adfcf80f0d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a90f8f9-71ed-432a-a7b0-22f285445c12",
        "cursor": {
          "ref": "19b18f75-f1d9-4661-b13c-3de9bb8ddf6a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5341613e-acb1-4d9a-80b7-c2689ef1977f"
        },
        "item": {
          "id": "8a90f8f9-71ed-432a-a7b0-22f285445c12",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e8b16492-c966-41c7-97f3-dc79e58c4fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9541be-fa32-4da6-95b6-febb3e5c2bc5",
        "cursor": {
          "ref": "203679df-41aa-4ee5-836e-d40b8903e792",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "01d20461-b6b2-4d54-9121-72f9583c512b"
        },
        "item": {
          "id": "3d9541be-fa32-4da6-95b6-febb3e5c2bc5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "14ef3b18-4d38-49f4-baf0-1218dcfe8078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b890bb-230b-4b30-8b80-7e85366f262c",
        "cursor": {
          "ref": "f2bac847-08d7-4408-8416-a178bda19cb4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6a2af1e-b98f-4a8d-8a1f-bad5e88267a3"
        },
        "item": {
          "id": "21b890bb-230b-4b30-8b80-7e85366f262c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "94107c14-f90a-4193-b64d-523ce255b4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916a69e8-75df-4c21-b4c5-7f832f35daf8",
        "cursor": {
          "ref": "fc39d523-2938-46d2-aeee-1328eae7962c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b504f860-dbe7-499c-ae20-3fefc8c0cd7f"
        },
        "item": {
          "id": "916a69e8-75df-4c21-b4c5-7f832f35daf8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4a4e1339-f1cb-4d7c-a802-c70caf8b3c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924461c8-0fa4-45df-950d-798ff41cc213",
        "cursor": {
          "ref": "6efb1e1a-ad56-4924-a995-7322fed8ae26",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e1ff301e-e866-429b-8b6f-8365798a562f"
        },
        "item": {
          "id": "924461c8-0fa4-45df-950d-798ff41cc213",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d0000317-3f45-4bf5-b201-9c3f77e80b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d100a7ea-e127-4f10-9b08-4a305428189d",
        "cursor": {
          "ref": "ce04f407-0069-4c48-8fdb-857a6650d648",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9a755c72-cdd6-43c4-8754-899b4f85066f"
        },
        "item": {
          "id": "d100a7ea-e127-4f10-9b08-4a305428189d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1c3ef9d8-b66e-4645-ac1d-6953f49d5fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e3f247-dd00-4129-96bf-0738f6a70bdb",
        "cursor": {
          "ref": "278da78a-82cc-4356-b315-9d31dd603823",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7bbaf51b-95ac-4b79-bb2a-ce7064b1c646"
        },
        "item": {
          "id": "27e3f247-dd00-4129-96bf-0738f6a70bdb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "25b2ac53-585a-48a7-b286-fc1befad6240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "334d0e86-3bb0-4309-a467-11be80ded246",
        "cursor": {
          "ref": "34e61454-9420-4dab-b99d-cc2d2b27d30c",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "96245c8f-b0fc-4960-8fb8-19f3f06b06b3"
        },
        "item": {
          "id": "334d0e86-3bb0-4309-a467-11be80ded246",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b42c9f56-be7b-4722-8e64-84f461f31bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3048ed8f-c0e5-4805-986d-810646c819c2",
        "cursor": {
          "ref": "2d5de2db-d971-4c03-9854-584bba87043c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "78a93306-34e2-4191-9e1b-8168420b0ca5"
        },
        "item": {
          "id": "3048ed8f-c0e5-4805-986d-810646c819c2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3aa3f749-ad14-485b-912c-7ef6638b469e",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4f03fd-75bc-4957-93e1-632dc9b47b5e",
        "cursor": {
          "ref": "271ff88b-e10f-4ab6-8430-0f0dd57c042e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "30ec2a13-7558-4bac-95d6-b2f43062d3b3"
        },
        "item": {
          "id": "dc4f03fd-75bc-4957-93e1-632dc9b47b5e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3f77714b-916d-45f3-94e7-00f801f7dcf9",
          "status": "Created",
          "code": 201,
          "responseTime": 103,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99e1fef-f7dd-489a-ac7b-977d89c6bb15",
        "cursor": {
          "ref": "7918ad84-f0b5-4d01-8341-e838f9e68b91",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a87c712f-4f5c-4805-a229-ded4f6b42506"
        },
        "item": {
          "id": "e99e1fef-f7dd-489a-ac7b-977d89c6bb15",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b8ed4264-5019-4121-a4b6-f69b3674b58d",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "448553dd-4066-4668-88f4-e01d4ae51706",
        "cursor": {
          "ref": "8ce77ad6-2830-4ceb-97f1-d684b7276049",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "33c955b2-ccbb-4775-bcf6-0c7d464e38b8"
        },
        "item": {
          "id": "448553dd-4066-4668-88f4-e01d4ae51706",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7690a034-0b41-49fc-94da-11c13a519412",
          "status": "Created",
          "code": 201,
          "responseTime": 86,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0e3d47-9e08-4c77-8d91-0e9c846a8d5f",
        "cursor": {
          "ref": "92063508-6ded-4399-b204-33b135434710",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b7e8a408-a170-4782-88b4-83e0f7495640"
        },
        "item": {
          "id": "3d0e3d47-9e08-4c77-8d91-0e9c846a8d5f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e3d63422-8df6-423f-95e5-8d66a1346dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "d30ba042-626b-40c1-a172-f96699d06b34",
        "cursor": {
          "ref": "a6ac9acd-317a-4b66-9ad2-be44c2a54c06",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ba784c61-b655-4fa5-9bde-f11b12f97ed4"
        },
        "item": {
          "id": "d30ba042-626b-40c1-a172-f96699d06b34",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "be452378-d47c-4300-902c-ad706880bf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30ba042-626b-40c1-a172-f96699d06b34",
        "cursor": {
          "ref": "a6ac9acd-317a-4b66-9ad2-be44c2a54c06",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ba784c61-b655-4fa5-9bde-f11b12f97ed4"
        },
        "item": {
          "id": "d30ba042-626b-40c1-a172-f96699d06b34",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "be452378-d47c-4300-902c-ad706880bf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f56d79c-c95b-44c7-ab66-1ca1449035eb",
        "cursor": {
          "ref": "8f4daabb-2a53-4216-bb8b-cef49750fe90",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a62f3449-fc36-44cb-a9c8-cbd3c4c2eff9"
        },
        "item": {
          "id": "6f56d79c-c95b-44c7-ab66-1ca1449035eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f1a9448c-67cb-43fb-bce8-c04723061286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd798c0e-1c94-4152-9258-7303fdc8207c",
        "cursor": {
          "ref": "2406b2eb-366d-4fcb-b9a2-93ce694256a0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b0a6952-c97b-4c4e-9d90-24921cb647e7"
        },
        "item": {
          "id": "fd798c0e-1c94-4152-9258-7303fdc8207c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d16c9f8b-4297-4742-8a73-bebaebec875e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5a653f-b44a-4a2b-a1f2-5ff1d9c6a821",
        "cursor": {
          "ref": "18776408-ecea-4713-954e-eadd336593b9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c47e8fd2-abf2-4c91-9131-be18c0b4835e"
        },
        "item": {
          "id": "3e5a653f-b44a-4a2b-a1f2-5ff1d9c6a821",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9c9276d6-90b2-4f1c-90eb-eeba61688c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7006a54-6ddd-4605-b958-e267ed04a271",
        "cursor": {
          "ref": "5ad9aedc-0edb-47a3-b3df-22db036a1665",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "162116e5-b709-4640-9d1d-fceea16d54f5"
        },
        "item": {
          "id": "f7006a54-6ddd-4605-b958-e267ed04a271",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2dfd2df1-2fbe-46a7-95c4-49527b9246e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc53d44-7b6b-4f8b-8729-e1b022693b50",
        "cursor": {
          "ref": "e30bbdd5-d0b4-48b1-83c3-8a90190ecfae",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9c0af315-f693-4863-9079-c07f4b5e1e35"
        },
        "item": {
          "id": "1cc53d44-7b6b-4f8b-8729-e1b022693b50",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ea2d4222-5a69-4262-903b-bfbcc42028c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ec1848-04ac-42d1-9fe9-5029bbe32c5a",
        "cursor": {
          "ref": "c1901b7e-2852-46f5-887a-a2265f2e2fa1",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5cb73561-f51f-447f-87bb-2c902c300279"
        },
        "item": {
          "id": "13ec1848-04ac-42d1-9fe9-5029bbe32c5a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5fa3d017-66c9-4c1e-a3b1-791ae25a4c8d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "57b74350-6d5d-4ee8-a0d2-24f4d9c251f4",
        "cursor": {
          "ref": "f947389d-6326-4903-a3ea-99326987562e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cc0c1124-d440-4bd2-ae92-a3298c14e657"
        },
        "item": {
          "id": "57b74350-6d5d-4ee8-a0d2-24f4d9c251f4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7107773e-b377-4dc0-afad-ec7a8b106e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca3f639-a880-4be0-9e56-6830a15d2d61",
        "cursor": {
          "ref": "60143428-aee5-45ce-8f0c-17237cc7ff8a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1b2b8172-c981-4ecd-8b0f-b6279f3be0d2"
        },
        "item": {
          "id": "bca3f639-a880-4be0-9e56-6830a15d2d61",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bb49cfc0-98e2-4644-803b-e02635ecdfc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d966639e-7129-4df8-ae4a-02f53ace9f95",
        "cursor": {
          "ref": "35d8369e-44cc-4d0e-aa17-5a67697620b1",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "177f657c-e43f-4cf1-b73d-6685f78f57df"
        },
        "item": {
          "id": "d966639e-7129-4df8-ae4a-02f53ace9f95",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0850a812-fdc7-45b0-8e45-b851cb2eaefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8951d575-a87b-4fe7-bfe1-836c90553b0f",
        "cursor": {
          "ref": "42a981af-e54d-4a63-aa49-8c941e72f824",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "da269eb9-8c07-4393-b3ec-c7b6aab6b8ab"
        },
        "item": {
          "id": "8951d575-a87b-4fe7-bfe1-836c90553b0f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "86256937-971a-4a3c-b6bd-57c852a501b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d611dd98-11b7-458a-bf4b-2416cc9fbb08",
        "cursor": {
          "ref": "b44c27ca-cf4e-46e6-8517-8b220c052806",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f2282b38-720b-42b2-bc12-f593048d9235"
        },
        "item": {
          "id": "d611dd98-11b7-458a-bf4b-2416cc9fbb08",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a3d6f594-e7d7-4a7b-b75d-ff683c96097d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b165e2e-43c8-441a-849f-a1550873d08d",
        "cursor": {
          "ref": "4a8e4f55-de40-4a68-8a2d-a97df6e65aa4",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a136927f-7271-48bd-b8bb-8f7d2d0142e2"
        },
        "item": {
          "id": "7b165e2e-43c8-441a-849f-a1550873d08d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0361b7a5-e680-4617-a447-cb019a1ef31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa0bd38-c604-48a5-97fd-9c44822b746f",
        "cursor": {
          "ref": "6fc14c29-41bf-443d-b682-7bc9d7faa0a6",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7c97c85-d30b-44d3-834e-f8059e4af6e7"
        },
        "item": {
          "id": "6fa0bd38-c604-48a5-97fd-9c44822b746f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bd37ebbd-e240-4628-beaa-2bf9c0206824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e83459-77c8-4b1f-acd3-abd31b2e6e0d",
        "cursor": {
          "ref": "cf420c0e-1f3f-45a7-b8bc-b5198e44a7c7",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4af10594-9498-46e7-aef7-0357ca65aa20"
        },
        "item": {
          "id": "54e83459-77c8-4b1f-acd3-abd31b2e6e0d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "21dae826-5f01-4a0f-8541-6e23d64936cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b1944c-0eb2-4ac3-b4da-bdf7c5319c1a",
        "cursor": {
          "ref": "5654af04-38cb-4f7b-8019-eee3eb31a8de",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b33eb31b-15c0-4013-9ca2-cbddfeee04e7"
        },
        "item": {
          "id": "45b1944c-0eb2-4ac3-b4da-bdf7c5319c1a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1fc1b2f6-effd-41cb-a833-a00648d6435d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa6c9fe-f39a-4775-8d7f-e472447455e4",
        "cursor": {
          "ref": "044434d9-f3a6-4cc7-a98e-db295a4e529f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e53e65af-5e83-4123-995d-78a3db8d77e0"
        },
        "item": {
          "id": "2fa6c9fe-f39a-4775-8d7f-e472447455e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "39cbb542-4eda-43a2-9cf2-a55c209b00bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acf65b9-451e-47ff-bac2-0577ddefb062",
        "cursor": {
          "ref": "ee90832e-bdbc-429e-9c88-34d8e81dae27",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a4ea7f69-58c8-4c76-a511-d8e61605c52f"
        },
        "item": {
          "id": "7acf65b9-451e-47ff-bac2-0577ddefb062",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "55c3a8b1-d579-4535-9c43-a645d6ae6004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8005394f-8ef8-457b-8bb6-e89727cd8d0a",
        "cursor": {
          "ref": "bb4aee0e-ebed-42b9-95c8-f6a0c969662f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "80a1d31e-19c7-4e95-bff7-10d6a311cdcd"
        },
        "item": {
          "id": "8005394f-8ef8-457b-8bb6-e89727cd8d0a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2dbd3a85-8d02-40a3-80e6-c35e23ef2594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957bc24-c175-4f46-a7e3-ca3403d9bb0c",
        "cursor": {
          "ref": "dd7c2223-1b33-4f1f-942c-9aae65e099fa",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "82ddd57d-06f9-4d8e-821e-9e586274cc6d"
        },
        "item": {
          "id": "f957bc24-c175-4f46-a7e3-ca3403d9bb0c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "503b9743-fcdc-4ab1-815d-bbc14455e27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54741ce-1980-4dd8-95b7-9ca7dd111de5",
        "cursor": {
          "ref": "3933bf30-efcf-4a0f-8754-0bdc07c701c3",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3a193e75-72aa-4c40-8f89-78ba75a5ef3f"
        },
        "item": {
          "id": "d54741ce-1980-4dd8-95b7-9ca7dd111de5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d2e6f33f-340e-48e4-beec-ec3979aed81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48566cf2-79f0-4e58-b6c9-981ae581dae5",
        "cursor": {
          "ref": "a6bf8df1-bada-4b65-a34e-a8c7621ea849",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d5c5aaa3-829b-4456-beac-3dcc6ba9dca7"
        },
        "item": {
          "id": "48566cf2-79f0-4e58-b6c9-981ae581dae5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8ce68e1b-a2c9-4061-9e2e-1e01581290ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bb869e-bfcd-45f9-af44-bdcbc62eb694",
        "cursor": {
          "ref": "6a14686a-cf1b-4de4-89f1-d93098967705",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4db95fbb-03dd-4761-972b-76053f442049"
        },
        "item": {
          "id": "86bb869e-bfcd-45f9-af44-bdcbc62eb694",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bdda816f-e487-4c88-90d8-39f3df28614c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4c4fe1-b8d5-459c-b71b-a4b3921945f0",
        "cursor": {
          "ref": "cb7da808-019d-4091-aa9d-7a4628a19126",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d2058e70-5f26-45bc-803a-f67eeae4a1a9"
        },
        "item": {
          "id": "4b4c4fe1-b8d5-459c-b71b-a4b3921945f0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8aad0567-f6c7-4260-95fe-9eb3c3ae3766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dc1f0a-1e06-4335-a705-055a376cdb88",
        "cursor": {
          "ref": "5d99043d-3e3e-4775-97d4-6e3c4e022e87",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4a65d3ca-2383-41ea-b5ec-f3e583202f5b"
        },
        "item": {
          "id": "99dc1f0a-1e06-4335-a705-055a376cdb88",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4b0f1920-bacb-4771-a758-5b9bef4aba49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2d97f3-5d5b-46ec-90d6-ccd62496ffa8",
        "cursor": {
          "ref": "ca11def9-6aba-422f-8ff0-4c2cc22bcbc2",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4b7b8af5-a733-4508-93ae-6677374e3827"
        },
        "item": {
          "id": "be2d97f3-5d5b-46ec-90d6-ccd62496ffa8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9583bde8-2dc3-4bdf-ad46-8010624b921d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fe103e-20bb-4d01-8557-6392315b3ce0",
        "cursor": {
          "ref": "9d769088-3d43-4a32-af39-d9be3b4c8e8e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9ecd43b0-84ae-4fea-ba70-18235ed87c68"
        },
        "item": {
          "id": "c6fe103e-20bb-4d01-8557-6392315b3ce0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ccef0b6e-7fac-482d-bddc-f947ff72c13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6875134a-956b-463f-aa06-07ac2aa9c978",
        "cursor": {
          "ref": "72e716e8-374d-47dd-9abf-0b9bd1fd0ad6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "df4c2d9e-a62c-40db-a22b-03e6ed21cf93"
        },
        "item": {
          "id": "6875134a-956b-463f-aa06-07ac2aa9c978",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "54612492-b885-4bd4-bea7-0c5efdcc3862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc35f3d-fc49-4e6f-bdf3-9cd4853de4c7",
        "cursor": {
          "ref": "e5942316-7cec-4443-8e09-6e1d0a301ddc",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ba296302-bd28-4576-a02f-85e1cffdce56"
        },
        "item": {
          "id": "6cc35f3d-fc49-4e6f-bdf3-9cd4853de4c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d95dab00-a0a4-4556-9675-ad33a39ea625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4d4088-47bb-440c-b252-fbd45f1d103b",
        "cursor": {
          "ref": "44dd253c-6063-4468-afb3-04eeab4c8b13",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87d12b9c-97cf-4974-8fc3-c51f48357303"
        },
        "item": {
          "id": "6c4d4088-47bb-440c-b252-fbd45f1d103b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1ccee364-2353-4c5a-95b0-1e104f37685d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f495ae-0c19-454c-8544-9a653f358fc3",
        "cursor": {
          "ref": "c2481a28-ef0f-4fcf-b61e-64da4157f2a5",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cd68c241-6e0a-4b7b-b445-a35fd3834ae1"
        },
        "item": {
          "id": "f6f495ae-0c19-454c-8544-9a653f358fc3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "590f6c19-f6e6-4966-88a5-33ae51b2af6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4794d26-81ed-4f78-95b4-89ce6b26e80b",
        "cursor": {
          "ref": "b332d247-5da3-43c0-92b8-e96496dee14b",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1bd5b877-cf3f-4419-a52f-6a66583f62b9"
        },
        "item": {
          "id": "c4794d26-81ed-4f78-95b4-89ce6b26e80b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "29566651-51e3-40b3-9333-f1db6953da78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db71ad57-7374-4b0b-ac69-9316a7de3f18",
        "cursor": {
          "ref": "72bff63a-f9b6-4d33-833c-b070094ef4a9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e54c6a1f-65e5-4abd-aa59-4a4da59147a8"
        },
        "item": {
          "id": "db71ad57-7374-4b0b-ac69-9316a7de3f18",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "af248655-e4fc-43a7-afa6-33433a04d7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5e8d9df5-1a5a-4de3-bfe9-e742bf28d23a",
        "cursor": {
          "ref": "d0c5ead3-878c-4f10-bc27-736ddd3292b2",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "188c0d9f-842c-4e7c-82a7-cafe2f4d882d"
        },
        "item": {
          "id": "5e8d9df5-1a5a-4de3-bfe9-e742bf28d23a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2aef0288-d795-4a41-8479-da60d48d397a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4d7bb7b8-8a4b-45dd-9901-f7d63cf410df",
        "cursor": {
          "ref": "6535f730-6215-43b8-b2c7-567a210f97a6",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dbea3774-6ca0-41c0-b921-4aaa3805d8e9"
        },
        "item": {
          "id": "4d7bb7b8-8a4b-45dd-9901-f7d63cf410df",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1afc3aad-32a7-4d1e-9f33-592acf8a3335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7bb7b8-8a4b-45dd-9901-f7d63cf410df",
        "cursor": {
          "ref": "6535f730-6215-43b8-b2c7-567a210f97a6",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dbea3774-6ca0-41c0-b921-4aaa3805d8e9"
        },
        "item": {
          "id": "4d7bb7b8-8a4b-45dd-9901-f7d63cf410df",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1afc3aad-32a7-4d1e-9f33-592acf8a3335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb623e2-55c7-4777-afed-f4e48b710bb2",
        "cursor": {
          "ref": "191abb01-0163-4c97-878c-0798b0ef0e88",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "111eb6ac-5d0d-4ed2-899b-f41b5f68b868"
        },
        "item": {
          "id": "cbb623e2-55c7-4777-afed-f4e48b710bb2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7e93b69f-65d3-4a07-942f-d9f25e918095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f85a56-0d37-4b2e-9ca6-177e3db6a437",
        "cursor": {
          "ref": "b4f03c48-b543-415d-b330-923f8543f6f6",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f8f721ee-b199-46d4-9b6a-a8466104fed4"
        },
        "item": {
          "id": "c6f85a56-0d37-4b2e-9ca6-177e3db6a437",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "aa15a48d-9f96-4819-a8d2-eae5f3079407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098149ba-8851-463c-8901-6392f34a3d19",
        "cursor": {
          "ref": "82e74d49-184b-49a7-9311-359952752519",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "44509e1c-6b71-47a3-88a5-60e6f925764f"
        },
        "item": {
          "id": "098149ba-8851-463c-8901-6392f34a3d19",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "69b310d9-c904-4959-8f54-9ff8c3b69ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc15a648-cdd5-4a2f-945e-f57327d980bb",
        "cursor": {
          "ref": "be93faa9-79da-4e38-b6b7-5244671a8331",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8627852e-6a10-4110-b8b3-db9b4d0b0eef"
        },
        "item": {
          "id": "dc15a648-cdd5-4a2f-945e-f57327d980bb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b42a2169-645c-48fa-a392-a20a247b21aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce02339-55c9-4ff6-89d1-204ecf3a91ef",
        "cursor": {
          "ref": "cf6778ef-9f8c-447e-8cfc-b93a07f1a7dd",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2c30f905-b135-443b-9029-030b7970d2d2"
        },
        "item": {
          "id": "3ce02339-55c9-4ff6-89d1-204ecf3a91ef",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a2ca9407-8fb6-4f11-b240-000116556d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceda510-7fc0-43b9-9ac2-bb929a83c655",
        "cursor": {
          "ref": "ee8cd517-9234-491d-9cfa-a16349462ad5",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5eb74d67-58b2-46e6-becb-c79462a625d6"
        },
        "item": {
          "id": "7ceda510-7fc0-43b9-9ac2-bb929a83c655",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "92102b8b-0528-4fd9-991d-bdcbbab0772b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdead55-8d4c-4cec-9769-bedac0fc43af",
        "cursor": {
          "ref": "5eb9a5b7-e064-4071-a131-33f276ac2b76",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "39a3ce34-750a-4992-b0f4-caf13e5e69e0"
        },
        "item": {
          "id": "8fdead55-8d4c-4cec-9769-bedac0fc43af",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "696bebc4-6a89-479f-b3bf-d62cf5b73bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c578fa-b992-4f8d-a095-f5f473774048",
        "cursor": {
          "ref": "169add37-1ecf-4321-911f-bfda2ad1d1ad",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e3222502-7271-4a5b-bd5a-8e9ba2f6ef7b"
        },
        "item": {
          "id": "e3c578fa-b992-4f8d-a095-f5f473774048",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7ea8374c-e9f7-4e3d-836f-95aafda78d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9bea3-ac92-40dd-96c3-864a17fc4544",
        "cursor": {
          "ref": "4b6f18cc-d560-49ae-b1c1-01afd679af94",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "429c1df3-1a54-4d62-a4c1-4337ddb0018a"
        },
        "item": {
          "id": "bfe9bea3-ac92-40dd-96c3-864a17fc4544",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3392ead4-bebe-4364-8589-6aeae2c8aee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8d0c4f-2356-4e99-9e3a-dc52d16e0013",
        "cursor": {
          "ref": "7eba5523-deab-4368-a67c-7848fb2ceefb",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "337459ae-6e9c-4e88-b663-979770176c84"
        },
        "item": {
          "id": "cb8d0c4f-2356-4e99-9e3a-dc52d16e0013",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b7c0bb0b-6daf-4010-a233-910352ecaddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff20e6c-4a53-4b7c-a9b5-d3ce13d25f41",
        "cursor": {
          "ref": "594db5bf-11b7-472d-8091-361d4f1eec9e",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7114f6b7-b426-4d7e-9678-447b483a7724"
        },
        "item": {
          "id": "3ff20e6c-4a53-4b7c-a9b5-d3ce13d25f41",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e01f594c-b37e-487c-8fc7-c4d5b71a9311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91ef041-abaa-4679-ab9d-c1e9bd596a6a",
        "cursor": {
          "ref": "e6a502bf-6c9b-4bd4-a691-15da50a68c4f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ea7487ce-fa80-4640-8a71-ad1915f83966"
        },
        "item": {
          "id": "e91ef041-abaa-4679-ab9d-c1e9bd596a6a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4ec640b7-84f0-41a3-8703-84e5a7835f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412aef07-5280-49c9-aa73-f954bdd47570",
        "cursor": {
          "ref": "1e9bb454-30da-4bb0-b0be-4f654da82485",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a379a52a-1ceb-4633-b178-5fe606ba7b5c"
        },
        "item": {
          "id": "412aef07-5280-49c9-aa73-f954bdd47570",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "39512752-00bf-4b9f-99d7-6c3a46104345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb05bfe6-2139-430f-8dfd-c45d03a393dc",
        "cursor": {
          "ref": "9ddec4e0-ff03-43ec-abc3-26f056534482",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ebcd3dfe-7173-4dfb-8fd6-e6e0ee05e25c"
        },
        "item": {
          "id": "bb05bfe6-2139-430f-8dfd-c45d03a393dc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c9748484-ca38-4d3f-aa74-8995e8538557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2c850-c71d-447d-baee-942105fdbc1d",
        "cursor": {
          "ref": "16d6cf49-5548-442a-b006-2117d981f93f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8caa1069-a7ff-498e-a7c3-f147b6da5fee"
        },
        "item": {
          "id": "b8d2c850-c71d-447d-baee-942105fdbc1d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "41142079-0829-495f-8dd5-0d4760b02e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00aee2fa-836a-44ca-9c32-65c9bc7d576a",
        "cursor": {
          "ref": "fb6693e6-63f4-4ad2-81ca-0d5e08c6d590",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2e68a307-cd8d-4136-b2a5-40bc708ebb43"
        },
        "item": {
          "id": "00aee2fa-836a-44ca-9c32-65c9bc7d576a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7c3e8c59-0b85-436b-9048-80e755427770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0598d4-d28d-47ca-8cf9-77aca7707f0a",
        "cursor": {
          "ref": "2aae53de-75ad-4268-a8b4-fd3fad47ca79",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "98c6ad20-daf7-4c6a-a36b-ca36dbb7ae4c"
        },
        "item": {
          "id": "aa0598d4-d28d-47ca-8cf9-77aca7707f0a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4ca0daa3-c506-4ced-816c-55a5fcf2eb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330f79e1-86d0-4b7b-b29b-cc0ca5dc78ea",
        "cursor": {
          "ref": "2674abbf-60ee-495a-98d5-a854070895e3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e3323ec2-04c8-4053-8398-ab8be230b310"
        },
        "item": {
          "id": "330f79e1-86d0-4b7b-b29b-cc0ca5dc78ea",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8108bb73-b961-4662-8df0-a542c9346448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0bd4c8-1a77-498a-b774-2dde10969d50",
        "cursor": {
          "ref": "cf7067b9-f714-4d08-9e80-28dc4ae2ce13",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1e49e983-f25d-42cf-a6dc-259657c16628"
        },
        "item": {
          "id": "3d0bd4c8-1a77-498a-b774-2dde10969d50",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "82b74ae3-1b2d-4fa6-8058-0867413a4c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb469bac-a241-4364-9e50-e7fdaf0439da",
        "cursor": {
          "ref": "61939929-3054-4a8c-b266-f4be08db50b2",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8a366b07-3cc8-49cf-89ee-bcd5f07669fd"
        },
        "item": {
          "id": "fb469bac-a241-4364-9e50-e7fdaf0439da",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3ceae6a-5b9c-4006-af5a-122902bc2283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e95ada2-dd93-4a83-b11f-817abdb3c53f",
        "cursor": {
          "ref": "a0bff9f8-ce23-4461-9ccc-6b24061f5f3a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a0e87a16-e4a6-4ab4-ba20-c6f2df2c350e"
        },
        "item": {
          "id": "6e95ada2-dd93-4a83-b11f-817abdb3c53f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "faae050a-76de-41fa-8170-f5bd64f38cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d3351b-24b3-4298-a6f8-17a935def5ca",
        "cursor": {
          "ref": "0477c9c4-fcc3-4b1e-b742-5a28d2bf71fa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9a7e9cb3-6ffc-4a33-a340-4399109378d4"
        },
        "item": {
          "id": "a6d3351b-24b3-4298-a6f8-17a935def5ca",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6cb9b271-e2e3-4ac2-a402-d646a09ed257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafebdce-526d-489d-aaa6-9783f7fe3b11",
        "cursor": {
          "ref": "9f1e13e5-b886-42e6-8390-71bf913854d0",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "12b26492-fc90-4a5a-acd9-ffbd86e51bde"
        },
        "item": {
          "id": "dafebdce-526d-489d-aaa6-9783f7fe3b11",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "81af5475-dfe8-46db-8df8-0a75cd0cc418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946ed432-b448-49e3-8923-b63fbe56ab47",
        "cursor": {
          "ref": "e5bd011a-3957-41a9-a22d-87054ba03c47",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5e7a55eb-a644-4c7e-b91e-465610dd9c62"
        },
        "item": {
          "id": "946ed432-b448-49e3-8923-b63fbe56ab47",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b693bd91-564e-43ff-953f-82098713166b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8847c4ad-6546-46de-89e5-8748bb3cb1c6",
        "cursor": {
          "ref": "8b6e3f0e-81e8-4df1-906b-170563ffbdf6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "84ac4156-79d8-478b-950c-754594f6f8c8"
        },
        "item": {
          "id": "8847c4ad-6546-46de-89e5-8748bb3cb1c6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "157b4774-4db1-4e85-bd18-863fa6fc05cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5d10f2-b34a-4d09-a0f2-cea98f4649ba",
        "cursor": {
          "ref": "f425926f-7f4f-4c48-8b33-89fee7edac4b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f2ce9c84-42c9-4dbf-a7c2-46925276c54e"
        },
        "item": {
          "id": "9d5d10f2-b34a-4d09-a0f2-cea98f4649ba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "411361f9-ef0d-4fc0-96b5-312de8dfc497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5f6111-fd32-49a0-8d38-b811f56f23be",
        "cursor": {
          "ref": "ec31587d-96e6-4b28-9a72-1f165f622065",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4bbfca9b-e8cd-4e88-b368-d00499f4d9af"
        },
        "item": {
          "id": "af5f6111-fd32-49a0-8d38-b811f56f23be",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7d686761-57bd-474b-bd42-d802cdc188ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af875477-1e9c-43ac-92af-3fe44b1ebc7a",
        "cursor": {
          "ref": "4bc58979-abd0-479c-bb2c-5e6805657789",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e6503ae1-3274-4929-b36d-bab8b5c18b63"
        },
        "item": {
          "id": "af875477-1e9c-43ac-92af-3fe44b1ebc7a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ece53730-0cb6-42a8-a807-0f22a6077ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f07bede-b14b-4e4f-aa8d-bde6af53cbe8",
        "cursor": {
          "ref": "7c8cb6d4-4a53-4ef2-b60d-f4f9c993765d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "62efd964-0a75-4e55-89c9-9abbc26b1db9"
        },
        "item": {
          "id": "8f07bede-b14b-4e4f-aa8d-bde6af53cbe8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "48c36aa5-a300-431e-8385-263801df794f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9321cc-45bb-4e75-9585-0aed1b1cdbf5",
        "cursor": {
          "ref": "f323a0db-5212-4703-b7f8-7f58592c976d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "12c70287-2ab6-48d8-8c2f-4aaff7cb7f17"
        },
        "item": {
          "id": "6e9321cc-45bb-4e75-9585-0aed1b1cdbf5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "58db9418-b784-48be-92eb-206136c64ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87e931c-6219-4b21-94ae-91471cc572ef",
        "cursor": {
          "ref": "0ecdee0c-549b-4d86-8bd7-ab24a3ed1cfe",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "909d3127-497b-4c6a-a834-2c4af0e77702"
        },
        "item": {
          "id": "f87e931c-6219-4b21-94ae-91471cc572ef",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4a52f2b0-ecf5-48a6-90d7-7fa0b1127048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f70e820-ebe1-4619-8030-885f1a5b4277",
        "cursor": {
          "ref": "29eb317d-8598-4315-a91a-284c54b1ffb6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8b0b47b4-ffef-46dd-b5f2-1e91984d7e40"
        },
        "item": {
          "id": "9f70e820-ebe1-4619-8030-885f1a5b4277",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "905084c6-f891-4c21-bace-d18edf872a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55095d3-7f74-4bf8-97f2-b1cfd7bdc37f",
        "cursor": {
          "ref": "1ea191e2-b932-4a85-9788-82852ec7fdce",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "810f0ded-e12c-46ff-ba94-bfa5fd017e21"
        },
        "item": {
          "id": "b55095d3-7f74-4bf8-97f2-b1cfd7bdc37f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3f5f172a-f0bc-46b9-b77e-b9779a4e347f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44a6353-47ca-4da6-b286-08bdbeae70d0",
        "cursor": {
          "ref": "1e543f24-0169-4646-a91a-1514c4c6e5bd",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "50a88d61-4dda-45c1-8997-260328656e1e"
        },
        "item": {
          "id": "b44a6353-47ca-4da6-b286-08bdbeae70d0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0867ad92-3f4e-453d-97ed-35514706b663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa2bb88-95c1-4262-8e25-83ae4d8475d2",
        "cursor": {
          "ref": "2786c958-c506-468d-9fdb-12cf6a4c9fec",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "234a37fc-f11b-47c4-8ea9-fe32ace17ef6"
        },
        "item": {
          "id": "1fa2bb88-95c1-4262-8e25-83ae4d8475d2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "024dfaed-6986-47f9-b94b-d3a0f1a45c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26d3478-1671-4e0e-8c2d-a1a538a7f20e",
        "cursor": {
          "ref": "4a71ac43-50c7-45b9-a288-ba979a006ca7",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2227e91f-4158-483f-9bcd-41cac2483503"
        },
        "item": {
          "id": "f26d3478-1671-4e0e-8c2d-a1a538a7f20e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cbd598ae-3718-4685-b6f8-f2f37ff7fd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a695a791-54ff-49bb-a9ca-598c30ee38e0",
        "cursor": {
          "ref": "ed59408c-4d18-4956-8c74-df22052dd895",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "34b2fcab-682e-4d11-848e-eaebdb7419e1"
        },
        "item": {
          "id": "a695a791-54ff-49bb-a9ca-598c30ee38e0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fc0f106d-1c2b-4de9-bcb9-33267cb886b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca041315-c5bc-4581-ad83-ae0bbe82131f",
        "cursor": {
          "ref": "725caf4b-b11e-4b6f-9aef-90c21b7b77ea",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f379455-f966-47aa-8da6-4f5ae717a633"
        },
        "item": {
          "id": "ca041315-c5bc-4581-ad83-ae0bbe82131f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b708dd10-8288-4aec-a508-9468ab4713b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4f277b-9a56-49f5-a79d-043301cd79e4",
        "cursor": {
          "ref": "b0a7ce6e-64af-4bd6-925c-e73fa5d81bc0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7fe164f6-3090-46fe-a8e1-a65cf2c37734"
        },
        "item": {
          "id": "4c4f277b-9a56-49f5-a79d-043301cd79e4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ad1f798e-1d0d-4aa1-8849-b7767344e73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3d9d32-4871-4b17-847d-bfe8f0e4a42d",
        "cursor": {
          "ref": "73253c30-0bf1-491b-b3c1-c283350f47c9",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d008e7b6-bfb2-4baf-938e-224b775d5271"
        },
        "item": {
          "id": "1c3d9d32-4871-4b17-847d-bfe8f0e4a42d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4e2bcad1-e2bd-4c31-a4be-46651e45851d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26263fe5-8203-431c-9d85-97ba8a6e429a",
        "cursor": {
          "ref": "533ac890-c508-4cdd-a58e-fb85a3b93c86",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53bc097d-8ac9-4a6a-b5f4-cd8851076e2d"
        },
        "item": {
          "id": "26263fe5-8203-431c-9d85-97ba8a6e429a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1dbd5027-68fb-4f04-b82e-df69be7b0ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2829397c-f193-4210-bf0c-34e9cc730bb4",
        "cursor": {
          "ref": "94aea7fd-7fd3-4fd6-a7cd-284a3d7a8445",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "736ffcf1-8a08-454e-b5c7-ecae411896f3"
        },
        "item": {
          "id": "2829397c-f193-4210-bf0c-34e9cc730bb4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3e3b5720-8983-401f-8971-ea198499ed34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f435880-d138-4bf7-9b89-e59d03e1cf4c",
        "cursor": {
          "ref": "b728ee7f-9a4e-42c7-87e8-31086402fe34",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e8841a7d-f995-4a77-ab8f-ae77c1b8c2a8"
        },
        "item": {
          "id": "8f435880-d138-4bf7-9b89-e59d03e1cf4c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "649dc20a-040f-4914-b829-e4f963d0ac64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c678b01-f4e1-4e10-93b5-4fe95359ffd4",
        "cursor": {
          "ref": "f49088cc-07c9-4c7c-a97c-cb4611c86423",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "37c22c51-da40-4889-aad5-6d506dcc8fa2"
        },
        "item": {
          "id": "1c678b01-f4e1-4e10-93b5-4fe95359ffd4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3797e185-e95b-4a2e-a4e7-e3d81987e2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d8c6ae-0e2e-4c9b-b554-8b77ab51bb86",
        "cursor": {
          "ref": "d01424c8-e9d3-4add-8c33-d360489a7d83",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0e0d5fd8-1700-4501-9aed-0c6fcc6e89aa"
        },
        "item": {
          "id": "a4d8c6ae-0e2e-4c9b-b554-8b77ab51bb86",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "48f3b44f-e135-41d5-849e-8631517770f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08acf6ff-ac1e-4a32-a49c-39d6d7d20387",
        "cursor": {
          "ref": "d1fc823c-7e9d-4f63-8ded-8a727fb7e639",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c15dcd1c-d2ef-4dfb-854e-14b0010ff0d1"
        },
        "item": {
          "id": "08acf6ff-ac1e-4a32-a49c-39d6d7d20387",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fdcb4ac1-1f2f-43b3-80f6-764d3e65b224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10dbf73-126a-4777-8663-a88b2a7736af",
        "cursor": {
          "ref": "7b93a6b5-26cd-41c0-a029-fc914604b499",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a37f9f14-efcf-40c2-af6a-9b203cee9805"
        },
        "item": {
          "id": "f10dbf73-126a-4777-8663-a88b2a7736af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "178512a9-c773-4142-81e4-cc32fb09fbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704d0496-b54c-4f22-af18-3b3683f171ff",
        "cursor": {
          "ref": "02fd4ba8-6be0-4c0f-bc5a-ca18a822fc89",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "61a37b4b-1162-4b53-bf34-3051e6ea0fd2"
        },
        "item": {
          "id": "704d0496-b54c-4f22-af18-3b3683f171ff",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "38961cb3-a422-4031-bf28-edcc06df6423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23df08f7-8e51-452f-8017-b625db7578ff",
        "cursor": {
          "ref": "d35d8097-5d07-4b53-8ad0-deab4db78004",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f9418c85-cd99-43b4-ba5a-4ae194cf17b1"
        },
        "item": {
          "id": "23df08f7-8e51-452f-8017-b625db7578ff",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "35558bc2-f604-4588-82eb-6a4bb6c5830a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21f93d2-2197-4141-83e7-ca5a19df5e52",
        "cursor": {
          "ref": "f87a6615-84bb-4259-a7ee-3feb055c9866",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ff379e6f-955c-458e-bfa1-d51944e4c26d"
        },
        "item": {
          "id": "e21f93d2-2197-4141-83e7-ca5a19df5e52",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e73263c-dcfd-4c08-a4e4-4923a9d1d36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd38c2d1-fb09-40d6-afd4-04e04d7459a4",
        "cursor": {
          "ref": "40cb955d-74f3-4c71-8032-a2af4ceb020a",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d41c1fec-4939-405f-a549-031829ac0361"
        },
        "item": {
          "id": "fd38c2d1-fb09-40d6-afd4-04e04d7459a4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b6366556-51c2-45cf-bea1-dc23edf96040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e577d54-5934-46de-bb97-ebb8e8a72936",
        "cursor": {
          "ref": "679672b6-45b9-4951-b0ba-469cddd65cb9",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "438778b6-f913-4bb8-809e-a6731d79649f"
        },
        "item": {
          "id": "8e577d54-5934-46de-bb97-ebb8e8a72936",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ca445e5-6b94-4cc0-a34f-a097687a5edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e429748-a460-46b4-bca4-e339ec6daae0",
        "cursor": {
          "ref": "8fc2328e-0601-4b49-bc92-33a143099586",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "38c67971-1f1a-475b-85d0-a06093b47112"
        },
        "item": {
          "id": "2e429748-a460-46b4-bca4-e339ec6daae0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "74493f6c-2456-4255-b8f5-e39e19dde18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a664e51-6a62-45aa-928f-907bbdf66b90",
        "cursor": {
          "ref": "d3e9b767-99e9-43cc-8450-f41d4c7bf55e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2ec29bd6-adcb-44ec-860f-689586972ef2"
        },
        "item": {
          "id": "1a664e51-6a62-45aa-928f-907bbdf66b90",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c6701de4-15ff-4f24-a1d2-a8137384f7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb1d7bc-ded4-4db9-912f-637225660f1d",
        "cursor": {
          "ref": "c954367b-ed82-48aa-814a-cac1d0531373",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e7b90636-bf3d-46c1-8aeb-814ce1b336ee"
        },
        "item": {
          "id": "9cb1d7bc-ded4-4db9-912f-637225660f1d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65eb6a10-5ca7-486d-9479-227bd3bc66f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e95bdf-524a-423a-a865-ba8bafaf6699",
        "cursor": {
          "ref": "6fc2c4c1-03f1-429a-81b5-9dd7cc8d43f8",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2064b885-6406-4b1b-a91a-8100f21cc070"
        },
        "item": {
          "id": "95e95bdf-524a-423a-a865-ba8bafaf6699",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d74846e7-bed0-4403-85c2-4a0f8e5a99dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864d2338-c2d3-446e-adef-c205fb489d1d",
        "cursor": {
          "ref": "0a435ad5-f045-4d9d-ab93-ad4e87761f5e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "03c053c4-ee35-416a-9bdd-cc95a693c88e"
        },
        "item": {
          "id": "864d2338-c2d3-446e-adef-c205fb489d1d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fcb3134e-a51b-4b4d-880f-94e71b11b9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0701ab-bb81-41eb-a3cd-3e08f84612ce",
        "cursor": {
          "ref": "abab897b-95d5-4be5-a863-9e17d4f2ee11",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7b601d72-10f1-466a-8254-e9032a3f0c2e"
        },
        "item": {
          "id": "ec0701ab-bb81-41eb-a3cd-3e08f84612ce",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5b146c78-d12f-4a1c-8547-3365c784ab47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3f662b-b32d-427c-a57b-83ebcd86cf8f",
        "cursor": {
          "ref": "c0df0983-348a-4ad2-a09b-5bda4a312bb8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e450cb8e-b3d7-4e4b-970b-68de858c2991"
        },
        "item": {
          "id": "dd3f662b-b32d-427c-a57b-83ebcd86cf8f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1eb28c88-d4e3-431e-a7b2-d555a3c57dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb167d2c-c33a-4590-8545-897cee124bfe",
        "cursor": {
          "ref": "dad2fd00-e1cc-497f-a6dc-7d61f834d40c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "94e871a4-b458-4cd9-8999-39798beb6d71"
        },
        "item": {
          "id": "cb167d2c-c33a-4590-8545-897cee124bfe",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ace121f-cdfd-4279-9032-b30e1b3b65d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eb8d4c-5bae-4518-ba97-3da119764331",
        "cursor": {
          "ref": "c4295dc4-1f8e-4375-9c66-1d2bcebd0b2a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "42c1ccca-43a6-4b19-89b2-560b0cc99ba9"
        },
        "item": {
          "id": "00eb8d4c-5bae-4518-ba97-3da119764331",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b1237de-59d9-4523-97ed-fd7967b8669d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b65ec0-83d7-43ae-9402-9f621f1ad6b9",
        "cursor": {
          "ref": "931c54e5-039a-442f-805f-572d0698e2cb",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a0bde0ad-62a5-4945-9ccf-a3870bba7ca2"
        },
        "item": {
          "id": "b5b65ec0-83d7-43ae-9402-9f621f1ad6b9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "129954d4-c46b-4d49-a5ca-a7845ff6a6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6a181e-acbb-4cf8-b002-20c7d0e74435",
        "cursor": {
          "ref": "e5a45529-e089-42f8-8574-82324964cc39",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5bc5e4a1-4e3f-45aa-a5d4-218cbac2bad4"
        },
        "item": {
          "id": "ea6a181e-acbb-4cf8-b002-20c7d0e74435",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fe324b76-b8de-4a63-beea-df6f781daf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35380ecf-a9c6-4055-ba7b-e317517da71f",
        "cursor": {
          "ref": "a9e5d30e-03aa-42be-a11a-1d5d60dcbd2e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b78c7091-e005-455f-b9d0-f6ee2f99a908"
        },
        "item": {
          "id": "35380ecf-a9c6-4055-ba7b-e317517da71f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1b06cfe-7ead-40e3-aa2e-d6f9b12ade2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6eb191c-ba2a-41af-b0bb-331535b94e53",
        "cursor": {
          "ref": "f2f9b234-7548-4605-ab30-47ac07403de1",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7a9c2d19-7f1d-4d4a-818e-6094ef60c6a8"
        },
        "item": {
          "id": "c6eb191c-ba2a-41af-b0bb-331535b94e53",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d8f742cb-6fe5-4080-b703-340af8226669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc4d172-2cfa-42e6-9e77-1288e0a1e61b",
        "cursor": {
          "ref": "92f7c78b-d82f-4d9a-a546-b2b0b6a0e65f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "29327a6c-bb21-4557-9065-73d51f3ae0e5"
        },
        "item": {
          "id": "4bc4d172-2cfa-42e6-9e77-1288e0a1e61b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c06d798e-a6a8-426e-8e28-9efa022c527f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475321d6-95da-4123-ad0b-33ac36b38feb",
        "cursor": {
          "ref": "d63ecff7-568d-4a19-9a6a-0a2e1b30d0af",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2487ad9b-69c3-420d-94d7-5ecb99080201"
        },
        "item": {
          "id": "475321d6-95da-4123-ad0b-33ac36b38feb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e68a2cec-044a-410f-ba59-83924bd45b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8615b738-f417-40a5-a5d8-08771c1298a8",
        "cursor": {
          "ref": "74f6f854-83ac-4059-bb61-14b332ae7fa1",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f010df15-9dc6-4160-9116-9a74805ef74b"
        },
        "item": {
          "id": "8615b738-f417-40a5-a5d8-08771c1298a8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "19b32073-9a3a-4b35-bef9-ed7d3daeb798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc84c8b-0e47-4ac4-a43b-6ef62069655e",
        "cursor": {
          "ref": "33c19bee-02d7-4de4-aaea-ed6da80afb45",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7d2eaea3-b659-4cbb-a40c-08580de0c6be"
        },
        "item": {
          "id": "ffc84c8b-0e47-4ac4-a43b-6ef62069655e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f5053c6e-c755-4703-b89d-fac6312cfa3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac53b3e-22e7-4d74-8f24-80e1505590df",
        "cursor": {
          "ref": "17ae24fe-e357-4b95-ae2a-8174fd6b3291",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c774625a-b102-491c-a6b5-c6d000f87c82"
        },
        "item": {
          "id": "7ac53b3e-22e7-4d74-8f24-80e1505590df",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0526ada0-fb8d-4768-81c1-17ed08e21671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad15923-4807-48c4-bfed-85e8c7a75bb1",
        "cursor": {
          "ref": "d5ffd4a1-8e8d-4069-a1b8-1816a2739a92",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56d661d8-1af7-4584-9673-f0cc56a98280"
        },
        "item": {
          "id": "4ad15923-4807-48c4-bfed-85e8c7a75bb1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3bd43c42-37ea-4207-8cdd-db0b21fc04bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ed3827-8ac5-4952-b21a-b48f010072e8",
        "cursor": {
          "ref": "173c8ae8-5496-452b-9e67-3aedc7a28f9a",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1b9a561f-450c-4cde-abff-44c933a83ce0"
        },
        "item": {
          "id": "c3ed3827-8ac5-4952-b21a-b48f010072e8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "049190bd-d706-4257-ae60-34fab7af1ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b029913-36aa-4117-8a8e-4acf75f73081",
        "cursor": {
          "ref": "d47e006f-5a40-4606-808a-df84a7b8e13a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7af043d2-274b-4839-a1ac-97f2e62e6c0f"
        },
        "item": {
          "id": "1b029913-36aa-4117-8a8e-4acf75f73081",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "88687c5b-0905-4019-be4f-a837b0259779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442585e7-8f68-4bc6-861f-cfef1cfd855f",
        "cursor": {
          "ref": "c4b32755-a216-463f-bbd2-ec7d75f18c8e",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "98cf71d4-7545-4271-813c-47b78e27847d"
        },
        "item": {
          "id": "442585e7-8f68-4bc6-861f-cfef1cfd855f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "710b6fc4-a7df-4b6e-98eb-0e1a790abe80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b463bfeb-a82f-49fd-90b1-9bfbea378892",
        "cursor": {
          "ref": "e04b2807-c586-4453-b13a-186006d610e8",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f69c3eaa-d6cf-4def-a20f-eb452851f3f5"
        },
        "item": {
          "id": "b463bfeb-a82f-49fd-90b1-9bfbea378892",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9bdb8b05-2289-4a7b-a159-43bf9a67bc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5f8beb-9b8d-47f4-afbf-efd656ae0ad5",
        "cursor": {
          "ref": "da261e80-7739-4b4a-8d2c-62e22387810f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "192baeb4-98df-489c-b2db-89030b173996"
        },
        "item": {
          "id": "de5f8beb-9b8d-47f4-afbf-efd656ae0ad5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0d1e0499-e101-4e23-a3df-149db168f0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7f3af7-98e0-416c-9073-78766992273b",
        "cursor": {
          "ref": "5562b274-22da-442a-9af1-6a007d5b7e84",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d11e3fb9-a5a5-4d6c-9619-b577348d4ab4"
        },
        "item": {
          "id": "3b7f3af7-98e0-416c-9073-78766992273b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "00e3d8dc-234e-4c23-8832-ee7dbeb8fbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f076672-1d4b-49a9-83e2-7bf35ec0b079",
        "cursor": {
          "ref": "0d16801c-b2a0-4936-8a37-2d0f3e9b2749",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "75faf1e1-ba14-46eb-a2fc-4d55d02a9d27"
        },
        "item": {
          "id": "1f076672-1d4b-49a9-83e2-7bf35ec0b079",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bcf5b24a-7a2d-4f88-b796-61785a69b793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba9d323-5d4b-4855-b3f0-88eea959ed7b",
        "cursor": {
          "ref": "c3b620b0-a78f-47b4-a9c9-1ea287918a6a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a8fcb484-71eb-4ac8-92c3-4fb7dd71b331"
        },
        "item": {
          "id": "3ba9d323-5d4b-4855-b3f0-88eea959ed7b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "05e8cb74-1c40-440d-a9ee-a85113efe8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770f6240-366c-4ccc-ba09-518d223805ac",
        "cursor": {
          "ref": "e6ed2d88-b71a-4621-9bef-b3bd426b30bc",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "34fc9687-ac29-4ff4-bde1-dfdfde5e88fc"
        },
        "item": {
          "id": "770f6240-366c-4ccc-ba09-518d223805ac",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "85d9a518-f558-40cb-9119-e19befef616c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02017b23-dc91-4de1-8370-262a713de4db",
        "cursor": {
          "ref": "299771ac-4365-4cab-a21e-64a435b1c381",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b057f5cd-d081-4e7a-b2c1-a16cdde568cc"
        },
        "item": {
          "id": "02017b23-dc91-4de1-8370-262a713de4db",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f88821d6-f17f-49b3-98d4-5bfeb4ad0d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6281c3f9-c517-47f0-9b30-aa3c3360003d",
        "cursor": {
          "ref": "396b2fd6-0063-48ca-b52b-6155b07c1fc8",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "42fdb5b0-3968-49ab-af3d-ce214c1ae796"
        },
        "item": {
          "id": "6281c3f9-c517-47f0-9b30-aa3c3360003d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f1be472-5e86-4636-83f8-589ee5330f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba9b9f0-9f20-4fa4-ab70-033ac4094f89",
        "cursor": {
          "ref": "3ce1e55a-55f2-4180-9649-dbbabc336100",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9907c705-876b-4287-bd2f-831ab64f6a68"
        },
        "item": {
          "id": "eba9b9f0-9f20-4fa4-ab70-033ac4094f89",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e6667324-e3d3-4d16-92b4-156dcf3194e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c4165a-d39e-4177-83c7-8bc1a76a6ec0",
        "cursor": {
          "ref": "455618a6-5bd4-4836-9b2d-80ca558ec071",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b02c9a6d-47ac-4d4d-b5ec-747e15e44c07"
        },
        "item": {
          "id": "97c4165a-d39e-4177-83c7-8bc1a76a6ec0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5e8ad9b2-1682-4b07-81d6-08c0a8460914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2064c8-0162-47c1-9f5b-653bb457e78c",
        "cursor": {
          "ref": "64f155b4-47f5-41ae-9819-84b8f491765e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "99137711-1cef-4b7e-b3b2-24a516d3012b"
        },
        "item": {
          "id": "1a2064c8-0162-47c1-9f5b-653bb457e78c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "49cf520f-20c0-4bb9-be78-6448e881902d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35629a4-9488-4d6a-91ec-fc32e8075fee",
        "cursor": {
          "ref": "c7095b6f-9d43-4c45-917c-73a611be8d76",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6a4e25bf-f539-449c-8593-922b73c98cb4"
        },
        "item": {
          "id": "c35629a4-9488-4d6a-91ec-fc32e8075fee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b17dfef1-b0a2-4017-97d1-2a452039e04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7621b92c-2e2f-4191-9245-4c704d03dd57",
        "cursor": {
          "ref": "59c57ea8-8665-44d6-8675-3505bb017571",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3178100d-f279-430b-b3bb-46720780e170"
        },
        "item": {
          "id": "7621b92c-2e2f-4191-9245-4c704d03dd57",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b89d390-4915-4991-934f-bdea20ba9bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7cc22b-8a50-44b9-b333-204bad59bd85",
        "cursor": {
          "ref": "768b470b-1a9b-495a-a509-d5aacfd4e952",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "467a1823-288e-47e9-96eb-6c52da360505"
        },
        "item": {
          "id": "7a7cc22b-8a50-44b9-b333-204bad59bd85",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fbbdde88-3447-4964-a12f-656df67657fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1fc011-4dae-4dc5-8dbd-e8d9961528a3",
        "cursor": {
          "ref": "2a040f0b-366e-4fd8-b3a1-59b05cfe5ecb",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3026b419-218a-4cec-acb0-204ac9440ad8"
        },
        "item": {
          "id": "ef1fc011-4dae-4dc5-8dbd-e8d9961528a3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f8b2690a-b773-4a1f-8430-8540c7d8b4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98484651-3f93-404d-81cf-955ce61cf972",
        "cursor": {
          "ref": "f6dbb9c2-2edc-4769-b721-08cbf90581b8",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e28c2b88-278d-47d6-9cd0-0a709e167721"
        },
        "item": {
          "id": "98484651-3f93-404d-81cf-955ce61cf972",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7aa84bad-5d2c-4477-8234-5b27c32dbabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7482c51-0ed5-4102-a799-900d1ef4457f",
        "cursor": {
          "ref": "344af42d-2eae-41f2-8170-d312ff87efad",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "21b3fc73-f6bb-4cfb-af59-07fe7a3650e8"
        },
        "item": {
          "id": "b7482c51-0ed5-4102-a799-900d1ef4457f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f4442567-b7e3-439d-870e-127f13cd07ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2458056-3034-4e5c-ab98-7158c3696c0e",
        "cursor": {
          "ref": "304e9850-48ed-4aed-ab42-72ca305c1151",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dbca0a9f-fd48-4275-9d9e-1729eb104a4f"
        },
        "item": {
          "id": "a2458056-3034-4e5c-ab98-7158c3696c0e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "760157f2-038c-418d-8a02-bfad79341398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511e4776-5894-4346-bbc2-87bc08a99da6",
        "cursor": {
          "ref": "6076f9a8-5cb6-4070-968a-be6fe9b79d14",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "071f60d1-b9e6-458f-adbe-dccbdbf5f2fa"
        },
        "item": {
          "id": "511e4776-5894-4346-bbc2-87bc08a99da6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0c2fcf6d-fbca-4cc3-947f-daa626c560bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dacecc-eab5-4fce-b55b-c20cf3a79228",
        "cursor": {
          "ref": "dbc52a18-db5b-4490-ba31-0452cc00dd1b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "35c8fb5c-3960-4480-ae3a-5f456380861a"
        },
        "item": {
          "id": "28dacecc-eab5-4fce-b55b-c20cf3a79228",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ccb969fc-56ad-40f2-8483-7401f8b9878d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01c86a7-1f11-4694-af2e-a0b92c5f3d0a",
        "cursor": {
          "ref": "02353628-e1d7-4285-9f4f-ea6bfc9d6042",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9846ca0d-9022-42a1-94a7-4f08c1d4e97f"
        },
        "item": {
          "id": "c01c86a7-1f11-4694-af2e-a0b92c5f3d0a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c0397cef-f08a-43c7-9731-10b26a5b1d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9786d36a-e22e-4003-b941-5c118156e5f2",
        "cursor": {
          "ref": "57b6e2de-903d-4fe3-b465-bea5003b4721",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3e4af77e-efbf-4be0-81ac-ce966ca4d379"
        },
        "item": {
          "id": "9786d36a-e22e-4003-b941-5c118156e5f2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "373bd373-554c-4a4b-ba76-e7be7c5f15d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f370b835-3bc4-42c5-90f3-3667dc23d345",
        "cursor": {
          "ref": "58a43c9a-009e-41b2-813c-0caf159587af",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "98de1d2f-20d3-4e16-b280-58463eb549d9"
        },
        "item": {
          "id": "f370b835-3bc4-42c5-90f3-3667dc23d345",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11144e61-cd9d-4a1f-81ed-b6d5a80c8740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1ff435-32af-453e-9969-fae37d28cf50",
        "cursor": {
          "ref": "badb3913-75e8-4fe6-a3d6-33e763e12588",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c5f24837-545d-4b6a-b381-886276ae993a"
        },
        "item": {
          "id": "fc1ff435-32af-453e-9969-fae37d28cf50",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "282c1934-d823-45d7-95ae-11e0dad62385",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a12e6b7-9507-4cf1-8af2-c59a63b56b34",
        "cursor": {
          "ref": "05596f75-6a36-4653-9c85-5f7365582653",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "024599f8-d9d1-4600-8e5b-62a223c07da3"
        },
        "item": {
          "id": "0a12e6b7-9507-4cf1-8af2-c59a63b56b34",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bd8e8e17-003e-4b6f-a3e8-13ad225619bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "4ba015e2-722d-425a-80d3-1780409f33b7",
        "cursor": {
          "ref": "1b601e8f-3490-41da-94d5-eca9a51b54d8",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "af29aabb-fc07-4227-826c-4d392d1d02bf"
        },
        "item": {
          "id": "4ba015e2-722d-425a-80d3-1780409f33b7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e1d9a8c3-4832-471e-8372-049e3da78de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "4bbcb4bd-6e2d-4c03-a436-89438cb16d26",
        "cursor": {
          "ref": "c91ece08-f2bd-46ef-bafa-df532cf2c8a3",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "749af48b-6ea5-44d6-b74a-816735cf741e"
        },
        "item": {
          "id": "4bbcb4bd-6e2d-4c03-a436-89438cb16d26",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "df1c0dfc-9f4d-4bac-81fd-9fa8f0a480b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
        "cursor": {
          "ref": "687a974f-8596-4e35-b6cd-c3058c80c571",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b2f8de64-c78f-404a-ab41-9e4df95695ca"
        },
        "item": {
          "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7b077bd-5ca1-4f3a-9de2-b5ea1665eadd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
        "cursor": {
          "ref": "687a974f-8596-4e35-b6cd-c3058c80c571",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b2f8de64-c78f-404a-ab41-9e4df95695ca"
        },
        "item": {
          "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7b077bd-5ca1-4f3a-9de2-b5ea1665eadd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
        "cursor": {
          "ref": "687a974f-8596-4e35-b6cd-c3058c80c571",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b2f8de64-c78f-404a-ab41-9e4df95695ca"
        },
        "item": {
          "id": "1f881b2d-3c1d-4c2e-9aba-11990b460f36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7b077bd-5ca1-4f3a-9de2-b5ea1665eadd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e6815f-8395-4823-9a68-efd8edb1b060",
        "cursor": {
          "ref": "bb7a4713-83a3-4b40-af04-8dfa43dd4616",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6a59634a-6683-40a6-86b7-56ddcc34f5b2"
        },
        "item": {
          "id": "08e6815f-8395-4823-9a68-efd8edb1b060",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "817a3fb9-a2e6-49d1-b72f-c2f0db839b81",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298e2cfe-0997-416e-a721-92a962fadec6",
        "cursor": {
          "ref": "7bbb6cce-49e0-454b-8b3c-c06726d0367c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ef8acd0-ae46-4c92-acca-3ae2ce39b47d"
        },
        "item": {
          "id": "298e2cfe-0997-416e-a721-92a962fadec6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4f911a74-72fd-4193-ae1b-62441b9b1620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "298e2cfe-0997-416e-a721-92a962fadec6",
        "cursor": {
          "ref": "7bbb6cce-49e0-454b-8b3c-c06726d0367c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ef8acd0-ae46-4c92-acca-3ae2ce39b47d"
        },
        "item": {
          "id": "298e2cfe-0997-416e-a721-92a962fadec6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4f911a74-72fd-4193-ae1b-62441b9b1620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a71a72b2-baa0-44ad-8041-182956738d94",
        "cursor": {
          "ref": "7fa22fe8-abb1-40f0-9a24-174b39bbf08a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3d8645d1-8177-48d5-8da7-f34d6688a19e"
        },
        "item": {
          "id": "a71a72b2-baa0-44ad-8041-182956738d94",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "781a0796-670d-4ed3-8fdc-4943eeab3878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1864d5ce-9a92-4e9c-b34a-c9d56c228981",
        "cursor": {
          "ref": "298dff22-3eef-4251-af87-7eb0795cafa4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3bdf8b97-9351-4c83-8c05-09f750f17b41"
        },
        "item": {
          "id": "1864d5ce-9a92-4e9c-b34a-c9d56c228981",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9b2a0cd1-f359-4add-ac92-7f50d2a1b2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1864d5ce-9a92-4e9c-b34a-c9d56c228981",
        "cursor": {
          "ref": "298dff22-3eef-4251-af87-7eb0795cafa4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3bdf8b97-9351-4c83-8c05-09f750f17b41"
        },
        "item": {
          "id": "1864d5ce-9a92-4e9c-b34a-c9d56c228981",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9b2a0cd1-f359-4add-ac92-7f50d2a1b2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ef9676be-e29d-442b-b333-0cb57dd1a832",
        "cursor": {
          "ref": "e14204ae-3350-40b8-a045-457e0d06aa15",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5739c0cc-739d-42ed-9e63-e86dd53fc4ba"
        },
        "item": {
          "id": "ef9676be-e29d-442b-b333-0cb57dd1a832",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "258b1594-3d16-469b-a00e-4a6a0fcaf7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}