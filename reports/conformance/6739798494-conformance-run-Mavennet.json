{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b344d0af-edab-47e4-9e8a-0cb7c68f5d47",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7543b29-25fe-40b4-b5e2-4925ebc9ec51",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0531971-2858-4d60-a95a-046a499b0654",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9503435e-0d95-4d5c-99ae-f27d104131cd"
                }
              }
            ]
          },
          {
            "id": "1c6ac093-9774-4e20-a4b2-f892bf982f44",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8dc60e2e-3e44-486b-919e-0e398515f7c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c9a8e5a1-1081-4aed-8591-c8c31793af9d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2992f797-4c9d-4519-b41e-8469de8cf172",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "290e36b2-93e9-4acf-b026-2baee2e6b45e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "35da2acf-0ef6-4dae-87e6-b2a3ae63908c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "412f267e-b19f-479e-bd56-2042d4a797d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "676378b6-1dfd-48c3-a0d8-7df019699f36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b0c788e-56c1-400a-af4b-c6dad64b439e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ca5dcdd-3cae-4197-b369-b92c52e4f4be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e151d913-ec60-4c67-8227-10142ff0800b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83862ccc-b36c-42ea-8025-be312769e80d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41b8a5c9-4515-4424-99d5-053a08f4e40c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "56ac0b76-87f1-47fc-a3a0-91c7e7edb2b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cd79bbf-192c-4380-8c43-bf42ff261130",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "102e3940-b4f6-4db0-9d18-7b09ad57523a"
            }
          }
        ]
      },
      {
        "id": "051a72ca-9375-4cd9-b376-cb5b932a4050",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "def12f13-7efe-4769-b6a2-3cf2c00b4f99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13ad7603-92eb-475c-9898-686e336e274a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94565114-9020-40fc-b0d0-80e1ebda80e0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ee7ea3-37c2-4f7e-a732-407bfc0cb11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "614ec352-91fd-4299-95a1-4a3766303979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0949714d-68a9-4075-8382-b6a1329a4d28",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8894a705-2be2-4819-8e90-1ac416d6c77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8e1b9bd-b8b6-45a3-b484-a465d97d382a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a425781-50a3-44aa-90e3-a256f54ceed1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92472e87-f0e9-4271-8738-785a9e1570f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f0ca6ab-0893-448f-8d12-acdfa3973561"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51c07795-8221-462c-a046-64caf0ad5687",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56026e4b-bb8b-4ca3-a9b5-686a59f91a38",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee2a782-13c8-4d53-86bf-c6e73827f15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eba27f9-f451-4f98-b08a-1cddc38647f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b91c9cc-21db-4f6e-82a5-a409ac47dba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc509c8b-d63c-4ee7-9d5a-b09be8e5b883"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e8197ae6-c76a-450d-bd15-2bd30f68c0a1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1a70d49-6652-44d0-9459-3493fc04912f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5c9d79e-5a2c-4701-83cb-4f63e55a8b11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "eb05951e-96ea-4962-9009-bcda4cd1309f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ea264a2-a824-4c2a-bd3a-488606e91a99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bfa08294-6f9d-4c6a-8fb5-d4101c3f6712"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d26756c2-6962-4b4d-911c-35b86c5c2ca1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5d13d1d-330d-4697-8570-b5749c6d3026"
            }
          }
        ]
      },
      {
        "id": "cbb1c1d3-2ae8-4d8a-a6f8-c94ad18ef102",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "335e2686-56cb-46f6-b950-d6f393f182bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "048edc82-476b-461e-9098-b0a78deb9730",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9c3909fe-ef88-43e5-9a4b-953ff6199f43",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4248a2-14f2-4766-b31c-6af053aca125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0935be-a22f-42e7-8f4e-23f0f784fd35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbbd143-0d79-42be-aba4-a6e3b1148e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eedd91a2-2df0-4783-a62a-0205af32996e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4174c535-7013-4c6e-9d4c-e4dff179970b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3926a4ba-b0fc-4ed6-a646-7ae8e616e088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87378f4f-c14b-424a-b801-989e9cc916a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7718998-a02d-472d-af19-d9367b7fe609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc1323f6-92a2-4159-b17c-f9a19717b366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdae746-75bd-4773-88e8-84464888f756",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee5f59e-ef98-4f21-b812-4dbeb985b461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6898821-a513-4ee7-bb35-bb1cd366d549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad013a9-2ee0-40ad-bc24-90a78f82b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02916e74-5b18-41e1-8d1b-acfb01a1a93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81024889-b9df-4c96-8dcd-4d8f560dbc01",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c683cf-1c9f-435d-a6bb-f725c6e3431d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2408c6-58a2-4170-a0cc-8f75506e8193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067c6e42-3d56-42ea-9cdb-08aecb1bafff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "939f4218-e43c-484a-95fd-6bde488d732b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de92974-0cc7-4628-aed8-d90c8595b3c0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5cc1ca-7c90-4ff4-b6c5-663cfa650976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f555d044-4436-406e-8396-73c3b5d9c358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5681cc6b-47d1-47be-92e4-2fdbdc0de0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8efb001f-7e30-45b4-ab74-f028e5c93ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7e2a45-bf88-414c-8f5f-cbdb954f118a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778a6598-5fca-4133-b504-f63022a929f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0caf2d65-fe2a-409d-b42a-13b522e941cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0012ecf2-9948-4ced-8298-cb534e2c8346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f0e6733-3db2-468f-941d-245eba369882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71070367-34bf-4d97-be4f-fef6c4bc869e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e360e0-2259-4caa-9d0d-fb815935f668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd5aec6-f2c9-4be3-bf42-ac97685ad176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b066f7-ac53-4a3d-b9ed-d2682fd6db16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7757a62-f9c8-468b-938e-e9ede79d5d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689ea2f1-a12a-4d7d-b3ed-edbe96435be1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1c1106-a633-44c4-b64f-377cbedeca73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b687ad-b737-4340-bd09-4d3d4829b500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01f2f05-63bb-4661-8467-0b472966114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d58fe4a-4d20-4f41-ad94-0ae379f7e9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac64518-8753-400d-af28-d394764b8f3d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1fcb8a-893e-47e5-8909-25af37e03c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84714fa7-8ad9-4f64-9fc2-268051b415d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3a7746-f8c9-4159-8078-9623a7b541ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36983c5c-ec81-4f8a-8810-4a4553997756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199e5ba2-4c40-4cfd-9ac3-15d23141f7a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef375cc-a42f-4a0f-b574-0fa2ee40b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe23720-2913-4cf4-a6cc-dc61b234950b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e9d535-fe1d-45ac-a8a6-07811e6c5b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cac0609d-0382-424c-a90e-3e13bad97f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984a3f6f-d0e2-45d3-af06-21929bcb0365",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27539f3-cc23-49fa-b889-f42a680b4dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1415767-ce17-4ed9-a018-9a1d86eed4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d018d30-2e68-479e-9171-11dfeae8ad4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "135009fb-6ff5-49a9-89e8-0b9aaf06b6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff970e02-6b9d-44ed-b1d7-ba0f915ee268",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1dda38-6271-486e-b568-ad34777f3dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2efe4b9-3b01-4c9d-a186-d869a67f9da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf6e334-07ab-48dd-9235-241d6eb66ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb1dc64c-4857-43f6-b992-3e17294991f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2d3cb8-27d0-4593-af5f-59c7ae3eca69",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b5eb4c-8869-4051-aa5e-23bc48700648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccdbf92-cc6d-42f7-a351-22a10e2d3074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce6755c-a71f-4242-8071-fd9a3573b579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2126d61b-c3ba-4acc-9afc-926f1c2a7e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6887664b-204d-4d2b-9184-38aad84c051a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e033ac0-5561-406c-acf1-efa73da56a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3c5ed6-3ffd-493e-8b26-1b2f157face4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf4a25a-9021-4950-88b6-f1c0e8e67a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fd48934-a7f5-48b6-8746-85758aba59e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0440fe29-7394-47c9-95f3-eca84292a0a8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3615e6b8-6282-4742-8ceb-d8ac1e7b1244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc55d26b-9128-4874-840a-ad6dac7c35bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c189ba-d147-4909-91c6-dd6077e0d87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78efbe23-d15a-4def-9ed4-930519392c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc32df7-0459-4760-8612-be9146a6fba0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3745d2d3-de66-4a9d-bd0b-b747779a9130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b2755c-d691-4b4b-8706-e326b793e0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc2f57b-85a6-4a80-b37f-4a28fd3f3108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0cfdb69-64a4-4454-86da-ef5218b51e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0755a190-c1d8-44fc-ba92-896e96baeb28",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60030c28-3d2d-4d02-9f7f-d5de57f1e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf9b583-67d7-4737-af81-80ff711334d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b486199-0d6e-462f-80ed-00f13bd332e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "780525a4-611c-4932-b757-0c112f328814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a20d5a4-8403-4971-ae4c-899a7470fc80",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ea8550-5e20-414c-bac7-a16c5c3641b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6aaef3-d7df-4ad2-97ad-4d74fbba4aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83d3435-0e10-425a-be35-0aae6c48604c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "50d3513f-6695-4ad2-babe-fe392cb1aab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dd7acf-a760-4a25-83f9-68476fbe4459",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c07254-6645-45fa-9820-b5d7823da7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9b5bd4-c586-4745-b979-e726e015f02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168b916b-4ded-4fa5-90d7-4d28d5515056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90906db6-4c69-4aa4-b279-fb97f529a3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c000bb72-51fe-43e5-a4d5-5066c8b5902e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae55dbb4-c3a3-45b4-9347-1ff31c6d87ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92919bb6-5231-41b3-8429-26d92f637aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc099365-9682-467c-8e22-ef457803b1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff6cb6d-4315-436d-b56e-7c8011ac45bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d515be3-6fe5-4352-b76d-82fef69b921d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc8d340-660b-4db3-9575-db0475ef1162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c089ed-0042-469a-afcc-2d2ab67162a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac29557-a97a-42cc-b03d-d592dc34a112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "277480bf-4210-4530-98d4-71f618687739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93422cde-1e76-4fc4-bcc1-bdfc5e50a4dd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a38e04-9ac5-44c1-b623-d2bdec161e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3cd645-c9b5-459f-815a-864a869f9128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedbfae0-ee6e-4a33-93ef-e511010ecc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97be0c7c-7a00-449f-809f-2ec4acada19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af32efe5-a931-4705-aaab-de1a0f9142ab",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd846d5-517e-41f3-a80b-bb48d98eb0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15865078-35c6-45df-b287-49d6c45c7383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69f729e-82b7-46e0-b1a0-93852b12612d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff7d673-7ad4-4d39-96c7-ba3acd226fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c03031-852c-4dab-ab19-306335305990",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467d89c0-7893-4189-b4ed-791bf74c5bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12833a3d-ac14-48c1-ada4-bf331176c722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837480b2-98a5-4e60-a125-755b4e56ee41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0c3c44-c9ec-4302-895c-f31184a346a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7609774f-ced4-403c-a4fe-ffd84feac5df",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4b3176-3783-432b-9ee1-51ad119e244e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bbdda8-b50e-4a42-84d8-96c236192e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abae72cb-36d7-4ba2-9a10-f6913e4a7824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9adb24-ff9c-4c0a-821a-068d2db488f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f57fc5d-45e3-4171-adb8-d1daf9b27d77",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294ecc37-dfeb-419f-b0f9-62d701e7a310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533552a5-221a-41e4-a46f-e24e5ce8b8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4054c34d-fd87-46a5-a844-fc024be9ae75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "713e5c53-7e21-4538-a8dc-03376f9a943c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcfc9d7-8e43-4b70-a30f-5756c7055fa9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a82921-e2e9-4f23-a165-0584d0fe0c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baffae70-cbec-4de0-9e05-6bbdc03cfcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87834255-dd29-4dbd-8523-af5e0e8df53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a119ebcd-c4ae-4ae6-ba54-62a2326fe664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca2eee0-01e9-4ef1-9edd-6f5faacb27cd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f64be8-c110-4ae0-89e1-fb47686d0cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35263516-9f18-468d-8431-54468dd81307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb66215-ec0c-416e-b32b-4afba5f7e032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca36ce3-3276-43c3-975b-c20fc523f59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6224cce0-2447-45d1-a06a-a732cc056a49",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec80126c-caa9-4132-8ae1-7b5f56f9cde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa52fa6-7089-4f56-81bc-07d35f48110d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a933bd-954a-47f0-b03e-04b101ec4388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15adf063-d536-42bf-8ea9-9fd0b24ad88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c63450b-b95d-4c82-9cd8-4962827dde30",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b096f-a51f-4976-929f-7215cf3ebcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac968dd-4767-40c8-bdab-35e367702387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d461badd-eb35-407d-afe6-0d8970eec5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab066363-e927-4004-953c-348f3ac1ac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5e04d6-b558-4809-83b8-1f4dac299db0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050120e0-4d03-496b-84f3-f88367310492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575d6d7c-5ae6-4e90-9d89-8dcff1e4f76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a8d28e-c75d-42e9-89fa-95624384b074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f516f20-103a-449c-b997-fdd27ae0a308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d38671-0e04-4fa6-9c62-f3705660e6c0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7f107a-3b40-44dd-9046-1c709a33cee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8b9a67-1963-4c3d-ba26-82cb1c6cb38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec1547b-c882-46e8-81e6-402c7f86c1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ffceb0-643a-4316-803a-e511d0fb97c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554cb950-e561-4ce5-bc6d-0c5d15d929f8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc27272e-9b01-4ec2-ba06-c89a60c9f07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e4e88d-4315-402e-b404-210404443638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc258bf-e8b9-4cb1-a491-7244ff23231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc08a5c-a3f8-40a0-89ee-66e8c0976d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29dddde-d979-410e-87b3-cb967b75981e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed962e5d-0809-4fbe-94d9-e9c644201d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb03a96-7663-4dbc-a4ef-ca4b5c59681b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530515fc-d615-4c8b-a555-d18e35f74380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a763fb2d-02cc-4ed9-b475-382fc425d07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f438c8ea-398c-481c-bf03-ac026e48b603",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fa8824-eddb-4dfe-bfeb-ef4233d01a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f23c88-21f6-4733-8f20-e8715e47c607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae02620-97b7-4b09-aaf6-aca76464c119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "969c728b-d130-47cd-9b78-3506ec8670b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a47286-f4e8-41c8-9732-eff9b30cc1d1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f862f0d-a472-4bb4-8ba9-8e8e341b2b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3349641-fd15-41c6-bf08-2ce1c30ec80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff837725-a8c4-4114-b858-07609450d372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1554b3e2-eca3-423f-81f6-aa802a561767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff16bb61-cd16-48ba-b8f7-7e14adb6e22c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1d30fb-ac41-444c-aeb6-1ff7e26abbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e88a11-bf05-4baf-b4c8-16e5d4bc3443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206b1921-4fe5-432c-88ad-7df7243f84c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd60300e-3f3d-49b9-a244-2406f998cac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae905c0-8068-4e47-96a1-4889a42c150e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e1b6cf-0fb9-49a4-9f54-7c0289b82f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09c16f9-e43e-48e4-89f5-a1f1d2358c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aab913-78f4-4eb9-8334-eae3843e0b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "12a1ba7d-085c-42f1-8391-93414ac7ec90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5403669-c164-4c0c-b4ef-0b73a3ae7ade",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d210e1-46c0-40d3-b2ed-814ee68be56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660762a6-a1ca-44d2-a12f-fe968d188625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1b5b48-f8ea-46a7-910c-41544d25ac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "366f47d0-6d86-4b6b-afa2-16fa603c34c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4b3df0-1877-42c1-a43a-39e5b11c5071",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceec8a3c-f226-472b-9424-3abe0a03eedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e83f891-e1f9-489d-a671-a4a55873ece9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22bc33d-3f5b-4ffd-a1f2-2f07514759b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6d6bef-56d9-4776-af45-656a40c2e14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a12d125-4538-487b-a3d1-ad1d330ec172",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3358f37b-3338-410b-9ec9-092cab53361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18452857-150b-49d6-9934-956a50c5e215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57f0df7-f1d9-4e4b-b2ac-e6643db59e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed92725b-dac0-41e0-9893-1e28270ff3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccfeb98-562e-4f59-ad3f-b7ba0a990e9e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e044a2c-b9c6-44d3-ba69-9f35e4950be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3affeb-687a-4d89-8b32-d486e650a46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76516f0-eaa0-499f-97eb-465917b9ca01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bb1cc9-c8d7-459a-8f55-f0bcf19e423d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e41c388-62f3-4944-87b4-42efca9ba828",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77e367b-5bb8-42d5-af86-ab3e2eff982b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f383fa8a-68d9-4d30-9aef-986534247dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840ab60e-573b-440e-b1fb-6ea86382d705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d16dea-4393-40f9-aba2-f022f7c00c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6dd847-44c3-440d-80af-e01c8c36e611",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bc63a5-4ea4-4765-b9d6-acad458dc3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6cdfd3-bf8f-45ce-9daf-fc83adefd5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922a2c80-7b5c-46c7-85cf-3fae2f9d2087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "315c2a9b-a4e7-44c7-a338-abd2c4407236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e90039b-fcf1-41c3-9781-6b2cf48bfa16",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec27556-0af3-4bf5-9679-c508ff194a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de6b914-8a52-4f44-b5d4-2b13eb1cc289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7b9e69-a882-4c03-b5fe-1ab0c88f866a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48cdcd39-a262-40cf-ba27-cdd837a936c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65571615-caa7-4616-8cb1-dc7559c101ce",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3101acc5-61b1-48a6-9e18-a99938107f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1115df1e-69e6-4bed-9cd3-3b1fb8cb66d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8889b6-b5ca-42d7-9bb9-6ce956c3b46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8106577a-d883-4257-9108-6f62e129499e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3a93e7-cfa2-45e1-b85d-f2d4a1821ec2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5ca477-bfdf-4ef7-9b21-2af30932ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059240f3-8fb3-498e-80b5-620570f821ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89bed2f-3922-4473-a735-e9b056542a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92f31df7-4cd8-4fb5-87c1-5d0a00e887cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3f473b-1fe8-4e85-b54e-74d8bd4ffa22",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2704374b-e028-4da0-93df-30d074631507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bddba49-902e-4086-a21f-32d9899fcac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2636e1cb-1230-4d2d-bc5c-b814004016cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1de2c62-fe52-48c3-9539-7574578ca3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d50dd1-339f-4c78-a531-cb7932358e8c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2257540a-b3d0-4549-87ed-b3ef03b5d527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bfa8b7-b619-4cca-8f68-ee17ee2260c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b345ce07-7f79-4564-a7b1-d163cf10622a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f83e17d1-c5e0-4500-b2f3-48f8b61c4a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6297a610-928a-4d87-912d-e5d16803c9b4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16486b86-bc43-4a7c-82cc-f3686f4c08db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4857425b-4e0a-47ed-bd10-396d37fdae50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba332e5e-3fd7-4948-9fc5-a636055e7ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f3d797-192a-4340-a679-676d5026ba63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dafbf1-584f-4807-92bf-08987260dcf2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab7c893-abae-4acd-9fc5-94a60dd32590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184ab55c-1d7f-48e3-8b17-bc812fabeaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0aa4230-a166-4071-8539-9fa9e793f412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "78f19939-7fa8-43cf-b614-55e722cc9c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e81a240-f698-4ac3-9520-51baf72d1e17",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a6e87f-8d57-49fa-907f-8bb0e18cc16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e77589-85d3-4b23-abff-8645a169ffea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed528bbc-5d28-449b-8233-3cef8db6f3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1186f1-08a0-4edb-8f98-884728fe6a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78de5c5c-f7b7-475a-8f4c-64b12376de28",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6ea580-9a32-4628-99b3-986896301242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3cd0e0-478b-42e0-944b-49ac77ec902a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95ce488-dcf5-4e3a-8129-232f4b6325cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c7de6c-a622-4f3a-8503-d658ff104065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d743eb-2f15-4208-93ac-2f10e3bbe2df",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005dca11-a3f5-4d5c-8aa6-4a3a7baf4269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877c6c86-0eec-494b-98bf-b2213409da57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4d2cc2-168c-4a66-8c32-e48c8add80ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e937d166-3c6d-4b10-9a34-a6527842126f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb338f3a-d60a-453d-aebb-caad55dd7f56",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77896c73-6902-43b4-9eba-50b591f4a11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba8b678-651a-4578-819f-b7c91f82a15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005ba2d5-2cc5-4734-8cbd-134322057616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd16fcc8-3575-422d-985c-44e6cdd60124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a7ea40-2aec-44ec-9df7-8625d3843740",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ac8816-2d15-4556-a385-4b078c408ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86daeeb1-60d9-4a45-bb5b-fb3182d5f5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9567e82e-8e92-4c97-b156-460f5bd2ef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6cc513-d0ca-4d11-a79b-4a736ace9fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08e909d-c978-4703-ba47-dbad866038fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590fcfcc-6763-44dc-8b36-ee221b3b3434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e20a9a3-47d6-4e74-9a37-e1c775aa5aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ea276c-9b85-4b18-9566-6ffeb353b0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c426605b-b30c-4c2d-a7fb-4e3b3a7de0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66902c44-c6cb-4315-9135-1a29ab8440c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf347ed9-6197-4936-9fe5-9c7e9ec23429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5542a4b-6942-4e27-95f7-562a17afa0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d18c90-0e0a-4056-957e-867d9665435a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44a0b118-fd80-4210-a44e-0f99d076fad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498929f2-2355-47af-9618-aff093cbb096",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309eb66a-7b04-4dc4-9964-df1770eed0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fcaaf4-10d6-4a37-9244-9b30d2748186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d9cf31-5cbd-4d3c-b655-d54230ae5777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e58785e-d4c3-4c6b-a541-9202a5230031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ee81d5-0594-48e6-8959-9cebf9be7478",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3826015a-c42b-41b0-8ed1-4ed0ab3f01bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98159c7b-6270-4557-ad2d-840fc11e2906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4b1c92-c756-4a2a-960b-a91e0133fc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a432b2a-3991-4566-98e4-0b1a9475d9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c014fd-c909-4f69-bf67-abe2b2067d3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dfdad7-f917-4bd0-b648-a054d4ea4bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ad7006-1d24-46fb-98ba-758606eb64c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d19bd8-3fab-4125-8ce1-13354c6d2c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "995b3cd0-8339-48b2-81f2-552927e38bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a26e6a-b40a-4ac6-adaf-316c2241b299",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8df862-634d-4cc0-b9fa-3d049c8555c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7aa19d-49b0-4674-88b7-f1d992cf1baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037b82cc-3c9e-45c8-9eb2-a391de95cfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8584e048-4435-45d8-ac7f-ad0f20d48402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b2a929-8c93-4ed1-9e2b-a14ed954f8e2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4395d38b-8e1f-4339-adf7-a9ae89f716cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e47bcd7-498a-453f-8285-afb88c3ccea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f9586d-9ddd-40a9-8be1-39f976960017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f3051a-ceef-474c-97ed-3047237a5990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191d2e5e-6b62-4629-88b2-8e837ab41a7a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3a3c2f-2f20-43d2-9ff4-04eb89eab4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d94cd9-7d1d-432b-b712-e547b96d9552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d878d4b-827d-4270-a192-dea1275c72b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf05435-c667-4cde-89b6-ea376bafee2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ac407e-5b71-48ff-97d1-9c47bd9fabfc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ede15ff-6097-4b07-b716-0319e3d2d9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82593665-8bda-4b5b-a988-e5d312dab948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e47eab1-6071-4f72-b488-37fd48d26569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4cb7ea6-a5f3-4a86-933e-17ed94360d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50eccaeb-313a-4094-b55f-15048dc6c271",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df22cca5-3d42-4e8b-83ff-68a3d388fd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc90712-3dc0-4836-9a8a-a788b8ad2fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b995204-c13c-4d30-8c44-a87c555909e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a2d9ff-88d5-4a84-bee3-0ba0a7341fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170a86ef-5349-455b-8e66-756a1ad75af1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177fdff2-f49c-4083-bbe0-25d5b762cc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d5a8b4-f6c0-4451-9965-47924ca479b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d15ff4-aeb4-40fe-864b-80aa7d4f385c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "706014b8-3e7e-43a5-ade9-99a5d8b1b8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbed1ec-c884-41c6-84be-ea17fb2f6dd6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a2d8ff-082f-4e69-a356-881885c504f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f34605-b1b6-475c-a43c-e8dd7e17b885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68be973-8b8d-4dc3-a762-14bb1fe0f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b90798b-9822-4815-942b-8c778ab91376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d94763-bf00-4170-95c9-8d9b683328c2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6d469f-c9ef-4d4a-af33-b77d2fb3fe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f261301-de4b-43cd-8b2a-116bda497e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d97b60a-6ec0-4be4-86bd-65899f29d236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb4fa0c-f9d1-4304-8e27-1c9f6208c364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba1ee68-033d-4682-88cb-689f3574b125",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b9b7af-09e1-4848-90a9-70d7e53ee88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "593c2b76-38d9-4aa9-807b-310d1883a326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57e381e-da46-444e-b7b2-18785cca691e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "978d35a9-97b9-4d58-a973-ecab0673eb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f13b0-ea90-422f-b077-7ce848e3bd88",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe819e0-b039-4720-a326-55eb6eb65036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca810cef-fe29-4cd0-8a84-9b8e0d35357a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46f6b84-d234-42e9-bbfc-b835fa7a7c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "833dcb85-a00a-476d-8a83-8a51199091fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474ab522-5fa9-42f3-9535-c481cc76b48f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac4bbc3-a236-424b-96dc-4f5024082f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52f958b-d577-4e8f-9d65-526f5cd17c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243a5a92-f648-46e8-bcc5-5fb0b2c0cf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "520c03d9-9387-4abe-9e9c-8f359695ae56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9034c2-fc54-43cb-a64e-2cd11ebadc99",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4170903-8d1e-488d-88aa-fac3046c7703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776cbfc8-ab03-436b-ba32-543d28f92352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3187801-55ce-42a5-a4aa-66e96ac39087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3298aba-2071-41b9-9327-4f24f288a6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facfdfdd-c0b0-4cbf-b267-3c8b079db102",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261115fc-3093-4ba1-8905-1226aca307d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b59d17-c90a-4b48-9c16-0eb000980d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e22ecc-6c81-4b24-9b92-d9e45260d4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1cefd1b1-94c9-40bf-a6a4-defd27497bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4f2efb-2870-415a-990d-a33d466edfd4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4271d07e-8f52-470d-a912-921d65f327d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0000483-2e42-4144-adf3-3e0318a47d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9208239-acc8-4a30-9bad-882e60ad8fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07774f6a-d807-4bbb-a789-b7126ce1a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a226cc4-2305-4925-a6f6-3d20531a0439",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559e34be-10c3-4bff-9554-442e6dbb1c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412802ce-fbbd-4a35-839d-7108b8002daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878b1b23-3b87-49cb-af8b-73129cf433cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c616344-56ff-4b83-b20d-7fc4a4c19cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be0542d-d9dc-4755-8938-dde1fd334e74",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50391350-0c4e-429e-b287-34d4f7813e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3218e2-59a6-4b50-850d-419b2e72fc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee42953-b0d1-4e23-82c2-d7578c90b426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "629655dc-7998-4f93-9c54-1e3b759b3a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47aa328-20b8-4fd5-ad13-98b0fc78b086",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a2b2f6-59c9-4b15-a434-db5a037b219e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f60766c-1bcf-4e54-adf3-66ae258a3f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf8be92-234b-46ae-9124-7c1127f27ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "719f80f1-a2ef-4d75-9453-7839ea740fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce547489-591f-4077-8631-be0d7a96a278",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a37661-57ca-4be5-9460-8c5ffc2819ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c905e6c-ee57-4c8f-80f2-d7832a36f6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad537b6a-6476-43ec-80a3-23aa945a1137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71b903fa-29cb-403e-ab43-6dc5abb593da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a612bd7-25e1-4fe6-938d-d99e9e464e23",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd9b48f-6c70-4ddc-9f7e-7a58c9879c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b280d00-3bc7-4084-bee1-bf9a639b96cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbd454f-b24b-4614-a46c-65176bb5b468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e2b29f-9190-4acd-beb4-17e57d0114f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee443ed-0e81-414f-b106-3fadb18cb686",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e13a7e-0ac1-4b87-ae32-3cbdf91177ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca23e97c-1e36-44df-8be7-90686ae989b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e330aeee-3400-474c-af11-07913d2c8b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55dadb67-a6a3-42a8-894b-1ea9ee68243b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ab008a-da8d-4515-a4da-5ecd4b64e4a6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be7de23-1fed-4575-8af7-f5db8b2862d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252f68b9-4394-4654-8d96-b05ad4b8b45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859909dc-2642-42cd-a8df-765f87688b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7069c9b0-d883-49a6-8506-c24beef98b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070e22f8-0439-4b0d-8eb0-73227be81709",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06104afe-2486-43ac-9b5b-6e37978ebf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56261b6-de58-432b-9f00-1a86b054f52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d98a3be-527d-472e-bf2d-c0ed0d0e56dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddca92b-dccf-4d32-8399-cddd9d518731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82ba2c1-0490-4225-a449-7e2e2b89b6e7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f71ac12-0355-48a2-8089-a25ea7229e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f882e934-077a-4b24-abc7-f2d934606fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90734c26-8204-457c-8874-291e6128a433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4370c7-e449-460e-a035-a6bf9f956ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c5b2e6-3add-4424-974a-e3d5b55626f0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d49192-c09a-4b5c-8dd4-0015a8ca518d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65897d24-b804-4205-b856-5861cc5949ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5229ba-3824-49e3-b332-9afcc7735044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4810dbb6-eb53-4b22-830f-60076e575fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32785f7a-4e74-497d-87d4-2745f84db93d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4106177b-9b31-4da8-a61e-04fb9969aedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb0ca06-b967-4bb7-98c7-295f897e37ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2f65ba-cd8b-4481-8e91-68296c2a8b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a0baf8-d53e-426c-9acf-da4c52a42d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c4ca8d-5b0f-4432-9bba-a8a7cd025696",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1de9b38-f0a7-4822-941a-76aa42acfd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ae1c7e-d633-43a3-a866-8835dd787b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e53cf29-e0e9-43cc-81a9-2368836d2758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "db912c95-8dcb-4d64-b771-6926f1ca3682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24e8281-8161-4f6d-91ec-0c85e7d7256b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e68e809-687b-4b2c-902d-809c60af0f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3033ddd6-02de-43c2-adeb-c7799a60a942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bfabe2-ce67-4460-a67f-065c7200f17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d4e318-ab4e-4778-b09a-bb3bf54a02ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68156217-4ffb-4022-a77c-9dd6952f0f3c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9ad4e3-c6b4-4269-a733-d4ec4a04a475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c65cb75-2b87-4a52-9d15-13cfe7264c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a679af-30cd-4662-88fa-259e51e63732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d8f8ac-652c-43f4-b3d7-98b5bee38917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5797d7e-b52f-4fb1-b0d6-fea8987e7d52",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2b6e71-523f-4643-b00f-d3c8f8e60e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97095441-fed7-4d6f-8250-6c899983f2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dff7e0-d3e3-4ac6-959b-29804f6d9022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "61252d65-49eb-43c9-a982-d4f3c92cef79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239fb210-efbb-453e-a0c8-0fda377f9311",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f3787f-5039-47c7-bacb-cb4a60a07876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f63b515-583c-49db-9894-e3ea40b69d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0874d48f-5291-4ef9-9e8e-0bdcb221a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "811d6982-73ed-439b-88f0-3575562c06dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6481344f-5df4-4328-9637-12565d994bca",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1edcaf-c3bd-4e70-aa8a-3f692d620456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "10aebed9-6314-400d-9da3-94e98c7bbfa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd17ef8-c174-495d-89aa-a26de06a8e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "73fc3ace-912e-45ca-9e47-5163aca41294"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4be51b58-6456-4468-a7cc-827a7a5d5452",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e760b631-fe3b-4570-93c8-5062991e6a1c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed64278-215c-4a00-b2c3-fe0e96f2060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a62b885-1dce-45d2-b423-b765ec95622c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38ee3cd-eabd-463c-9a69-0049f00b8195",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab97dba6-a42a-475a-8d16-88da9fe6a92f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1c51bb8-0d70-474a-9be9-7bcbc2f3c406",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9f53872-7347-411a-b9e0-e12a29b7c062"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d59195c-e053-426a-ba21-af26780b4be3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e68fda87-9d91-417a-a6d9-6ed53e85a4af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ba09cb3-bd93-4ea5-8720-9538fe4f1a3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e2ea959-fa3b-491c-9a2c-66ed4efd0474"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b6b5d482-c52f-45ee-90f8-13c194eaf9fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f35a9f3-6397-44aa-bff8-87fdd3839ca6"
                }
              }
            ]
          },
          {
            "id": "dd9552d2-7ec3-474a-af76-816040989e44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e3f7f6b-1eb5-4ab8-8deb-eb261798d090",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "35ac0495-c068-4586-a1fb-8fd84b6c83a6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddcff7a-23b7-4d48-a0df-720556437acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c3333422-c8f2-40ba-8073-992afb17e891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe4298e-4b2b-4172-88f1-3245cf3cdf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b6f714-005f-4534-9086-92eca2499c6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0fd57270-7ffa-4e7c-824c-f9b810783978",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e856ab1-8a34-4697-9b1d-5d8751584d38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e91c4f2-4899-462d-88fe-a2def9dc8d15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c693b614-0a91-4cb9-b792-37a95c071569",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e001b462-5a14-4c80-993b-d05bf2ba4ed4"
                    }
                  }
                ]
              },
              {
                "id": "34920caa-7c3a-4541-8609-e8e5ebded1ce",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce83315c-ffef-43c1-9c16-cdb576ea7039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24ca6e76-68c8-4674-beb7-e4a3fcc11515"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa8fa423-502a-40b3-b8c8-b40f62ad7f7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "567a7eae-8e22-4e93-85fa-a3fcb0fd3333"
                    }
                  }
                ]
              },
              {
                "id": "d3a753e9-36ec-422c-9b26-845114828754",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "691b8e78-6f43-4a57-9ed9-4c5590a06872",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df21e507-64d1-4d50-a433-c3bf7df2c175"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f59c42-3539-4de7-9f89-62d96af85717",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05b3e303-76a6-4843-9d7a-d444f7208e5f"
                    }
                  }
                ]
              },
              {
                "id": "2dc3e02e-e392-4dc9-ad61-ecd7326a4247",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "243af01b-2f23-4023-90e4-ac3b7e9f02f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee44c1d2-a515-4ca9-80cf-6d27344edc78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d30550ff-0f0c-41aa-a253-ab4f4e5accc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "94f9aa25-e689-4060-bc9f-d015a21b4e35"
                    }
                  }
                ]
              },
              {
                "id": "feb3d966-e5ed-4c1c-bad9-adf83ec5743f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e800248-632d-4375-a8f3-95701714710e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce6de690-e10c-4d13-ac03-0b316c55d3c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e301e8fb-3848-4883-a83a-6187f656323b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "45e88b9b-3371-49c5-987d-2ad1c8bf3c7e"
                    }
                  }
                ]
              },
              {
                "id": "405e8403-7ed0-464c-b26b-66fac8d7229f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85ea3b16-efea-47bc-b847-44bf4fc70bf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ba9118b-e186-4da7-b06b-1266fd8ed81b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6acee35d-5e85-452a-bc15-93bf18af1a3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ad04f7b-c930-4ebf-b125-ecf5c6d29f87"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9e8d63ef-9336-4721-bfd1-8e6757150a7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec76f8ab-9b6d-40a7-a7e2-8931c6d6832a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4325955-8d6b-4fdb-b550-252bdcaac0ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75c94150-1fcb-44f0-9e7d-f8c1d007d402"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a50f0a7f-fbce-4994-8dfc-2bff702aeb67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7aaa0beb-24a5-41d0-8400-77cb66fa3284"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ce86532-0100-43ab-a016-64c434e8a8e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a56f90c-5390-445e-8bfc-cf0ef33c74a7"
            }
          }
        ]
      },
      {
        "id": "1b0a2c1e-fc2b-4d02-8051-4ed9e4be5b77",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f1ae3613-2acb-411a-9ab1-964375a934a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fccc523-bca7-476c-9a61-77fe8b08a855",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68311756-3bb2-44ab-8fa9-ee6340cadb8f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ccce02-5265-47df-b206-f9f147b4357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7405ea9c-2053-4947-805a-12180f52a97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a62395d-a562-41a0-89ed-6253714dd375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "459cdb6c-e4fb-490f-8feb-27033a806066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6925aeb-4357-43f8-894f-60fbd147de2d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce320a5-3b81-4c71-b962-608ae555e794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8596b2d6-2609-42f0-ad02-a75235bc6133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a33f3f-1cc5-4c46-b969-6bd2649fceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf14079a-3a04-445d-96a8-8d0b2b490601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5512b8c5-fe1b-4a0c-b7ed-605ff8462f9d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478bb7c8-ca12-4f09-9154-05a7983f2d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63eafdf0-0653-4a8c-8518-9dd6001de37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96f11e3-10e3-48be-b1a3-fa9280be2cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31def960-f398-435a-9b5f-985c08e7c7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261358a9-37ec-4232-9b00-b3d8789a7546",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f2fe1b-acec-48c5-a4c3-23f2c216238c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f386f9-be28-4c5b-bd39-82f40c29f60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220b2779-5dc5-4ead-9164-9d7dae9bc957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00b950f-ffee-4dbc-b796-517ffb82b240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add073c0-4bdb-4936-86bb-3d6d5bafa6fc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680b8ced-28dd-4b3a-97ae-cc4da97a2cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf0c0df-68a5-46d0-b448-d8747ae633ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f87f9a-3482-4084-b125-ed59098255a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68af9bd1-0eb4-469b-a46c-532f598ad111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39ee15d-15aa-41e4-bc58-94d83d7d0ccd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee00ab4-4645-4906-8760-e590ac210820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baabd337-a981-4dd8-8a43-acb4ad8cd981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2fe335-0ef4-41e6-bd4b-c69d07fefdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c3d34f-5206-44ad-857f-3df40eff2c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952d79e1-f81b-48f1-a117-5ed62c3b9359",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262d81bd-9d6b-4e05-923a-0ca650cb8f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90455153-565c-488d-976e-affc9153cad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d09d92-0de9-4224-a19b-fe97f004ae14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a677a5-23f2-4775-82d3-c084634d9062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44621127-8a97-4e3d-9438-848e615858ed",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5783e1-df55-40ca-b4c1-8fb7ad9e34b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d483d553-b05f-4600-8985-21377d168e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ea349a-ad82-429f-9759-9f9442ee2490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a173e2c-5951-48bd-be93-7716c24580b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1278dbce-bd52-433d-8218-b68e938ceb87",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeb3a6f-032d-4c2b-aa15-6015ac80985e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a8d521-5a25-4f16-8fa1-bba50473d940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77356d2-e719-4fa6-aa1a-481023c704a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b70f5ab0-e96d-4711-82ed-76b9e99c9e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f920cc80-cd68-4b0d-9f3e-3e4338a5a862",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba23f5e9-b9e7-4d3b-9039-f3a337cafbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef7725f-8a21-4fdd-a914-379253bc850f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee148d8-562a-42e7-a37b-b508c6054841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fac71bb5-a056-42f5-80d0-3afcaaa4e3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e586244d-e43e-4dec-adf6-675856b4a78b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1697fa8f-c2f3-4bbc-9355-008b8bdd469a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec825a1-cbb5-4255-98f8-1c61f37195bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a4c9b0-d3e2-4351-be5b-efc4155ae5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f916cb-58c0-49f8-8d55-8bfbc1acace4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5133b7a3-0bd3-4ca7-8a8e-c02cf2bf01c8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab519b90-b652-4715-af73-48606cd784e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e047b69-8416-4911-8933-1be3c4f50994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc714117-2afe-4949-86b6-64bda28c8f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b95358b4-b9a3-4c5e-b28c-cae7ebac435e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21838f08-0192-4f5f-bd39-9163637f082c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3615f979-37e4-4636-a724-9540c59512ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53ca027-d5d4-4d89-88c9-183693961e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb987ce5-d8d6-457b-bb0c-33cd6213fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "610acf9a-5b4e-4046-b4ce-cf3cc2bafe89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccfaa38-6f2d-4a38-8c5f-5c00be916c98",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca62ed0-0b30-4f61-9620-e768373b987e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f7e43b-65c3-468f-b29c-5563bec4f8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf8ada2-26d2-4d6d-ba81-0c581783b495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b343211-860f-4f1f-8c2b-25567b405df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774143c0-0fc4-4bd0-ad07-226adb6cc344",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d2b705-9260-4c4b-83b6-3a690bdb0bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0eca88f-6351-44ff-9376-15eabc870e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81202dd-0a13-43a1-a244-2f67eb092d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14e67ff-23f8-4536-9515-f2ae9a87811a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a768a4f9-46b2-47bc-be87-f70c74e1db85",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8614913d-6996-4fc7-8bf2-4b187f3792a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59304df7-dc56-4d9f-af48-aa279d0f9461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13823336-49ec-438c-8c0c-d5cc1e624f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "79377024-be37-46a4-a2d4-3407cdb6ab0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693640e3-27df-4894-83db-26bc8c8331e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31a6c89-dfdc-418a-8dfd-cb23e8013c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d7bc83-afef-4fb5-bb10-bee5aff3f648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc40bbbc-10df-4eef-9175-08a27d13aa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "152cf6a1-eea0-4fc1-b1f5-c470bd2bf556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ad6268-4272-40a0-9f82-1454ed687f3e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b04751-5e7c-4f83-8d66-0f87ff233e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b559b0d-6639-46b8-9543-c2854d092f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e10d95a-f183-4880-868c-65e740afaf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70412dc8-8632-4d6b-9938-9063341bbd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4b840e-d7ed-4e52-8c15-9158c33a5c07",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de373e15-c0db-4c46-a1b6-a59879938117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d96e8c4-55e5-496d-8d55-0d14c308b87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c3401a-641d-4aea-b157-e689a824db3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeda772d-d509-4e72-a786-1f8174fa2a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364941a5-ade1-412f-8e7b-bae3f0378a7e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cba2bd-f476-443d-89b7-84dcfda1311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587ce625-ef12-4591-af6c-f602b9b05bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648dd123-deb9-4fa9-a38b-03c42a30d10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0515d342-ed87-4222-8182-e889012dbd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fac8856-442e-48de-a807-dccf3b30834f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4906fadf-247b-433a-9ee1-b563026a2817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ae2dae-4832-44e9-ac86-c936d7c2d228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c646aacb-d513-4fef-9084-a2d65781f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1129746e-b145-443a-a7ca-b1aea2116780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5022c58b-a801-448e-a5c8-70ba1604450b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ed0c67-eb2f-4ba6-9df0-d406cad19b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e042c0-a212-4f57-824f-86315255c166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d0074c-1595-4c71-b89a-cd40a3a36d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45217ccc-f86d-46fd-b71b-7f829515e536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d044c86-8a37-4100-8305-187fa3bb3eb6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ad3d25-80ef-46c3-abe7-fb92e5dbf5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72db23b8-0bdd-482e-8585-3630485ccff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2eef2c3-1843-4764-a31b-42dfcc2c0ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "667a7cd6-912d-4833-8e83-ea04dbe5246c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bcd57e-b52c-4a03-ad3b-23f431d09f7e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdacd263-7656-4755-aa3c-87e533a0e4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2500175-8c9f-4dce-9256-2095cf1b29f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f8fd01-5769-4be0-b49f-06bfc7293814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efafde4-2952-43a4-9ba0-c4b830aa4f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368365cd-2ad8-4002-b816-37b515cdd233",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a12ef6-0038-49d2-b377-acde602d8a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2191c367-d1f8-4423-9135-bc9e4cd4df18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4fce81-7484-4aeb-8a34-a7fbd01e71bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67744b74-e2bd-4c58-a6b9-0b73903a0ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424f0d64-a516-4725-803d-fe93a4319376",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a443f9-f1b8-4bad-a1ad-3103ad8eb8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f005f0f1-05bb-46e4-841c-fad3705bfbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a251c2ab-4730-4ba0-86df-0fcc980bc4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f94c110-0b42-424d-884c-fb67e94a631a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91546996-6e8b-47cf-8cc4-cb3662ecaa0e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8ee29f-db26-4671-acc2-d71017d6c836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e884284-b142-42cb-bfa5-0fbad15a5de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65038a95-fcf8-45ba-a897-a326eaba709f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f65a1a1d-d6a2-42e7-bad4-0ee5568a645a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57acc17d-21a3-4db3-9a28-4b2f873b7007",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269fa25f-812a-4304-9b15-85c9f247cbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b105d1-696b-4a24-996e-92afa5c89166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fb66ae-840a-42ec-b3fb-fbe21400ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7b82af-e248-4811-ab47-7e88fa853de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82c66d2-5cef-4a5d-8920-70fa6c332428",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcad6e51-ec44-4de1-99b2-ed0c049330c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d8adc3-93fe-426e-8a2d-05d65fc44db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3340be-bb41-4f76-a60b-4a397d9acbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71c62d7f-d4f6-4d45-9380-2e10ee62aa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48f6adf-eae4-4745-b21b-7d858157525c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd9d0f4-2dc2-47ad-83be-91efe60bdb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e4f189-f9d9-41ea-8ad6-9a5eed1b7781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a21976-53e0-4dfa-9978-62ae917537cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd0d8e3-5fa3-4ad9-bd13-1eb86afde92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e6614b-7e91-45d3-a6b9-2c043d9f96f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c72adb-6fcc-4c9e-91b2-055eb9210ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b37072-99ab-4c68-ac07-7c7864e682e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2db910-da9f-465f-b18e-9faa383d4a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb01f460-ac1f-438b-9366-1f52d0a1fc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab279e94-22a2-4ce6-9236-2fcf38080747",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a130b1-f25e-4f21-bffd-13606228e856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0d6337-2e25-4f17-ba61-91ba4234d634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57da611c-d873-4499-ae39-50dd7ee659e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b98d09e8-bcd3-48fa-b824-6e77bc89ed26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f612a10-12ca-4bed-92d1-00e5a841bc33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1a324a5-986f-478b-b76f-613a529f823c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bcd2e1-d6d9-48d2-b2cd-d3ef672320eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4a54223f-62e6-4cd3-b022-f547019a57e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b661c64-bb3b-4a3d-9dc8-dd3601ca0cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "496c0b84-061b-4228-b81b-fd17cb523582"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb15484b-7970-4766-9b35-a5ad034f52a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74c57184-8f28-4d32-bd5a-ccb50579a2a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc9a7059-78de-4053-b7e0-c6e39e76cc9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab1ca8b9-1998-4b2b-89e7-c278f9c7d55b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4a5fca6-f538-470c-b4fd-37586b419125",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9240943-48bb-4055-9617-1c1b3b4569b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52fec4fd-e0f5-42d2-9ae7-3540c22b9bf5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63e2f545-9193-4701-a842-405d35ed3da4"
            }
          }
        ]
      },
      {
        "id": "6e3429cd-9194-4882-90a5-deffa8c76d06",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9969a7d5-fa04-458d-9001-f65a69b45271",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c0596dd-bf7f-4fe0-b2f5-e7fac21e5ff6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4df7d3ae-a06d-4d48-a658-3fde931bd1d2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28190d5b-0ef4-4636-b304-eb8f33d49704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb45d6c-7570-447f-b65a-0022cf821ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a69050-fb2f-4ffb-ab45-d2d3c95545b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca1002b-caa2-4c75-86fa-a739a3831e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcf753d-6d3b-4d67-8997-c5f93d60af7d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb1be7e-d68d-46bc-b3a8-82aa0f7a23f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7725429-f195-4998-9530-d0985f35309f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ddbda5-9012-4322-8717-65a19051cfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c257a1-e384-4d47-a226-96740b643cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa49e9d-f9a3-4229-acb7-d8753202272e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2088901-f793-4ab0-9920-400b7897f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429accb1-ca44-441e-9478-2ea2b8ff1581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474064f1-ed9b-4d9a-a191-abff045f446f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "357f6bd6-8a8d-4d5f-a810-cb278b04105a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9414830e-d798-4aab-b886-ab8cc7544ee7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81bf627-de5d-48c4-98c0-e21b139322e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319c2321-ee84-4617-bf96-90375b717f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d830f03a-f96f-43df-a4c3-21b214e6f92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbf821f-7942-43ec-88be-e130dd696f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a825db6-d489-469c-9fd2-a8cbc6577f4c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4058c2-ce2a-44d4-9c0a-9616d132fe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c637bfe7-8523-465c-86fc-a0906c2e89bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78636308-0582-4056-9de1-ef012135da6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc45b86e-c1e7-41dc-ad84-a8ffa432b551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3541fa12-6cc5-4700-82f6-9a28057e3bda",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911b7f70-9b98-495c-b182-92b97655a271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1489b12a-16c5-42e5-b135-2dc935c54305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef0cc79-38d4-4903-80ce-6843727f6b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a40becad-e36d-45c5-bcf7-e439b725f0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b4e4ba-8dbd-4f89-80b1-2a5c64418129",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f5ac68-7471-45a6-b401-fb03036b45bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a0d242-095b-4d73-a68f-8e8b41589a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe78349-8eab-4a4c-9530-045ca5034d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4ad50e-1ac9-4628-b840-8cec916d124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaca8e9d-336f-4721-ae5e-a74beb53b4ae",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d372a8b0-0f3f-4cc3-91c6-4716f71b6ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cff5a0e-d996-4c3a-bb18-0cd25ffe13bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889df5fa-e459-45ae-a3af-3a9c38c452f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee239598-88d5-4b36-a6ca-9414301fa873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920f16d9-e52f-4390-b7e6-e801cc8bce8f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25259b5-7dcf-4287-be1e-7a028f14345a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07deefc-8c9f-411e-bcfc-f4ec5c86142d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530ed6fa-fa88-4a4d-860d-735c76a8e9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc32109-3e19-4087-9011-480c9e63cabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3534814c-6106-4e04-b79c-4e8f6677945e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8674df-0abc-45b8-83e0-7ad4ef4ad9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d3351f-a5c8-48c7-868f-cb17bd122011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464114ff-778a-49d2-b153-ca9e9698f374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0f8737-1b6f-4b59-b623-7126f9bcc8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41490510-f5a7-4264-ad35-f9646d203426",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8049998-b882-4b5b-b4ae-05f225100b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d579c3-49e6-463a-a90a-44939d9fc998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29e1818-d214-4887-800c-337c6f1dce00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "56fbb065-9e3b-4a3e-ba6b-046e30c0e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e00c349-abd8-431f-9f82-769c911149c1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368391e7-6214-4e02-a950-ceb9e97054c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85678add-2523-4ebc-adae-2ffc437ccfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c24cb88-c42a-4417-bb74-1941e6b7f8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09b57aec-fada-4cb0-8635-9a02936c23c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bd7733-6013-4646-a54f-4dc4e23aac71",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6797f81f-d233-403d-bc31-64290baed42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9ab38b-7467-4fe9-8d03-757a8bef475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17913cc5-67c4-4040-a0bf-ccf6dfb27f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6200befa-f76b-40e2-b238-65a835e95783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2e4297-c08a-4391-98f7-f90acda9d842",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01db95cb-7034-4ee2-bbbe-b59764e53ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d697933c-4a40-4d63-8252-d938ec48e3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f874ed64-15e6-4865-8091-08ee5490d16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0024811f-ad4b-4192-9b8d-bd1ce7c90802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e49168d-05d7-4d44-9748-e39e957dc968",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac289aeb-7cf1-4a37-847b-b339a2d6f76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f5ba93-8b2a-4b48-afd5-c6af6cb7b3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12e8cca-5b22-4684-8588-d27be458fabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d545dfb6-478d-408d-8b5f-d4455210aae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06701455-d941-4b33-adf7-f4f97d5dff2e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a67acf-de5e-4ef3-b938-eae54bdd426f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4745b21-808e-4388-8065-d36c68952578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c2d2e3-ae68-423e-a4a1-1722f47082a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88f4a67-d0d1-487f-a47d-1bdc7bc4492f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6c9555-edc5-40b3-be25-e134194b3b48",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9948ad-98d9-403d-8d1b-bee097f46945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e9fb69-768b-4112-9513-3b9e46b5e729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dd143d-e591-47ba-b52b-e5bd2bc3e1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "93ac4518-94b7-4ee4-9494-fb54de74a8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9055dd20-1b5c-46a3-8eb1-4797e369c8e0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c50752-7981-41da-bc2a-463fecb19e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd81508-3587-4eba-bde6-330121412a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91d62d3-a9d5-409d-89e5-1ef974a0c020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1fe05a-87c2-41db-bfc4-8ddcc7307e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6fa450-1e3c-4a16-8691-5350aafbc6e7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b2b866-5465-4365-b449-a46227508b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fa0668-9c9b-4ecb-b749-28d0a5446041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa22897-4f57-4b49-af15-1783228e28cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "803d5d3d-e5c5-4c9a-9192-863f4e8e5260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905ec96d-4daa-4543-80b2-518ee18a997f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fcbdf6-ccde-4971-914d-e743cd1f04d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712e1a5c-6b1a-4c73-a5dc-ada80d4dbcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c111d6ea-f1fc-47b6-967a-3d66a21f5880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de743175-8fcb-46b6-a5ba-ba74a958da9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae8dbe6-78c8-4ad2-a545-bdd86297abd2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75359db5-2247-4cde-9b87-941f435c3650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71464e4-8ec1-45a5-a771-13c888191e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf41decc-a9dc-4909-b6ce-aff89ea16a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60202fcf-1a82-41d0-896b-85016364ca42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2066546-bc5f-4319-adc2-80ded96c890d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24de13c9-ad95-4df5-aeee-6a56f1b36439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ee2d06-f884-4d2c-ade8-85c76fdaa6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73f4449-a593-4944-9811-79f892621584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cede4680-1094-43d6-983a-bac01903b16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8d37ad-6392-4954-8212-980cec588f66",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50d46d6-1acf-47c8-af50-744d9d1188dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0673852-9277-4605-af8f-b0107d677f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0134af-8b51-4ad2-b39d-4ffc72f57c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b85df5-f136-4f14-952d-c1486143c0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22b3f52-291a-4d6a-afc9-d842929a2fc5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731df246-9109-436e-b53d-2f12a71b9550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b87a285-fd19-4dbc-8fb2-68039ac876ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc3af2-adf0-4bb7-9bb9-d24bda96b0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a44f7093-a971-4f9b-94ef-50544cafebf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9594e1-9ca5-4cf4-80bb-3f0d86cb5da1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c9b6f5-797b-4067-8a98-6cebb79d4cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b738f866-0ac4-486d-8d9d-95699efe3bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f820d8d7-bd7a-44a1-92f7-6f6098b2ec9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca9bbb0-95e8-4417-9633-e7523f30c8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25986656-0011-4e8e-8625-22463dcf2130",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f84104-a04c-4099-a7f2-e7e53980c1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e350c675-22fc-4591-8f86-8cde396fff2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08206934-c1d2-4ddc-abc0-b5a62bb0bc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a2159e-d408-4063-b662-e970a8f92822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfed484-18b6-4545-ae3c-612b8046d2ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9959b7d3-eac0-4f04-a414-a928f94955c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8104602-81ef-4ea0-9407-409e06528f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6154ac-4b76-4d1d-a128-25ece7ff5410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e64ead-0808-4e80-a5e1-dd7b5f5c05ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c361501-e34e-4fe4-8ce8-e9a486d96233",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80a2650-8ae8-49fd-a90b-db2f9a9bce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83af578-9b46-411b-a291-ce9036bad344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173b19b3-eb5b-433f-a069-90ec6083443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfedfa40-c55a-48cf-b850-f4baf8d51142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae97095-b503-4656-b6b6-34f0975a2739",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30315b5-24db-408a-86c1-e57b7140a4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0333f0ff-00f1-4d93-b2b8-e6b52bb8888e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a99b6a-1ef6-40bf-916e-adf257e4622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4c7adf-ff28-4bc0-b40b-1a3b3e2ab5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fd47ea-810f-4a9f-bca5-5007db41909e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949f83fa-5d74-4abe-a2d8-3dd80555a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff436a69-2a5b-42e9-a11e-a676a2ef58b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38dac4e-0697-4822-bf38-ab32f83e3292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ad5d87-68bf-4394-8249-9e73301fe519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a44a20e-9231-4a87-8db9-3d99c08746c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d0eb9d-4dcc-4ed0-84a5-3f8a54ee5f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e745082-8bf2-4946-a646-3d4c474f639b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ea79cd-9a04-4e62-b1ba-8fbbf2f57b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0b485f-3a87-49e6-b09f-f95079904013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a43058-5dd2-46bb-b07b-4352459e088b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e7705-736d-4420-9c7a-943ce4f8cbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12143dd1-8bbe-465e-96f3-009306cbd9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa097be-7eaa-4067-9da2-9ad3bd50d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "678e5f89-932f-42c0-93e1-4b8dafa82eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fd2e8b-108f-4852-a6fe-6a9b30cfb2d2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f0c3ec-2262-4d6c-9ef1-ac38b1f4a05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd10fb06-bb75-43dc-b1e5-9f48fb195f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c47a17-26f8-4b50-9841-d600319a142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92386ca9-ed72-4c6d-872a-900f2b0b9ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f560c4-1632-48b2-903b-7de1b1fb18a6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d314804-d365-41a0-87a9-6598a3fd2613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bf1070-1672-4d94-a3b4-75f6fe1eadab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d993c050-7614-49aa-b76d-db068eef9442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82edb20d-3c04-4131-a5cd-959fd0f6a448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed649f1-3404-488c-9feb-504859309626",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24f603e-78a3-4ffc-8485-ff5d3d56e11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48053ee-a898-4bfa-bb73-2f0370c11d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d4d2d-70a7-443a-aca4-7f30e5ff57de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c12fe3c6-03c9-4003-aaac-f853d5c10ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba135cd0-3390-4328-add4-135618e82197",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd66573a-af66-4f00-aef1-63699472fcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0930d648-420c-422d-a396-9b11a81acfc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c6956e-1dda-47c3-9be6-d4a34af1e926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51da1560-3412-4fb3-8b4a-fdcf1597a443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44c8fd0-35fd-4f1d-8eee-3520fa32d4c3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631bcccf-13a7-409d-9021-92422a8bfc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48df43d-1f0a-4b65-8f85-662895bfc00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aef448c-5fe8-4971-bfec-93b2c25f9692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35400aaf-d8a8-4bf8-8975-c3f1edea65d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a07e6903-010a-4328-83b7-7dc2d7e4da2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a76e4e2e-3712-4832-abb6-1c5a545d2658",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6735955b-a40b-4c16-bf43-bf82f12272d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5294c58a-2fa9-4ab9-8622-b047e3ec0e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72ad8ad-4b5b-46d8-9283-6ae78fa1536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e463ced4-5544-4b72-a71b-0a717d945b02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2119f479-b0c3-4233-aca3-083dbc4468b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b7198b1-4971-4601-919f-903d3db2117d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d612d497-653f-44e3-87a6-64b662c720c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84b81941-b284-41d3-978f-4e51f3a584c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7211996-7d64-4a58-bdd4-60ff8d563f32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "92859396-244c-45ef-94c8-114bb85dbc25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa4faa15-00ab-486d-a8ef-b8db76e84f98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a155568c-2c71-4631-ae33-5d0b3b920111"
            }
          }
        ]
      },
      {
        "id": "e360d4e1-c528-48b8-ba81-f17208c3f583",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e43a47af-a064-4a76-a703-6d664dcc831c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39f3baac-e1f3-40d1-9c23-800f3e45eff3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57272dfb-f045-4c7a-9eb1-8122424e32ec",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c8eebb-9d20-4b69-870b-95a51af4bc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680b39a3-28e4-4f5b-91bc-24ff3597af87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ed7c6d-2780-4c0e-b1cf-1e41f8903a48",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ffa44-f98e-4b3a-9eba-015203403ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164650b9-ef12-40c2-b561-a1dc1969c25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f034ecaf-b33e-4710-bfde-90b5956febf6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ff5a1c-541d-488a-9f47-7397ff4d7fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62ffafc-12cc-4358-bac9-369f3c814d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f3387a-9a45-4671-a13b-4b559c005785",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde500b1-5734-4836-a4e6-447ff8879461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6635649-627e-48c0-9b84-160b1ea2accf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be2be4d-17bf-4a81-ae68-94f5af6ff449",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01574573-86b3-4c31-9af3-f6eb3660f7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd2d466-242d-43fa-94d3-125079e0896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e97b92-e5ab-446f-8054-d076a3e99909",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25f3d8b-d4ff-438e-ae6d-330901844523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92fe967-ffdc-4f9f-b519-2d8640321888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f053c51-5193-4618-81cf-eefd31179a10",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1802799d-ea2e-4642-a59a-5c821104c314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a8ca12-5352-4692-8756-f80704b57bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3fd8c6-cb73-46a8-bcf8-a02f6740e114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82cd7af-ca6b-4965-bfac-576b355f129f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1361e0e3-f34f-4fb8-b4aa-0d5fb512906b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3860907c-8e73-490c-af6d-63f559df848e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47395abb-daa1-4848-a995-7152afce1429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9b50cb-652a-42c4-bc4f-c610591a2f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd5b7d6-61f1-4a9c-afe0-c01e868be4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90f187b-3729-46fd-9cca-6db9a3a3d547",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c9a063-76b4-4aca-9b62-42cb8b593b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e391e924-4857-4e80-bf46-adab6689c8b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6822af-ac7e-4b1c-a3a8-1b77594eaaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f97fc7-cf7d-43e0-aeb0-d75795c720b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babfb81a-8c32-4260-a9f4-026038a9e6dc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba78ecc-0f47-4419-9a61-ee3bea7b07ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5eaae9-1a23-4ebc-baee-a8c33eaf9efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2024c3-4694-4048-9994-521bbab0f15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003b4ef8-7c7a-4515-8cbc-e3e15091409e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b422a5a9-33e1-4122-b2ef-5d8369b146ce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c241eff0-a129-4859-b420-2ef5656f480a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19fce3f-f7f0-4abd-9ada-920a89e39d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546df307-9e7a-4373-b8e7-ba40bc257b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fba935-cac5-42c1-9fda-20f0aae6377a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b8703d-be72-4e4e-9363-a941b10903f6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb4a827-c4ac-4b3d-94e8-80938ce63dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fc811e-355a-47ab-a078-b69c59a07e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b03a7b-0322-49c6-8126-4eb59a0edde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4e92db-f215-441c-84bc-4b367ac62b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64983b96-03d7-4c3d-9f17-39d6197245cd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39453ab-5db0-484c-bb96-c671bcf5113b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20873726-2bce-4c80-a703-70fbc79d337e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ec8b3f-9160-4ee2-87ac-f24539e72fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbb4e59-7035-4b28-8cda-e55172201a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83d68ea-9208-4077-9f76-192f661d409c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a3b78b-9591-4956-9fc3-950798fa0b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b4760b-e33c-4203-9ad6-4c3c33f91f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225cb105-9ac1-4acc-8706-c7b0d69a89d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5105052d-a256-4d06-be24-f0417c67e834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19304bf8-02e0-4004-828d-858dbeea114c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74384e8d-04f0-4f50-b9cc-2d25474a6bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20781dfd-18ae-4134-b5a1-fae322a9b49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f9fad2-8322-46cb-8d1f-ea0604d0946c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96245a86-da00-42a6-9e35-95a7ad26d473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563e74bf-a257-4dc0-a221-a2d163490685",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2022d6b2-f068-46b2-a4e9-3a423c795bb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7700f3-1961-4644-b9ff-848708fb1316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505d33db-3d3f-4a3c-9ea7-96a5c072c860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79af75df-a8d8-44fb-a1a2-928daf271d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25e4f5f-d11d-4957-83da-d8fce934603f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7843db-228b-44bb-b5c6-18e7804841b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700036a2-9cc5-4231-b71e-88d6c839ca6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d7ad15-2c90-44df-a23b-a6619a7eab42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ad84fb-f11f-44c2-8764-a6eb89be923e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a689e993-e7ad-41d4-b6c4-36767df6ea87",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a377260-9265-4e27-83b9-392ed5fa4357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2421d21d-3724-483c-8bd5-916d1a54b723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272d0067-0e3d-40ee-aa58-e9e21c1bdbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf3ae59-732e-4cec-8452-709ed7eb935b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b24e66-90ef-46e3-8dc8-5ba522a1d70b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9600ea-1af2-495b-bde8-66009dd0763e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e4a49f-688b-4f94-8327-9fc17022ec7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3760981-2eb1-4f5d-9fca-fdbe1598e003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9454c19b-c9c4-4b6a-8472-6866e0e40e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cda30d3-aa38-4153-a058-ae5cf504d3fb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c26889-21cc-4ef0-8b0b-d9b380c23545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293af776-6065-4a1e-a0c0-28e356467ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095f0446-2d6f-4a21-9270-6e170f7f0837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd08fee-b9be-4ebc-822b-a65b6d26b668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c7e7e2-92df-4422-95e9-94abc56690b3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f7438a-ab0d-4e02-911b-88b86a044f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6631cbe-5435-4563-9d09-644a67043dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9987ef97-e036-431d-a723-34c1a15e2eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbd8e35-3459-4bd4-afc6-48ca7aa773bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b82145a-f51e-42d4-a659-0b1b08a25362",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf885654-4a3b-4d25-b217-ee1b3da6bff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3262fc7b-674c-4778-8879-83dc973065c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529a7e1b-dd5a-464d-971f-fd38d9efb6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80aa076-e79d-4c96-9038-af0e8f47fc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a67251-9e12-455b-8006-a8be6d67cdfa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1069e43-f55a-4e6e-ad7a-aaa2226acded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab217d32-74ff-4fbf-9417-5bf2fe63f655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef62d9b9-ee7c-460a-a080-7598865cfe0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fb13f1-e0f3-4923-9132-24631d47a5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dd718a-83be-4af8-abec-8fb6f1b0ef6d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599c2588-7b02-4c97-8850-60fe10335904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee351d59-c003-45af-ad2c-9aee39db38e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec23e598-22a3-4132-8fdc-d72289976d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44342106-9fd5-4989-aa9a-5f6774b07125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f166228-e979-4a05-a8b1-66fa2c00ce4d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc6b16b-20ae-4379-a9e5-db6619377329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "980093d3-517e-4fa1-8176-c5c6f91c1664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21020bf8-c923-4a90-9c4e-70e0fde26759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c83115d-9a9a-42cb-ba2e-f737c57b7e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f80b73-acc7-4e92-99c5-606f286a3716",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3dddcb-7e4c-45ac-a5f2-568e4914942a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63edcb65-5dd0-434d-92ea-d3da5fd0e9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217bdf53-0884-4895-a819-ca35c3ed7369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ffa71f-cd22-46d6-9693-bdc47b5d2f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca652aeb-6856-469e-9902-b59a5e7401fc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0176598c-60fd-4e02-b4ae-ce38fe72c1f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da6815c-27bc-4f35-a656-ff1ac18f5d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238b5225-0de9-46ba-97cf-0a3cbd5f040e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3277775a-4fc0-4295-babe-d43102c0e11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd75c31-fc38-43c1-8542-de125e7d3a36",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1aff28-fe10-4c0a-81f2-2248d4064ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512e381a-d0c0-4233-a2f0-a6c612f69dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea59c952-c3fc-490d-a7c1-92531765cfe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d470db-3948-481c-8ef3-e8c2d27c82fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37415aa-46c7-497a-8165-a1d5d027e2d4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896f274e-f338-4ed1-a9ca-b454b558ffb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f878f9e8-ef58-4198-af48-c19c0b005afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176d7e3a-2e7c-48a2-a9bb-0f705cd873ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ce766d-b2e5-497c-8335-26809acc5c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebad38de-9e57-49ad-b29d-7b6bfb5b6948",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60331146-beaf-49d5-b32d-2f490bcd53e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5728d96c-084a-45bd-ab33-ed1090cc93ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a714f27f-109d-40d0-b192-9e4ca99b0b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1583770b-c6d0-4f8d-aa12-6774642d23d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6ee8ed-fe83-4cfd-8807-58a20ea44dab",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daa4b89-fb53-4cec-b315-fa9c2e6b3295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "824f2d7f-250c-41e6-81d2-e7fef7c33b05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8daac3-5a62-44d0-a586-8ef402230515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acaef82-5620-4a42-8a8c-f12669458304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6944f9b-5f50-40e1-8804-cd6f85caa237",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2009848-be54-4028-8d91-6a9bc4be783a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e8cfda-1f60-447a-a3e2-da25eb98cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c19b14-8601-4592-86a5-ff4b0fd031f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b067da-ed7e-4c89-9350-575cc086690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cba09e4-48f9-476a-9f0d-40d1e05337b1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afc7aa5-a74d-4928-9b5e-99648937c71a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34444c95-c4d2-4c95-94ea-a09855c5b064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24316e82-f494-461a-b828-ac7ec0aa2c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3b6d77-e001-41e8-a168-1479afaf102e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734e3604-c328-4d53-929c-d828068ec3aa",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a476af-7c19-49b6-a7e3-f953a788dfa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc19047-acc3-45b0-a9a1-bb67d6019796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f9d128-651b-4e6a-bcd9-99ca0b91aee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d24f61a-e887-4980-ad3e-7e313a80520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013b9946-bbfc-49f0-8484-b84cf3e365d6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303db294-32c4-4488-8869-61b96850b19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdda3a9-7ede-4e64-9ae4-0805d3f6871d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a7c2a0-fffd-4aea-8d4d-ec2f684d03bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a57f8f-9f06-4076-a95e-f05996baf541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358bf2cf-28ad-4f48-8eb5-649c7d7bc7b9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bc761b-328e-48c6-86ce-48c23669edc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0788098-df37-46d2-b886-567dd78e3ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913fa814-722f-43e7-b9ca-8ad8823ca9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03f6e8d-ca46-4da2-ab23-ef812f25ce19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e9cdee-613d-4f22-8e2c-74d67d50b1fa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcef1283-b116-4117-a496-d3e2f4cdfd5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996f82f8-ae94-45a5-b948-3d162fa15a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2f3fd0-008b-4c67-9ea8-2e28f1981de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7427c8-1bc2-464e-bcec-5f2cb715a636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e20e85-c86f-446c-9412-94bcf6ff6e38",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c2c8af-1801-4a68-9644-be10059be867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a162e418-e07e-4f9f-95d0-8e37743adfbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d169573-8757-45e0-a43e-9ea4657f11a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51660ac3-4dde-4761-ada7-2366002b02f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62af0708-517b-4af6-b13c-df11d80b13bc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56291e9-abeb-4d0b-b34b-93f97ad1be66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5446ff9d-215b-4f3e-9ff7-8c1e302e4e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72df1bb9-7d8d-4fce-9e7a-4d61284d19cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f243db8-ddf5-429f-ae5e-41c97810306e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb8f62f-4586-4a49-978d-0fed9eaccc0c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f77a54-2c01-4be3-81b2-03a38ee5d223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aaae742-8aee-4109-95eb-94f84fcbe89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4209fb9f-b541-43b0-b917-82d5386566df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b11fe14-414f-40b8-b040-6ca474a48782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee09a61-b066-4fff-8af5-6ca5799e562b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7097bef7-59dc-4f5c-8c60-31b1d08ee890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b622ba7-385d-4b59-80e4-eeb9fca18364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041e7e3e-57fd-4d92-bcc6-06d8d6c11fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559ae99a-7d4c-470f-a206-9a41f306fc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872d5ce2-0977-4c9a-92f3-0215dcc4a3e6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5e615f-536e-4d11-908f-2d39a5a9df38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1f89f6-d231-480a-a602-0c73c0cc6d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dc2492-1778-402f-a764-b9f7b933db54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4888a3d-bd1b-454d-8b3c-2c6898e87f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5508ac-52ca-4f0d-aaca-8b8fac1ed25f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ffa08f-6776-44b1-be15-f15ff0a4ad13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d8517e-197f-4f71-a300-79a9f2601a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724969a4-c34f-4991-9245-561498e4b811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5b42b9-b160-4a29-a9db-b61d8bc8f706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e83b8a-e984-406c-8f9d-089ea22a8fb2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2190fc4-3de7-49fe-99aa-48caa120136d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116e5316-6c43-42aa-85fc-680a466c41b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2204967-cba6-46a8-96d8-db9fbb50b109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52160b4-7474-495e-8fa8-943354eec58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0cf18a-b4aa-4f77-8269-92bd662f67c1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121e6dc9-b294-4a5c-a4a1-5280cce1a181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ede747-63c0-4472-8f0e-277ad16291bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed61336e-7c50-4b00-8c4b-eb55ce84e461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bab27d-c457-4e07-bbfb-76124a566edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae53d583-e8de-495c-a310-0dcd36f04cd1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57575349-caab-4fb9-b5c6-3b4622721bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0d2e20-344d-46b5-92a3-dd83cf1accda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a682b8-be0a-4ce9-ba9b-a4684afa9c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4f8e4f-e6e0-410f-af6a-bd409f047365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c064450-bec7-460b-b65f-c772f14d500a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830a142d-2bbc-4274-b3e6-eb23a4f71abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93581faa-5756-4818-834a-907ef0acd65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a20e50a-4387-463d-8646-e57b2f7c4d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689f61a8-bba4-43f2-97ef-c456c15f6c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a396515-1ac1-4524-840d-6633d4131f91",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c36c5d-8000-4cde-88fc-bb4c92caf232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c93a829-b2f6-48f5-8fec-ae70fb67a3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b2f94c-9517-42c4-a761-dd8ad065e039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87189e8-01f9-4cd9-b81c-2c65d82c5a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d940ee-8078-4c12-b200-c6bc2a75270e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53475f16-6f0a-4645-8e35-38040b001485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8f5f3f-26ef-4ee7-95d5-3ed1c14221c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f7c1eb-36dd-4397-af84-97acbc90fdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231cdb8b-68ab-470d-b1a6-70a68ad4d08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65fe76c-0d53-42d0-9e3c-b9300fd165f4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c30641-f99c-4a4e-a5b2-2d9d03038f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69ac7fe-ba6a-4ff5-98c9-ab39f53364ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c57eab-a2fa-4776-a269-1d6fb9ac2da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19c8e3e-6879-40e0-8495-3bc747c9379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afb78d5-a7d0-4af9-a5d5-7d10d11ab122",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b56389-e508-42cc-861f-999843f8817b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4c3c2a-4b16-4574-8d07-e1d482c23279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9475ea6e-87f3-4a6f-abcd-19aaea75c9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a07e1a-72b7-491c-aa32-7bf7013d768c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ea09c-ee73-4750-8f87-4c4000bbf6cf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84283027-62f9-4e92-8f2c-e6e511486af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2b371d-f601-42f6-8244-83367af9046f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a887c81-1858-4f72-9d4e-9e18ba93fbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347835a2-7987-4f67-a1d9-edcbb3f68947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c850dac-3b4e-41f8-b73a-76d30b401f93",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc85290-adfe-477e-bd46-c244ec9548d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7d8bca-fda3-4771-95a7-974394638ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f7e0e3-52ab-429c-b0d2-a11daffc1ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b9a46d-69ab-42cf-83de-d4a0199fa1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26df00a0-4ab3-4379-b640-1095f51a254d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c882f97-b7e1-4924-b91f-3d1d167c79ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc317b4-7084-45eb-9068-07a4892984ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7a967c-03db-460d-b30b-918c69fe3ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b43cb62-e388-46ff-b536-92a6d983f06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89506106-1a15-4341-ac1c-a921a9fa1fed",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33eae52c-0ba6-458c-b1bd-65a01ed72282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d794839-f716-4449-8606-b45915beb26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cd392e-5730-4924-a7f3-e385fc8cdb0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d272c0f-194f-436e-bf02-ec348127bb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594cfd0c-0d96-47d6-8760-064d0cd252a5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2764fc78-b06a-4945-910a-130fa0ff95bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504bc594-0c09-401d-b9e1-e3a57a3121b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09563da2-92c7-456c-93cb-259ff3b6bb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5b6410-16ff-47ea-819e-24693fc8e19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09865bf4-b6ff-492a-9a30-28df23ac0796",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0b082c-6b34-496c-9e5d-d08db1e931d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3166017-57ab-44e1-8053-58de6f11585b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f87f8c6-b910-4258-88fd-e06acf955183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5d77f5-ee66-4595-95cf-d48308904d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b4a85b-5385-42c6-932b-9f13467ad52f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0439dc6-44a0-431f-b29b-911e92c6303d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2703c44-6a44-4b69-850c-0ca5fd97e999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b8b9e1-5b3d-4eaa-ade2-b7075af487f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f040f15-95c0-4752-9fff-a54ce7cdaae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb58146-1414-4502-bff4-666225cc2a21",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f78f9e-e200-432a-ae14-1681e137185d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8268d3-bb37-42e6-bb89-88896acb0083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d6fad5-d4b2-4d4f-954f-609c1be2d9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23e9db4-8f31-46a7-bbac-8fc40085b026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed69374-9571-481b-b8ea-1a0b04e077b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62f89ea-9ce2-44c9-b7d8-36d266f9305e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bfe96b-65f8-4da4-b90e-840c85a0e476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d081b090-8668-4c09-9295-6364396f608a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2573dcfd-a0ee-4aa7-b7d6-8add541be994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34292bab-8d41-4bb5-80dc-b3ec3d0ddc27",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7fdac5-4861-4e60-9202-878d5ec431ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0f06b3-8b40-442c-9828-628e1dcd1896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29435eb-58cb-40b5-b0ba-649a1faccd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82b9c1b-bc11-4e1e-94cb-aa79ef79d2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82bec7c-7218-4919-9944-d24398c71440",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcd9ae8-1fe2-4736-a8d0-fe04023734b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38de1c77-3706-4b1c-91c6-fa0f4246a2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33a6b58-4899-410d-b4ba-b97287415b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ba6918-fad7-44cd-b774-24c932ec0e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05062619-c72f-47c3-9f6b-2d0a578c0715",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336f1ec1-43e7-4fb1-9a3a-2e8f50f2c244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ced76eb-aa1f-430c-b97c-eb39b6b17fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546ca714-e355-4782-bcd0-98dfad9542d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5e7d67-4d93-4a47-a36b-682d775b24a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c346c2-3aaf-4f32-a632-ec52fc2edf53",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98432eb9-4456-4a34-88f2-1934bb3de02f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e4f54e-0b22-4de4-a881-bb7359d2ac95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f7919-3ad7-48a7-8f78-690479cd5fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2eed81-23de-4948-b46d-304568481e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4034ccff-105e-4ea0-ae14-c5f9064ba8c2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab12138-f12c-4691-8b6d-c7c7a6c0c85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e541a7-585a-40cb-84f5-aa5325c835f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e322c9-6361-4f49-bcec-bf4ed91dd564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09adf88e-94e8-469e-aeaf-538f7968e612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cbb795-d7fd-499e-ab0f-f66c546bef7a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5c8770-0916-4d5c-b50c-c4f5e21bb1e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "658cdd0a-d250-496f-88ed-8de9e1995b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a11c21-feeb-4cd0-81c1-9ca0943a29d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bbbe7b-e465-4596-94e4-d914e61d9e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aa6b58-896e-4d0e-904d-389bc2454ad4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f889d75-3985-4ec5-8caa-f2ecdaaf6a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22905f63-6cdf-420e-bfc4-5212bd7acd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e8d74b-780a-4d40-8b17-495823942d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b4a2cd-38fd-4dcf-9837-be8c44e448c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae517701-df9c-49a1-bee7-ea79304a0c88",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fbf8ab-af8a-43d4-a858-9b2b83f7860e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b705e0a-421a-410a-b3e6-69ff62cc0e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f670cc5-1421-44f3-b13e-f07fef25a7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660786f3-2cf8-472c-a5e3-22eecdc65c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d06f72-9aee-436d-ba24-045fb20c0a57",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc856a4-b721-497c-920a-39ea45dcf3e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f226880a-1ac5-45a5-a2bf-f1e239f033e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75b736f-8753-46ef-9fd4-3d8037360751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db8f4c6-071c-4173-b8f0-0d1dce6b7337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6758b16-a3a6-4792-8359-75151a1e1d4b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6824df34-63b2-419c-82f3-2f7efc5dace0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60071a1b-83a3-4f38-b1de-01146e1f9c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec95596-5872-454f-93d4-b951461f5e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291836d1-9b1e-4696-9dcf-366cf672c74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4e6be1-3cbe-4418-a97f-7a891d0ef347",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5766b5a9-4f64-43c5-853b-7e8995ecb90c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75234c21-48e3-4c1a-a3cf-aa167132c50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05915440-7ec5-45d7-9f54-8b942f34abeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9235512d-c70c-4817-adaa-51c03e2d93ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6805de-b2d3-4c21-b512-c9190b49810c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c554711-5d03-4ea7-9e7e-bae8be212cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f812479-0150-46cb-8d68-404562342439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89052d25-2b6d-41f7-b73a-6f4477cb4c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acac2242-d639-4781-8de9-19d41ab31f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1bdbae-eb84-4cbe-8226-85783d537b22",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a25d7f-61d7-42df-ba2d-676b3f196f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7018831-39eb-40eb-b26d-cb59cc27cdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954780cb-2829-488f-a97f-819399310b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978fd1f9-8a2a-42cb-a0fd-396140964484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42447ddb-0e5c-4440-a6ce-1f9809b86a4f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56137a3-5c96-423d-b855-1f9de91aa4f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f70b47-2734-45cb-a8b7-9b80a440f6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252984c1-307e-407d-9387-839ab8fe3ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1db8d3d-ffbf-4996-8038-682a8167e697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c0736e-1b57-4ebe-b476-b8dd67a528f0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38476c0-9161-4177-a2e8-a61f79ad7918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d83ac270-f871-4617-a595-8b38ef217bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01d9273-4d61-4af3-9302-3c70575cee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26f7a57-9760-4ae3-bc0f-e1f0539d176d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19099700-1f8f-4c29-9a22-357bd9db4ca5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3fb053-e26a-45ae-b3d9-67d9f3292408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c38b5b04-884a-49d0-88a2-14041e9e76ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b017bd-1e54-494a-a6eb-c2d0d0f46c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fb4eca-20f8-4d50-bd96-9f7e2cc26240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e020c8e-53cd-42fe-a90f-d1e652ccdda4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dab2252-2f8f-4706-9d92-4296d68400cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f26d3bd-2a3b-48e5-9eba-d339cdbe88cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c81f26-43a7-4066-a861-d596aab85ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a11c97-2b8b-428f-89f2-5fe0abff251f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7819afad-a6a5-40a6-b13b-2926c0f418bd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e478b76-d174-4d2a-96c9-793c51154701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04aac643-c4f7-4d57-86bc-95d6fc14239f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce87515e-8f2c-4fdb-87de-fe8a7157df17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76463770-d0ee-42c1-9826-273aff391e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc79186-c774-46fe-b331-93f5cc94d0da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1f4c79-28e6-459f-8adc-32621a140965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a4298f-ccc1-4857-a4a2-0b7d119a6dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe70a258-8890-4392-9fe8-354af4577045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffae8d0-ab4c-400c-aba6-72a175a39f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c9dffc-10ac-4846-a1ee-879fa7c984c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ca1e2f-cfe6-4994-ba4c-cf7fa555c55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3d5c69-4e1c-429b-907b-06cc9415cc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f22d43-5637-45fd-84c6-16e9456f9980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3924c7e-4576-46cd-87a8-de6d6ed4014f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532d3f26-73ee-4586-93e3-abdf6dd1864f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3582f097-2ef4-4dae-bc40-ed9c77b9d865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "325d546d-f888-430d-8c8b-f077aa8ba91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f4d43e-96ab-4290-846b-2e6773f67784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d3a00b-a9a5-4c84-b11f-3c75b964546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2988824d-a86e-41cc-8c06-1ba12201cab5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8ab12c-75c6-4f91-bb96-93fe8be1f370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcfe389f-5861-4786-9a56-6133a97fe354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fba0b9-402a-4a5c-9567-f05d0bbced8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe26f6c-e579-4ef2-8097-3ea36f50d710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4b5e4e-1fa1-44e2-8ad6-8d5d69fb043a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c44b79-d25c-4ca2-9966-9bfc9cc41e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1803b05-5861-4e1c-96e2-51eec17652ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23b581e-d913-4da5-b76a-0448ad5e3414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f14c2c0-96f7-4ecb-9d95-cac4494321a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30dcff3-2099-4212-8fd2-b720361a8d34",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1236bd-4837-4956-a094-d04a16ddbf1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e11422-4c9a-4a46-9e15-2745e106e2d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4e0897-7048-46bf-a0c1-269178cb1dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51daeb54-6736-400d-9c8a-a035a2c658f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65984b6a-726a-4708-ab48-cca4e730ab36",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e83d231-fa85-45df-8b47-63a44de1fd0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e09825b-29ea-41f1-a7a7-0dcf8393e760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3a5d6e-1e33-4e27-a0f3-0fb729484fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e038ce71-b696-4e78-90b5-939131fccc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfa7b89-1cde-41e9-8db2-4177460a66f8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc653c2-479d-4bfa-bb67-4ed37b8e4327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb067be-cea2-47e7-9de3-078f9b42f2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a91e24-54ed-4ae8-a31e-c4a271fc7181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e321339-330c-4734-9139-212b55c1bc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c3f477-02bf-4d71-b66d-1a998a8f40b2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf12f7c-4d39-41ae-aea4-485381fe0508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb3b1b6-e5f5-4af3-afb8-f6db3a48737e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a561d2a2-dbd7-4b4f-b084-7af5889d3cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acbe78e-6b5f-468d-afe4-262661600454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60754448-c537-4c47-8345-2fbb73f3a667",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc125362-9aa1-43e3-a044-7a6a796a5efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6042c10c-099b-4d2c-bc32-e50978243f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb1e8e4-e19c-4f9d-89a5-45a26e464b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b647745-ce69-4f9d-8647-6b5488c7eb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d8e308-b76d-4559-aaba-b93644dea1e5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b34d23-0458-4fb5-ac16-5d668b047ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46482783-60f4-494c-b123-efe57183821c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a6364f-9b55-45af-a5c1-e5011741f4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f777f39a-ef7d-4103-8056-733bebb53332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70892e36-3e83-4952-a243-8e96ea750274",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687367cd-be20-4b9f-be01-1fb694fbd21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4634bdba-9ce3-4e6d-943f-e3cafabcdd43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5064202-f4cb-4449-b876-de292442f3a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b93b927-e48b-46e2-bb5b-2389968285ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909b9c98-fa44-4352-acc3-84ab4de87efa",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241ced82-2a58-4294-ae9b-7df412446cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ae7818-078e-4212-a5ad-c27f06bacbe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850c1798-bd75-4a74-be16-419e0f01dd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c165136f-825b-4adc-b7f9-2c1bdf877ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62020e4-1afe-40d1-baeb-0ab90cc8311a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a1d5c7-3722-45fc-9b35-4614cb7f359e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10a2835a-1c60-41cd-979e-707c42af985f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd523c8-43d5-4cbd-8122-3a2b077de9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f3c399-56f5-4a80-8fe4-fe2d83fc48c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393e4603-7681-4f7c-891b-7048e3a1bea3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d8dcb6-9ee1-4681-b40c-e0dae48540e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799599b7-6783-4545-bacb-f9de7d3eda2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234836ad-42d9-4dcb-9737-4a5b23aedfa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67123c5-d993-4bf9-a7d6-b09227a33491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bace68fa-2208-4a18-9f6f-8de1a91c3093",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7137f73f-77c1-4eb6-aa0b-a3511185f6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3ed168-e057-4344-b843-467a0575db7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bedf2f-f2f2-4567-9918-cedc363a294a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fedf2c-32b7-49f2-83c4-b271902ab4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320fcb87-3145-4b45-9049-32d7d28d2b75",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee1edae-f0d9-4dd2-bc5f-71c8074b0e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf7f60d-46eb-487e-a699-8b73046febee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d717044-c3ee-4002-8b4b-8dddc5dd7fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114f745d-f72b-4dff-b472-aa3dbd6ebd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b66c40-73c8-4c2e-b562-7185693ee091",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626ba291-2225-4060-8b0b-6542b93e6820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "939b6199-4471-499b-bf6d-da14e7e51e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6543a07b-c297-4d1c-a405-d34bbb78bfc8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbfddc3-ebc4-49de-9ce2-b119bd610181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2429acf7-ce48-444c-885a-83d50ad976e5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c50ad7-63ce-4c99-8341-64bd5d2ec4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b18fe5-cf46-44b3-8521-dc7f4cceb5d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caceb4b-90f0-48dd-b20f-125340921c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a307444-bc86-4c11-b533-b71e61029b24"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d25d0fd3-33c2-4a41-bf98-e9619fb11d0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8fe8a34-e152-40c4-be73-3a0170fcdf21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbf461f0-743a-4c2b-98c1-0a0f57573053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9533c33-bbf5-44cf-899c-b126b2886e09"
                    }
                  }
                ]
              },
              {
                "id": "1d7b8967-0107-4a87-b631-d8b78ddaa825",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9343ca15-262e-4ec2-ad9a-c402ec163899",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43f389e-4472-4a31-b0ff-311cf1bfdddf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ff02bf46-15a7-42eb-97d5-14906a9b0e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51740fff-ed17-4e3d-83d7-a7d1ab377b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d0d5d6f-414c-4dc4-9c8d-af915045e22f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffb3b35f-7827-49ec-9fa3-f0f6b4ede70b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "123b9032-abe5-418c-aaa5-5882af676aef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1abb568e-3ff1-48aa-b36f-7e2634711a0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1958357f-16b8-4421-a635-fda225c69340"
                    }
                  }
                ]
              },
              {
                "id": "fa86f961-1647-4c29-b43b-11666c9ec3bd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "66d5edc7-740d-468c-a934-fe9bfbddc7f6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632fae5c-0393-4d26-ab71-5b45dc7c668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "22d7c614-55b7-401c-be53-22647be5e246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60121ee-dc76-407d-89b0-de7c19299973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ffe3f2-a384-4b0c-bf1e-491bd30adfe2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f491a17-e1bf-4bbb-aa0c-fa714597218a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b06c6ce6-1e49-4c4f-afd7-5a92ee9f6e3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c2b115b-4b7d-48de-bc17-f59208bf089d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2b73e04a-0583-4198-9218-22eb24f0fb3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35ddc885-dcbb-430c-b59c-7250937d19d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9115e48-e5af-432a-9a89-2139cb373893"
                    }
                  }
                ]
              },
              {
                "id": "752823ed-d362-4660-84ec-dd7837faddb1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7a9f7cb-59ad-405c-aa33-f62b96888be2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b0b54d73-3a92-429f-9c72-dea1f2772038"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2382a04-9ab8-4901-a084-bd9488781732",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2665d06-1841-432b-9ccf-316afe9fd058"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "930a40f1-9237-4aad-8ec4-74bb18b894a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fd06aa2e-4533-477b-aac8-bbc712430a0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9e7a1f9-85db-4a85-9dcf-93e23c453c4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6214792f-5cf1-411a-9a72-3c357b996542"
            }
          }
        ]
      },
      {
        "id": "50f1776e-dd6d-4036-a6b0-e59bab9d411c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "09012cc2-81c2-4888-974c-be2b201c4a74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1284961-83a6-48ac-a6bc-a3449b59a05b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d426638-3ea7-4ee7-9dee-b05e31c2d1de",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d60aa3-af06-4d3a-963c-43fae24e49f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f29b9e4-2ae8-4cc2-8418-fd5811e31dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee93fa2-b60b-453e-b6d9-0af9a6f0be0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c6de3e6-55be-47b4-a6a2-48941bec9b91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "922df3b6-3e65-4972-869c-0456518bf598",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ca97896-296f-4f58-8686-b79f52a6e250"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab78dc3e-7d5a-4297-a3fc-5d7df388525b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba26b7dc-75c7-4419-a590-224e382b2f03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bdb0eeb-315b-49d8-954a-55ea704e8aa0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e80e4e4d-c2b2-41b0-b2ad-d5322f52a0f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f6b9d3c-b54c-4b70-aec6-8ef023ba72c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "519eb663-01de-4fab-981c-62e6dfcdccc4"
            }
          }
        ]
      },
      {
        "id": "5527fb93-552e-43f3-8a82-d37ac6258145",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c4591f3e-12a9-449d-bce1-c945a3edf31e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "447e64d6-7ad1-4b8d-a80d-9acbc66ce526",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7792b839-0a5b-4696-92b4-4e7f64d4a45d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294a3335-7f66-4cb1-a634-f29caac123d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b402a43b-36f9-428d-a7cc-a91e4257c72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db66c489-0709-4c4c-90dd-f23440dd6282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "568d1c44-b99d-47c3-bbd0-7c19089805f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "640d8f98-a943-490d-b0f7-cc613c6065dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e0aa1f2-a117-460a-9f11-17b89bb6c8d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ab2c0e0-2f4e-43c2-95d6-893f6cc113f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7342a7c9-953f-4276-900d-0dbef17a93e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "056162a1-3a55-4a8c-b654-f770d0ef75ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f38c7b44-d40b-4c21-a712-74db763b431a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0626be-0c5c-428f-ab14-f6fe131d849f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52907910-2d16-4fcb-afb7-af678bd5acf0"
            }
          }
        ]
      },
      {
        "id": "a3e843d5-7650-4521-8d87-d20cb9d89ae7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "22b61653-74bf-40e6-8f46-0cf426e66977",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b41e57e0-a3bb-4323-8e36-f4e0d5b2b595",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "396d4abb-6225-4c03-af57-d22f6a056855",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad78a8da-5c0b-4b3f-96fa-e023ce2cc4ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7d9843e-9bbb-4e5e-a9ce-a8427c246d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c19ed6-b421-4031-937f-75abaacf8c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8a6f03e-d022-4b7c-8361-88aef4b5d60b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dfa8140-fa6c-4f39-b06e-09efba23e6c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "154d6c21-4694-4988-8e2a-3e41581c6156"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68ed0a2d-2f61-4a2d-9dfe-8b3699c3cd2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fa01447-9d99-4690-b9af-a9444ed7b2c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9be4375e-f81f-4d20-b03a-42933d672159",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "16ecbf4b-bce7-4e70-94b0-6829e2cc3824"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a267d350-eafd-481c-99dd-1c56f879531a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7feb940-f54e-4589-8134-c0d162765eea"
            }
          }
        ]
      },
      {
        "id": "e189543b-1c2c-48e6-b69a-d0e14fd6635a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91ae69c8-6447-4b43-a6b8-e1a1dcec8aa4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba0ab825-4369-4045-a74c-3f6690497fc7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "68a84200-7e73-4ead-a49d-9b3a278a8096",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e98d852e-15ce-4a7a-a09d-46a519642967",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6aed8a2-f072-424d-b280-3cf4bf9fdd05",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 127.76140350877208,
      "responseMin": 7,
      "responseMax": 779,
      "responseSd": 94.71800761445112,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698971639354,
      "completed": 1698971690005
    },
    "executions": [
      {
        "id": "f7543b29-25fe-40b4-b5e2-4925ebc9ec51",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "37523ad6-f3e0-4640-a52b-38ca9fb8c376",
          "httpRequestId": "d9012bcf-8081-46dc-b595-f24b2b32fd79"
        },
        "item": {
          "id": "f7543b29-25fe-40b4-b5e2-4925ebc9ec51",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "879cf1ee-da59-47d4-9039-632f7fa121cd",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "1c6ac093-9774-4e20-a4b2-f892bf982f44",
        "cursor": {
          "ref": "4a1f71ae-54ac-40e2-a0d7-2b9a6bcf42f0",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6c3fc1e2-9f07-44db-a1b0-0d7aba5aaa7e"
        },
        "item": {
          "id": "1c6ac093-9774-4e20-a4b2-f892bf982f44",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "18d085f0-2f4b-4ddc-8fd1-c8b40cdfc318",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "35da2acf-0ef6-4dae-87e6-b2a3ae63908c",
        "cursor": {
          "ref": "ba43ee81-9644-49eb-8593-dfab5861ebbd",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f92dd3a0-e104-4462-9f40-73769362a066"
        },
        "item": {
          "id": "35da2acf-0ef6-4dae-87e6-b2a3ae63908c",
          "name": "did_json"
        },
        "response": {
          "id": "d61e6e1d-c021-431f-949e-08424f3e6712",
          "status": "OK",
          "code": 200,
          "responseTime": 509,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94565114-9020-40fc-b0d0-80e1ebda80e0",
        "cursor": {
          "ref": "397693c6-e58b-4585-9b72-48caba9d0760",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9dd0d11e-a670-43ad-ace1-254211d94929"
        },
        "item": {
          "id": "94565114-9020-40fc-b0d0-80e1ebda80e0",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fe0e83d-5279-4cb9-ac7d-e02b6981e06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94565114-9020-40fc-b0d0-80e1ebda80e0",
        "cursor": {
          "ref": "397693c6-e58b-4585-9b72-48caba9d0760",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9dd0d11e-a670-43ad-ace1-254211d94929"
        },
        "item": {
          "id": "94565114-9020-40fc-b0d0-80e1ebda80e0",
          "name": "did:invalid"
        },
        "response": {
          "id": "2fe0e83d-5279-4cb9-ac7d-e02b6981e06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0949714d-68a9-4075-8382-b6a1329a4d28",
        "cursor": {
          "ref": "3ab051a8-a47c-4294-9e7b-89376addcfe4",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "818b59a3-959c-4514-b4c2-6dc1952e9de2"
        },
        "item": {
          "id": "0949714d-68a9-4075-8382-b6a1329a4d28",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c2f02794-0acb-49f4-b41f-a8899c046d85",
          "status": "Not Found",
          "code": 404,
          "responseTime": 173,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a425781-50a3-44aa-90e3-a256f54ceed1",
        "cursor": {
          "ref": "0e4cef02-1868-49d3-9fc5-87652dc61d16",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d78d7138-a7a6-420a-93a0-e0ea0a77229b"
        },
        "item": {
          "id": "6a425781-50a3-44aa-90e3-a256f54ceed1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "030db800-a768-4160-82ff-1a5c405ed8db",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56026e4b-bb8b-4ca3-a9b5-686a59f91a38",
        "cursor": {
          "ref": "f495ed7f-a9aa-4cd7-97c8-79bc62b5af38",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d7b584db-ada2-4de2-bb99-bbeac267008f"
        },
        "item": {
          "id": "56026e4b-bb8b-4ca3-a9b5-686a59f91a38",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0b41a400-4398-46c5-91ba-f84145aac798",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a70d49-6652-44d0-9459-3493fc04912f",
        "cursor": {
          "ref": "475ae13b-6f2d-4032-8f61-6f53a50b6aaa",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f904ff5-37a1-45c7-834c-970c7ba28164"
        },
        "item": {
          "id": "d1a70d49-6652-44d0-9459-3493fc04912f",
          "name": "identifiers"
        },
        "response": {
          "id": "e5282ff2-312f-485c-9115-44faaf5c05f3",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3909fe-ef88-43e5-9a4b-953ff6199f43",
        "cursor": {
          "ref": "42c06805-aee6-4ace-812d-cf131c7bdfc8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3800e112-1ff2-4f14-b52f-339a6a0aae14"
        },
        "item": {
          "id": "9c3909fe-ef88-43e5-9a4b-953ff6199f43",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6b07c37-6e37-471a-9bf3-41c8ba21a75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4174c535-7013-4c6e-9d4c-e4dff179970b",
        "cursor": {
          "ref": "fd870236-a779-4992-b8eb-9ee7b48015f8",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "531b7662-93bf-4fe5-becd-918f12a0dfa8"
        },
        "item": {
          "id": "4174c535-7013-4c6e-9d4c-e4dff179970b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7a6dc26f-3406-4dca-907e-36b84d984d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdae746-75bd-4773-88e8-84464888f756",
        "cursor": {
          "ref": "2386299d-ed7a-45d5-8275-445f8e76ae24",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e636aaa2-c535-48e9-bf0e-3479ca9ef6dc"
        },
        "item": {
          "id": "bcdae746-75bd-4773-88e8-84464888f756",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0b4adfe6-fe35-4f14-9298-4b15fc059965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81024889-b9df-4c96-8dcd-4d8f560dbc01",
        "cursor": {
          "ref": "5a33e056-889e-4be9-93b4-49abd1fc0846",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "eea555c1-ac5e-4237-87de-dbb17ecd1cbc"
        },
        "item": {
          "id": "81024889-b9df-4c96-8dcd-4d8f560dbc01",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e8f95497-f1c7-45b2-be81-a9934b6a86cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de92974-0cc7-4628-aed8-d90c8595b3c0",
        "cursor": {
          "ref": "a1347bb1-1328-47ff-9a9e-992054785d82",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a692f92-93ae-490b-ab93-3a4667ca0efe"
        },
        "item": {
          "id": "9de92974-0cc7-4628-aed8-d90c8595b3c0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8335e25e-f7f2-453b-8d70-358e0d15c539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7e2a45-bf88-414c-8f5f-cbdb954f118a",
        "cursor": {
          "ref": "b39bda4b-b696-4acd-9779-0724f0564de4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1675e816-d323-4dab-9783-2fe341fc96e0"
        },
        "item": {
          "id": "aa7e2a45-bf88-414c-8f5f-cbdb954f118a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f7301e15-d678-4a12-8218-4a065344bed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71070367-34bf-4d97-be4f-fef6c4bc869e",
        "cursor": {
          "ref": "d7533e8c-3aff-45e9-879f-4a11e2444e83",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "896b6696-ccf3-4e67-9f8b-f8f355c1b0eb"
        },
        "item": {
          "id": "71070367-34bf-4d97-be4f-fef6c4bc869e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3fc8c6e0-7fb3-4285-8f12-f12862705975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689ea2f1-a12a-4d7d-b3ed-edbe96435be1",
        "cursor": {
          "ref": "cf5c8aae-3d7b-417f-a7ae-405b3131f90a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3863baf4-a849-46c4-a5f6-37dd687a3794"
        },
        "item": {
          "id": "689ea2f1-a12a-4d7d-b3ed-edbe96435be1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b62e531f-d7d5-4b11-b4e8-ebcf61fded20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac64518-8753-400d-af28-d394764b8f3d",
        "cursor": {
          "ref": "b19bb159-9eef-45c7-a964-25ac200fda96",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "65240491-0f5a-4453-b39d-d929f97c918c"
        },
        "item": {
          "id": "6ac64518-8753-400d-af28-d394764b8f3d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5bed73ed-842e-41c0-9fb3-a51d2b3c27b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199e5ba2-4c40-4cfd-9ac3-15d23141f7a4",
        "cursor": {
          "ref": "27e3e2ce-fab1-48c0-a22a-783b721cef65",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ee89b867-108d-4614-98a7-14cc618f7d06"
        },
        "item": {
          "id": "199e5ba2-4c40-4cfd-9ac3-15d23141f7a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "524ff2ab-26d2-4d59-b5ff-6924b8290d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984a3f6f-d0e2-45d3-af06-21929bcb0365",
        "cursor": {
          "ref": "89d79be5-9124-4185-b846-4b99b3709a04",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f6d44f7-09ff-4e76-bf96-b769f4246886"
        },
        "item": {
          "id": "984a3f6f-d0e2-45d3-af06-21929bcb0365",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d2f20643-2606-420a-a196-33eee53801a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff970e02-6b9d-44ed-b1d7-ba0f915ee268",
        "cursor": {
          "ref": "a101a16a-b208-4117-9db8-7523454244b9",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4c73e7b9-5b98-47c6-b160-642e72eb11e7"
        },
        "item": {
          "id": "ff970e02-6b9d-44ed-b1d7-ba0f915ee268",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e9432ad1-b4e0-4a59-a1bf-9f1ce38fadbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2d3cb8-27d0-4593-af5f-59c7ae3eca69",
        "cursor": {
          "ref": "ca5967ca-fde4-4b69-8991-8725daeeeae9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "eda5f7a0-7ef8-4e47-a659-5440a646189f"
        },
        "item": {
          "id": "8a2d3cb8-27d0-4593-af5f-59c7ae3eca69",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cf15759c-7dc4-4d54-a271-695f4c230316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6887664b-204d-4d2b-9184-38aad84c051a",
        "cursor": {
          "ref": "ddd1229c-a8c4-4964-9fdc-d34ebd516116",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dcb966e8-a40b-4651-8086-285620660e4e"
        },
        "item": {
          "id": "6887664b-204d-4d2b-9184-38aad84c051a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8fe88d4d-84af-4a9a-945e-06760678a99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0440fe29-7394-47c9-95f3-eca84292a0a8",
        "cursor": {
          "ref": "468826e4-120c-484e-9998-490f2948f57f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "91d49220-5080-4d6d-a786-4946085f360d"
        },
        "item": {
          "id": "0440fe29-7394-47c9-95f3-eca84292a0a8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "22f35631-4c39-4141-b702-e58f7eb578c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc32df7-0459-4760-8612-be9146a6fba0",
        "cursor": {
          "ref": "d21251cb-3680-46f8-bd5d-478067418690",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d20d79f4-1364-4509-97a2-c20fb9ec40ae"
        },
        "item": {
          "id": "cbc32df7-0459-4760-8612-be9146a6fba0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f1091162-3292-448d-865f-01fc5b57cb7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0755a190-c1d8-44fc-ba92-896e96baeb28",
        "cursor": {
          "ref": "2aeb23a2-8989-4f65-ac93-f655df0050ad",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2e7a8bc9-596d-4272-82dc-d8bed49a4987"
        },
        "item": {
          "id": "0755a190-c1d8-44fc-ba92-896e96baeb28",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ecaf0e6f-8bc9-42d9-9fc3-d61efcf211ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a20d5a4-8403-4971-ae4c-899a7470fc80",
        "cursor": {
          "ref": "451ee759-c571-4519-afcf-3b87bb7c4f26",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d0781b0d-54df-4462-b3ef-326cb361a163"
        },
        "item": {
          "id": "0a20d5a4-8403-4971-ae4c-899a7470fc80",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c817cfda-c3bc-41ed-9ec5-9d403658ff8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dd7acf-a760-4a25-83f9-68476fbe4459",
        "cursor": {
          "ref": "3fbdc5a1-f337-4f9c-8b4f-ed492cd104da",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9f3869ae-6866-48ad-888a-53115639a2bb"
        },
        "item": {
          "id": "51dd7acf-a760-4a25-83f9-68476fbe4459",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f0bf076b-9c1b-4937-8dba-33736866eecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c000bb72-51fe-43e5-a4d5-5066c8b5902e",
        "cursor": {
          "ref": "aa9735ef-eefa-4575-91b3-937d22c49ada",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9558ecc9-6836-499d-828b-be09bcdc3c04"
        },
        "item": {
          "id": "c000bb72-51fe-43e5-a4d5-5066c8b5902e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bdd8b361-71d2-489a-8a39-f985fbb20bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d515be3-6fe5-4352-b76d-82fef69b921d",
        "cursor": {
          "ref": "beab2fd2-5c7a-4bac-b09c-0d8809221100",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9091f511-4889-4c81-b0fd-00c302b374f0"
        },
        "item": {
          "id": "1d515be3-6fe5-4352-b76d-82fef69b921d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fd1871a1-3f93-4ae6-bb14-c0a86b23ca5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93422cde-1e76-4fc4-bcc1-bdfc5e50a4dd",
        "cursor": {
          "ref": "e7eb0293-796b-40d7-8b16-17dbf50692a8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e42136e-7352-48b3-a589-5b9535653d14"
        },
        "item": {
          "id": "93422cde-1e76-4fc4-bcc1-bdfc5e50a4dd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f0736a6e-3fb3-402f-baa7-fd91e6603841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af32efe5-a931-4705-aaab-de1a0f9142ab",
        "cursor": {
          "ref": "4f9e8692-7a53-4ac5-a701-b64d747bcdd4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2730cee6-47d7-4be4-b5bc-9588438edcf6"
        },
        "item": {
          "id": "af32efe5-a931-4705-aaab-de1a0f9142ab",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a5406f62-9ea9-4fdf-a6a4-68011d039469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c03031-852c-4dab-ab19-306335305990",
        "cursor": {
          "ref": "91e1e148-a544-4857-9e1c-0691ac9310ed",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "073cf391-fad3-40ae-9163-e1f21eb546b1"
        },
        "item": {
          "id": "c2c03031-852c-4dab-ab19-306335305990",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "31db4d0b-38cf-441a-ba64-50291127dc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7609774f-ced4-403c-a4fe-ffd84feac5df",
        "cursor": {
          "ref": "5f8d0846-f5ef-4e15-89ef-4136554f0ab5",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9b1544ee-5946-40d9-b787-e200b70b9cf4"
        },
        "item": {
          "id": "7609774f-ced4-403c-a4fe-ffd84feac5df",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "90f31bae-293d-4b1c-b6fa-bd49323c3bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f57fc5d-45e3-4171-adb8-d1daf9b27d77",
        "cursor": {
          "ref": "1142a5d8-f329-4707-9bc0-d020c7b0f759",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b98fe13-5e2a-49d9-88a7-7f4c458a20a8"
        },
        "item": {
          "id": "7f57fc5d-45e3-4171-adb8-d1daf9b27d77",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a3975bb-871d-4641-98ea-b5e8a1d6cfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcfc9d7-8e43-4b70-a30f-5756c7055fa9",
        "cursor": {
          "ref": "7a7e7a01-20de-4d63-b055-f736710902bd",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a5cc7f2-cbdf-4b3d-83b6-afe074e240de"
        },
        "item": {
          "id": "2fcfc9d7-8e43-4b70-a30f-5756c7055fa9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7e8ea094-524b-4b01-b804-f2dcfd039c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca2eee0-01e9-4ef1-9edd-6f5faacb27cd",
        "cursor": {
          "ref": "a87aefdc-e597-4f53-9fe3-3a92a9f1973d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8f526cc9-a355-43fa-ad65-1c8d4df3173b"
        },
        "item": {
          "id": "fca2eee0-01e9-4ef1-9edd-6f5faacb27cd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cbd0d21b-031d-40d4-a17e-f20f2ec6c20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6224cce0-2447-45d1-a06a-a732cc056a49",
        "cursor": {
          "ref": "69aaf43f-6466-4c7b-bc35-884eebf63f51",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a48f90f5-966a-4b78-a82f-9af474aedf21"
        },
        "item": {
          "id": "6224cce0-2447-45d1-a06a-a732cc056a49",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fc3befbf-b257-4655-9ff3-635e959c0d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c63450b-b95d-4c82-9cd8-4962827dde30",
        "cursor": {
          "ref": "aacaabf0-fcc6-4d01-916a-6abbc74b31be",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01f68e6a-5ae0-460f-b51b-e0364e5a275b"
        },
        "item": {
          "id": "7c63450b-b95d-4c82-9cd8-4962827dde30",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "48ec9322-eff5-4c82-b207-66ac30fda72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5e04d6-b558-4809-83b8-1f4dac299db0",
        "cursor": {
          "ref": "b89e49e5-af46-4995-89f5-78cf96ee9468",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f962017a-26bd-4036-aea8-26a987ba4e88"
        },
        "item": {
          "id": "8a5e04d6-b558-4809-83b8-1f4dac299db0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "44f46289-c31b-48b8-b76e-1c1dc1bcb2d2",
          "status": "Created",
          "code": 201,
          "responseTime": 779,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b6d38671-0e04-4fa6-9c62-f3705660e6c0",
        "cursor": {
          "ref": "142db8b3-8c97-4b6a-bc9f-30e800af2018",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "62dab585-d011-4a2e-836f-2284b62ed537"
        },
        "item": {
          "id": "b6d38671-0e04-4fa6-9c62-f3705660e6c0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9510b9aa-787e-482c-8b74-1d23a799605a",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "554cb950-e561-4ce5-bc6d-0c5d15d929f8",
        "cursor": {
          "ref": "94483f35-9e45-4cfe-a2b7-cfa60fcde93f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dbea76ea-94f4-45b3-ba46-ea60518199fa"
        },
        "item": {
          "id": "554cb950-e561-4ce5-bc6d-0c5d15d929f8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6d2c74f8-4520-498b-98ab-6379ff28981a",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d29dddde-d979-410e-87b3-cb967b75981e",
        "cursor": {
          "ref": "eaec2f8d-d3ec-44fe-bf9c-f3602b79f38d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4dea1be5-fa61-49f2-b954-115378c4c501"
        },
        "item": {
          "id": "d29dddde-d979-410e-87b3-cb967b75981e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "52b29739-77d3-4e8c-ab96-a2969c8b262a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f438c8ea-398c-481c-bf03-ac026e48b603",
        "cursor": {
          "ref": "0157f918-5746-4fe9-9f37-138c0acba34f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8341a782-e6de-41ca-9cf9-53a1176daa63"
        },
        "item": {
          "id": "f438c8ea-398c-481c-bf03-ac026e48b603",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "234d3841-f6d1-4c12-94fc-bb465f83d3eb",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "54a47286-f4e8-41c8-9732-eff9b30cc1d1",
        "cursor": {
          "ref": "54ad6d82-9d2a-4a91-8def-6048b340afdd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2ff45df7-db4f-4420-8a43-771a94fa1163"
        },
        "item": {
          "id": "54a47286-f4e8-41c8-9732-eff9b30cc1d1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fbd91c71-80ef-41c1-9457-fe99a64e0a94",
          "status": "Created",
          "code": 201,
          "responseTime": 464,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ff16bb61-cd16-48ba-b8f7-7e14adb6e22c",
        "cursor": {
          "ref": "ab690d4f-0530-42ff-b67b-89ba0cfa02c7",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5ffb8ec-2c79-40f9-a184-a395b2b96d12"
        },
        "item": {
          "id": "ff16bb61-cd16-48ba-b8f7-7e14adb6e22c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "25235851-2c36-4dd6-a856-5dfa92ed079a",
          "status": "Created",
          "code": 201,
          "responseTime": 617,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "eae905c0-8068-4e47-96a1-4889a42c150e",
        "cursor": {
          "ref": "a221527f-87ab-45ab-9d4b-389189ab76bd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2eab4e0e-c67d-4f2e-affd-47bef3a3636b"
        },
        "item": {
          "id": "eae905c0-8068-4e47-96a1-4889a42c150e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "52dfc83d-18f2-47ac-8685-9a45a0206433",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d5403669-c164-4c0c-b4ef-0b73a3ae7ade",
        "cursor": {
          "ref": "fa5b9aa5-3bf8-48fd-b00b-20e2a906b641",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bd27d8e4-ba9d-48c9-8448-c6e2f05dcafd"
        },
        "item": {
          "id": "d5403669-c164-4c0c-b4ef-0b73a3ae7ade",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "84f57fd4-a3e4-4970-b805-b2757c318b1e",
          "status": "Created",
          "code": 201,
          "responseTime": 446,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1c4b3df0-1877-42c1-a43a-39e5b11c5071",
        "cursor": {
          "ref": "72f90fc8-d393-494e-99ed-b45c6f8291bb",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b8469116-245a-433f-96e1-6a6f84f94687"
        },
        "item": {
          "id": "1c4b3df0-1877-42c1-a43a-39e5b11c5071",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "87db7de5-b070-431b-b531-8fb2cca7be1d",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8a12d125-4538-487b-a3d1-ad1d330ec172",
        "cursor": {
          "ref": "2c819ecf-db12-42a2-83eb-3bc451b878e7",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6cf35ccf-96be-4433-8115-852537b59fef"
        },
        "item": {
          "id": "8a12d125-4538-487b-a3d1-ad1d330ec172",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "25910f00-0db3-4890-966a-45f3f56fddcf",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8ccfeb98-562e-4f59-ad3f-b7ba0a990e9e",
        "cursor": {
          "ref": "a57cb501-7b0a-43aa-86fb-73cd69f49f69",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "941073e5-530f-4a36-b4b0-3e3bee400d45"
        },
        "item": {
          "id": "8ccfeb98-562e-4f59-ad3f-b7ba0a990e9e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2d940b4b-b6e7-4b6b-811a-7a80ac58478b",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6e41c388-62f3-4944-87b4-42efca9ba828",
        "cursor": {
          "ref": "b68dc630-09c4-4df6-8e8f-dc30742a0718",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "df038148-7aea-461e-9df7-e5f0e53ff42e"
        },
        "item": {
          "id": "6e41c388-62f3-4944-87b4-42efca9ba828",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3b922132-3474-4207-be72-1d6f67bcbf64",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4a6dd847-44c3-440d-80af-e01c8c36e611",
        "cursor": {
          "ref": "3f981ce4-f75d-447b-a666-01a001c4267c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fba05715-bfb7-4727-b4e3-ce68aeda5682"
        },
        "item": {
          "id": "4a6dd847-44c3-440d-80af-e01c8c36e611",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d0007d9a-6875-46ff-8d9c-26fed52aec4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e90039b-fcf1-41c3-9781-6b2cf48bfa16",
        "cursor": {
          "ref": "e2d0a814-b034-4fb5-be59-24925c7eb729",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5624a6a9-7464-4a21-a824-81c0c08556b5"
        },
        "item": {
          "id": "3e90039b-fcf1-41c3-9781-6b2cf48bfa16",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "587a22b7-5093-41e2-8648-bff709b68a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65571615-caa7-4616-8cb1-dc7559c101ce",
        "cursor": {
          "ref": "ca9d7001-5872-431a-9c5e-1e138c42b2b8",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2fc05d5f-4316-40d6-9a73-e3d87910ed22"
        },
        "item": {
          "id": "65571615-caa7-4616-8cb1-dc7559c101ce",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cb82c17b-8766-4397-a472-d7ebdda00677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3a93e7-cfa2-45e1-b85d-f2d4a1821ec2",
        "cursor": {
          "ref": "b93945d7-59df-43ae-b34c-70607a66c817",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ed927879-b6fd-4933-896b-09dcfee4ab4f"
        },
        "item": {
          "id": "2e3a93e7-cfa2-45e1-b85d-f2d4a1821ec2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "73d5e619-edde-4a27-8f2d-8cba5a15727d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3f473b-1fe8-4e85-b54e-74d8bd4ffa22",
        "cursor": {
          "ref": "66111909-d061-4ead-81f4-696da2c61a79",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e00fd75f-62ba-4e0a-8e3a-9c5df20ec6ed"
        },
        "item": {
          "id": "4c3f473b-1fe8-4e85-b54e-74d8bd4ffa22",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "db34759f-4c51-4ba6-a8b9-0252acc89837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d50dd1-339f-4c78-a531-cb7932358e8c",
        "cursor": {
          "ref": "8ebd34ef-0f6d-4808-98b3-081543d61b13",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0dc41f33-1292-4419-aa12-d7b1cc5033e7"
        },
        "item": {
          "id": "c9d50dd1-339f-4c78-a531-cb7932358e8c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "02fa15fe-c628-4606-8ba6-511ff99107ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297a610-928a-4d87-912d-e5d16803c9b4",
        "cursor": {
          "ref": "02d55569-d008-41ac-be58-c3ec34cb9cf9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19df931e-0c2e-4d49-8a4b-7cf8ef6a1ae5"
        },
        "item": {
          "id": "6297a610-928a-4d87-912d-e5d16803c9b4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "053a5ed6-f3e2-4171-a568-0e1aa6a3e090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dafbf1-584f-4807-92bf-08987260dcf2",
        "cursor": {
          "ref": "a771dbea-1535-4d99-a595-bd3f9a42a307",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "afaa2565-1fd2-4738-bf0b-e8baafc71bb7"
        },
        "item": {
          "id": "d5dafbf1-584f-4807-92bf-08987260dcf2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3913592a-1971-404b-8c3c-40e97fea5bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e81a240-f698-4ac3-9520-51baf72d1e17",
        "cursor": {
          "ref": "845f263d-70b7-47e8-81e4-acb1e3178c13",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "91701c93-aaa5-4e0d-820f-fcf95b47b460"
        },
        "item": {
          "id": "4e81a240-f698-4ac3-9520-51baf72d1e17",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1153b95f-91a9-447d-9fa5-30d36d030cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78de5c5c-f7b7-475a-8f4c-64b12376de28",
        "cursor": {
          "ref": "e8478cf1-901e-4630-aeaf-4c639200c60c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0739b0d6-106d-43e8-b644-fe030f7e7cb6"
        },
        "item": {
          "id": "78de5c5c-f7b7-475a-8f4c-64b12376de28",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "613c42db-e776-4c30-99b7-c1a077ef1001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d743eb-2f15-4208-93ac-2f10e3bbe2df",
        "cursor": {
          "ref": "ed89ef9c-df67-4920-8373-cd352efa52b6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bf3764d5-cb8d-4366-bb62-d7c872b3d41c"
        },
        "item": {
          "id": "19d743eb-2f15-4208-93ac-2f10e3bbe2df",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "330b6e66-5507-43f3-ab91-ac23a3cd0e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb338f3a-d60a-453d-aebb-caad55dd7f56",
        "cursor": {
          "ref": "29f2b4a5-0251-4a50-99d1-7bc7fb024041",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fc074342-5b3b-4ab8-9595-2298d65338b7"
        },
        "item": {
          "id": "cb338f3a-d60a-453d-aebb-caad55dd7f56",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d8f1e6b4-d808-4c03-8a06-8c68c2d2c14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a7ea40-2aec-44ec-9df7-8625d3843740",
        "cursor": {
          "ref": "d1e63d14-a552-4c3f-b10f-93e41e9d14b4",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a1af9a89-3fc0-47d9-a6ec-9df05f36379b"
        },
        "item": {
          "id": "f9a7ea40-2aec-44ec-9df7-8625d3843740",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d9c88976-a5cd-4b90-aa55-ccc9269b503a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08e909d-c978-4703-ba47-dbad866038fb",
        "cursor": {
          "ref": "9c6bc1a2-5f0d-49f1-8a87-62b6c1cdff12",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9abd5f62-448f-4c23-9acd-428861d95316"
        },
        "item": {
          "id": "a08e909d-c978-4703-ba47-dbad866038fb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "68242284-d997-4747-92d9-3adfb4e3347c",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "66902c44-c6cb-4315-9135-1a29ab8440c5",
        "cursor": {
          "ref": "f152b4aa-78b5-40f9-8914-5db898ea6e9f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5d5cffe-f459-4cf5-9f47-4535d7e76971"
        },
        "item": {
          "id": "66902c44-c6cb-4315-9135-1a29ab8440c5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e585694a-4ab6-4291-95ec-9ca249a41ca9",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "498929f2-2355-47af-9618-aff093cbb096",
        "cursor": {
          "ref": "63bb46ab-4a22-4477-b947-db5da3e7ce1f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4434ee93-60ee-40a8-939b-617543701408"
        },
        "item": {
          "id": "498929f2-2355-47af-9618-aff093cbb096",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "19376ffa-9f62-448e-9afd-b8d187da7919",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "64ee81d5-0594-48e6-8959-9cebf9be7478",
        "cursor": {
          "ref": "6819f39f-b04a-4d8e-a9aa-dff4c79d5073",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5a28355d-64cb-4c49-bda6-7ef4653ec545"
        },
        "item": {
          "id": "64ee81d5-0594-48e6-8959-9cebf9be7478",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2669a446-a4fd-4715-8726-1b9dd60380a7",
          "status": "Created",
          "code": 201,
          "responseTime": 596,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "07c014fd-c909-4f69-bf67-abe2b2067d3f",
        "cursor": {
          "ref": "7e0d0476-4cce-4063-97e8-6724f4e7846c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "eb442177-e4a7-4d9c-8e05-4cecce571019"
        },
        "item": {
          "id": "07c014fd-c909-4f69-bf67-abe2b2067d3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e112ad87-2159-469d-8ee8-ca299db29358",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f0a26e6a-b40a-4ac6-adaf-316c2241b299",
        "cursor": {
          "ref": "2bb32c84-ffdf-4065-aa4c-b031f710861b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5476f485-c8d6-46da-a8a9-565ca42e2a05"
        },
        "item": {
          "id": "f0a26e6a-b40a-4ac6-adaf-316c2241b299",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3a344b13-fff0-4fa1-a896-7c28cfef6b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b2a929-8c93-4ed1-9e2b-a14ed954f8e2",
        "cursor": {
          "ref": "2ed89689-9b74-41b3-aa1c-04801f594a7f",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b5c7c158-e5f6-4a00-b7f9-af008e6d13af"
        },
        "item": {
          "id": "17b2a929-8c93-4ed1-9e2b-a14ed954f8e2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a3edbc31-535a-434d-98fc-4c0ed9c8358c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191d2e5e-6b62-4629-88b2-8e837ab41a7a",
        "cursor": {
          "ref": "1b7678c4-b0f1-4955-adf7-31ac0c59ee0d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "58288e5c-4c9b-4dec-8ca6-a7c1866c6796"
        },
        "item": {
          "id": "191d2e5e-6b62-4629-88b2-8e837ab41a7a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3782dfda-bb22-45ed-8370-c43b67571705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ac407e-5b71-48ff-97d1-9c47bd9fabfc",
        "cursor": {
          "ref": "6f3be42f-a972-4f00-84eb-2d3d0edec81f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "86d7ab82-bc06-43ba-84ff-b320e146db9a"
        },
        "item": {
          "id": "96ac407e-5b71-48ff-97d1-9c47bd9fabfc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1da534e4-e8f5-4337-ba05-f704dc298aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50eccaeb-313a-4094-b55f-15048dc6c271",
        "cursor": {
          "ref": "d7a62c79-3303-40d7-9dda-76724acd5cc1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b865f3a0-33d9-4073-a8a0-3c4d39b9592d"
        },
        "item": {
          "id": "50eccaeb-313a-4094-b55f-15048dc6c271",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4b100482-9e09-45f6-a56e-3f7650b53368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170a86ef-5349-455b-8e66-756a1ad75af1",
        "cursor": {
          "ref": "6e1aeb41-77fd-4f27-a7f9-ccfe450b2249",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d1ba7dcf-da93-43f6-94c8-121bb53204e7"
        },
        "item": {
          "id": "170a86ef-5349-455b-8e66-756a1ad75af1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a6e2d43a-0d80-44f3-b6dc-233f83cd5677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbed1ec-c884-41c6-84be-ea17fb2f6dd6",
        "cursor": {
          "ref": "aa958d42-056c-4a36-ac6d-33723469ec73",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8c33b06b-e992-4f73-824c-1bc5207e95b7"
        },
        "item": {
          "id": "4dbed1ec-c884-41c6-84be-ea17fb2f6dd6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4b80453d-ee77-472b-b99f-ed3846a903ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d94763-bf00-4170-95c9-8d9b683328c2",
        "cursor": {
          "ref": "4d8867e1-27cd-4b38-87c3-812fdfe8ff79",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d88d0393-74d7-47cf-8526-c00823309ff1"
        },
        "item": {
          "id": "21d94763-bf00-4170-95c9-8d9b683328c2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ddd3e0fe-a838-49ab-a63a-627019d04da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba1ee68-033d-4682-88cb-689f3574b125",
        "cursor": {
          "ref": "9d169071-b04d-4387-a12f-deea08a6bfcf",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ca0bf84c-841c-4066-a900-af2a681b9cf0"
        },
        "item": {
          "id": "8ba1ee68-033d-4682-88cb-689f3574b125",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "24a0f717-6bdb-451d-88b2-9c1907293b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f13b0-ea90-422f-b077-7ce848e3bd88",
        "cursor": {
          "ref": "1f1da228-53a8-495c-bc89-eb22f751fa0d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "109060ca-2cac-40d8-948b-3c76aba840b1"
        },
        "item": {
          "id": "066f13b0-ea90-422f-b077-7ce848e3bd88",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6a7269b6-bb3b-429b-aa07-617d527818d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474ab522-5fa9-42f3-9535-c481cc76b48f",
        "cursor": {
          "ref": "f51cc6ac-4a08-41b6-af8d-234d1a189027",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cd96e45d-5a90-4a91-9d4e-0343b18c4e9b"
        },
        "item": {
          "id": "474ab522-5fa9-42f3-9535-c481cc76b48f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2872b019-091f-4099-8705-8a22acec1402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9034c2-fc54-43cb-a64e-2cd11ebadc99",
        "cursor": {
          "ref": "28b58893-6e7a-41cf-856d-9d8d1cd4140b",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1a2e28b1-87da-4b71-9d96-d00ae10ba3e6"
        },
        "item": {
          "id": "7a9034c2-fc54-43cb-a64e-2cd11ebadc99",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3064e0aa-fe58-4de5-b7da-e336c85a475e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facfdfdd-c0b0-4cbf-b267-3c8b079db102",
        "cursor": {
          "ref": "55877edc-1cb4-4a89-925e-89c261a640a4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6b328147-a6f5-4c9a-9263-c818a7220ede"
        },
        "item": {
          "id": "facfdfdd-c0b0-4cbf-b267-3c8b079db102",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dca11a1b-9ada-4a3b-811e-590dd01db5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4f2efb-2870-415a-990d-a33d466edfd4",
        "cursor": {
          "ref": "27f558e7-0179-4dcb-8a20-50442da19317",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0ab1092e-6dbe-4de0-982d-59cfade091aa"
        },
        "item": {
          "id": "0e4f2efb-2870-415a-990d-a33d466edfd4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6a0b3f72-8bc8-401e-bc05-c65dda034efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a226cc4-2305-4925-a6f6-3d20531a0439",
        "cursor": {
          "ref": "1a47888b-251e-438c-8721-0bd40b7f7ab5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e6d14ccd-2bf8-43ea-acc4-f5ad6a1d76f6"
        },
        "item": {
          "id": "7a226cc4-2305-4925-a6f6-3d20531a0439",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4569461b-1a9c-44c5-98a0-6904fa37c917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be0542d-d9dc-4755-8938-dde1fd334e74",
        "cursor": {
          "ref": "4751c4dd-1541-4b50-b143-e1d5543e5fa6",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b83a2905-4c77-4149-8d08-9790e488ca38"
        },
        "item": {
          "id": "3be0542d-d9dc-4755-8938-dde1fd334e74",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "28918474-08ea-4182-ad8c-af2a2fe1f5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47aa328-20b8-4fd5-ad13-98b0fc78b086",
        "cursor": {
          "ref": "ba7d07d2-a1d2-4570-b08f-964e2b2d0a27",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b659c39e-c82f-4f31-979b-3eea99efefec"
        },
        "item": {
          "id": "f47aa328-20b8-4fd5-ad13-98b0fc78b086",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7db82857-a602-4475-8774-b6d7c24e7fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce547489-591f-4077-8631-be0d7a96a278",
        "cursor": {
          "ref": "eb6888d1-6eff-4cae-9900-da29e60f7813",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "435d7090-670e-4211-90b0-8fe55369a5c8"
        },
        "item": {
          "id": "ce547489-591f-4077-8631-be0d7a96a278",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "61fa1419-dded-461d-9868-1df82f2f4b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a612bd7-25e1-4fe6-938d-d99e9e464e23",
        "cursor": {
          "ref": "440bd1d9-a165-446f-a1d7-71b2e914b203",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a868c406-8d66-4360-be96-c7ba65a1b2b4"
        },
        "item": {
          "id": "7a612bd7-25e1-4fe6-938d-d99e9e464e23",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "99863f21-f75a-4ee8-b7d7-43f1d614edb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee443ed-0e81-414f-b106-3fadb18cb686",
        "cursor": {
          "ref": "3abf0b61-ec34-4fa3-a43e-d9cfb9143567",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "70ca62eb-7292-48a9-ab4c-65d763c55650"
        },
        "item": {
          "id": "2ee443ed-0e81-414f-b106-3fadb18cb686",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "89f94a2e-2432-4e4f-99d9-37a118ac1f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ab008a-da8d-4515-a4da-5ecd4b64e4a6",
        "cursor": {
          "ref": "d0776961-ddd7-47a3-8d46-c7c64ff603e4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43fe2626-563b-45d4-818a-b8a80518d93d"
        },
        "item": {
          "id": "e4ab008a-da8d-4515-a4da-5ecd4b64e4a6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4350f15a-df29-4536-b166-6c4d034427c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070e22f8-0439-4b0d-8eb0-73227be81709",
        "cursor": {
          "ref": "0318d6f7-2fd6-4250-a88c-a92068f8d49f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d196ff31-acfe-4421-9cb0-bb766a191721"
        },
        "item": {
          "id": "070e22f8-0439-4b0d-8eb0-73227be81709",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "feb276ab-0c5b-437f-acb4-cf3a66e0c5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82ba2c1-0490-4225-a449-7e2e2b89b6e7",
        "cursor": {
          "ref": "2fc7c612-f39f-4602-9219-0b3d4ddef517",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "16c7c754-e753-43ac-af82-15a187fcf2c8"
        },
        "item": {
          "id": "e82ba2c1-0490-4225-a449-7e2e2b89b6e7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ef53ee63-2669-4ef7-b703-51f23c7c5abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c5b2e6-3add-4424-974a-e3d5b55626f0",
        "cursor": {
          "ref": "9957a57a-4abe-45f3-8c44-e93d154f9f62",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c079b9b-064d-4eea-8185-bed27f353d82"
        },
        "item": {
          "id": "23c5b2e6-3add-4424-974a-e3d5b55626f0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d582e3a4-949c-4093-b5cc-9875a3aea40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32785f7a-4e74-497d-87d4-2745f84db93d",
        "cursor": {
          "ref": "90888a92-652e-4c87-b6c3-bca035c8bd68",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c553c4aa-63a6-4ddc-a406-434d2e03577e"
        },
        "item": {
          "id": "32785f7a-4e74-497d-87d4-2745f84db93d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6470d6df-badb-401d-8ce8-a4c0c7b8ee8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c4ca8d-5b0f-4432-9bba-a8a7cd025696",
        "cursor": {
          "ref": "56eb6b08-5eeb-47ca-a343-1adb6557dc02",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7104cfc4-5a15-473e-9803-a924cbfa9c0c"
        },
        "item": {
          "id": "89c4ca8d-5b0f-4432-9bba-a8a7cd025696",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bb91fb9b-e974-4361-b9e9-94d7d224041e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24e8281-8161-4f6d-91ec-0c85e7d7256b",
        "cursor": {
          "ref": "28e9e0a9-aeb2-4b5d-a2b7-fd099f4283c3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a30769c3-208f-4227-8935-2a1ab8b38e22"
        },
        "item": {
          "id": "d24e8281-8161-4f6d-91ec-0c85e7d7256b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "59c82246-d4ae-4831-9930-ce5dc8cc00d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68156217-4ffb-4022-a77c-9dd6952f0f3c",
        "cursor": {
          "ref": "2cf47108-4612-4cb2-9fe4-c314eace8c85",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1c663f9a-617d-440b-b72b-846a8cf1f5c1"
        },
        "item": {
          "id": "68156217-4ffb-4022-a77c-9dd6952f0f3c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a72fcc9c-d09c-4551-9fa8-685242d8deea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5797d7e-b52f-4fb1-b0d6-fea8987e7d52",
        "cursor": {
          "ref": "05e44eed-5fa6-4e50-896a-ded9d4cb4b4f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a1a7a09f-262e-4083-871b-0c022d2ef87d"
        },
        "item": {
          "id": "c5797d7e-b52f-4fb1-b0d6-fea8987e7d52",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7e3c06fd-f43a-4370-b354-e148285659c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239fb210-efbb-453e-a0c8-0fda377f9311",
        "cursor": {
          "ref": "1bbfc805-58d8-4077-bfd0-e7a91be0fbe6",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b8dc1c3c-4ce9-40a9-886a-b87435a9e4c0"
        },
        "item": {
          "id": "239fb210-efbb-453e-a0c8-0fda377f9311",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "164de68e-ccdd-496a-b77a-a9d022f70ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6481344f-5df4-4328-9637-12565d994bca",
        "cursor": {
          "ref": "9c34d0b8-c6fd-4347-b17f-0b8fc2c587e4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "58f9047a-8e14-4eda-a711-3a5dbd9a79f0"
        },
        "item": {
          "id": "6481344f-5df4-4328-9637-12565d994bca",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4c5b86c6-2702-4fbc-8fd4-ad36c103886a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e760b631-fe3b-4570-93c8-5062991e6a1c",
        "cursor": {
          "ref": "25f3d9b5-a0d0-42ce-abcc-e204e42a38b6",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0a4fb50c-8cdf-4b3d-bb11-7949a41ad9e3"
        },
        "item": {
          "id": "e760b631-fe3b-4570-93c8-5062991e6a1c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dad2b77a-0eab-4e42-ab1b-d66b3f4c9b36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ac0495-c068-4586-a1fb-8fd84b6c83a6",
        "cursor": {
          "ref": "3089600b-a333-4287-9ea1-52873063f8b5",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "77b46d29-4553-48a8-862a-3b2c23d6a2f4"
        },
        "item": {
          "id": "35ac0495-c068-4586-a1fb-8fd84b6c83a6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c0fcbcde-a505-4675-8b47-6fddead6f2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0fd57270-7ffa-4e7c-824c-f9b810783978",
        "cursor": {
          "ref": "aabad004-6dd6-4905-b98f-0ae411ccd4a2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8f926870-b038-499d-b700-56ef6b4ec5d4"
        },
        "item": {
          "id": "0fd57270-7ffa-4e7c-824c-f9b810783978",
          "name": "credentials_issue"
        },
        "response": {
          "id": "22e8edb3-db01-4cdc-9c3b-ebb77c14bb56",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "34920caa-7c3a-4541-8609-e8e5ebded1ce",
        "cursor": {
          "ref": "5dc5b172-9ad4-44b6-86ff-9d8d0babb5b4",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b04d8c91-43ec-4bb7-a4b0-817771490f00"
        },
        "item": {
          "id": "34920caa-7c3a-4541-8609-e8e5ebded1ce",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "04902402-264f-4ffa-aa0a-51f96da477bb",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a753e9-36ec-422c-9b26-845114828754",
        "cursor": {
          "ref": "fac484ec-c9f6-47b7-83be-cb6731751d34",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d41d9f5d-fb56-4bcc-95d8-b4735038eb6c"
        },
        "item": {
          "id": "d3a753e9-36ec-422c-9b26-845114828754",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a7b3ca0d-7a49-4078-ad66-448220caa635",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc3e02e-e392-4dc9-ad61-ecd7326a4247",
        "cursor": {
          "ref": "2b85068a-57cc-476a-8971-38c92b8c5d7d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6d6c5530-d065-49c6-a213-9f9689f00528"
        },
        "item": {
          "id": "2dc3e02e-e392-4dc9-ad61-ecd7326a4247",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c881319c-ad55-401e-b75f-f3b16d491c89",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb3d966-e5ed-4c1c-bad9-adf83ec5743f",
        "cursor": {
          "ref": "a6deef48-9a10-4504-a186-bf135a5a9eda",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "632752db-fbaa-40f0-9b1a-2a2ce4dad49b"
        },
        "item": {
          "id": "feb3d966-e5ed-4c1c-bad9-adf83ec5743f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e5127b7f-e75c-40e8-960a-d6ac362846de",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-03T00:34:22.654Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-03T00:34:22.654Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "405e8403-7ed0-464c-b26b-66fac8d7229f",
        "cursor": {
          "ref": "49bb05e9-8981-4aaf-bd99-41f4ca4cdf91",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "978a2329-62a6-4ad7-be1d-96423f3ace76"
        },
        "item": {
          "id": "405e8403-7ed0-464c-b26b-66fac8d7229f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e06f292a-46b5-4f8d-a93a-36c436b71f5f",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68311756-3bb2-44ab-8fa9-ee6340cadb8f",
        "cursor": {
          "ref": "0d801304-7b7a-4441-b7b8-55710e779c68",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9a14ff4b-a208-4ffe-9676-bbf5726ee073"
        },
        "item": {
          "id": "68311756-3bb2-44ab-8fa9-ee6340cadb8f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b9b3686d-2f74-4081-bd9f-8d420cee11cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6925aeb-4357-43f8-894f-60fbd147de2d",
        "cursor": {
          "ref": "ec05b2bd-eabb-40db-8d48-3e9395a57b5f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1caf0c80-2294-409e-991f-684f620c6058"
        },
        "item": {
          "id": "b6925aeb-4357-43f8-894f-60fbd147de2d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6f086eb9-2c90-4ded-bb5c-210e2fa2ec21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5512b8c5-fe1b-4a0c-b7ed-605ff8462f9d",
        "cursor": {
          "ref": "28f8845d-b4ec-42ff-90ee-0beed2a49b06",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "03a8f5ed-d0d5-4f7c-a9f0-2c92be3d42f1"
        },
        "item": {
          "id": "5512b8c5-fe1b-4a0c-b7ed-605ff8462f9d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "398134b2-278c-4df2-a373-30165c859bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261358a9-37ec-4232-9b00-b3d8789a7546",
        "cursor": {
          "ref": "35305144-83e2-443d-919e-ea5cb3853e2e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0b04f4f0-70a8-4d4b-9a3c-c7f2aea9799a"
        },
        "item": {
          "id": "261358a9-37ec-4232-9b00-b3d8789a7546",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "553141ef-f33b-4a8c-9985-b54986170d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add073c0-4bdb-4936-86bb-3d6d5bafa6fc",
        "cursor": {
          "ref": "8d7b8c24-baac-45cf-9486-3a009c3749a7",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3de0aa68-1f94-4e5d-9806-58eac0d248a4"
        },
        "item": {
          "id": "add073c0-4bdb-4936-86bb-3d6d5bafa6fc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "12ab562a-b329-4cd4-8e92-045eacc941a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39ee15d-15aa-41e4-bc58-94d83d7d0ccd",
        "cursor": {
          "ref": "9182db6f-4acb-4ba0-95c0-0a5c74aab5e5",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cc18a22d-97d0-4386-b0cf-11bc9575f5ba"
        },
        "item": {
          "id": "b39ee15d-15aa-41e4-bc58-94d83d7d0ccd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f76c2dfb-9d68-46a5-88b5-930bac7974ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952d79e1-f81b-48f1-a117-5ed62c3b9359",
        "cursor": {
          "ref": "b6c83393-411b-4075-a1f4-cff96e3a7327",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f0f01057-9a70-4333-bda4-7ded4093dcd9"
        },
        "item": {
          "id": "952d79e1-f81b-48f1-a117-5ed62c3b9359",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2677d3e1-5997-4bfb-b015-522ee09c883a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44621127-8a97-4e3d-9438-848e615858ed",
        "cursor": {
          "ref": "5e22500f-7d21-4813-a147-af83015016bc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "68c09ce2-1271-49e8-a959-5514977b4586"
        },
        "item": {
          "id": "44621127-8a97-4e3d-9438-848e615858ed",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0fbc3762-b05c-4f86-84f4-7e9a3b7a1c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1278dbce-bd52-433d-8218-b68e938ceb87",
        "cursor": {
          "ref": "f5d99bb1-aba8-4fc0-bea6-a846fffb29a3",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5cc3e12e-36f9-4b00-8ab9-4997b17018ff"
        },
        "item": {
          "id": "1278dbce-bd52-433d-8218-b68e938ceb87",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "29649994-b087-466a-b054-93455b01d970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f920cc80-cd68-4b0d-9f3e-3e4338a5a862",
        "cursor": {
          "ref": "6e141b62-0b13-490e-aa73-fe46c004723a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f2b72cbd-bee9-4fbd-8737-00e893e1e4fc"
        },
        "item": {
          "id": "f920cc80-cd68-4b0d-9f3e-3e4338a5a862",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3ea05051-1c5e-4b6c-9e99-e4fb8a298e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e586244d-e43e-4dec-adf6-675856b4a78b",
        "cursor": {
          "ref": "25cde780-7b6d-4d5a-ac0e-ed3b11e8aefa",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "66cfbc00-1946-4c91-b958-27e95bcfb5e2"
        },
        "item": {
          "id": "e586244d-e43e-4dec-adf6-675856b4a78b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f8019eae-1fe3-4f15-afef-146a8c8d856d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5133b7a3-0bd3-4ca7-8a8e-c02cf2bf01c8",
        "cursor": {
          "ref": "d140da46-6462-46ce-8f06-2bab1d0a97f2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "029401ef-f4ee-47a5-99d8-8df8d4ab799a"
        },
        "item": {
          "id": "5133b7a3-0bd3-4ca7-8a8e-c02cf2bf01c8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "104f7414-f8dd-4f00-b850-7343fcdfb8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21838f08-0192-4f5f-bd39-9163637f082c",
        "cursor": {
          "ref": "c46718c9-4e1e-467d-b796-1b54775c1813",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c412844e-084b-47f6-af04-f20380b1a16a"
        },
        "item": {
          "id": "21838f08-0192-4f5f-bd39-9163637f082c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e5178bff-1bc4-4c60-bb9b-feeaf328a61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccfaa38-6f2d-4a38-8c5f-5c00be916c98",
        "cursor": {
          "ref": "14a1b622-c348-4a00-a3ed-cbd96def1685",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e206e20f-13e6-4e04-8ffa-c488cb91ae33"
        },
        "item": {
          "id": "7ccfaa38-6f2d-4a38-8c5f-5c00be916c98",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "19d6d139-2437-41ee-ae46-fa974b76987b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774143c0-0fc4-4bd0-ad07-226adb6cc344",
        "cursor": {
          "ref": "d97729c5-b5b2-428b-addb-6397d299d58d",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c9ce828-1d14-48c4-939a-31ada6f2ead1"
        },
        "item": {
          "id": "774143c0-0fc4-4bd0-ad07-226adb6cc344",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "184f3cdb-e9a3-41a5-86f9-18c04b741c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a768a4f9-46b2-47bc-be87-f70c74e1db85",
        "cursor": {
          "ref": "842b5a67-a60a-48bc-af3e-8e9f887cfbc2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5fecd1d8-d8c1-42a9-b07b-07e18133caa0"
        },
        "item": {
          "id": "a768a4f9-46b2-47bc-be87-f70c74e1db85",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c03d95ca-4e70-4bd5-b185-f19a2a9f4acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693640e3-27df-4894-83db-26bc8c8331e7",
        "cursor": {
          "ref": "d63dc4fa-eaaf-436d-8665-99d87e53e103",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0ad1ce53-5056-4b46-849d-94dee4b97c1b"
        },
        "item": {
          "id": "693640e3-27df-4894-83db-26bc8c8331e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ffa158e8-7a6d-410b-a6d0-0c878d30b59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ad6268-4272-40a0-9f82-1454ed687f3e",
        "cursor": {
          "ref": "055c74e5-4cd2-4e06-9ad8-438b5efbf125",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "44d90713-ac8a-410e-99c2-2541d3ab944a"
        },
        "item": {
          "id": "c8ad6268-4272-40a0-9f82-1454ed687f3e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9bb34108-34ed-4897-8e3f-a3be94968fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4b840e-d7ed-4e52-8c15-9158c33a5c07",
        "cursor": {
          "ref": "9531cb1c-b48e-47c2-9899-9133ce7f1c98",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7d7ebb17-7e12-49d5-807b-c89b487e1a95"
        },
        "item": {
          "id": "da4b840e-d7ed-4e52-8c15-9158c33a5c07",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a86648de-7284-4efd-9032-c28ebed683cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364941a5-ade1-412f-8e7b-bae3f0378a7e",
        "cursor": {
          "ref": "685ac4e2-f8de-4096-9b4b-1cca784846cf",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "10516073-917d-439d-9dfc-d17669feee79"
        },
        "item": {
          "id": "364941a5-ade1-412f-8e7b-bae3f0378a7e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "34d21d05-3759-40a4-b472-74fb4b9f52c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fac8856-442e-48de-a807-dccf3b30834f",
        "cursor": {
          "ref": "caadc532-34ca-4235-8c27-bb86ea096ba5",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ed22e6e8-d2c2-4aa4-9c5a-1717af8f9f3e"
        },
        "item": {
          "id": "5fac8856-442e-48de-a807-dccf3b30834f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ec10523d-ad19-4b20-96ff-04bf6d1e857b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5022c58b-a801-448e-a5c8-70ba1604450b",
        "cursor": {
          "ref": "459ad02c-0c1a-496d-8673-df57bad161d9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a2c4bf1a-5110-4f19-b72e-c8d80f856821"
        },
        "item": {
          "id": "5022c58b-a801-448e-a5c8-70ba1604450b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ca80b122-5216-4f43-8459-af70c4d13f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d044c86-8a37-4100-8305-187fa3bb3eb6",
        "cursor": {
          "ref": "1c9522a7-1975-47bd-9739-8d4c0a8f21c3",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f99a2938-8e60-4c54-9eca-797e7bf8f88d"
        },
        "item": {
          "id": "2d044c86-8a37-4100-8305-187fa3bb3eb6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6276f6a5-fab8-4b7c-8d5b-b82b56eb5795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bcd57e-b52c-4a03-ad3b-23f431d09f7e",
        "cursor": {
          "ref": "ffe2d78a-51a1-436c-9c55-6cc8f1eefe3b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9f1586fb-d086-42e5-b594-39df63598f80"
        },
        "item": {
          "id": "b4bcd57e-b52c-4a03-ad3b-23f431d09f7e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5d644da3-8962-484f-b2e1-e29c25f08fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368365cd-2ad8-4002-b816-37b515cdd233",
        "cursor": {
          "ref": "d0ade370-6221-437d-b552-529b13fc7715",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c6ec94b7-98e9-4e65-8023-2f171ef7c2f4"
        },
        "item": {
          "id": "368365cd-2ad8-4002-b816-37b515cdd233",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "72475b5f-6c47-4be6-8d87-1f65bb25a87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424f0d64-a516-4725-803d-fe93a4319376",
        "cursor": {
          "ref": "fd0e857d-bc4f-40e4-941a-af62d3b7742b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a58bdb54-af56-42a2-a63d-98dbaccae9e9"
        },
        "item": {
          "id": "424f0d64-a516-4725-803d-fe93a4319376",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c6b50839-bd65-4c9c-b6f4-ac7a6b164f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91546996-6e8b-47cf-8cc4-cb3662ecaa0e",
        "cursor": {
          "ref": "271206c6-891a-411b-9e90-ee4debbeb959",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "728450c1-7bd1-4a84-a175-9f79db7c1d87"
        },
        "item": {
          "id": "91546996-6e8b-47cf-8cc4-cb3662ecaa0e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "126c51cb-0b4d-4c95-915b-3443ef6595a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57acc17d-21a3-4db3-9a28-4b2f873b7007",
        "cursor": {
          "ref": "e3b4c8c7-62a2-457f-aacc-274f4b847503",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "571b6788-b6f7-46c1-842f-7927a58cc029"
        },
        "item": {
          "id": "57acc17d-21a3-4db3-9a28-4b2f873b7007",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cb5e1ec8-0bbb-4099-b5bf-6a40f7eb3cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82c66d2-5cef-4a5d-8920-70fa6c332428",
        "cursor": {
          "ref": "d78b5957-179c-4f8c-9f7e-b4bbac81b5f9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "00d839a2-abda-4678-899e-da002077f043"
        },
        "item": {
          "id": "d82c66d2-5cef-4a5d-8920-70fa6c332428",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0e6c97db-3140-4058-9d83-5afd7e2f3b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48f6adf-eae4-4745-b21b-7d858157525c",
        "cursor": {
          "ref": "d959d4aa-e608-42d2-bcca-3b3aadbbbf2d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2e9eddbd-bf7c-4064-89f1-1ab637233e69"
        },
        "item": {
          "id": "e48f6adf-eae4-4745-b21b-7d858157525c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2c4b67de-9e92-47ba-812d-26cbdb8e2178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e6614b-7e91-45d3-a6b9-2c043d9f96f2",
        "cursor": {
          "ref": "55713f09-0dfe-4f70-8f0d-cbba6c019e0b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "98c23f10-cefd-4bd0-a7ca-6a044f318790"
        },
        "item": {
          "id": "f6e6614b-7e91-45d3-a6b9-2c043d9f96f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f39ce6c1-97b8-43ed-92c8-7ce2e9c4b34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab279e94-22a2-4ce6-9236-2fcf38080747",
        "cursor": {
          "ref": "953d7327-7bfb-4b83-93b5-dcc5af203832",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "17aea3d8-c810-4add-939a-b2926c06a70f"
        },
        "item": {
          "id": "ab279e94-22a2-4ce6-9236-2fcf38080747",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8f39de64-2a4e-43d2-9d97-4efe1148305e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a324a5-986f-478b-b76f-613a529f823c",
        "cursor": {
          "ref": "b96ccb6d-7c00-40b3-84a0-2be5e6fab38c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "edc4b3f1-4424-41f5-bd48-61f7d6cbff37"
        },
        "item": {
          "id": "b1a324a5-986f-478b-b76f-613a529f823c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "10fb9c46-bdca-4373-a74e-9ed6b54cdc8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df7d3ae-a06d-4d48-a658-3fde931bd1d2",
        "cursor": {
          "ref": "fa66f841-e7ab-4c3f-9ca0-53789851ae00",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "65b3bd79-01ab-4405-b62d-07dc40733dc2"
        },
        "item": {
          "id": "4df7d3ae-a06d-4d48-a658-3fde931bd1d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2cbad862-d359-484e-8f5f-ad115a99dbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcf753d-6d3b-4d67-8997-c5f93d60af7d",
        "cursor": {
          "ref": "87f8c68a-ffc3-4b9e-94cf-9559158fd81e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "46d5326d-a9d4-4f47-822c-ee88607bd7be"
        },
        "item": {
          "id": "dfcf753d-6d3b-4d67-8997-c5f93d60af7d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4a5c282-cc8c-4697-8383-9f6a23aa2f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa49e9d-f9a3-4229-acb7-d8753202272e",
        "cursor": {
          "ref": "3800709e-4407-4bc0-80dc-32af16372d2e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0dd42926-cb4c-4dac-a32d-71c3394386cf"
        },
        "item": {
          "id": "caa49e9d-f9a3-4229-acb7-d8753202272e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f91bdab6-c8c7-466f-8436-2579ef5a486e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9414830e-d798-4aab-b886-ab8cc7544ee7",
        "cursor": {
          "ref": "71dba68c-f24c-45e5-a587-39c41830f004",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ece50701-f0db-48fa-a7f7-6c7816d3f3e1"
        },
        "item": {
          "id": "9414830e-d798-4aab-b886-ab8cc7544ee7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b936ad7b-e2b4-451c-9222-64539ccb9d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a825db6-d489-469c-9fd2-a8cbc6577f4c",
        "cursor": {
          "ref": "b7e7f6fe-1567-48f2-8496-7752f43d6d55",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "42a7588b-e201-4d22-a46a-26d74b2193e5"
        },
        "item": {
          "id": "1a825db6-d489-469c-9fd2-a8cbc6577f4c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b02d5a3-08f7-47e0-96fc-da8af8e7588f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3541fa12-6cc5-4700-82f6-9a28057e3bda",
        "cursor": {
          "ref": "cb0b536d-910a-44b2-a02e-8d8fea900271",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bb4165ec-5b58-4fb3-af2a-545b96f5e758"
        },
        "item": {
          "id": "3541fa12-6cc5-4700-82f6-9a28057e3bda",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "62c9aaff-42ca-45c3-90b5-3396d9bbeccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b4e4ba-8dbd-4f89-80b1-2a5c64418129",
        "cursor": {
          "ref": "2326c417-7d0b-49a9-b354-40b04dc5d75d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0f9829ee-2c45-4957-b5ed-87cce3cf0a04"
        },
        "item": {
          "id": "68b4e4ba-8dbd-4f89-80b1-2a5c64418129",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "91ff81a1-f5c2-40c8-85f4-790018f3fb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaca8e9d-336f-4721-ae5e-a74beb53b4ae",
        "cursor": {
          "ref": "a9185b97-9832-4ff4-96ea-c75d2541c2ad",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "560e0a12-5755-4646-9240-ef2af12b47fd"
        },
        "item": {
          "id": "aaca8e9d-336f-4721-ae5e-a74beb53b4ae",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6363129f-06f1-4097-a906-d1b6fd726561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920f16d9-e52f-4390-b7e6-e801cc8bce8f",
        "cursor": {
          "ref": "23a14556-7069-4c88-b330-f72140e8910a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7b5b348b-096c-44ca-88f4-a1c1293b8030"
        },
        "item": {
          "id": "920f16d9-e52f-4390-b7e6-e801cc8bce8f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b2c20450-8e49-41f6-9341-9c1f6c5d6d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3534814c-6106-4e04-b79c-4e8f6677945e",
        "cursor": {
          "ref": "7103c0b4-b157-44f5-a610-eb3bd8cf9bbc",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "02aad057-d4eb-43e2-89c7-2504ea819587"
        },
        "item": {
          "id": "3534814c-6106-4e04-b79c-4e8f6677945e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4a72bcfc-23e9-44d3-9ee3-4a4b3543bd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41490510-f5a7-4264-ad35-f9646d203426",
        "cursor": {
          "ref": "92a88f15-aa68-4ab6-ba0b-00aa5ce9e220",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f434729e-5eda-48a6-8d3a-d3c04b72818c"
        },
        "item": {
          "id": "41490510-f5a7-4264-ad35-f9646d203426",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "05825dcc-98a9-40f5-9175-8bb85b774d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e00c349-abd8-431f-9f82-769c911149c1",
        "cursor": {
          "ref": "d64387a4-a651-42c6-8adb-5750219824a3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "36d46195-06c4-4fb8-8367-e33ea2715a80"
        },
        "item": {
          "id": "1e00c349-abd8-431f-9f82-769c911149c1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6dfa0b6f-e3ad-4540-abe1-59ab90d879e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bd7733-6013-4646-a54f-4dc4e23aac71",
        "cursor": {
          "ref": "8282e3a6-4c33-4412-9457-d12c0a47520a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9286bd94-2d10-41cf-a323-b653868b7d0d"
        },
        "item": {
          "id": "96bd7733-6013-4646-a54f-4dc4e23aac71",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eccbe606-a500-48f1-9329-5d0e9a116739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2e4297-c08a-4391-98f7-f90acda9d842",
        "cursor": {
          "ref": "67aa6da5-6d52-4a72-8927-de5b84eb3bb7",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "777b94f9-16ad-413b-976e-b1e470891aa1"
        },
        "item": {
          "id": "4e2e4297-c08a-4391-98f7-f90acda9d842",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b081fd1e-42b3-4138-abac-8e24c97e9d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e49168d-05d7-4d44-9748-e39e957dc968",
        "cursor": {
          "ref": "5290057e-2e41-48e6-a27c-f549b0464f76",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3b58938b-cb6e-480c-b15f-479fb598133d"
        },
        "item": {
          "id": "1e49168d-05d7-4d44-9748-e39e957dc968",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b75ef0b7-b198-4ec5-b3e8-6a0e1455d230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06701455-d941-4b33-adf7-f4f97d5dff2e",
        "cursor": {
          "ref": "eedf52c0-83b3-4ee2-b346-3439c76fbf86",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c878e131-5616-4a6c-a505-767ef7a76718"
        },
        "item": {
          "id": "06701455-d941-4b33-adf7-f4f97d5dff2e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "99460192-91b6-4c5d-9f78-13d8a1183ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6c9555-edc5-40b3-be25-e134194b3b48",
        "cursor": {
          "ref": "bdc14103-d5d7-4c65-8d3f-14f7754e2782",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b56f0d9d-13bb-497b-8db1-a0c29dab30a7"
        },
        "item": {
          "id": "6a6c9555-edc5-40b3-be25-e134194b3b48",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ec3fea8d-9820-460d-94cd-f2fb410dd530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9055dd20-1b5c-46a3-8eb1-4797e369c8e0",
        "cursor": {
          "ref": "cc6ea8c9-6c2c-469a-9c88-3b3d64b5bebf",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "19b27abb-6e8c-4925-a2bc-41b839c5dfc3"
        },
        "item": {
          "id": "9055dd20-1b5c-46a3-8eb1-4797e369c8e0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "92a78a67-71aa-44fd-bc4c-a9b249824552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6fa450-1e3c-4a16-8691-5350aafbc6e7",
        "cursor": {
          "ref": "ba063572-5baa-48a9-90f6-13bb8a1c5410",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff0122d6-abc3-4bf7-b3b2-8146a0151b2b"
        },
        "item": {
          "id": "9c6fa450-1e3c-4a16-8691-5350aafbc6e7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "06a8db58-f9ba-41c8-aa71-b0055b229fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905ec96d-4daa-4543-80b2-518ee18a997f",
        "cursor": {
          "ref": "602bfaa7-0e6f-4aee-af59-5d4fcfa50b86",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9724e378-6a0c-491b-aea1-bd19380990c3"
        },
        "item": {
          "id": "905ec96d-4daa-4543-80b2-518ee18a997f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "887214ac-e986-486f-a1ae-17a1b5cd98b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae8dbe6-78c8-4ad2-a545-bdd86297abd2",
        "cursor": {
          "ref": "51c0e719-7b2c-49ae-9832-f94fbfe01b16",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8e667f18-88f4-4dda-a59b-e88ba82f0aa6"
        },
        "item": {
          "id": "5ae8dbe6-78c8-4ad2-a545-bdd86297abd2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c2fd50b2-6ba0-47dc-b50f-26044d0d8ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2066546-bc5f-4319-adc2-80ded96c890d",
        "cursor": {
          "ref": "97d974c2-148b-46aa-b782-696e93c29781",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6d0cfda8-e76c-4d49-927f-89d07fdb436c"
        },
        "item": {
          "id": "a2066546-bc5f-4319-adc2-80ded96c890d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2b4d7dfe-435a-4eee-95b9-dd0770494d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d37ad-6392-4954-8212-980cec588f66",
        "cursor": {
          "ref": "2acc8b4a-832e-4da9-aedc-b7d390b7f334",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4373ffd8-bd02-479e-826c-d2026b1efd1f"
        },
        "item": {
          "id": "af8d37ad-6392-4954-8212-980cec588f66",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d78e19db-6011-48d8-9981-c90715aa6704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22b3f52-291a-4d6a-afc9-d842929a2fc5",
        "cursor": {
          "ref": "b23b5c4d-2c44-424f-9686-90a2cc2bc4c4",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1a3796b9-b8f9-47be-91f7-263f0acacf52"
        },
        "item": {
          "id": "b22b3f52-291a-4d6a-afc9-d842929a2fc5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "82f3c229-4324-4acf-a5e5-cc405c12b0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9594e1-9ca5-4cf4-80bb-3f0d86cb5da1",
        "cursor": {
          "ref": "663e50c0-51ce-4187-b58a-3d7f0a8c043a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7cd83932-62ca-4339-a2c4-7d003326daa2"
        },
        "item": {
          "id": "eb9594e1-9ca5-4cf4-80bb-3f0d86cb5da1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "acee7392-b83c-4734-a6ab-7e881e5f34ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25986656-0011-4e8e-8625-22463dcf2130",
        "cursor": {
          "ref": "06a5f10a-a158-4bf1-b5a6-0f3ccc699a51",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8ce2da30-1b08-4b14-b7ef-9773217f2c10"
        },
        "item": {
          "id": "25986656-0011-4e8e-8625-22463dcf2130",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f263472e-69e7-4a60-9803-93cd0d8e5fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfed484-18b6-4545-ae3c-612b8046d2ce",
        "cursor": {
          "ref": "718ecb44-bfb3-4d38-8ae9-c7627f477bb0",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a78fb33c-7591-4698-a08a-1bb4e5c2986a"
        },
        "item": {
          "id": "ddfed484-18b6-4545-ae3c-612b8046d2ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a77a9d4d-b25f-4909-86b8-dcadf2f9181a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c361501-e34e-4fe4-8ce8-e9a486d96233",
        "cursor": {
          "ref": "a19ef691-2bd5-4956-ac20-ff1736fe14d9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "060b3b2b-6bdb-44f5-b766-e6701550b693"
        },
        "item": {
          "id": "9c361501-e34e-4fe4-8ce8-e9a486d96233",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5c62ed3b-3789-4931-bce8-5fef5907d2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae97095-b503-4656-b6b6-34f0975a2739",
        "cursor": {
          "ref": "a75445b3-ba80-456b-b24a-fcbcf2c2d05b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4c242c19-8e94-45f0-9653-5ccf8120cd29"
        },
        "item": {
          "id": "6ae97095-b503-4656-b6b6-34f0975a2739",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aff2a10c-61b7-45bd-a741-9fbcba027289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fd47ea-810f-4a9f-bca5-5007db41909e",
        "cursor": {
          "ref": "6ded6156-c0d4-40f6-ab3e-d0f8790c08d1",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b97c5a6c-f714-4637-a45a-b127b117d848"
        },
        "item": {
          "id": "a2fd47ea-810f-4a9f-bca5-5007db41909e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d4bc4acd-ba14-4065-ac9a-71c99bb4d38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a44a20e-9231-4a87-8db9-3d99c08746c3",
        "cursor": {
          "ref": "a6aa53b1-aff7-4715-9431-9a3d919432a9",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7b6178e8-666a-48d8-9749-62fa54d7ceba"
        },
        "item": {
          "id": "9a44a20e-9231-4a87-8db9-3d99c08746c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "924fd17a-f562-484e-aa21-fa93cf5b7259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a43058-5dd2-46bb-b07b-4352459e088b",
        "cursor": {
          "ref": "58f2a8bf-2e71-495b-9527-b372fd085820",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "47f31db3-4d16-4c3f-a70e-bf06ecd15374"
        },
        "item": {
          "id": "f9a43058-5dd2-46bb-b07b-4352459e088b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "731270d3-29ac-4153-9f5a-f60ca450f44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fd2e8b-108f-4852-a6fe-6a9b30cfb2d2",
        "cursor": {
          "ref": "6cb39915-6096-4a0b-9604-06d6c7777c86",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "67e27748-2bab-462e-8f4d-2849777182f7"
        },
        "item": {
          "id": "c6fd2e8b-108f-4852-a6fe-6a9b30cfb2d2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a4de5ce9-1437-429e-8ccc-246db15ab031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f560c4-1632-48b2-903b-7de1b1fb18a6",
        "cursor": {
          "ref": "4212eba4-b838-4949-b8a5-8b339286eb86",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bdef720b-c9c3-4ee6-8ed7-7523094ab49e"
        },
        "item": {
          "id": "62f560c4-1632-48b2-903b-7de1b1fb18a6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4cc366cd-e8d7-480b-ba01-a27b803342f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed649f1-3404-488c-9feb-504859309626",
        "cursor": {
          "ref": "1004002c-6ba5-4a3c-9860-e20d5259fd03",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c3789271-e4d0-4947-9531-13d773f2ba5a"
        },
        "item": {
          "id": "4ed649f1-3404-488c-9feb-504859309626",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d47b3ecc-02f1-483c-92de-7d187241b778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba135cd0-3390-4328-add4-135618e82197",
        "cursor": {
          "ref": "dec4b0be-f76a-4158-a057-852f979b8841",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cdc1c2db-e0fa-4b1d-9169-910a9cefa403"
        },
        "item": {
          "id": "ba135cd0-3390-4328-add4-135618e82197",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "57696735-03ab-49f0-9e48-f813adb0bd90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44c8fd0-35fd-4f1d-8eee-3520fa32d4c3",
        "cursor": {
          "ref": "18976cf7-6796-4101-95ec-7fd4a1147184",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3a09ba33-006c-40fd-bcd6-9886a26da4c9"
        },
        "item": {
          "id": "c44c8fd0-35fd-4f1d-8eee-3520fa32d4c3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "dd5806b1-9988-4b3f-9771-76687872a1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76e4e2e-3712-4832-abb6-1c5a545d2658",
        "cursor": {
          "ref": "a5ad3153-6c75-4a16-bd90-88b977a41ccc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3f779439-49d2-49b6-bc1e-b73b47ac800d"
        },
        "item": {
          "id": "a76e4e2e-3712-4832-abb6-1c5a545d2658",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ada62c69-5eb1-4498-82a5-465cc63f0ec7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57272dfb-f045-4c7a-9eb1-8122424e32ec",
        "cursor": {
          "ref": "d0beb325-7570-4002-9ad6-f0075643e4f6",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "82881bed-31a7-471d-8b06-fdbfb74fbaac"
        },
        "item": {
          "id": "57272dfb-f045-4c7a-9eb1-8122424e32ec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7a5c4b89-a154-4ce9-9c52-25c320a420e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ed7c6d-2780-4c0e-b1cf-1e41f8903a48",
        "cursor": {
          "ref": "8dde1d11-45df-457b-b48d-11b235c7709e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "17ed25a4-0959-431a-928b-6a08cc70891d"
        },
        "item": {
          "id": "10ed7c6d-2780-4c0e-b1cf-1e41f8903a48",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4ab7bd56-fbea-40f7-851d-218e3331f7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f034ecaf-b33e-4710-bfde-90b5956febf6",
        "cursor": {
          "ref": "dba4c0d8-42ab-48bf-8819-59dc4ed223ba",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cecc3550-2a9c-4450-be3c-fad21d7112f1"
        },
        "item": {
          "id": "f034ecaf-b33e-4710-bfde-90b5956febf6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6b8af4d3-d901-4984-8be4-207c00644e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f3387a-9a45-4671-a13b-4b559c005785",
        "cursor": {
          "ref": "7705bde1-7f91-4bfc-98c2-fc86f7b24514",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7c631eb8-150c-4d58-a99b-02cfb9e1d95b"
        },
        "item": {
          "id": "a0f3387a-9a45-4671-a13b-4b559c005785",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "83e9dade-0f79-4186-91e7-e8ac869d2ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be2be4d-17bf-4a81-ae68-94f5af6ff449",
        "cursor": {
          "ref": "57a41a6e-ec68-46ff-9149-672b94229636",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a74ab78e-3152-498a-9659-22d544e70ef8"
        },
        "item": {
          "id": "2be2be4d-17bf-4a81-ae68-94f5af6ff449",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "18bde356-1cd4-4d89-9ec5-59ee38974031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e97b92-e5ab-446f-8054-d076a3e99909",
        "cursor": {
          "ref": "8aa7c330-9ff3-405d-9b41-41741f870140",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "de6d24f2-ff93-4957-b6c2-c4dcf4d477f5"
        },
        "item": {
          "id": "45e97b92-e5ab-446f-8054-d076a3e99909",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "47fc2a95-34b1-4e0c-8b90-c8a89e04ba20",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2f053c51-5193-4618-81cf-eefd31179a10",
        "cursor": {
          "ref": "815dea69-d3d2-4571-ae03-2e76e9726011",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d4003f28-1e0f-4bb5-9b06-529e2f923689"
        },
        "item": {
          "id": "2f053c51-5193-4618-81cf-eefd31179a10",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2910307e-b44a-4012-b44c-8099e3c14c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1361e0e3-f34f-4fb8-b4aa-0d5fb512906b",
        "cursor": {
          "ref": "53fe576f-cc25-41cf-9cbe-0dc0e636449c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a3a84d4f-39fb-4d99-9440-b0c9bfbbe3ba"
        },
        "item": {
          "id": "1361e0e3-f34f-4fb8-b4aa-0d5fb512906b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ff5102cb-8039-4306-83e9-5f3d48c80d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90f187b-3729-46fd-9cca-6db9a3a3d547",
        "cursor": {
          "ref": "120522eb-735e-4ead-89bb-5f267269f14a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "28dfdd09-d157-464c-b794-ed790543cb45"
        },
        "item": {
          "id": "e90f187b-3729-46fd-9cca-6db9a3a3d547",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1f41dbef-e1fd-4c97-a1cc-7fbe9c9b1d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babfb81a-8c32-4260-a9f4-026038a9e6dc",
        "cursor": {
          "ref": "aef3f5be-e537-4333-a222-101d735c2f96",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a74b9d1b-22c1-406a-b7bf-e444b20a1270"
        },
        "item": {
          "id": "babfb81a-8c32-4260-a9f4-026038a9e6dc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6265c053-7425-4a38-bb9f-86eb9383ddb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b422a5a9-33e1-4122-b2ef-5d8369b146ce",
        "cursor": {
          "ref": "3732b0e2-0e35-42ca-a2e2-951f5d03c15c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bd3f2cd1-fe53-4282-a4ad-98cc8d47d84a"
        },
        "item": {
          "id": "b422a5a9-33e1-4122-b2ef-5d8369b146ce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9b0ab53a-460f-4ed4-bf34-d39c39ef04f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b8703d-be72-4e4e-9363-a941b10903f6",
        "cursor": {
          "ref": "b3a90aca-b37a-4c74-b1ae-0862dc5cb17a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9fc2de87-d68e-4f5f-8947-eb73578a112c"
        },
        "item": {
          "id": "98b8703d-be72-4e4e-9363-a941b10903f6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "02afcfa2-1598-4483-ac42-db8a56f01b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64983b96-03d7-4c3d-9f17-39d6197245cd",
        "cursor": {
          "ref": "c6a15b10-76d6-4301-ba1f-7cef33bfe069",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "46c6faa4-23bc-42a2-ba30-1a41d7560da2"
        },
        "item": {
          "id": "64983b96-03d7-4c3d-9f17-39d6197245cd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "667e202b-7776-4918-9cfd-76adeb27323d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83d68ea-9208-4077-9f76-192f661d409c",
        "cursor": {
          "ref": "d2e9a109-add2-4310-9cba-30357b745d5c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "19d94e1b-30ca-49f6-b85d-c68622f68560"
        },
        "item": {
          "id": "b83d68ea-9208-4077-9f76-192f661d409c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "95f88be7-375d-4b12-8008-9d822a8337a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19304bf8-02e0-4004-828d-858dbeea114c",
        "cursor": {
          "ref": "18da5f48-2612-4207-9451-30d838475160",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0ce4aaef-81af-4136-9362-f1802a73d08d"
        },
        "item": {
          "id": "19304bf8-02e0-4004-828d-858dbeea114c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "40e24ed6-61f6-4e7b-9d00-d65339a6b45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563e74bf-a257-4dc0-a221-a2d163490685",
        "cursor": {
          "ref": "8fc45542-ba25-4fc1-aa0c-28afeaddd3dc",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "63993b95-31bf-4bbb-b35b-ae0f2ac92cd7"
        },
        "item": {
          "id": "563e74bf-a257-4dc0-a221-a2d163490685",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ec3dbed1-c38a-4ce9-9c26-5d3a2ec79bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25e4f5f-d11d-4957-83da-d8fce934603f",
        "cursor": {
          "ref": "cd188ea0-7d67-4cfe-b353-921a968854f7",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9a28b7b4-2bf9-4078-9cda-19c18fe273d5"
        },
        "item": {
          "id": "f25e4f5f-d11d-4957-83da-d8fce934603f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b4cf0412-2825-438e-b18c-384c9379c429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a689e993-e7ad-41d4-b6c4-36767df6ea87",
        "cursor": {
          "ref": "90eaa2bf-9280-406f-8ea0-90498aee5162",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1643ec9b-81f5-4113-a12f-06f92a02377a"
        },
        "item": {
          "id": "a689e993-e7ad-41d4-b6c4-36767df6ea87",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fca43d1d-8749-4043-8372-c8aff67bdeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b24e66-90ef-46e3-8dc8-5ba522a1d70b",
        "cursor": {
          "ref": "1cec68cb-fe71-40a1-801b-de18847061a7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3718bc21-2c00-4dc5-942e-06f117cbfa29"
        },
        "item": {
          "id": "a4b24e66-90ef-46e3-8dc8-5ba522a1d70b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "00d5cbc3-976f-4159-be08-d2eb0a2ec150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cda30d3-aa38-4153-a058-ae5cf504d3fb",
        "cursor": {
          "ref": "64a96d01-2f56-4521-b360-130a7d6963ff",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "28565d60-ee08-4dc1-871e-c2b6decaf1b2"
        },
        "item": {
          "id": "4cda30d3-aa38-4153-a058-ae5cf504d3fb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1441c5b9-53c3-4cd5-98b9-e2b33b10106d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c7e7e2-92df-4422-95e9-94abc56690b3",
        "cursor": {
          "ref": "9189b290-afc3-4716-b296-c2beb2d11281",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "84b7371a-726f-4884-8b23-dc5a277e675f"
        },
        "item": {
          "id": "b3c7e7e2-92df-4422-95e9-94abc56690b3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "eb15bb1b-5721-4478-8d04-25966158ce6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b82145a-f51e-42d4-a659-0b1b08a25362",
        "cursor": {
          "ref": "7b196e5d-c187-4fb1-93a9-25dfd1c0ff20",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "92d3cb16-c5fb-489d-8732-8c90ccfc8e79"
        },
        "item": {
          "id": "9b82145a-f51e-42d4-a659-0b1b08a25362",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cd1695b5-b3c8-4ca8-b82f-18aad9dbf8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a67251-9e12-455b-8006-a8be6d67cdfa",
        "cursor": {
          "ref": "2d31b915-dc4a-45dd-9414-d5ef0183c593",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1a6bea8d-9033-4663-a905-41de0129759d"
        },
        "item": {
          "id": "41a67251-9e12-455b-8006-a8be6d67cdfa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4e8bc508-781d-471d-a11e-18fc0184580c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dd718a-83be-4af8-abec-8fb6f1b0ef6d",
        "cursor": {
          "ref": "000592e1-4ff4-4979-abfc-5cadbfc4256d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "db577e83-c7f2-4ae7-9308-53b92254f568"
        },
        "item": {
          "id": "d9dd718a-83be-4af8-abec-8fb6f1b0ef6d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c2091a3c-cec6-46c0-9a49-a9b454eb1052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f166228-e979-4a05-a8b1-66fa2c00ce4d",
        "cursor": {
          "ref": "86b0174d-3ce6-4ce9-81db-f3d54ec5b9eb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e1bcf92f-bb52-4d71-bf81-4595cf2ccf67"
        },
        "item": {
          "id": "6f166228-e979-4a05-a8b1-66fa2c00ce4d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "482ea1a3-22ba-4ea8-bc06-641071e70dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f80b73-acc7-4e92-99c5-606f286a3716",
        "cursor": {
          "ref": "f34a915b-b608-4e50-b985-ff5de4aeea2c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4fb21577-ec75-46e3-9d3d-740fd591f151"
        },
        "item": {
          "id": "e3f80b73-acc7-4e92-99c5-606f286a3716",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ffa5fcb7-19f5-480a-a867-92583e8ec3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca652aeb-6856-469e-9902-b59a5e7401fc",
        "cursor": {
          "ref": "040bce08-f3a2-465a-9176-06f9d8d0f50a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b64c4ef9-79e2-421b-9632-ea4da28a95b2"
        },
        "item": {
          "id": "ca652aeb-6856-469e-9902-b59a5e7401fc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "873d15b8-9028-4d4b-9043-6c6978615b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd75c31-fc38-43c1-8542-de125e7d3a36",
        "cursor": {
          "ref": "7418b6dc-5110-4c81-ba5d-0eea18fe89be",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ab910ece-53ae-44c4-9e7c-b69031e85737"
        },
        "item": {
          "id": "6dd75c31-fc38-43c1-8542-de125e7d3a36",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "163ca9d4-6abe-4645-9f9c-5d5c9944ac14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37415aa-46c7-497a-8165-a1d5d027e2d4",
        "cursor": {
          "ref": "95951375-fde2-410d-80a6-3c60f3109685",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bbac81ff-c7d7-40a6-ac3d-88c243697dc4"
        },
        "item": {
          "id": "d37415aa-46c7-497a-8165-a1d5d027e2d4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cda4c7c4-c52e-496d-bbf2-ae1de928e016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebad38de-9e57-49ad-b29d-7b6bfb5b6948",
        "cursor": {
          "ref": "cb6cad7c-adda-418b-9fef-9d7665027180",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0c17c05c-82f7-416f-b46b-9ca1b5dde596"
        },
        "item": {
          "id": "ebad38de-9e57-49ad-b29d-7b6bfb5b6948",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "56cb2f80-e389-4c64-84eb-6cceaad4ae81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6ee8ed-fe83-4cfd-8807-58a20ea44dab",
        "cursor": {
          "ref": "691ec3e7-0d38-42bb-800f-a1eb2b2a6121",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "09b4495b-d46f-4b99-99fd-9f0fd0330d7f"
        },
        "item": {
          "id": "eb6ee8ed-fe83-4cfd-8807-58a20ea44dab",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c0384224-6c40-4509-b956-e0a8d93669a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6944f9b-5f50-40e1-8804-cd6f85caa237",
        "cursor": {
          "ref": "3c1d979b-62a7-48d2-887a-85ee98977713",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "39943b46-e095-4dab-8f33-a5286f1b4822"
        },
        "item": {
          "id": "e6944f9b-5f50-40e1-8804-cd6f85caa237",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c56d64ba-48e1-4e96-8dca-f1cd1f056a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cba09e4-48f9-476a-9f0d-40d1e05337b1",
        "cursor": {
          "ref": "0f6de895-6a75-48ed-9a66-0a545763661f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0fa26c97-980e-4241-a564-9141cc95af43"
        },
        "item": {
          "id": "2cba09e4-48f9-476a-9f0d-40d1e05337b1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f8cb72bd-8d32-4c3e-a079-631ae23f9fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734e3604-c328-4d53-929c-d828068ec3aa",
        "cursor": {
          "ref": "783e1783-1404-46cc-8c66-ae5b105ad677",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "803785af-4120-4f34-b03e-00f742594cc2"
        },
        "item": {
          "id": "734e3604-c328-4d53-929c-d828068ec3aa",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d057495f-e208-48cf-9d03-7e2b0979dcce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013b9946-bbfc-49f0-8484-b84cf3e365d6",
        "cursor": {
          "ref": "8578b299-6f14-40af-b520-6928c9f48561",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b5566a62-6d54-4c0b-9416-927c7538e462"
        },
        "item": {
          "id": "013b9946-bbfc-49f0-8484-b84cf3e365d6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6188e9fc-6327-4139-ad91-8559913adcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358bf2cf-28ad-4f48-8eb5-649c7d7bc7b9",
        "cursor": {
          "ref": "ac2cf90f-f1bf-44f8-81a6-6955a9d98f31",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "47aec2af-a4f3-4cbd-aa99-31daa425f7b6"
        },
        "item": {
          "id": "358bf2cf-28ad-4f48-8eb5-649c7d7bc7b9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2b949795-535d-410c-b251-306fb22e5b35",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "56e9cdee-613d-4f22-8e2c-74d67d50b1fa",
        "cursor": {
          "ref": "3945f70b-976e-41e6-bfe8-0ddff27f8db9",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c71e0e3d-e9b8-43a9-9bca-971b308be6c3"
        },
        "item": {
          "id": "56e9cdee-613d-4f22-8e2c-74d67d50b1fa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0184bece-1e77-4aca-83bb-5b963a1ebbfd",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e8e20e85-c86f-446c-9412-94bcf6ff6e38",
        "cursor": {
          "ref": "ca787b50-ddaa-4935-8344-c5a87fb0bb4b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3d04135a-94b9-4e38-84a5-c42bed2987d1"
        },
        "item": {
          "id": "e8e20e85-c86f-446c-9412-94bcf6ff6e38",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fab7ef07-811b-4f9e-ab21-ece4956ac9e7",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "62af0708-517b-4af6-b13c-df11d80b13bc",
        "cursor": {
          "ref": "328971fb-38cc-4525-bb94-65c9501625fb",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b72e112b-1bd4-47fa-ae0a-3267dd4a888b"
        },
        "item": {
          "id": "62af0708-517b-4af6-b13c-df11d80b13bc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "27f1f0cf-2390-48d4-b2e9-49f956b8ed83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb8f62f-4586-4a49-978d-0fed9eaccc0c",
        "cursor": {
          "ref": "0e91fce3-ca61-406c-9a40-5cdb8363b2d1",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "289a64d1-81ee-42b4-9f50-43870b374ffc"
        },
        "item": {
          "id": "aeb8f62f-4586-4a49-978d-0fed9eaccc0c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ec6eefbf-69e5-4e76-a53a-3f3b39f3f650",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8ee09a61-b066-4fff-8af5-6ca5799e562b",
        "cursor": {
          "ref": "5a0e26ec-5702-4ad6-a700-5da04d085a41",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a899a2bb-d10c-4072-978d-2be2dbbe7456"
        },
        "item": {
          "id": "8ee09a61-b066-4fff-8af5-6ca5799e562b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "42a2bdb3-c55f-446a-b6e0-8d34320d9e88",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "872d5ce2-0977-4c9a-92f3-0215dcc4a3e6",
        "cursor": {
          "ref": "f5a95855-d0e4-413e-8944-30585ac96ac2",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b9dfec84-7071-40d5-b948-105189cc3a18"
        },
        "item": {
          "id": "872d5ce2-0977-4c9a-92f3-0215dcc4a3e6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "87951f75-2be8-41f8-b84f-4331730134ff",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9a5508ac-52ca-4f0d-aaca-8b8fac1ed25f",
        "cursor": {
          "ref": "a540fab3-b289-44be-905c-305c5f113ab4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f1a4dc65-7245-48c0-b6d8-bb6f2a21aed5"
        },
        "item": {
          "id": "9a5508ac-52ca-4f0d-aaca-8b8fac1ed25f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6414ebe6-26d9-4473-9219-394c2ecb044e",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "74e83b8a-e984-406c-8f9d-089ea22a8fb2",
        "cursor": {
          "ref": "16dcce2b-8268-43a6-b6d9-23fec838475f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "84824bba-16ef-4281-a0e3-225fd0ffadac"
        },
        "item": {
          "id": "74e83b8a-e984-406c-8f9d-089ea22a8fb2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "67b6d2bd-da34-462d-81aa-72d0f49878b4",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6f0cf18a-b4aa-4f77-8269-92bd662f67c1",
        "cursor": {
          "ref": "d093a515-2612-4992-b931-799c8e4107eb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f02b7fb4-73e6-41d3-aacc-771b11c99435"
        },
        "item": {
          "id": "6f0cf18a-b4aa-4f77-8269-92bd662f67c1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f0241938-e457-4af7-9e00-a030aa240e71",
          "status": "OK",
          "code": 200,
          "responseTime": 336,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ae53d583-e8de-495c-a310-0dcd36f04cd1",
        "cursor": {
          "ref": "e322d7fd-107e-4528-ab00-94dfa48b2883",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "516609e6-0aac-49e6-a770-f3e696490b81"
        },
        "item": {
          "id": "ae53d583-e8de-495c-a310-0dcd36f04cd1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad66f2e4-07b0-4dc5-bdaf-5cf44872fef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c064450-bec7-460b-b65f-c772f14d500a",
        "cursor": {
          "ref": "ac552fde-921a-46a2-bb3b-3488af844666",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a32855dc-2966-43e4-8350-81f302adc51a"
        },
        "item": {
          "id": "0c064450-bec7-460b-b65f-c772f14d500a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f73cb2cc-3f4f-40ea-8dc2-9698fb5b5f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a396515-1ac1-4524-840d-6633d4131f91",
        "cursor": {
          "ref": "34c6792f-5caf-4760-ac9f-46ff1f0aa121",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1505c857-c076-4708-aa93-06c52d116e14"
        },
        "item": {
          "id": "2a396515-1ac1-4524-840d-6633d4131f91",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "05b3d2e7-18b4-4e74-8ced-ee1ee48a2e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d940ee-8078-4c12-b200-c6bc2a75270e",
        "cursor": {
          "ref": "a16ba2aa-cd8e-4967-8da6-2637b8abdd32",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d2f311ba-7441-47f2-821a-5a30fc1ca926"
        },
        "item": {
          "id": "d3d940ee-8078-4c12-b200-c6bc2a75270e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a1e89fed-372b-452d-a2a9-5901bcc28037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65fe76c-0d53-42d0-9e3c-b9300fd165f4",
        "cursor": {
          "ref": "be26242e-3979-464f-ae0e-c705c46ddc15",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9cf60e7e-851e-4501-9fc8-0bc6ee2579f0"
        },
        "item": {
          "id": "d65fe76c-0d53-42d0-9e3c-b9300fd165f4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7769ea2b-1e41-494d-83d2-20a6e2862d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afb78d5-a7d0-4af9-a5d5-7d10d11ab122",
        "cursor": {
          "ref": "60da4b52-e4fa-4f3e-91f1-7a4df9345050",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5ceaaa73-493a-4c29-ae7b-2800f9a32bb4"
        },
        "item": {
          "id": "9afb78d5-a7d0-4af9-a5d5-7d10d11ab122",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4967bdaf-0564-488c-b92b-2fb42d0fba51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ea09c-ee73-4750-8f87-4c4000bbf6cf",
        "cursor": {
          "ref": "f0da51fa-0e85-4712-be7c-89a629d5e68c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1cfb062f-2d0a-4c49-b898-4999a98f86f7"
        },
        "item": {
          "id": "089ea09c-ee73-4750-8f87-4c4000bbf6cf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed8f99a9-eaaf-441f-8354-5dcbd6298623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c850dac-3b4e-41f8-b73a-76d30b401f93",
        "cursor": {
          "ref": "e9fc368e-994b-45cc-95ae-d3ac0a8d998c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdd2cbf8-c728-4833-8804-c9104cc18659"
        },
        "item": {
          "id": "4c850dac-3b4e-41f8-b73a-76d30b401f93",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ce68e63-70ab-422a-ab68-d8841aa838fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26df00a0-4ab3-4379-b640-1095f51a254d",
        "cursor": {
          "ref": "def7b4cd-16cc-4ac9-9138-a98878f34eaf",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e490bd98-74a8-4764-a211-439600ac71de"
        },
        "item": {
          "id": "26df00a0-4ab3-4379-b640-1095f51a254d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c4a8093e-85d9-4201-9bf3-f992c7c49940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89506106-1a15-4341-ac1c-a921a9fa1fed",
        "cursor": {
          "ref": "453ac63f-1f30-4f3c-8257-9b45553cf2d9",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4c14606e-cd32-4fa8-8940-96b55f13651f"
        },
        "item": {
          "id": "89506106-1a15-4341-ac1c-a921a9fa1fed",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2f270d70-2518-40dc-a927-daf73f65e5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594cfd0c-0d96-47d6-8760-064d0cd252a5",
        "cursor": {
          "ref": "07dc5215-1929-4457-ba31-0e25430b312b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9b12367b-c1c3-4f26-a7af-ab3b3ab404ab"
        },
        "item": {
          "id": "594cfd0c-0d96-47d6-8760-064d0cd252a5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "011c303c-289e-4192-9bc8-5f1c96a1eef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09865bf4-b6ff-492a-9a30-28df23ac0796",
        "cursor": {
          "ref": "4c5b9a56-79d5-443f-80b2-fef5820477dc",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a47f1e80-faae-472d-8831-3d6ccbcbebb7"
        },
        "item": {
          "id": "09865bf4-b6ff-492a-9a30-28df23ac0796",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9b5e3b37-5737-41d6-9816-dafc03d5ceeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b4a85b-5385-42c6-932b-9f13467ad52f",
        "cursor": {
          "ref": "76a7ced8-a495-4c02-81af-22c0a2131cdd",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b2d49c3-9b9a-490c-892b-ac955d0c0ef7"
        },
        "item": {
          "id": "d6b4a85b-5385-42c6-932b-9f13467ad52f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ae9ca877-8cc8-4875-87b1-44a88ac51391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb58146-1414-4502-bff4-666225cc2a21",
        "cursor": {
          "ref": "520026cb-5d5a-4163-adff-4a9e652d6bae",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "65cefcce-8cb2-4136-9885-534f42bc062e"
        },
        "item": {
          "id": "aeb58146-1414-4502-bff4-666225cc2a21",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "33091cfd-db65-463c-997d-9feb5edc672d",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9ed69374-9571-481b-b8ea-1a0b04e077b4",
        "cursor": {
          "ref": "3592bcbf-6d14-45ba-9f53-4ab62e6627ed",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "90bf9849-988b-42a1-beac-490f11575e9e"
        },
        "item": {
          "id": "9ed69374-9571-481b-b8ea-1a0b04e077b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "86379006-1a08-413d-ad57-fd6d02214934",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "34292bab-8d41-4bb5-80dc-b3ec3d0ddc27",
        "cursor": {
          "ref": "628c5b3e-f17a-49d1-8b30-0cff180d25cd",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c235b7bb-58b4-4b74-9ef2-8686af4e3d75"
        },
        "item": {
          "id": "34292bab-8d41-4bb5-80dc-b3ec3d0ddc27",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "11b98fab-7905-4ecc-8b25-b654f8dab86a",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f82bec7c-7218-4919-9944-d24398c71440",
        "cursor": {
          "ref": "3169327f-f752-4e6c-9e61-e4399773d4a5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4a307ae5-01e7-4ac9-ae12-188937643d1b"
        },
        "item": {
          "id": "f82bec7c-7218-4919-9944-d24398c71440",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0c43675b-8cb0-4eec-a797-e5ac4062b617",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "05062619-c72f-47c3-9f6b-2d0a578c0715",
        "cursor": {
          "ref": "24fc6ca7-d302-4004-9e3c-426e8d1e91ae",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f2c4d5d3-251d-4cf4-aece-cc50094e7fdf"
        },
        "item": {
          "id": "05062619-c72f-47c3-9f6b-2d0a578c0715",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4b92721c-7d09-4e28-b1e5-e89ad88f5860",
          "status": "OK",
          "code": 200,
          "responseTime": 494,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d6c346c2-3aaf-4f32-a632-ec52fc2edf53",
        "cursor": {
          "ref": "74fd85dc-e431-4e83-9665-36869ff985dc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7af68bb8-ab4c-45e1-a106-2ae8fc22c441"
        },
        "item": {
          "id": "d6c346c2-3aaf-4f32-a632-ec52fc2edf53",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "655b6366-3822-47ea-a5ac-a52a2d373946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4034ccff-105e-4ea0-ae14-c5f9064ba8c2",
        "cursor": {
          "ref": "b2bd2cf3-f2a1-4b48-999f-d6c08ac1142b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "51e8fdfd-22f0-4ada-9856-c659bf945103"
        },
        "item": {
          "id": "4034ccff-105e-4ea0-ae14-c5f9064ba8c2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "08212ab9-2772-4cc1-877b-4f980987ec8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cbb795-d7fd-499e-ab0f-f66c546bef7a",
        "cursor": {
          "ref": "9417fc14-21c3-4d8c-96d0-7b58542a3c6b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "52ba6c15-e0d7-414b-bdea-6e20b9aeee88"
        },
        "item": {
          "id": "77cbb795-d7fd-499e-ab0f-f66c546bef7a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a2eee5f-41b2-45df-9ef8-6e6ddca73e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0aa6b58-896e-4d0e-904d-389bc2454ad4",
        "cursor": {
          "ref": "28066bcc-54ce-4e48-8b63-fd01092cd931",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "21de5874-18ac-46ed-a3f5-d295835fafa7"
        },
        "item": {
          "id": "d0aa6b58-896e-4d0e-904d-389bc2454ad4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "58eb2bbb-a6f4-4ce5-b0ba-2995faa0d8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae517701-df9c-49a1-bee7-ea79304a0c88",
        "cursor": {
          "ref": "345dab9e-2848-4637-9e29-6cd5cd078f16",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "05be25dd-c328-4e6f-9189-2a2f8994dc1b"
        },
        "item": {
          "id": "ae517701-df9c-49a1-bee7-ea79304a0c88",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "98e5d774-2d31-40f3-9dae-512b49d01465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d06f72-9aee-436d-ba24-045fb20c0a57",
        "cursor": {
          "ref": "ed50af72-96fe-47fe-a1b6-fecce57a05a2",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "31c9dc4e-2548-40ed-bf5e-b451a1f75364"
        },
        "item": {
          "id": "64d06f72-9aee-436d-ba24-045fb20c0a57",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8516ea7a-dcf7-4bee-a3db-04d82df1ca37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6758b16-a3a6-4792-8359-75151a1e1d4b",
        "cursor": {
          "ref": "7a3203da-0bbe-46c2-aef1-393145ded2d7",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f5be1717-b06a-44a2-b35c-0b07a269c1bb"
        },
        "item": {
          "id": "c6758b16-a3a6-4792-8359-75151a1e1d4b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5dd1bc22-1446-4c8b-9793-b56c076cb3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4e6be1-3cbe-4418-a97f-7a891d0ef347",
        "cursor": {
          "ref": "d6530eac-ebf6-45e2-bae4-8f24ebc17717",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7a7ccad9-c163-40cb-b75c-084f0f3e72c4"
        },
        "item": {
          "id": "3b4e6be1-3cbe-4418-a97f-7a891d0ef347",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cacf689d-3434-4a59-aba2-11ca7fa9a4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6805de-b2d3-4c21-b512-c9190b49810c",
        "cursor": {
          "ref": "eeed26a1-6089-4e13-a32e-6b7b88d46b71",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e4407af8-d795-4995-8cb6-5c2c290599d0"
        },
        "item": {
          "id": "8a6805de-b2d3-4c21-b512-c9190b49810c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "54065a25-9f71-41f8-8651-4677ed8675c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1bdbae-eb84-4cbe-8226-85783d537b22",
        "cursor": {
          "ref": "6ad2011f-5135-4e58-b483-20fcb270def3",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd50578c-91e5-47ba-8964-fbe11c0e4a4d"
        },
        "item": {
          "id": "3f1bdbae-eb84-4cbe-8226-85783d537b22",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "336606ec-6014-4eb9-9d3d-66c9aa28152a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42447ddb-0e5c-4440-a6ce-1f9809b86a4f",
        "cursor": {
          "ref": "946a0441-832d-4769-99c8-4558a8bbc4a9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "409fda2e-44a1-48c4-8aeb-5eaa7cc9ad05"
        },
        "item": {
          "id": "42447ddb-0e5c-4440-a6ce-1f9809b86a4f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "583a294e-0c16-48f4-9dee-2e0260b3ae9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c0736e-1b57-4ebe-b476-b8dd67a528f0",
        "cursor": {
          "ref": "f7267a76-6e90-48c1-ade0-0ae828820b69",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f96e83fc-175b-4fd8-ab98-605b2d6ae22d"
        },
        "item": {
          "id": "47c0736e-1b57-4ebe-b476-b8dd67a528f0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "45da2edb-ea9b-4595-a3cc-71b0c35bc9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19099700-1f8f-4c29-9a22-357bd9db4ca5",
        "cursor": {
          "ref": "0429b694-5abf-47b9-bb3b-ab29975883a9",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aee38f8c-9e7d-436f-8c17-ce6bd73dfa67"
        },
        "item": {
          "id": "19099700-1f8f-4c29-9a22-357bd9db4ca5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d51182fb-3018-4256-9fe0-a2ea4cff1553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e020c8e-53cd-42fe-a90f-d1e652ccdda4",
        "cursor": {
          "ref": "95e8b997-db49-40fe-91b0-3d38a3207ebd",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "87c87949-170f-4ace-8e1b-a85c252da6e4"
        },
        "item": {
          "id": "9e020c8e-53cd-42fe-a90f-d1e652ccdda4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bfbe58b7-7e38-447d-bf62-e83d4cd54f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7819afad-a6a5-40a6-b13b-2926c0f418bd",
        "cursor": {
          "ref": "60d84db6-b2ed-46d8-b519-1d8e3e167ad4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "81e52b96-b332-436f-bfa6-ccb59dbe9864"
        },
        "item": {
          "id": "7819afad-a6a5-40a6-b13b-2926c0f418bd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ad072c3f-7f22-42c4-a1a1-348bfeed5f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc79186-c774-46fe-b331-93f5cc94d0da",
        "cursor": {
          "ref": "16ec446f-b925-4e6c-a90c-9a472b5ce33f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "05246b74-7e29-44f4-9d29-bbae66df4bd6"
        },
        "item": {
          "id": "ccc79186-c774-46fe-b331-93f5cc94d0da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b2324915-402e-4736-bb40-2b4553235be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c9dffc-10ac-4846-a1ee-879fa7c984c3",
        "cursor": {
          "ref": "28cf467e-307f-49fb-93d2-c3f8a5e4cc0a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ff29f738-6f8a-498a-8ffb-34ae733a215b"
        },
        "item": {
          "id": "01c9dffc-10ac-4846-a1ee-879fa7c984c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4c816bd8-8a8d-4f3d-8820-09d0cba3941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532d3f26-73ee-4586-93e3-abdf6dd1864f",
        "cursor": {
          "ref": "a455e845-6ca5-47a6-ab9d-2d76a7080370",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c932913d-aee0-48e1-8dc5-b5ee5e00fd95"
        },
        "item": {
          "id": "532d3f26-73ee-4586-93e3-abdf6dd1864f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c81fa7b8-40cd-4f83-add5-30b60ec4bca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2988824d-a86e-41cc-8c06-1ba12201cab5",
        "cursor": {
          "ref": "33fb23e2-c8eb-422f-bfe5-e5026237e911",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "adb3a8c6-160e-4573-9c4b-5cd60ef44800"
        },
        "item": {
          "id": "2988824d-a86e-41cc-8c06-1ba12201cab5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "401ec8f7-93b5-43d0-a5fc-0eb9a0a907b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4b5e4e-1fa1-44e2-8ad6-8d5d69fb043a",
        "cursor": {
          "ref": "626ad0c8-baaa-4a4e-b822-6f711bbd2574",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d16c144b-e1c5-4539-8655-407ddccd6d09"
        },
        "item": {
          "id": "8f4b5e4e-1fa1-44e2-8ad6-8d5d69fb043a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5fb132fa-4a20-4716-b51d-001297ee0e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30dcff3-2099-4212-8fd2-b720361a8d34",
        "cursor": {
          "ref": "0f4798f6-c0b3-497e-9950-d827650e466f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ea627a43-ae1c-4593-9637-63af5cf74baa"
        },
        "item": {
          "id": "a30dcff3-2099-4212-8fd2-b720361a8d34",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c445f0a7-57ae-4d90-ad12-92f015103b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65984b6a-726a-4708-ab48-cca4e730ab36",
        "cursor": {
          "ref": "a376fd80-0071-434e-a78f-09b4efcf49f3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a2516f42-2068-487a-b0ec-5761e5bdd08b"
        },
        "item": {
          "id": "65984b6a-726a-4708-ab48-cca4e730ab36",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "11ccf508-45e0-4f2d-9c43-996afa95a4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfa7b89-1cde-41e9-8db2-4177460a66f8",
        "cursor": {
          "ref": "9f82523f-9aa2-47c5-97b6-9567adcded96",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8fb2d7ac-4360-4d2e-a7d5-46bc3bc25738"
        },
        "item": {
          "id": "1cfa7b89-1cde-41e9-8db2-4177460a66f8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ce391ccb-d77e-4476-8536-0a4a596df0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c3f477-02bf-4d71-b66d-1a998a8f40b2",
        "cursor": {
          "ref": "45b55908-73bf-4a50-aa3f-b0c104a09f50",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d9087c12-be4c-4688-8467-891c6f16bf29"
        },
        "item": {
          "id": "88c3f477-02bf-4d71-b66d-1a998a8f40b2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6570a81c-d661-424c-80c6-fc9aeaa50360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60754448-c537-4c47-8345-2fbb73f3a667",
        "cursor": {
          "ref": "57799aa8-9556-4531-a929-c4ceb028f369",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "aa8487cc-9eaa-4677-a837-b7eb05d5f43f"
        },
        "item": {
          "id": "60754448-c537-4c47-8345-2fbb73f3a667",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a18e1c7b-38bd-48f4-b821-f1ab3b448607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d8e308-b76d-4559-aaba-b93644dea1e5",
        "cursor": {
          "ref": "3a380593-33af-4b1f-841c-bc7decb21196",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "389d8962-63be-4060-ad31-b8ab9b122b32"
        },
        "item": {
          "id": "c5d8e308-b76d-4559-aaba-b93644dea1e5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a7b72e23-07a0-49e8-86bf-fefe21e67e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70892e36-3e83-4952-a243-8e96ea750274",
        "cursor": {
          "ref": "ae23c6ae-5180-48da-98c7-be1821d209ba",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a5e160c4-bdf2-4322-9c83-9896fa8df681"
        },
        "item": {
          "id": "70892e36-3e83-4952-a243-8e96ea750274",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2f19cb95-0e35-4e8c-8c21-08c41d7386ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909b9c98-fa44-4352-acc3-84ab4de87efa",
        "cursor": {
          "ref": "83600334-3ceb-4bfa-a75b-e1bc2e544eeb",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ab8a98ca-6a6b-423e-917e-f98fff546452"
        },
        "item": {
          "id": "909b9c98-fa44-4352-acc3-84ab4de87efa",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "91b5c7b5-517c-4fe5-84e6-20c97daf2445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62020e4-1afe-40d1-baeb-0ab90cc8311a",
        "cursor": {
          "ref": "0348aca0-990d-46a7-8f11-8c1a89c90828",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "87ad0722-06c4-405d-8fd7-c20c50ae1d63"
        },
        "item": {
          "id": "b62020e4-1afe-40d1-baeb-0ab90cc8311a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fdbcade8-49fe-488a-b473-4bd94424c058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393e4603-7681-4f7c-891b-7048e3a1bea3",
        "cursor": {
          "ref": "ca3f6066-06a5-4678-9605-c90cfa238962",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e9b58fde-3a05-4f37-b112-22d4eb9728d4"
        },
        "item": {
          "id": "393e4603-7681-4f7c-891b-7048e3a1bea3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d0ed99ff-1603-4695-8844-51e9b6784156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bace68fa-2208-4a18-9f6f-8de1a91c3093",
        "cursor": {
          "ref": "a91c9cdb-9af2-4740-aa26-2045d864ae43",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4daf369a-0251-436b-97ed-35f6f0cfb403"
        },
        "item": {
          "id": "bace68fa-2208-4a18-9f6f-8de1a91c3093",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1d9cdd38-9f93-4489-84d8-4bb62ef029cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320fcb87-3145-4b45-9049-32d7d28d2b75",
        "cursor": {
          "ref": "f55fb032-1395-4fb8-b0bc-5e083202b3b6",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a1c215db-0de5-4c45-942e-ffa494f17290"
        },
        "item": {
          "id": "320fcb87-3145-4b45-9049-32d7d28d2b75",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f908b371-c4ad-4632-a647-4ba32da06bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b66c40-73c8-4c2e-b562-7185693ee091",
        "cursor": {
          "ref": "0e486e51-095e-4017-8cf3-1036001541f8",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f033b6e6-29b3-4692-a50e-f7d783ae1fa5"
        },
        "item": {
          "id": "03b66c40-73c8-4c2e-b562-7185693ee091",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2e076c9c-3a6f-4b3e-9b7e-087bf3427b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2429acf7-ce48-444c-885a-83d50ad976e5",
        "cursor": {
          "ref": "25194ae9-6bf9-4e1e-a73e-6c2b2c57cff2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9281abc9-1352-4ecb-8ece-40883768eb8f"
        },
        "item": {
          "id": "2429acf7-ce48-444c-885a-83d50ad976e5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "11f09ff4-68b1-44d8-b187-98faacde86a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9343ca15-262e-4ec2-ad9a-c402ec163899",
        "cursor": {
          "ref": "c1d41ad5-3095-4975-9a12-1e714ec3934e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "80435f9b-36f5-445c-a6ab-08f4724a0ab1"
        },
        "item": {
          "id": "9343ca15-262e-4ec2-ad9a-c402ec163899",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f9029c15-80f6-4cc7-9979-f6bde44d8cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d5edc7-740d-468c-a934-fe9bfbddc7f6",
        "cursor": {
          "ref": "ba368f91-d113-46f8-bf7e-65abc5363e0c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1174ae06-ae23-42ce-b6f1-8ceb369f2655"
        },
        "item": {
          "id": "66d5edc7-740d-468c-a934-fe9bfbddc7f6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d1184f2d-747f-4169-bb3e-ac475c226e14",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b06c6ce6-1e49-4c4f-afd7-5a92ee9f6e3b",
        "cursor": {
          "ref": "8f4489fd-73bc-4388-a3d8-b6402827b00b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6f1a0ff3-c3e2-4366-bcee-1755358208db"
        },
        "item": {
          "id": "b06c6ce6-1e49-4c4f-afd7-5a92ee9f6e3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "446070f5-893b-484f-8ae0-c87f849a0ae9",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "752823ed-d362-4660-84ec-dd7837faddb1",
        "cursor": {
          "ref": "1655d0c6-cad6-4382-8532-c575687fbee2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "859a29db-871f-4a6e-80e6-539630e8a86f"
        },
        "item": {
          "id": "752823ed-d362-4660-84ec-dd7837faddb1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3decc3c7-1324-4f8f-b7aa-63a2e66c2c53",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d426638-3ea7-4ee7-9dee-b05e31c2d1de",
        "cursor": {
          "ref": "f11b0b66-4984-4055-b943-d5fc2c0d0cd9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e2557e38-38e0-40d0-9c14-4f137bf18948"
        },
        "item": {
          "id": "7d426638-3ea7-4ee7-9dee-b05e31c2d1de",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c9e63998-504d-4cfe-9b51-a3e032ffba0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d426638-3ea7-4ee7-9dee-b05e31c2d1de",
        "cursor": {
          "ref": "f11b0b66-4984-4055-b943-d5fc2c0d0cd9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e2557e38-38e0-40d0-9c14-4f137bf18948"
        },
        "item": {
          "id": "7d426638-3ea7-4ee7-9dee-b05e31c2d1de",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c9e63998-504d-4cfe-9b51-a3e032ffba0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7792b839-0a5b-4696-92b4-4e7f64d4a45d",
        "cursor": {
          "ref": "698a6b70-d4a3-4e3a-83dd-f9d1dc05dcf1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "13e0d1a5-c743-43d6-9f27-636c36e43b9f"
        },
        "item": {
          "id": "7792b839-0a5b-4696-92b4-4e7f64d4a45d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3f229974-1c01-49bf-a44d-8544fd0e7550",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396d4abb-6225-4c03-af57-d22f6a056855",
        "cursor": {
          "ref": "d22fe97e-ec48-41e1-920f-afd44a8a95b4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6351df1b-c33b-44b1-8661-291355dd3b4e"
        },
        "item": {
          "id": "396d4abb-6225-4c03-af57-d22f6a056855",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c9acbebf-bc86-4f92-b93c-6a1c25614303",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}