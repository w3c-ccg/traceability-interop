{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b07e8f44-3092-463c-8f55-43c49fcc650a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0e961134-c9cc-4bab-8624-ef17ea895cac",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79adac53-cc31-4b69-a3bb-6723934ca242",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3db3cf1e-20d0-4547-98db-050a2a6f44c6"
                }
              }
            ]
          },
          {
            "id": "bbffa65b-2300-491e-bd11-303855c233f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aa84558e-bcab-48d7-9644-ef3284305eb3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d11ef03e-9039-4902-99ae-2a1ad4e2c448"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "63b36c7d-2e08-46ec-8485-7e61c0ced639",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bd14a719-ae10-4f85-8635-26fcccfe0339",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f580492f-90d1-4b45-8816-168ac0febfe2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b5d011c-2319-4495-b519-1c2b33cca463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fbaa891-23f1-4308-884f-e7bfa53de848"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9825cf95-8eb9-40f0-bf88-bda057651d94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d4ab4d7-259b-4f45-8216-6299b3233b88"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "484721e9-540d-44ed-8b26-e33893514829",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b434f289-ac5e-4309-8354-dc2fa36f34a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97a9ea78-a6e3-40ea-8343-45ea9584ff52",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cf417dab-4c3e-4d3e-9e46-15c898562863"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eefd5d32-d009-491d-be85-f5e68993d9e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c046319-ef53-469d-b7ae-900edfed0d27"
            }
          }
        ]
      },
      {
        "id": "bbd6d66a-4f9c-488b-929f-353d7695aa6a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bce0da3b-00d9-4f6f-8fad-612cd90cd521",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61526970-134b-49db-bfd3-fd7ec895361c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "948d56db-391a-40e9-8088-39888da95135",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6792fd-3ed4-4970-a97e-473990ec5037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d14364c6-a045-4112-a05f-022371a3ff54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2d2e61-1f97-4d59-b67b-e4e8f72873d1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d70012-26b4-4db7-86fd-77c5262d9359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09118b6e-f6cc-496a-9e16-c86d963fe52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b534af-4751-45d9-815d-0c9795b52b3f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88278181-14ae-4d8a-8bc3-23233a23e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "180ac69a-5445-4a30-8a8f-41765afee657"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8dfcf066-d647-4c22-ba80-dba4d551278a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "204cc82f-cdc8-470f-a54b-712cfa2c95e5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602721df-a4a5-4c08-8098-40fcb8c12c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95a17d37-2f3e-4c21-8e20-e62a623ae327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adc49b4-603c-41b4-aafc-c1a56bbf468c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f359be9-bda4-4c1d-9b0d-adf7ac1149bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c6328e23-d04a-4e09-8802-6afee1be6310",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91fa0427-4d59-4f5d-9b3e-cf3ea8a40543",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76e4dd32-be6d-4dc4-a919-e0c8bd9586cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3d44d126-4eb3-46f3-82b6-25c5de66669f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b35d52a3-255e-4782-a099-8562c8527af5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "52c7b694-ab2b-43ab-9363-bf71996f6edd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "979b2d6a-a154-43fe-bd62-5f4365046990",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c010144a-d749-4b80-b32b-f70b6664f696"
            }
          }
        ]
      },
      {
        "id": "a63bf6f3-28f5-4ab7-99e0-53508a5acf10",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0568cfd1-2e50-4582-a349-73a1fe1974d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ed59792-a3e7-451c-984e-7359f00f94d0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1c4a0598-fd53-47d0-b061-e2dbcc3474bb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990ce699-edbb-4c04-bce6-456768066a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed617e9-8094-4962-b493-9d7f681cc402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b11997d-90bc-413c-9282-f599f746bb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca7431f-dd9f-47f0-9536-86409839e029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313b2667-8ce8-41a6-98fc-7ae9a428e29e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debde68a-e325-4fce-b6f2-67b7cb0400da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ce0a5e-b391-4c1e-812d-b3839d53635f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cca5e8-21c6-45a6-a15f-247e880a1ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dde4b1b3-0587-421a-a0f8-4db778c49bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc22d644-e7b8-487b-b65d-274e1fa25a50",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5155bd9-351d-499c-aeba-d9fdb188085b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce45d34f-2e8c-485e-9282-e83f379fc2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afefc873-1301-4774-b80b-4d03bee7cae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "119589aa-5e5b-4b7d-b05e-62f21baa5e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5938d7cb-bebd-4327-85be-285fc43f97cc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9b6f4-987e-45a1-b02b-a2ce61fa28b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254b758e-fb26-48b2-b89b-73c90379fc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fd09ff-d3ea-4f3b-ac02-262c416cb130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "361fe2ec-7757-480d-a147-b3877065073f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee00275-8c0d-4eca-823f-ecddd8819391",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee177da-45fa-41c1-94bd-4a895a9d224e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0091bf31-ea22-4872-a112-aae8955598d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ec40a0-e0bd-419d-a9a3-66bb90238f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c6db435-e946-4c7b-be58-6c16cf034688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f96867-cc33-434c-8a09-00015fcecdb1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbc33a6-a51b-4e93-a86a-496a9460bba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23c5292-a0b2-4f57-9b6e-683a8f32928c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85350028-760e-4d42-87e8-0f34084a8d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31f59e88-0557-4a39-9834-3117eae2762c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901feee1-dc95-40b0-82e9-68d265b32d63",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e117c4-92ae-4caf-a44d-892a2ade6ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517bef32-c1a8-4bbb-bcc5-9e098a638c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6264ad8-18ae-4aa0-be38-5f98d2311890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11953a35-1fca-4a71-90a4-831eecc09d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef07cb6b-1d34-4f67-9555-d1804212fe77",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb1460a-1bab-4778-986a-9a7dae3a02ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb24769-8eba-44c3-9665-abf393ff8f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f6e59e-d7cb-4c12-98b8-739d7a7d2407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "753ebccd-bb70-496f-8767-6359daf7c164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d7513b-318a-4643-b118-7e6d2b34efb2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d64a36d-11b2-4bc5-a6e5-4619d3b2a1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c23ef30-3699-492e-9f06-48737c142f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0db7c15-2167-4bd1-ac8b-87a6ba788697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75b82da4-66ee-4175-a8e1-5d6a284054c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dba4c9-74dc-47ab-af0a-a8d12cf97eaa",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f41d3c1-61d8-4421-91fa-a6cc46ca330e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38729e1e-be25-4011-855e-6fd3a539071e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295c9c1c-bf8a-4110-b48d-8d886b9d3d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eab85709-263f-44a9-b5c8-35be02341dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fea02b0-5d84-4b3e-b962-038d0523c554",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc60ece3-a579-4cdf-adc7-858068d63406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c3fa79-7170-470c-ae8a-bd13144bb4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501444da-ec20-43c7-8f56-6ec58e3c5731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "068d2927-1853-4483-afba-ccdd8bd3266c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10849f89-d77e-41b3-b61e-e84517083408",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7620eb8b-0d53-4f87-a5d1-36adf81da745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c97fbf-71c0-4909-986e-410e5bac4456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b62697-e5cb-4a83-9a01-ccec21fd85e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59d2937c-b30d-435c-92a3-9f4b4609d4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0957243-95d6-4843-a093-a7de85d876c7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db8eeed-181e-4bc2-9094-f89cb9cc678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a812605-b216-4bef-a6b9-6513aaa91817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cc0ee4-8411-4cc7-b857-90cd7b620a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e2163f7-9296-4ec5-b60e-37bfd7843335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfa8a3d-e7c3-4df3-8ae6-05b64bf9039c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44c0023-2e26-4a9b-99fe-96b81f2e150d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6981da-5fc5-47be-81c9-8676dfd81a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eeeef27-0eec-4541-a08c-fcb673544eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbb72998-4e64-411b-946f-870853664e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602c37d4-373f-4622-9ddb-fe1108b8868c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41353820-fea7-4870-b0da-b2555476e5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977203aa-780e-4597-9c1e-1abbbbb9ec3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41801d65-8cb6-49a5-aa3c-de07ba773e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f6db835-48eb-4617-aa81-5b12b6cac3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e79d33-26da-45af-a836-6ddfbf0468bb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f670b1-d4ee-4a9d-a373-ba69277eba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8218d238-4b1c-4673-83bd-789668a32c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498175c0-1c46-4f2e-84e9-1ebe1b07ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74cfc4fb-7fb5-48c1-b967-1f3875f60cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d853de-2883-4fa4-977d-ec4fce8f357d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de10d63-b6ad-4e31-95ca-122351d39996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2637f79f-e2b5-424d-aee9-2ef6c0a4c5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cc53cc-4f26-4798-9707-f6aa04d528f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b85424f-fd3b-4028-bec1-887edab02e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574b6daa-625c-4d08-8f9f-7b573144e8ac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150f82c1-bc9d-494a-946e-1b6bd07c2f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842c5ab5-6e08-4d8a-8fad-6446e2101256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfaefd4-199f-47f4-814d-94e91f971f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "460134e1-da6d-4279-9270-459814cec1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d15e894-2f80-4e45-9847-a6d9b84940ca",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f27d35-d018-4330-8c7c-479e9a264cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474a1896-96c6-467b-8a3a-bef453661c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ef4c09-98ec-40f8-912d-b1fccded475a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be8e538-e3d6-44dc-b7c3-d3c0f069c5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5901e0-226f-4429-90c1-f16737252c79",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa83a3-3411-4559-9465-bb45d8da038d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1921d9a2-78ab-4858-8bc0-21877b7bf963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53cfc83-3d2f-48a0-ab7e-924728556077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59f1c6e2-685b-4b5a-8fe2-930fb3d2fa35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa03a47a-1777-4c7a-8984-611d0d611fce",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30fa18a-b744-472d-bfc1-b7e70883ef9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7693793c-045d-40f1-8f30-586719c903a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30668899-a77d-468d-bc82-c67680a8d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f359867e-71bf-4a36-a8cf-90c3f17dba7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabe6db0-8626-4d7e-827d-09d77af721ee",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5199e051-80eb-449e-b7ca-5b9e2c09c6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a786bea5-eb4f-468c-874f-02d9ef99bf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2165589c-109d-4fba-8295-ecefd635774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01fbf6da-f0f3-4117-8686-b7d9bfaa6fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab75b13-9011-409f-9401-138f00de4ef4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d117882c-8a7e-4acc-9efe-fa927e209889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21088b1-4dcc-43d9-acf2-0331380645f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ca8c07-a63e-473a-b0ac-5762140e9f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7be39ee-d580-470b-aa00-ed5bc3edfcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc385e9-3ebb-4e7b-bf55-a1075e23a03f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45abb9f5-e632-47a1-8d04-f467d9d71f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054f1e4b-7388-4d56-aa4d-36eb7639d790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab875a22-ccbb-4dd0-abca-14b2897cc720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e784cd45-cc80-4f72-abe0-97d7eb1d02bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc3afe9-a5ac-4507-9d25-3dace8ca0c5e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53a4a1f-dbc0-4a1f-8684-bcc670874d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9e008e-6d78-43d0-b8a6-b3dd9639457f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962d25b4-896f-4044-8e2f-efa5b8030ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97251c90-59af-4a87-8b9f-36849c0d0812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c80a21-a039-4b39-82d9-aae7f5ee7cd2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66906b2d-37d8-45a6-95bd-82f484b816dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5b0b94-7404-4f29-914e-0202ab8f4d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2728fa3-c503-4c9e-9408-75074885ac21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "046702d3-8af7-4ffa-9420-ea9615ca5409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5485210-e5c7-492f-93db-85c01f3427e2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b928c9-336d-4fc1-8d21-053c6e2ebaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4ad2a0-c44c-4440-9a54-9257c84d81b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66354033-5d3b-4330-8c3e-bb7e84c79fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0abf0d3e-c327-471d-a378-87acdb060eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baee3b0-d3a4-4d5c-9dca-6de2a844ff6f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9655b48b-1161-4eb3-9c2d-89c32dccf16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c4e9c6-e5e7-4bf8-825a-ceb125e505f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690d2ed9-534f-4622-b502-bc7de83f3901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a48a016-b2a2-4002-9296-276e469c2e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38d5628-9bd8-4cd0-9c6e-ad71242fb15c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262d1f5c-113f-460b-850a-b7b95ddb51a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78af00d4-e4d8-4f0a-abf1-4aa89615f983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3366c532-10ab-4cf3-b84b-260063e14982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea77945d-c806-4ed8-b2bd-b5e05938453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaaa100a-124e-48bb-b95b-61a8156b0816",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5503d1-a1d4-4401-bd41-76a4cd20f46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4349d16-491b-4bd3-abc0-845928eef3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3d61c1-56b5-4c7f-99a6-4f77fca8c423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "70591d9b-7940-4f94-b2ce-bec132f298d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21182f34-c7b6-493e-939c-ccfa3456a30f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1e326e-f9d8-4a77-b210-688ee7436513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7f8419-f3e3-4d7c-ba7c-7a2f7e0a426b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f2bc1f-d9a9-4b22-9089-fb3e1043c282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef064e02-ed0a-44ec-9e61-0c2a7824bc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f545346a-86a6-4892-a5de-e7caf4214b84",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1973b2-9371-4d7e-a345-d3e0f2f87bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18157a7-96f9-42f4-9a54-a92de4be057e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798dc6ee-8608-4a2c-89c2-c74863aae801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f14f59-415d-48c6-9e15-eb237b58d7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7d0b6a-e0ed-468c-bf42-257508f6a745",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7929ef7-62a5-4552-9183-942d92b82933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e3e77a-804e-4a83-ba66-ec765d244b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571b2755-6ea5-48eb-b721-2f1f1c56557a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "579cc675-f3f9-4fb2-a763-45ca52b2c4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a64e5b-a85f-4908-b5c3-dc54e0813cdb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e2ae5-b49d-493b-bad5-bdf332404710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f15ee3-8731-4564-baa8-2d9385630de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb17918d-0f19-47ce-830a-dd12e489399e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be038532-9d0f-4b17-ad52-0dd6765ab4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f582d3b-840f-4d7f-bc72-b1d63e961693",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbc5f9d-a1da-4e54-a944-490e0b5e8940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6779ca1e-b9f2-4cca-b3b0-fea789f1f540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f6d8c0-6e70-4122-91ab-2d6315ba4535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "60383a29-abd0-4127-a918-29bf8b9a955c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6cdecd-7679-475b-8347-4b75fd5f242c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e684aa7-ffa6-427b-bc1f-4007bf9a0ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "206f29e1-57de-4adc-8da6-bfe4df3c5b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0717a2-e18a-4d33-be32-c38d2c25a5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd1c8ef-bb4e-4a1e-9102-d44aaac7ba4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc86f44-4d90-4b64-9f08-c2644c0b9a93",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab240126-d4cb-4d58-a584-36ac1b98758e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13b6b8b-2386-4417-8eec-e1cc59db3c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e43bae6-34c0-4e2d-81a5-44fbe4b54199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7233d7-3e83-44a8-8904-1ba3119619d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083426a8-a48d-4786-bafb-8f6bfc66cf9e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef2550b-a498-4ff4-bd99-f248e9144681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c7302a-cdb4-424c-9c3e-1f5290ea3555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d09e8b5-1bb8-4006-b741-1558ec9d5ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6099a7-75e0-4538-ade4-e55cf0ff4e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a0c40a-f523-48f6-9892-813fbe018c20",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11805cf-215f-4f3d-8ea5-0b96044083a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0499437-ef3c-4149-9f68-b5b83d8c1952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955d71f4-5ea8-4689-9880-284c69bb099f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5e1002-192f-40f3-bdcc-e8e4f59e05a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9b41db-785e-45b8-bf10-653ac6e6f65f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76456cf-cf4d-4584-a8d1-b4e9b584489c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42525684-dddc-4e16-8894-8b7fbc80037d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d8427a-8f2f-4ac0-8135-5ecb69cf96b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "450f266d-293c-418e-990c-a800e093d7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d161705-bb9a-4cfc-b29a-5bf187704af6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da29e871-e830-44c9-b4e6-971f22f87215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5ad4e3-853e-4f17-aca5-07687701c41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ab6c62-52b7-46c9-8717-441aacbc49c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ee6b8a-3550-4b8d-9037-3aada32b18d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fccb828-23e2-4bf7-8aa9-fa63db61f0ac",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f38fd19-777c-49a0-8198-48d11f570466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e8a668-ef8e-48f6-9093-343f52c1d3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758e5123-2acb-422b-a3af-5ffdb9b5ad2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1c0897-97ea-49d5-a17d-72342fbbd7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27485cc8-96c2-4952-8d2d-f19413855a4f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fd23e8-071f-4836-8a8a-cb18f5c73e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2112a6d5-9c1f-4673-b1b5-391cc1c7ad99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee250ba8-12d6-435a-a1f0-dabf5f9c520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "341f541c-2d23-4e79-904b-ded810ce012e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883afc2f-d350-4b1b-8642-6fede3b60a75",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329c9928-d014-4807-9874-a15828d6b13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce43982-44d1-44d8-8551-cff522f8f1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26866a04-519c-4c93-abc7-18d3cc67d065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a75c194-ceac-48a4-88a9-d9ca51004af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005c0627-629e-4116-9b6f-81bfad0c647e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb671be-1934-412d-97f3-32eac74408ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568d7f21-48c0-431f-aa3f-398b10c1486c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1396e41-f025-49da-9e3f-fdc595a8eacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cfc892-7464-4c16-a673-8a9ee47927b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac83562d-5f26-4a72-8748-5e5fa9f9966f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0e6d3f-d72a-4631-92f5-1e18e67994bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436a0787-7037-44f6-ade9-3b16d3ca67b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4a3acb-a920-4989-a8e8-2b376a101707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "359f15c3-f7b2-4e67-8f81-5b34480ba027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669e59d2-00cd-4714-9d05-bdaa101effd4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa4edd2-9512-4a04-8686-76b3b45bbd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47cc742-6359-4313-8419-5d8c05ae11cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7523a2c-44e1-41f1-b671-056424c5b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "746e9d2b-5866-40d1-b2a6-344a3e5e0e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7037eb6-d6dc-4b54-8977-b1cc05525981",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f79341e-fe8e-45f0-9407-4fe27ebcf819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43681fb9-c85f-4842-8fa7-acb5b5781afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f40454-f2fa-417e-ae2d-ded0650db9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "925e8d67-01a1-4c2a-87eb-47d7756e723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6356ce-48d6-4b4c-a662-50eb0d92946b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f975d03-ab15-46cf-a9b4-c744f1970c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f178fe8-d27d-4b30-b556-e45e3afed27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515f0f01-78f9-464c-9593-cc455d016249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64bff1a8-e41c-4b6d-8a4e-f8dae9185e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46641256-cf67-4acf-b792-c52f2ff3e982",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f76f58-5282-43d6-b614-5c46920301c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23056b1-3694-4185-affb-0c864857ed23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d62a00d-8418-4636-bc81-9878d6cb6373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a15e3000-8e85-4587-bf0c-2f2838c5125e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e38a510-ddff-4eeb-a041-b240da856940",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725106c8-66ef-4e53-bf3e-f48e429b27c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e554bd98-4ab3-45ef-8cdf-632764860ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b533917d-5e59-4639-869d-61bcacf9142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "781246de-8c31-4050-9a2a-f40dcf356f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893a6e39-546e-49e0-924e-7ef2fcccc7f0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8096f02b-a5dc-45ea-bc1a-d9fd30b9cabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae22670d-5243-4335-937c-791e308f4790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553386e6-bb23-4cd5-9938-8eb1e168fe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c523f71f-7018-4114-966a-ce2d6445a96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3672ed-9a5e-4780-90a3-97d7435e7a68",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1615edfd-d55d-4e4b-b595-a9c07a1e9f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73eb3e50-200c-45cd-905f-8d5726de263d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696df10f-bc3e-4c94-b4a8-bd8cdee95617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5cf998-b7b2-45ad-9a0c-c8c93b801376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7492bb6-c6b9-4f85-9019-537e3a4f9a5b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b55f90-07b0-4946-b54b-a92ac389dd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740299b6-2f36-41c9-919b-368608292dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0870200-679c-474e-ab3c-7fcdf2740be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a9085f-1b57-4b2b-b300-3814f75bb876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c92aaf-1cb6-4b0d-a0c7-1a29a8da50c4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78e8811-9d97-447b-abe1-b713a739c57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318becc2-b52b-4db6-a1b9-5b5a73030416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac5f7ab-e6d3-4cf1-9e7b-59e68984273c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d507dd-bab5-4078-93e1-5f4c12dc3d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff9c33b-b03b-4473-b5bb-f845eb0731ed",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1af4efa-d6db-457d-b164-d01fe3c035b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d291ea02-a94b-4411-9b0f-9302c6883a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a68935-a572-4954-abea-36fe8d040499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b946e0c2-8729-44b5-a37d-af100bff1472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b819fa-fa74-412f-99ae-e15bfcb477f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa24973-757d-4d8a-a4c4-c291cd964ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffbaa79-b5bf-41f5-a1a0-8862782a0ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddf0ea9-27e3-4e41-aee1-4766b3f79a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb12a7b6-dfd5-407d-8058-90e501a1fe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846d495c-e970-41e7-8ffc-b19ebc027af9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf09d5f-df27-4d15-90bd-9fad335d517e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7662c1ee-2cb2-4428-81c2-d0f1c80c250d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4daa70-80f5-4fe3-88b2-4da1b3366951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aef3041a-1740-4222-8096-fe0628fccaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f37788e-fef8-4f47-8c38-82887283dc7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdfbc8d-bbf3-41f7-96b0-c85450b80da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6befccac-0b91-439c-b736-2a1d5bae6c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1713517a-877d-41b5-a7b8-ea0b5f148b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcde1a1f-8568-408d-a092-fa2024ed0b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c66dca1-7109-43af-a583-1e79c0388785",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be583453-4497-420d-b002-643ff32b368e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708e0ba5-9d55-455c-b995-305d590a9df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e1b841-7cbc-411b-ae78-c9b11ef6d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23554b25-8057-4693-885b-ecfbb9750510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2377a4e-5a7e-41cd-af14-479f461f1f49",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c94fc4c-b411-41b7-acd9-800bc8688316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61594e0d-df5f-448c-a79a-5dfc61904f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ad37a6-95bd-4c3f-bdb2-ed36391e18c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba502880-99b5-49f6-b0d8-c0beb93cba86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8a102a-965a-4ba3-81d3-5e3a81a99f86",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c28987b-2267-4ce0-b677-cb7e5bb70f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1168d1-22cb-4f2c-84bb-437ab64305f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071fef33-b406-4666-8fbf-d28eb4d669df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b74a5a-9d66-4f32-b046-fe89667cb6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ee2837-8cd1-4f3d-9353-b9bd8d6cb91b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbaf40d-549c-4532-b614-c7acd9ba9086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc35df0d-e081-4fcd-ab3b-7093d4d63411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e21c7cb-bd86-4c39-b2e9-f79803dfbbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5b63f4-cb6e-443b-86e4-6b68e9e8b311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8016807d-190b-4095-a3cf-dd757e6a7a03",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402f22bc-8157-44c8-a505-70d56ec25a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8af6858-245f-4312-9f80-67e4135c6f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9d3b31-7c72-4dc5-b229-c0ccede6f062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c14483b-3aeb-46dc-9166-66768a919afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6b2e3-0cd1-4e4f-924c-1dc6943747c0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b17eb31-db36-4bbd-97bf-d30b51a6a354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fea2885-27d9-4aa6-9388-c1471ab75c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a16c37-0271-45ce-803d-39d670b428e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e99481a-cd3c-40df-9dba-74c82b9f4e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3ebbf7-9830-4e61-b751-e13d47f728d2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47c6dbf-c90c-4959-a6dc-e379503a7da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf8cfd0-5023-4ec5-ad09-8a2ba3b8f836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a786370-521e-4e56-8bad-5b13f97b2956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57dda08-ce20-4f6b-bf98-5e4848a2d580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8fccba-063a-4283-b957-e69896e062d3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db61a11e-7340-49fd-8bcb-2cdf740a7c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b4f65c-f8d8-4b3b-8f15-edb7293e775f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64f093f-cef9-4944-8965-48206a2648a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7457a560-ecfa-43c8-8534-225d78aed4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6e4f0c-115b-44c9-8a76-157f7ddd0d62",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948a48f7-37a0-436f-8281-1a91e4bf6792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42a00d8-3f0e-4c42-93f0-a29c5f8c4486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9a4182-90ef-4115-aee1-9ed29fc41081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0254e70-d85c-4d8b-9362-1ab1ffc57543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adb7c70-1ba7-4e20-beda-7f2a447a217b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599baf77-ab3a-4645-acfe-38449c39bfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546926ce-be57-4fcb-be8b-bca66ef60422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c20e178-34b8-4633-8869-1cfe14b6005f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d8adee-80b4-4e5a-988b-bcf9a05c7f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b714ee-178a-402c-85f1-e51c49c14c2b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fe9e44-f6db-42d9-9e48-e78e3c1f1963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ab1b25-2229-4e8b-99a2-72cbb3fdc9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6145548-85bc-420c-b119-e287fd373006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6683f46-fe57-408c-a035-0443fe064ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb32c81a-a3ca-40d7-b0f2-b5604b46c968",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37e5127-f575-4b60-aeef-546ae7b34323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a615613-6189-4fee-a449-d3980eabcb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2286d2f-2972-4772-b340-e935fa9f5775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caeaa7b9-9f89-43bd-9550-c7e2fa1ca0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766b554d-f9ac-41b2-a511-7542f8431a6d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4327448d-7a4c-4e48-8b9e-730547268c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f392ee1-7915-442b-a23f-f0167b00ed25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5acc42-2f70-4515-8425-6701bd1db4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab753a4-a3e5-48da-9770-009b8c292be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da36b73d-2148-4bdb-850c-5a406cbafc55",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587b912a-8b87-4b05-9c60-7e45c45c9538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb248cc-74a4-493e-880c-45555ab9df2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db347d5c-161c-4684-a4c9-8f95bd591a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb9e0da-1606-4529-bdaf-7e67f6109805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efaf51fe-9c08-4d25-aa6c-49b9382ec597",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f8af9b-b18f-4435-a588-b4ed3ce1a24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be44c210-e152-44f3-823a-d4d1adf76732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d054fb-22c6-4164-a151-ed83c8284bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "371e1fe4-6b61-4f04-bdf2-11adf35bfbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd48ab3a-8a9f-4772-9a64-08d56c91f146",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8fdca2-563d-4e0f-99af-ae6da6efd3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da5514c-ab9a-48ac-a8b1-9257b451395e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d3ed9b-987e-44d6-aeb5-cdceee09278f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8727f6-90c7-4dc4-a216-dc4f61a68274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43be6212-ea8c-452a-850d-e9ff0a89043d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cf9393-db2d-4bee-9764-fbe6ceabd8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971aa27a-61a9-41e7-b58f-df7db4d586ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88e7c5f-4924-4589-b2ae-3a2032b56ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf2fa7c-5477-40f7-816d-cf1eca73b033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74d560d-c7a2-4b5d-8f02-ba6b5457d325",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444a848e-c10c-4f71-b70b-ec6bebc582c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ab4225-b384-490c-a8f5-b69738172f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388042eb-49ce-4ce6-9ba2-64859b617595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d76112f-b71a-431e-b06c-109d4aa091e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff656396-3548-4355-b5f1-eb78db7b4f8e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b321c8d1-9667-472f-a214-daac4fc42f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c936874-9e44-46b0-b243-2458344bdaf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7d152e-fbfe-475a-866c-fa526807b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "641345ba-3ffa-48ac-abe5-5b627f8da0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68410210-e666-46ea-8a65-d2610e895746",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a946c14e-af11-416b-a6d0-f384ae615489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73dbfbf-4e5b-4849-996f-c2157b3e2fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e53951-0b30-4b70-a57e-6d31b63d0326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3113b64-9f23-402f-a01e-2efb05a35671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645723ae-ff04-483a-93e9-8ed88b0a3f11",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2abe27-b3f5-4915-8e49-589142706ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f37674-7b67-4b0b-9939-c0cfa88f9c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d8c932-00b5-408f-8eb2-d00d3472106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae4783b-39bc-4f2f-a3e6-c921347efa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4c5939-eb71-4500-b06c-41562834f1b4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87a820d-988c-48d6-99a5-340ca5c52661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3664a9e-7ecb-4298-b815-8847343d934a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f50150-34ec-41ea-a318-bd8a9f8efce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "523dc0fd-e4a4-4861-8e3d-83c10834acc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61371e0-a251-4de4-8dbb-b5b9d0cb703d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce25e62-334c-48b5-bc10-0c184b44936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41d70d9-25b3-4835-9ef6-11c62ec06a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a1db98-bf5f-4869-ad50-e969c0906621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0525ce18-4e8c-4c4c-bd52-491c05acac48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b469b140-14f8-48b6-93e8-3fb248c30ac4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29be9f67-8448-4615-a0f2-4b7f3e1d7437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2384aad6-5a51-41c5-92d3-d1a8f2051111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dfff4c-40da-44a2-a72c-fc1d47a65e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c922ca80-a8cd-47de-83bd-b7bc695d1817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc23993-032d-46ac-94c6-15b072323e2d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac357683-f725-4326-99ac-1d66125d0717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747e127d-4d04-4f1d-92df-2a02f2996ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11484483-ac39-4a24-8d60-167939659ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6675fd66-1684-483a-bd5d-c727abc3d674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffd9935-a7f6-4947-ade3-2319f06cff09",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a1fec8-7b18-4962-9878-e022d25fc498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f15f80e-eaa8-4eed-8479-026863f07709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d2f97d-b95e-413f-97cd-a8bf1906719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f61326c-f8be-45da-83f1-658ea6ef8f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4404d4f-880d-49ec-b69b-272a2bf25011",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b7bfeb-80af-48cc-9284-26f68ffe0368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c8fa0d-dd1f-447c-bbea-f48ad53e46ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7086d459-e590-4ec5-95b8-08a8d44281aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aabbcd9e-23fc-4db4-bbc5-5c32f7253dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ba3919-c93d-451f-bf9a-420bcf8277f7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cb24dc-3b38-4ca9-aa75-82d4810eb2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6a5e71-f5bd-41e6-b613-fceedd13dfb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4401875-abb8-49be-a587-4068db8de316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bed0703-be1b-48c2-9be8-2b44bd402290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6c75ba-51d3-453b-971b-096aad7e2d70",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dcf0bf-6852-4471-be24-838cee420568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933e8be3-3632-4eb6-8181-83c60a5fc16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d0cf00-acad-4787-8c23-57c4a074d861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd595f4-9c73-46d9-95bb-9f3f3d616723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9153c5a5-6cb7-45d4-8537-da18966a1637",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1966b7c-231c-474e-87db-d18c0b6b15ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2991d0-d250-46ea-a0ef-637e32b54f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf9c1c7-1cba-4a5c-8566-172fc4d6f99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d031a16d-bc26-47f2-a7f2-b06399ca9d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65ba571-8a22-409d-8a17-e70eed011872",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2ef9fb-16f0-47cb-abc9-3da0cb84cb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c6d00d-36be-4d42-bb4b-c058d43de63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d57429-3d47-4802-9b9c-b9ee1d7fbb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4df473bc-0c28-471c-93cb-c8632e350793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4733d278-301f-4d70-9d04-f083e3698be8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772fc1a9-7f5e-408b-9688-c0aba5dce6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb93780-a11d-4756-a40e-726c95a898bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37efc192-78b1-4293-ad8d-c0848412eee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "24522f20-581c-4155-8b70-16756b0274e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf1319a-6859-41e4-9976-cfeda0e5cf9d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28132d29-56cb-44d5-b0c0-f0984a4f24da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1c452510-126e-4a75-9c67-c53bc3c2ce49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711b241f-22a2-4ad3-a934-9d8d9533ac0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1ff6be-aecf-4f44-9578-418e17095ac9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "712a1757-021a-476c-a0b9-3320f512d073",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "599cad54-a321-4304-8980-bb54562681f5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c941209-cd64-4119-b7f5-aeefb1cee58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38dd3b23-5d49-4824-aee8-fd4c38b0ab87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b050e80c-1ea8-4a8b-875e-d74c6ed38a43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df13427b-db3c-48c8-9612-4996222c49e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d15e539f-0de8-431b-bcd4-b7efccc3a64b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5beb3db-b3f0-45fe-a786-815298691a59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb7f4764-ec63-409b-9183-f3710382d12a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cb009fa-c6e9-4faa-8bef-7665c4e593a9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2b7fa79-8e4b-4b2a-b1f2-6c5fa32f5507",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c406b8f7-9991-45c7-bf1e-2093e708368a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c767154f-63ab-434f-977c-bbbdbae900dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4341a29-d724-4340-a336-3e78988aae12"
                }
              }
            ]
          },
          {
            "id": "d34cbcb0-f0cb-4745-8f46-1d421979800c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5135ec64-d6a2-454d-9f9e-9d30ced5fb09",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "04a6f56c-90a4-4008-9c78-3114728e994d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b39cbf5-209e-472f-9242-68d3cefd4e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6b4a7bdc-bf0e-4ec3-bc09-f45fc33ec745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6085aad-faa3-480d-8bfd-6e86f365a885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27dec50a-593b-45c5-bb47-cad25fc66e35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a280e4c-6d90-436a-b9ad-92f75a5fae98",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca65cf8c-ed92-4aa6-a1e1-dc58c5c623f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "201b6753-f2ce-4450-8eb8-470b099ad2b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38a06d2c-33d2-462f-97cb-f8f2a8459b54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a3ee780-dbd8-4340-abd4-c3e56c3def5c"
                    }
                  }
                ]
              },
              {
                "id": "75d5558a-ab2a-4741-90fc-7f8dfc73315b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4087f36f-3fc2-42d9-8485-de4b7152a3ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2381e7eb-3ef7-44b9-b7e8-212f26e1501d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09c40ba6-a825-4eec-a2fb-6947c60126e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "abc5b6bb-3df9-47f4-9cdd-4e09596b5784"
                    }
                  }
                ]
              },
              {
                "id": "6920634d-730d-44f4-9b17-0dd3b3f43ac3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5d38139-1112-4ff0-bc8e-66af7ee6b229",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb3cb8e3-dfc7-463f-a368-53d14718652a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1921a794-29d0-43e8-b277-49637c7cce1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80e45cc7-cb0b-4a11-9bdc-42be89d20713"
                    }
                  }
                ]
              },
              {
                "id": "470f9eb3-0db8-4f50-bb9b-59fc9067ea7f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f5a313f-94d1-44f8-b1ad-7b857401f021",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "296f38f8-6492-48b7-a92d-326b0a077911"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbb464a5-48e1-4b51-90a8-c08ddd3fb26a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "eac39d2c-18c6-4397-ac35-5e37c0846b28"
                    }
                  }
                ]
              },
              {
                "id": "187643df-6541-453f-aff1-6031c6b26493",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38f31be9-323f-4f7b-a4a5-08f700ded926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85eee13c-9bb5-4dd3-96d5-1bf451bbd5c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e73f68d9-58e4-4069-9bbd-460647d511f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "247e23f1-7b3d-4467-82a4-c19360949979"
                    }
                  }
                ]
              },
              {
                "id": "c0a2c75f-157b-4317-a93c-0ca1e3a3e019",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4301057-cd6c-4788-973a-ef67a7183db8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5708a42e-9a65-4e2b-9ade-ffd8baf72ea1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60bfad1f-c23c-41fc-bc8b-609ff16ed4a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b15286d-6ddf-4d33-a70a-966b7aac058d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "616f705c-f620-4bec-ac35-3b9be71eef3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a96af45f-638c-4ebd-bf41-6de3155ad982"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0374e8c-8614-4335-9f66-51dfc3228c25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2fd67c2f-c1db-4b70-a7fa-b118b40654ca"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ae57b89-e255-4003-879f-8c3975d2aa02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c790f733-8fd3-4818-9354-e1510a657510"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df9a210a-07ca-4ee8-b4b5-0575cde5db19",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dda1ca6-5dd0-4191-8b4f-59527370e6ed"
            }
          }
        ]
      },
      {
        "id": "995a753c-9ab8-4a68-aa67-0100f62cce6a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ae8f6a9b-0157-431f-9b9a-e01a0dcdb3d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38f6f302-2fe5-48bd-9e9d-eff1ad30483e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cae3c584-21b1-4ff5-832c-537527d1d78e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c48a08-0e35-4cae-8151-53f120313196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303ae3f5-f3ae-44de-865d-dbaa28d4b4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d73dd9-b518-4e0f-9466-aa0b58fd8740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f550227d-c6a9-4ea2-b855-7a64720ad747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77f61f8-3c73-4716-b870-82a971c70053",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858d8b45-f796-484e-91e6-21e13adcf717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbe63a1-145e-4cef-99f5-91393b35b18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9d5ee3-ada1-438c-b4c5-595657503cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebd84cb-0acc-48ab-ab0b-f2450fe61cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7339b802-cf44-4cc8-a1de-ad4724ae24f5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471f66a8-0056-4e2b-a0e2-38423cf974d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce92e1ee-a827-491a-87f5-cb1095e7ab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c0ff9a-79e9-4c21-9776-35bb53a0975d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "102d457c-f62c-4939-9a01-4ac9bc585b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbdeeb5-8c65-4e3d-951d-fa3f413a0935",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3e3c06-7fd6-48c3-a9c0-05d67368fb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10398f69-cc48-4d9c-a7ff-26135de56568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44477490-de86-4ecd-bc6f-60a85ff202ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8baf03-2aec-442c-b0f7-2d9e242d99fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c44369-9a05-48d2-bbd1-0f36f5118f2e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4519726c-8e2a-4b26-918c-6c2671b1b841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcd6eaa-7a86-4c24-be35-6bdfd91a5432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5afae94-12e6-4d89-af9d-273174135ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63baf61b-7a3c-4b7d-8892-7d660f4c20e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1798f02c-c2c9-497c-9ebd-4dd83db3e852",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c1c501-94c2-4ac5-8d89-9e5269a12bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13090699-c8f5-4c96-876e-43da502e58cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850697f7-0d65-4252-821a-28c3cbcfd752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc9d8b4-879d-44fb-b0b1-2f836275e3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccf62c7-a15a-400c-9f36-3575b8af18ca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56667c6e-c3c6-4efb-90f3-e6291968c3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b154fa47-3750-4e54-9bdd-9e32338b760d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274362b0-a468-44e4-8567-bffc6ffea5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "144ec787-b262-4da4-87cf-9e2a3e4a1810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6ec2cd-e336-4f46-a6ea-6b58dca4e603",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a384baec-851c-442e-80b4-89381b5ec674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd00e43-7d6b-46aa-b475-9e05435a976a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6323b6-8716-4d26-8f43-275d0e44e92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb424fd-bca5-4ac7-babe-ec1401907b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041a63d5-dc9d-4d61-925e-e5d566ae88b1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6662113-85a1-490e-bd08-a353e3f40d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050aa540-8a52-4b15-9d24-10f946e51565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b5216b-5ddd-4310-978b-82b149a6abbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3956d3a6-bc72-429a-8a57-e5d92e30443e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4475f296-1bd0-4f9e-aae6-783ef9b1506b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f1d168-8cca-49e2-a918-b9630add602e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3b6255-6e4d-4f72-8997-cd5db7ef8177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed1b0b9-165e-46d2-9e9e-bf05bd554fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb13089-db56-4907-a039-0741b2026fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4964fa62-f637-4fd1-9ddb-31e91e4efc27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dc92d1-a6fc-4ef5-8b7b-3c32a2aa7673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6f21c8-6824-4402-b238-d5da863c3f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2560334f-8975-4913-9856-2043915f5785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38891db4-e4b0-4d04-941a-d0e6b0d4705f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf03176-cf9d-46d4-8b24-aedc21016b7f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224f37fe-a708-4ab3-b039-791040d982bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38513673-9ba0-4f4d-b239-c4aff2e8a9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefa53d7-0f07-413e-bce8-c3c56571d873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "207befab-9197-4ea9-9018-93a17cb28609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3166323c-93f6-4200-bdd3-93fce2a822d9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83fb75f-1a5b-48f6-92f4-31f2e42c28ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ae1e41-4558-4be5-96a6-bd70ad8d9931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4300654f-be8e-4296-9c07-3ad0c0b14d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5b0e25-841c-4536-9dac-7db9b5694db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cc1007-5fed-4b25-a6d4-9181cdfc07f7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce2d6bf-fd3f-4ee9-ae60-da2d74688938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb74f5e2-55c9-48a4-a02c-075ed8d2740c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10799a4f-6cfb-425d-9d49-383336ed73d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "09c4c68d-31cc-418b-b84a-a69f77815b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4793296-7dca-4bac-b3e2-e393f9e10c23",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2963870-6e4a-434d-bbe4-4e6e72dbfb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e025906d-3796-4799-9c1d-b30e2f2825d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307ca191-c335-4699-8650-bf34564e6c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af6d31e-49c5-4aa1-aec9-7e7687f9c472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba00b3b-2ff6-4cf2-b9da-0d2c6515ce2a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbcf690-a493-43c3-a7f3-7a63ba8681ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c768425-69ff-4d6c-94c9-d166d468583c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e07d02-5179-4fd3-bf28-c2fbe7da3909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "51e1154a-b4ca-478e-b5ec-e7a3a9984966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca1e9a5-6887-4e1a-b34c-9532d21bb86e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d8fe3b-2917-40c4-b5b9-be68bbf6f7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d012fed7-578d-481c-afd5-2848319cbd16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41262e8d-b58a-43ea-a508-3f568d52f110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d087ec8a-ec2f-4cb4-b8de-1fc6126f0ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d8cc22-0601-4d74-8eb0-711aca299dab",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23a0a3a-0672-4f0a-befd-f1c30f47f69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1df3648-79f3-4f5f-995c-053070b734af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ef9da9-e45c-4730-b353-2ac93e1f427f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d53b5a9-8cd2-4b5b-9334-50cf5693cb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebbc183-0c7c-45c9-be22-931a507b5ccd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39c776a-ee48-474c-a352-a7e2c7837cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213b1c63-5de9-4c97-a043-bc55275e444b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922c46b9-2f9b-4a7b-ad05-533a86fa50ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "690cf61f-fadf-4440-93d6-35f1c95397b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7965425-cca7-4bf3-a7e5-070292ff9c7c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81166f7c-b88e-4de5-98d2-edb6e1222d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8b5c22-b6f3-4ba9-bcbf-e4119d1cf5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04205f5-216e-490f-8955-939252c39507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6146f439-578a-473d-bf0e-1cad785d5f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f354366-a965-4dcd-b181-bd3e2aa7bc05",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4b65bd-65e5-447c-8b37-bd1c9bde567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e0d79a-b00c-4360-87ae-d598cbe95909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6328a838-3434-48a4-9931-7df958d06811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269f65a0-2aae-49a4-ac8e-4797f48fd9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3950b190-4419-4699-9412-1d6a28ecd92e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847d6b2d-fbf6-4e24-8ec9-80bb13573d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45738b3-7305-49f1-a776-52ffbe891f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83112be-5ace-4fcf-a3d1-7dbc263a27be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c738f5-bd96-4f7e-bcf1-2b8b487b3c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d835e9db-bc8a-4c66-944c-c447afd307e7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acbf838-f5b8-49ff-9a5b-20f242fd9dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ca7019-6650-4b1c-bf52-57aafbe6af9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbaeba9b-73dc-46b3-bb43-6ac7369e918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec0743e-587a-4622-9f01-63a320bb6c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8fea2b-4ccb-4d17-ac7b-795dbe059d6b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094a1959-af3e-49d0-99f9-a3de3e2f8f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cac34ef-845f-4c1a-9b2e-9734a6589514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f21956-9f29-477f-b6e2-cf27165d9984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd212cc5-ce08-4d9d-9f44-fd97c269e407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5ee98f-7e9e-40d6-9d2f-72b0dd1e790e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2332bfbb-ad37-421e-ae99-1d464c36d1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47657568-7b0f-428f-be20-cee3f596208c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13643a72-be93-4847-a77f-d0b03b84a181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5c5b4d-ac00-4e4a-8d66-7b6740395c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb30eff7-4235-4ca3-b751-aebd1d78a45a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bd6f79-cce2-4e9c-818e-41cd61018094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a85a9d6-7389-4610-aaf3-bd5de2153b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fdee99-07ac-4bc5-87d1-24c2c63ca1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1aeafe-d88e-44f6-92bc-4c42b6e18286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7390bc1-3705-47b7-9983-67f4149786fa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeefc5b-eb59-4f84-b0f3-772d63fc0d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb19b9e-53c1-423b-8b56-b87a4d033b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af7281a-522d-46ee-9755-62699b244eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02aa4134-de0c-4202-9f5a-51d22a07eea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf784442-f925-422b-812c-3bfc56a14bb7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67c66c6-9b3a-4f23-a0c7-57ea0c9f6b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0aa9eb2-09de-4979-8e97-a98a723a7d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b438420c-5d49-49fc-b373-20b91d62eef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f93f4ce2-2550-4201-94d4-5a95f9cfe349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302e4c39-4d48-48ba-a3a6-4231f5f693ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a687b449-7d60-4763-b42f-6c6df6da73b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6dcc8d-3311-4c15-84ce-1ca3b1e4e758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f984d2-7cd1-471b-a7e6-2937715f0f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f83ab93-ef81-4ce7-ae1e-8d1bdaf92d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b852eb7e-898b-4c15-9bc2-5d9c368aab51",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9a1246-8177-453a-9628-4131c4680379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d7458e-c583-4394-bdaf-e4a74b1e6f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c882747-bf53-4a08-a4ae-8fa9496053ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98493f9d-2e08-43fb-be05-b801c80932b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060f1c53-743c-4f22-8f9e-4256a75b4999",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0f1fb5-da80-4187-bbcf-710394b45475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896218d4-cc00-4101-a6a7-5d1862b4f2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c51861-f392-4f9f-a092-597cce3d2c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2683f6-bea6-4c39-9dd8-0f2ce524e7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0696cb16-b470-4321-803d-edbf9ae97e57",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcd6bca-2c78-4152-9fd6-4754840e563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18533d7d-7a36-4730-91dd-a3b2117cc443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51993bb-2b24-413b-b760-b62f5b026997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf90239-1947-46e5-bb35-494b0d219a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7cc104-2ca4-414c-b1e7-9bec576161be",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ce3adc-6b8b-43d1-8da2-419d9ef5a693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c92d3fa-6ccd-4231-8b43-fac60b9ac4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf487a3-e8c0-4008-bfc8-45fe983b7c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8a7181-c6fe-4b32-ac52-782a6ce89635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e60319e-3482-43ad-b9b2-ed4ef5c7f865",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ab6c5f-cfcd-4ee4-b524-1b41f3c48276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08146f5-20a2-4d9e-a68a-956984ccfd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a2eb1-2406-4a28-af55-6900b5173a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a16680d-eb0c-415c-94d1-0faec6bcddb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085269a3-230d-4a32-9ee1-c8cb10251dd1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95977db-12fd-4441-8cc5-6d304a87c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54c6040-aa99-4606-89fa-542008be8efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3137b41c-c034-4517-8e88-1ed8541f0ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1969622b-4b23-4577-932b-13e614160a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5f3e0c-2179-4b55-ac70-36387b2d90da",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714d508a-6a85-4ca8-b7b5-29549c119307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8e28e5-f4ba-4a5f-b31b-95a4f7086eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc14ca6-8a7f-455b-b76d-625345f70fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "295217c9-6a1f-4370-953d-5bd18f18352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3f2eaf-054d-40f5-bc3a-cd729fc31010",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584c4648-6b27-45fa-94dc-d181abbf0e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e82542e-d4de-477e-9469-98ac7f02feea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d765f2f7-5695-48f5-a177-78458b50c477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f29ea2-3e11-412a-91ff-358438c250c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8480f4f0-7fef-4220-a5be-3b633060e10c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "507af94d-ccff-4219-89d5-d8d0c6de4dce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187b2653-c54d-492b-a13d-79c7be803d0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6d21dd84-f4cf-4e02-9bb8-76b84b10c697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5210661-442f-47fb-af46-23a44b6a596f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "277a66d9-c190-4b7f-b86b-282db1546cc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73618a02-828a-4fa5-b3f7-41c834b6943a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7399d3e-b4e5-46b7-85a8-27d21be3b1af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b3a8a09-0b7e-4261-868a-ae745e2a54b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d417f928-7e40-4c8b-bb7f-d0014b49325f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf87fa73-7a77-4140-b7de-8428394a0f76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94e39e1d-494d-43aa-9446-b494b5c2845c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f19bd01-cffe-4864-b911-a239cf7127d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd4f51e7-3dcf-4a6d-bdd9-38fb1ce0f9a0"
            }
          }
        ]
      },
      {
        "id": "e3b319c0-82ef-49be-a94b-a824141e6f08",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f1ae79f5-ddab-4efd-a988-961484a3355a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1b35841-104c-4775-bc88-3684bb960063",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6a018e0-d8f1-4664-acf5-711a60643fa5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994eec25-ad8e-46e9-8775-444b8b3cd20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67547cce-6f51-4cff-9e87-b3be9bb5683f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6d7d23-1fac-43c9-8afc-d63894fcce59",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf73fb5-d864-48ae-965b-8c519445c08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8abd1c-e5d2-4fd5-8a38-41f552fe12e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c938ec5-9678-4779-95af-a8ad7217d036",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08b3ea-e71d-421a-b5d6-0e10baf14634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20078c53-1129-40b1-b3dd-fb409ab5b597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78410625-baf6-403d-9ec0-5ce7df8a683b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b9fcf0-f85a-4a7a-aa6b-b3ff39ad20ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfb51a9-c653-4802-9bd3-8fb5e78a4868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a98311-2cbb-4c17-b4ad-3c63e3985c5d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dad768-4b00-4526-bcc9-551a335d6989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9497f915-5b47-4040-8138-5b995a40e507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13506b30-c358-4aa3-9930-0321b199166e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddb87cb-7512-464f-ba6b-28cd91c6f7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8125cb2b-c0be-4154-858d-1e0e1f9b8878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18423520-ff39-4a5c-9908-21e478ebc4ea",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ee9cfc-4b01-429a-8231-d40df5c330a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ed50eb-75d3-4dab-9f91-287c4170c88c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84529ee0-4127-40d3-9ebe-af6dad407294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc5503e-f8a6-4e10-9c1e-e987aac8a887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e4a4a5-ac01-49f9-b4c3-dcbb45f2fa4a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d97aef-62e0-430c-8b83-e26eadf7b146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc0f693-414e-4f57-bc4c-cbd016245c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a977ec-00d2-4a08-9e04-1b40352946eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7d2c63-c670-4120-b3d9-5052ce0f3b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111cb9f6-ad4e-40f9-899f-3bdb3c6a4cd0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7011e08-a3d6-4897-b9c1-772252901fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc3bdc4-00ef-41d6-b1dd-9b41a2981146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fd21f2-3d22-4726-8090-0c170448b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35df2ec-53ba-4231-b936-b7ca0091a58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f15e93-d2f4-481a-8a96-c5a2b9c7377e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45d7ed6-906a-488d-947d-7e65f8c28617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae03e63-7488-4461-87be-28151c703071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a95fdd8-4ec2-42b9-91ea-bc589cf2bf5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1359f59a-c868-4fe2-819b-69a2c19ac99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea31a9a-3c71-4330-a0cc-4bed8d07840a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbd02c5-f2bc-471b-9b09-81d17dc24714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993d558f-c1d7-4fe9-be89-2e62e184945f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69f5b75-486f-42e8-b267-26a953d25971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bd33cd-bb17-43a9-9cc5-9f20cfd05bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb745a-f6f5-4004-8b17-ffd04486b5a8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53589c65-3507-4c25-8d63-8ed77927e871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75760e35-ee8f-4df0-88d3-7c0429fa226d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec1559f-eb3e-4030-9bd6-dcb5970d0f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f3bbee-8f1b-4953-b7ed-840d60670926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28337068-125d-44b4-852b-823b6cd7a9ba",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c984be-43e9-46db-be38-4288f8f5bcd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0bd4f43-53bc-48ed-9bd2-935b45e03a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92414fa8-473b-4a40-89a6-74bca6c8a37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c421e850-0f41-42a8-bfe4-7fcd7dfa7e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abcd957-0b4f-43c7-8616-f81847fc1323",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a12b72-0e0e-40fa-a91e-9dc5ea86bfb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bbc779e-5431-42fd-b161-a1324268c32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807a90ef-4f95-4d66-bb72-2b08adcefcd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02dff11-558a-4b72-ae64-710b5e388787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa8bdf1-5b8b-4207-ac16-b6fe6915d08a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea27b27-0044-46db-ae4c-b0274d49caca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7be5cb9d-f995-47b8-891c-fbdc58bac8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c78be7-f860-4c92-a347-657d89711c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f02a252-a45e-473b-97dc-a19fb50396e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8df0cb3-b615-4279-8282-fdc14da7b818",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2146a84a-3a2b-4d5b-948b-abce5487c249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f6731f-0c46-4623-a1ae-1e58bb41264b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1b2eee-e016-47b5-b8d2-922ff60809d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8025917-623c-4ca3-9cb1-029d3fc8de9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b631fa95-c88e-462c-82b6-f3a9edab16f4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90119158-018b-451b-aec8-268b4da28c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d10325-4ac0-47fc-93b3-c2bf638fbfd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5593395-54c8-49c2-b65b-74f31a81921d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f94477-c224-4c08-9f5e-6418e5f44fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50ac339-98f0-4235-a87a-3232ab3b8002",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c128fe6-1950-4d6a-8ea6-c2bc0acc6b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5437b22b-ccde-4674-b249-1e0780b6f2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4528f2af-7eb0-4452-863b-747979783209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58c52b0-072b-401e-9461-daa55dd63aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9e2a0e-22b0-48a0-8090-9a5ae4c6990c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fede817-6e46-42bb-8917-abc9e78a64e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455b306f-6e61-4093-b226-13a600865979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18addd9a-546d-455a-9efd-8426d82d6c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94a6542-c3e2-4cdb-b524-0aa6d3a8e612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda6b157-f70f-4c2b-bf9f-e84ee5c9e325",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20428e94-d00e-4c8d-a2bc-071913e68a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee79cd25-acc3-488c-ac76-c980eb6e1901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b355c467-fedf-4c13-a188-a58676dd9210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869c045a-7ac5-441b-912f-efad4f7e56c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f732d232-bf70-4cc0-88b1-d84a4adac08f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79653541-58c5-4049-9c72-f9683da7767e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94d1ead-a3f6-409c-8156-0fd82fcfc2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ec35f1-d5f6-4964-b821-b3b46fea3e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502cb88d-d621-4291-9a38-f7c9c34353cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88338ec-0c15-4869-931b-b59d69f8e256",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afabfc35-6e60-447e-a9fa-7991ca217ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e471494b-4251-4a9f-8baa-7a9094f34445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335cda58-5942-40e9-bb36-98f19ab9b51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033c2047-6ba5-4352-b181-c929a515312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94981505-8b31-4b65-ab77-202ca1dbe770",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27599f65-6f84-4d6b-93ab-dc8a3891242c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2ac111-f963-4d2b-83c4-d51cd85f3748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3edfd4-1fff-45fd-bcb9-de60e4515200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67d4080-bcd3-4744-9e21-a5552fd1ff56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eb0101-b277-4821-9ef0-17ca7559a344",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8812c7b6-ad7c-41ee-b9d3-9149f74986c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866b35c5-71c2-4677-80f1-1ebfd445f81a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a79e59-71a7-4ad1-90a9-854c5512282d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd539a2-7b5a-4bc8-92af-af6d48bfa3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1451fb16-4708-4561-a95a-ee68a58499f6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39860dcf-8ad8-409e-a041-9768b8f60229",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf8d9fd-0ea9-4cda-90c3-b531c26bf406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4069929d-0c1c-43fe-a904-64fe5c9ce001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902d86c0-de58-4c6c-aba7-66f3605443c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474e1a2c-72c9-4ec8-90be-58a141c1bf1d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a260a71-b606-42ab-b2e1-d812fdd2598e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a12cde7c-f121-40bf-97a5-b50a12ad3a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2a2518-507a-4cda-85cc-ae33edf7389f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fe3aca-1d3a-4e4e-8c7b-08ec4728dae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e913130b-5303-4b72-8d42-627f16e9263b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54adc7c2-ab1a-443d-8e65-ec8ae30a3806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27c08b0e-b8d9-4650-94ed-779cdd396ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2130f195-24ee-4b29-b148-cfa933ce0743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9704d6b0-d33a-4aeb-92f0-311fc2ca1680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6a031b-9a93-4c1c-8914-0e547a8764bd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc4489f-7176-4d71-99f8-2a8c2f88b410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb30bc0-4ead-4539-b010-c53c4bffafd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebecebe6-9f3e-4e8e-92fc-fe20b3e64e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738b3df5-bcd7-4405-a131-80d875a6958e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32abeab6-911e-4b28-a6ac-098f38ca2b4b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a280d096-3139-43dc-b20b-7c164a11534b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f60952-0677-44ff-bc5e-052be916070d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f75e84-38c9-40da-9e1b-898e86d2c4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5548ae11-8f4b-4fc5-818a-659d04244500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74d471a-5e30-4ee1-baaf-52949156ae85",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f48b61-8baf-489d-a724-0e9f18353f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d073125b-aa26-4ca2-bddd-5d2d5a0647bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e008d98-201e-4b97-a506-b5d51d29effd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ef1ae6-1b42-4df0-9ec4-45e720871585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377836d3-d22d-4a72-b9de-fca0f64ecd2a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1e2538-7468-4f32-9ae5-19193a83fc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcfa2f4c-2b63-45b1-b1c5-a1662e11d451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4197db6b-73ee-4bdc-b476-e0ceff6045b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfdfc7c-0f19-4c5b-b4ec-ae0ef109b0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb219e8-a01b-4aed-8aa7-3f98f73fe15d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a757ff-6073-4149-a97b-317b701646aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6dea34-ce40-4c6a-85e3-3862cc4eb2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788a03b8-48fe-4779-bb6b-4757868d9f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e3311d-f524-4bbf-b551-708fadb92c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b00050b-7b55-47ff-94f4-4a7f48fc883a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c175c22-f914-48b1-881a-673b2404140d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0257ca6-6836-4778-971e-6dfd08d5b60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed058e5-55eb-4108-b7b4-875a00dc703e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f65f6f-2dcb-4007-bc59-51887a2a3605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d60cdb-1360-4b55-af43-f24904bd53e9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff7faee-bcaa-4ecd-ba97-fdaf088d74aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ee189c-86a0-4f07-b05d-0aa96a1f7291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ae8a08-817a-45bf-9fb6-ae4ce761e48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6d12ce-531c-40d2-a795-e4d3bcac6afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2019d2b0-fba6-4bb7-9e10-2ab442c70563",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eab5fb-13a9-436c-a1f4-0e1c31215789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f24ec8-a1aa-4777-84e4-fa2fe7973094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703571fd-2ef1-40ca-aacd-7b643066dd6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2275e9-5299-42c8-a4e5-9b184ad83063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28385cd0-8109-4762-8318-77ef579a380c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8557f8-a28c-47a4-a121-2bc741fdeef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fab60f-b956-4360-ab2f-adafed4cd2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef466e6-a5c7-4916-a4e5-7867d8785efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2eabed-57eb-4533-934b-5d9e2efae9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76871a7-7e2b-484c-b1e3-043721ca0f43",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445972de-8591-44be-b2c5-f80832c29f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b985c5f-8b71-4ab3-8ccc-42a42587c9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c80db0e-95b3-4d5d-9f96-0655e52a214f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00cd4419-6fe5-4c52-a53d-29395c326cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa21cfc4-2104-4141-ae28-8da2e6dcd86b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43b417b-1375-461e-ac0f-21646ea9bfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68849234-822a-4be8-978d-8e8927872b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dce5f0b-bb8f-45fa-85ee-cfcdaaa2a437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b6a670-a201-473b-a532-6f8b68f86e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adff24ff-27e5-4d71-a7f9-16d3d52ef3c6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b370a567-0085-4fb9-9a93-bd7dc56765e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255d7c9d-eddc-4fc7-9fa7-ef8738307324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022dc18f-636c-4a53-bdf6-e197e09b8ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1109ce1-a5ff-463a-9ebf-372965ac08c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92666249-9baa-4046-8186-c6d29cce2dc9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a998ba-4cb3-4259-8d43-ce165bf816ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74820902-92f8-4a1a-891b-fea0d7fc846d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302073c5-6130-49c6-bf0c-cd9976df4fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b601e57-08b5-42f0-bd81-8a39b8e29a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdeac22-a3b4-4a15-a520-0d9358d88ba4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c811c415-52f2-4ec1-8b27-32f801b5017f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a414e2c9-1945-4bb6-9bb4-8f50a94d7fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22101200-090c-425e-9203-5b54f0a317a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cebd79-88e1-4cbb-9d35-eec3c5a202d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd543848-41f4-44e5-a8b0-3adae189f875",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aa3490-6b91-46ae-8c46-bc7437b0f49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943bc40d-8c12-437f-8202-289c96bd45ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e38a2d3-0f4d-4290-a773-fec8eebac4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607ded7d-d418-487d-9ac6-a87b5713723e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea7659d-712e-4f78-8a0a-942a9e93cb8e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adbfeab-594d-4470-86c4-46de086f7914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f298fd0-9a1d-462d-afb1-20f8afb48a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2ce848-08bb-4883-9c5d-ac10d67fae06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd29dba-3265-4273-b375-2a374435b034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5423aaf3-7470-4d74-8d77-c9061891c68c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6a6df2-301c-4851-92d2-fee902d17f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a7974b-65d5-42af-86c1-84728c167158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370d91ab-fe26-4e31-8708-fbdf43ebeaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23ffe7d-0bea-47e0-ba5b-afd7805224dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d39c8f-3ed6-4ab5-aea4-b89a1456edff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5900bc1-2d25-4a0e-bb20-cc388fc9ca02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6c997b-1c45-48b4-a199-f1e9a775aa58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9779744-6d70-4c98-be50-0b7b269ef373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2f4a60-f293-463e-927c-52fe08adbf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505d6cd8-93b3-44cf-a2ca-2977137075f6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d71def-bc4a-446e-951f-ab022116585b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1296b60c-a6d5-4e13-b1fd-dc11c845383f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d594e654-2ad0-4b99-8cd1-6a78e06a1d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109b50a5-f03a-4959-a0b4-1283b6989043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec53f05c-b7bd-4ef6-9bc3-e641d5dc81dd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04db9dd9-f4be-4115-8862-8ee88d158193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658be3b9-cb32-4542-bd3c-b474115b6592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23f6ed3-884a-40f6-8d4b-52f246695909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcace1d4-1969-4242-82d1-d430257d7416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ad3235-481b-45f0-a655-ab77b07ad1af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79fe51-fe7d-4b74-a2db-88277d5313c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ceeca0a-b382-4f96-b5cc-45c3de1a7d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f87246-2a2d-4612-979d-053e8066320e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cb9806-f86f-45c3-a52b-6524725578da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f248ba-a73e-4bd1-bb4a-c8b73fa76195",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de197cc-485a-4278-835f-e32f30a3639d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5024b1-b9a0-48c1-9bf4-4c3f04bf9872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b37e236-e81d-48f1-ac67-5591ac75c92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aa654b-cdc7-44ca-a20d-12feec7f4a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6789eeae-3db5-4ca8-8a1c-915b833832b7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d664060-6e08-411f-ac76-10603bb9ba7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afea61c9-5ad3-417e-b503-e7b1cd913605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbd1442-cda4-4ab5-aa57-8f92521817fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4829852e-6710-44e0-9cfd-04a957fde0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094115e9-e038-496c-985b-33f389fa390d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8e8708-f1f6-49bd-beb9-2720c3483e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9cfe80-36dc-472c-8020-8ade3553e3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de5aacc-c3d6-4934-8a37-768a8cfc0622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fca44a9-ec3c-422f-ac5b-e8f3cfd9a929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15264820-28b7-44d0-856f-d28a0359b9f2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bb760f-3be6-4068-abe4-59e41b4ebd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fee781-b3f8-4a87-971b-7d73804ce784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adc2e15-ab03-4507-ab1c-05c45c5b2176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8a8147-00cf-4fc0-bc14-3fe956125ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f00adc-9406-4cef-ab12-871b3c2342c0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d87f2c-1ea3-4848-aab7-9fae53bf88c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af90b17d-7be9-420a-b5e1-f8abb30df98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704d4b39-b484-48f9-ab75-e3d1ce0d5144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5d1afc-4055-4915-935d-868208b23820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c90629-b0f6-49a4-acfa-33e161ad9e79",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bd6a4a-0192-40df-88bd-53cab1cbb5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20db0c4c-c414-4b21-b6a0-06984240d89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "446195a5-b01e-44e6-9c4d-3dfb8c961faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f266dca-7f6c-4df8-beb3-0ebf6f2e936b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4a702d-ffa9-444c-8ad7-157b3dbde182",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ae98fe-c585-466b-85f0-88581a970194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c529646a-149f-4d44-8341-c9cd37d34b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c0d4f6-4fae-4cd5-8077-e0b6cf807d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4cce50-563a-4e50-8bb6-1b1c424a7f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1dcf19a-9395-4703-aaad-70ccaf50784d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ace8cd-e7b4-4c04-b359-eb79426ba14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578f5b8d-41de-45b2-af18-e700397a108a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d70e866-5c40-4f9c-81f1-7e49b3ae623c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f52d00-4fc1-4f64-a623-8072542755f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c6cb89-b4b5-46fe-ad31-737bd631617a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede46cb8-da3f-4790-8928-7949dcf7773f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275306fe-cfe4-4841-8d81-7e09ea2ebad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a35de68-06a9-4f9e-90c7-7319c95a3b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94cbc89-48c7-46f8-85c6-579ab7a955b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2963a00-9d91-4456-a568-c1515dd0bbe3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c059e1c-7eb8-48c8-add9-68f75fc44f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8240fd-335f-4f8d-b561-2574dc8440f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0761a35c-1dd1-46b6-b9d4-85e434ef7242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6f13ba-84d4-4dfd-a53f-a15e0d9b550c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4537531-bf60-48f1-9c1c-f9803e25832e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4202890f-b62f-44d9-97b4-1c14ef391aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737ab56a-6477-4c4e-9a19-867656acea31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac5326e-eb2e-4993-98f9-72be150b2b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968a1b30-5109-42aa-b5c0-293e4edf773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5499db0-7870-44fa-9f21-457ad1a33f16",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750bbadd-a3d2-4763-9845-16ad0208fd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56a73c0-5ac7-4171-ab17-b8d6e0880d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d231a8-a04d-4efb-8579-5c7ba38b2e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9c0d43-c2a6-436f-8522-645f0f803c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1a9cb4-14f9-452d-8dfe-54cff95a2703",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29f0686-1fa7-4d8c-ac5b-dc96cf0b5c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8da1665-37d1-487f-b2ca-2c93273ababb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e0108d-2a3e-4f2d-a2cc-edb2fea7c04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c8f3e6-c989-4843-a6d2-ace89b64ae46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b76a8d-5bd3-4396-9163-4c716545c52c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9433e48-1957-4914-b754-68e05e59284a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a32b3bc-ba2c-45ef-aaf5-7fd3f6fef8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e34a6-96de-4df7-98dc-d420637fd6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218a88a6-7a90-405a-a4f4-9fbbc516a9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578d12ac-ac53-4e41-b354-e7a0b39116d6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786a792e-4507-4d00-bca6-3bf06b157116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73163295-ef0b-4bf7-a908-df32f8335e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f881f3e-6e16-42cd-8a87-e9832f24b112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd475f4-f2a1-4145-96a4-76d704796dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cfc12a-0f63-42e7-91eb-648c59a96bd2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76758c36-95c9-4501-96ae-6676c5bcbe5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "877a29ac-8b0a-4e88-ac1a-710f5a52a766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89baa773-3d55-4817-ae3d-ebe2f0f0b94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7440867-e178-4b27-9d6a-91ebf65bc17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa97718-fcb3-46e0-9c5d-dcd26770d3a3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd0f89a-6d07-48f5-aa84-622eaee6d0c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebcfcd03-e9c1-4987-8b89-5f4ce6885941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa14cb1-bcc1-48ea-a0c2-ea8d77d22e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "accca8d9-09e3-4512-a926-8f33451e2aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba734cb4-a04c-4048-927d-26e564da1bae",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2196f36d-e900-4788-a430-7a9fc900eae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fbf6df6-0fd2-48d5-bb68-e9df722a805d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42da8613-e75e-43b1-96fb-1ae6e77b7cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c9a79a-f242-49e0-9e91-092bd2fc8150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74f590f-4dd3-4d23-9de1-da1ab11b8370",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62801884-2556-4bc4-9346-06dec5c7e1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0da803-24f2-47e3-a734-c6debf6e67c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb6e7f7-6d83-4b4b-ae8f-7ab0f8ac1ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293ecc90-8303-4215-8de3-9b505233e233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df21b14-c3c4-4b64-8921-c98c323c4300",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b238d75-3ec4-4e50-a441-c6078611532a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f9be570-e486-4a90-850d-9974c3067f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356d5cce-166a-47f4-9727-79d635736055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20daa4f6-04c7-41bf-b985-8d041695dec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f986a90-3372-44ab-a4db-0b12361db285",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cc4563-6121-4fad-810c-5a1affe63c54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e6bf9fd-a8a1-4f56-88a5-118ce9136703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7ecf6b-5dd5-4a2e-b45a-3240b1162cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d149540d-506a-4183-b6ad-b36192231908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef43a9e7-e12b-4d8a-a4e1-05fe3e00cddf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fc3968-52f8-4347-b751-8ecf58ae0d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb3c6d9-8bd3-429b-bd01-38a11cd5526b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf9f6b7-f673-419a-b117-4d36cfa1e3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cb6726-fa1f-4afb-b855-c28927ffc992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03042fd9-1440-464f-a2f5-12fb3b77ea5c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192e1e22-bed0-49ea-930b-034b26ea4092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba3b1cb-1f50-4ce5-a1eb-fca054d80528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f492f75c-4401-4764-a44b-ddf9209ce084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec1101a-6f2d-499c-9595-bf4ae275addb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69784b7-47f5-4999-9db6-29bf520487bb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47551dc-684d-4f93-b002-77b20aa3470e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f2be69-4390-4616-acc1-5e815cd2b81c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad11a6f1-d50f-4122-9b02-6e3b399b1f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f4dc26-afde-4965-a8e0-fbf6bf7ea026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03307b27-ca0c-4a22-9ff7-be60bd421ac3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5544b28-7e54-4000-8672-7a4ec23a7e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b004a69b-65ed-40f2-a7aa-dad20436acbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aab392-4611-4006-9211-2d3c650be088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27462abd-bdcc-4c98-9108-4e90e5ec5c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096ec5a2-2b54-41f5-aaf5-20f71972182d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f148cb-dc2d-4b3f-92e5-17b55e69ff84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca00d7dc-e4c7-4402-ada2-63afb44ea026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90416fdf-8988-40cd-adbe-21926dd8d67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4790e8-8bc7-43fd-b257-7513ca49cf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097be196-73ef-4bfb-8fcb-69162a18c733",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b35f5b-b76c-4526-834b-5dd25a71655f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40fc068a-2184-44d9-9803-9810b7f06c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465ac33e-9573-49b2-8708-17566bdb003d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbef223-f58b-4f7a-9e03-1f2c712ad97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a291d-17bd-4f60-9027-c22ced012419",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5d8a3f-af02-48d2-b2d9-0e36924692aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c11f718-e027-4fce-8429-54ebdb370d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a59d27d-11ff-4483-af7f-57849bd36247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207a09ef-a178-4309-a7d3-83aa7e939c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38672b6-24a0-4b65-a20c-e8d3b9ae4ce0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a99d2d-750d-4666-9e4e-590b6556ad4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90668066-ba31-402f-ba4b-3da9821d4f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc96840-e040-4939-91d2-85918b1d7cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78324634-99d8-4494-8070-42704460b431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c01525-2c95-423a-98a6-ad2ad6bad50e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf77c0c-b209-44de-afe6-87b5a8727a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "127c3dd4-dd53-4fb5-985a-780de015213e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8ebfab-d317-4845-85df-48ec6593cc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad05135-f005-429e-9971-7575ed3e5b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da331dc6-67dd-4f9a-be45-f78862300097",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c4b0f0-0be8-480f-ae3f-59a35f0a8d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7215edc-a4a2-4fe2-a406-ec14ea10a395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a20a3c-ab54-4d6c-8156-cddd79ba4e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db803670-d122-4bfa-9c15-5b4c70d8e319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38135e92-b9eb-4307-9531-ec73e4e0070d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafb3d4f-7903-43fd-9a32-7ad6463b7140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f9197e-2ff8-4982-92ec-b0f63b9c9d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db9c666-c108-4eaa-b00a-17cdf28d94a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cc4ec2-2b48-4f5d-82bf-645d6b411da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7c6ce9-da15-454a-879d-a490fc5bfa9d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508797e9-1b5a-4072-9648-94500336a31a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b5f4a82-6dba-4a54-a763-6b8ea35af897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab3cb0c-af3e-41c8-afa9-955d9b467601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5688f496-4a4b-4da8-a53c-7d7295a625fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b174a7a-8580-4c36-8925-c61171656598",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b742d397-7251-4728-9c66-70b829475dae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07e4d634-8dcc-4b43-97ee-01d4577cf939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd715e6d-69de-45d8-bc10-705078bf9ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db0f3fe-0ab8-466a-95de-99ca7cc4c9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92981f63-4d80-4c62-85a2-5bb87a91519d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a38f3d-3ac9-4dbe-894b-199c920b1c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8660ac-00c3-4bd7-bf95-d8d76e47b996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9df84d-8c3f-4cd1-9d8f-58dc6c6d2d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca71de11-d5a1-49d7-9e2f-e30061c9b70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89c86d2-83bc-4c6b-a2f9-f14aa43fdb13",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f968b416-d730-46d0-91b1-a53f32155984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0ed2d85-f38d-4da4-8670-683e28637b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab54efa-26a2-4d16-9239-acf19c50b439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd4e609-db5c-41da-b197-ef928d487cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9bd4d4-49ed-4cf8-a13c-78db075d0246",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc59ef26-905f-43a0-9e93-ba3fcc020203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6623214-bb63-4b69-b012-8ac9d9952983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0798fd09-e259-4177-9d37-4b9eb848a0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be46cbe4-2516-43e2-a4a0-4375968f0b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1059d1c5-a4e3-42eb-9b54-4053cea9c25d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebacfe26-c4c8-4a71-a324-428581ffe863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a82268-c97b-4993-a865-7b9eaa0282df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3e60e2-7997-44dc-bd9a-a6fb4b67707a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f134e90d-f402-47d3-9f38-9eb536b9f5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2c3c1d-173a-4d8e-b0b7-26807cb717cd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a238c8d9-9e95-4632-bbaa-a677aa5535e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c70f5690-3eb5-4b2b-b512-5b3549bd32ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214375cd-986b-4351-937b-94fef1f96162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4fcbd6-bf44-4df7-a7d8-b9b6e4978013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e080514e-18d1-4827-bee4-20b43ee49a77",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829409e3-0984-4d9a-97ee-a7de31fe7c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c1fd8e-d0a4-4dee-a2bf-eb430725090f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7cb43a-ec33-47f7-813d-0ceb89bfc172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8cb4d1a-c70b-4115-bf9e-3e1abfede471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb00624b-534f-4ab8-b7a9-8b4e277b28fe",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298d8c8c-a070-46f6-925e-06b62fd2fb76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9caedf1-ee03-4893-b647-6ada32a62484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2580a9f-8b8d-4038-bf59-a856afaf5f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3338eab6-c177-4ae5-a172-925c02d9dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1281131b-f0c6-474e-998c-7f07efeed17b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a644e7-0232-4c3d-9ced-3cebe25c068e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d02e23-a8e5-4d20-af03-881ca1999c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca6b9cd-0816-4510-9702-601a78338d00",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcc1ddf-6821-45d3-aca5-48779f2ec806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae352a2-5885-44e9-93aa-156ee3393375",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ac56ba-eb53-42eb-b1d2-176614234897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8ac1bd5-175d-44e5-beb1-c05dd5f6e031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c305a92e-7f93-4bcc-907a-06e78ca43498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d2bfbe-a8fc-42a8-a4d4-d028a0a83b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148a285a-f3fc-44f5-89d8-bf1ad6849305",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03f20eb-384a-4235-a9b7-cc7dba8198c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "affab344-56fe-4935-b658-04809c79168a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153f4c00-bdae-499d-824e-ed5789a90143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289207e8-a6a5-4b09-af94-a40a761fa079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51939bad-d951-4abf-89e5-09c989d80ea4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a849138-96f5-4209-b164-4a2304e32fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db647557-000a-43f6-8749-0c77e307dcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376d2ba8-0227-445e-a3bc-426cc571bbba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c0857d-f7f6-4930-b78f-a737e13fdc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1041e4a7-9c4f-4b50-9428-dca030c204a3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dc7a8b-f115-4cc8-a08b-085b869bcf16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "241085a9-404f-4d8c-9815-4e8efc78d6cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407d8380-13c1-4ace-821f-b1f480213db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffb5380-379f-4ee8-a875-572270b34338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396ecda0-a657-4562-babd-6c8206ab2ff5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd50bdf-78f2-494d-8a26-c8b8916682c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ada4e6-1d3d-4b08-b9fa-491869c4b82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d3aa73-8303-499a-9470-d882aa19b7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e1fcf9-5dcf-43ec-b962-5542211de74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2e29f0-cc5f-42f4-90a6-05dc55ff9bb0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f018c8-07e1-4221-a796-4893a5d5ab5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbae61cf-d086-4240-ab2d-8ffd4c03f45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5487b5a-2983-4ef0-805d-33b0ad89ff84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78012716-9a83-44aa-8346-272faf5744d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807b7131-d4b4-4a1d-bacf-1b705ee857a3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1569216e-6624-41db-a4a0-c9b835d0f6b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae9de62-6404-4a31-a0cc-e9e47d2af7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7cb519-9ba8-4f5f-b00a-48e2fbea3f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686ce2cd-ee63-414b-a641-e28afb934802"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0da4619-387f-4591-9af4-a38e590d9022",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae0a4daf-7938-4d95-9821-7b42e2c93307"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38a33ec5-2345-4ceb-966b-591e4ad470dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17873caf-eb4e-4039-b21e-eba8f1c274c5"
                    }
                  }
                ]
              },
              {
                "id": "6f3ba010-7d4c-4a87-8ee0-3e57e5cceab7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba49ce39-2e58-4713-994d-c37b27ec5b8f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf14e96-9fb8-4d1e-b62e-fb03f15030e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f75fbf13-834d-4e6f-a8ae-59446a32bc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1e8f4e-d35e-44a2-b86e-9ee0b663f16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d92b29b-7c55-40dd-92f8-81b0bcc193a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0dc54e3-1bc8-45fd-9f75-3f9021a71bd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83cb51c4-e3e6-4c33-8ac6-b8063c789dcd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6179654c-3757-4984-ac3e-7f7fea45859f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9460017c-6a97-40a2-b984-a66f3d2562fd"
                    }
                  }
                ]
              },
              {
                "id": "91fb0439-b04b-43e9-b4da-da104e134799",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2eaa920d-5c60-4419-911d-eaff4a172ea7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9058c949-aa64-4e44-986d-37722c7d0915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96c06ded-4dce-4e43-bd4e-b224aee7ae17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d08a856-4a86-42fa-95d2-401812447423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d3bc80-fc1e-4782-ad36-ddcb96743b20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6423e3d2-1a1e-4084-9f3c-e1d808b7a274",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2aee27e9-322d-4930-9863-2173fd9588ee",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c50bfc9f-3f40-4e1c-a25c-3b1867c944b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1ec1129a-3173-4ff4-8792-fa3f240461b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93d38523-7572-49b2-b69e-dcd5f79b955c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cfd62dc-b457-4ad2-bf6e-8564d188a164"
                    }
                  }
                ]
              },
              {
                "id": "b50c23e1-564d-4fc7-8e4b-568dddafc2e7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "898f727e-e096-47f9-8b3e-47f245ca32f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bea9a16e-af58-4220-b9d4-ced58286514d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c110a796-ef60-497b-ae38-c5802b1791ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b36baae-dd99-4d87-9178-20f95a758721"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bdf9392-6269-4b5f-8ecc-958ba6feb120",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bc238fd9-2033-43b6-9203-24e6766e13b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b41cb392-d72a-4f9d-ab26-4f99ef9a731a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a522b682-4b63-4cca-8801-543e3670b163"
            }
          }
        ]
      },
      {
        "id": "14f1d9b7-5c91-4a6e-94dd-90340fe68c94",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd39195e-e1cc-408a-ad5e-2bec2fa9ca2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4182392c-d933-48d9-aa81-56eab454edf2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf4338a2-df77-4663-89c0-7cc18b07ab44",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cead3cd-f1f1-49df-8c5d-b1e3da808db0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9a19f2ce-c0b7-42b5-9de7-897c16164064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da902f6c-381c-4eb9-a298-a2f02c492e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c59fd349-6548-41d2-a9ca-368057f943c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8190178a-aad3-4cc8-8ce6-febcec570253",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8141b0f3-7a5f-4dc1-bf96-e40dd7e9dc5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6bc9afb-6ade-455e-a76c-527d5b5d751c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83eebd39-fcb7-43d4-ade3-63c68ed30623"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "807f78dd-1eeb-4962-88cf-828d803e9833",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "97e30c4e-90ac-4fb7-9802-3915d9d23cfe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a832ca40-ae43-4a13-8935-36b67bd2195c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7de1ae21-fd1a-4423-b291-828169a1a79d"
            }
          }
        ]
      },
      {
        "id": "73d52d95-6a31-42fe-94de-a2a23608262b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9511ff3a-a889-4097-9b95-dadb811a4f7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b4decb1-958f-48ff-984d-9f5a4ca1c4a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8162a8c-a514-4169-ba28-822d47ebe6e5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0064fe77-dd55-49e1-8bf5-2e8475548555",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fb3e8db-7faf-498a-b34d-d9047bb2e8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb6de5e-5704-4710-84fe-bc1c71786f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2822af65-a3ee-4567-83e8-c673ce4d33cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87c4c69b-3032-45b4-8720-a8f4b318bb95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "263e1647-c9d3-4366-82e7-811738ef33c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cf73d92-2290-45b8-8ad1-e94ea70eb262",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "832d40a2-091b-4d26-8733-48b9d8d7a291"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "850b35d3-5ada-4787-80dd-53d81789fa05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4fc97e53-a9e4-4f3d-8511-684e80ba8b6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76d8a9d4-96cf-46f1-944d-495468e32cfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a021642-7954-4cf9-9374-f5d4c3211db1"
            }
          }
        ]
      },
      {
        "id": "f790f358-95ce-4746-84ca-5875e7997063",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fe2ab4b0-c910-4351-95c8-74be707dc099",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48931fe6-0b17-4926-a551-f99bd3b9a2f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72a5faeb-76df-4b93-917a-b979304e213b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9648e7ab-7386-453e-94a0-e8f6c1f3f335",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49895ebc-7d69-40be-abb6-40c0fdfed99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fba2efb-ec1a-44d4-b91f-8be96acf48c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "062868d4-deba-4dd3-a60d-1a71f04f9259"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b11728-491f-47e6-942f-cca0dd834910",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "720fa3fd-817c-4c8e-bc6c-cf415f017497"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80793e13-9ed8-4948-a7d9-c370cc06c3a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a05eee9c-9d30-4e4b-9196-ed65f007f177"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a647475-2564-4232-8267-3bf3d45d110e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9d31564-e809-46df-ad5e-e5f8e129503f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a9f562d-d566-4baf-be7e-52e36d4577bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c427b0c-36f4-4175-934d-f5ac1b39617a"
            }
          }
        ]
      },
      {
        "id": "078c8230-3db0-4463-b7a5-3d3e5011d4c5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66cd88cc-c94b-47c4-a4fd-8d5ba36c5082",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4de99024-ea8b-4690-8af6-8e95f7d195a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8fc0a6d4-13a7-4f1e-b04e-a097624ef484",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "030d2d43-a1ab-4c9f-b504-aa68bdf2330f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72fb118d-13eb-45f9-9f49-442caabb27d1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 29.63095238095238,
      "responseMin": 5,
      "responseMax": 254,
      "responseSd": 22.314729153368834,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712277317922,
      "completed": 1712277333497
    },
    "executions": [
      {
        "id": "0e961134-c9cc-4bab-8624-ef17ea895cac",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b260f664-9bfb-4657-80c2-aff885b04690",
          "httpRequestId": "e99ae461-8b1c-438b-af28-ade601dd1317"
        },
        "item": {
          "id": "0e961134-c9cc-4bab-8624-ef17ea895cac",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ec82b604-231a-400f-aaaa-78ccaf5dcf08",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "bbffa65b-2300-491e-bd11-303855c233f0",
        "cursor": {
          "ref": "ce38450c-cee8-48f0-9c32-11c72e253089",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "022af323-f881-4b74-a285-ee93aca8297a"
        },
        "item": {
          "id": "bbffa65b-2300-491e-bd11-303855c233f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7cd7d13b-791c-4720-b57f-fe260c003090",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "f580492f-90d1-4b45-8816-168ac0febfe2",
        "cursor": {
          "ref": "5b142cca-0584-4038-bcf1-1dab7bab6dec",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "741d7f7e-da62-4910-a67f-f07609b314e2"
        },
        "item": {
          "id": "f580492f-90d1-4b45-8816-168ac0febfe2",
          "name": "did_json"
        },
        "response": {
          "id": "003945d5-3bdb-4a91-a794-363de41281b2",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948d56db-391a-40e9-8088-39888da95135",
        "cursor": {
          "ref": "dccf5905-fd06-4127-a166-eee83db58220",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "afe8b432-f5e4-41be-862a-7dfebac8d874"
        },
        "item": {
          "id": "948d56db-391a-40e9-8088-39888da95135",
          "name": "did:invalid"
        },
        "response": {
          "id": "f4aeedb0-d34f-4d59-b37c-a407045ee3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948d56db-391a-40e9-8088-39888da95135",
        "cursor": {
          "ref": "dccf5905-fd06-4127-a166-eee83db58220",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "afe8b432-f5e4-41be-862a-7dfebac8d874"
        },
        "item": {
          "id": "948d56db-391a-40e9-8088-39888da95135",
          "name": "did:invalid"
        },
        "response": {
          "id": "f4aeedb0-d34f-4d59-b37c-a407045ee3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2d2e61-1f97-4d59-b67b-e4e8f72873d1",
        "cursor": {
          "ref": "7669c541-7b4a-4a0d-9c13-f8db7e73738f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "60f2e168-ab23-45bf-833e-7b02ea715943"
        },
        "item": {
          "id": "7d2d2e61-1f97-4d59-b67b-e4e8f72873d1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "866733a2-0872-45b6-8313-74a2ddc8aa43",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b534af-4751-45d9-815d-0c9795b52b3f",
        "cursor": {
          "ref": "fcbff6ac-1057-43d1-8403-31e9b3c46f89",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "abe10b08-dff1-4171-b413-a76962c4b624"
        },
        "item": {
          "id": "60b534af-4751-45d9-815d-0c9795b52b3f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9f5b32ec-0a38-481e-a05c-e6e14f616e10",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204cc82f-cdc8-470f-a54b-712cfa2c95e5",
        "cursor": {
          "ref": "761c586c-7808-440c-923c-048714d2ab15",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8e90e165-46cb-431e-876f-a6589ba1d3a2"
        },
        "item": {
          "id": "204cc82f-cdc8-470f-a54b-712cfa2c95e5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b3e4cf8b-4a6d-4344-9417-dc1b7172f981",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fa0427-4d59-4f5d-9b3e-cf3ea8a40543",
        "cursor": {
          "ref": "2d37f4e9-7040-4900-8fcf-de94e956d7f5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e95a0fa6-5b50-4924-a4eb-2c91b484e19c"
        },
        "item": {
          "id": "91fa0427-4d59-4f5d-9b3e-cf3ea8a40543",
          "name": "identifiers"
        },
        "response": {
          "id": "63985c00-007b-4c30-816c-76480f692f6e",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4a0598-fd53-47d0-b061-e2dbcc3474bb",
        "cursor": {
          "ref": "2cec207c-518a-45ee-b7ef-286d9d873488",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fc7fee5e-2056-4ce7-9781-f96b1cd8813c"
        },
        "item": {
          "id": "1c4a0598-fd53-47d0-b061-e2dbcc3474bb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1d8e6008-fed0-443f-959b-b26639d962e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313b2667-8ce8-41a6-98fc-7ae9a428e29e",
        "cursor": {
          "ref": "170b6d2b-53ec-405f-abda-7562175c0399",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c42b739c-29bf-433c-bc62-ca76ace6d6a3"
        },
        "item": {
          "id": "313b2667-8ce8-41a6-98fc-7ae9a428e29e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "29b82f38-ef67-48fa-9892-42449ee9570a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc22d644-e7b8-487b-b65d-274e1fa25a50",
        "cursor": {
          "ref": "e4d494bd-e2c8-4ab1-801e-f1ff90619741",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4901922b-88a0-4ee4-8838-0b705d7fe50b"
        },
        "item": {
          "id": "fc22d644-e7b8-487b-b65d-274e1fa25a50",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "472148fe-551a-4461-a833-f5678518b194",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5938d7cb-bebd-4327-85be-285fc43f97cc",
        "cursor": {
          "ref": "7a98aa16-b858-4653-81c8-08726e13f468",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e4410b2a-7998-461c-a5e9-339c4fb3b54f"
        },
        "item": {
          "id": "5938d7cb-bebd-4327-85be-285fc43f97cc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d234b3ef-e8a6-42a0-a8c4-c9dece300bba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee00275-8c0d-4eca-823f-ecddd8819391",
        "cursor": {
          "ref": "26a27923-d0d9-4f04-b4af-f66293258309",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0549af7a-dba1-4b99-8419-1a1bfa1041b5"
        },
        "item": {
          "id": "5ee00275-8c0d-4eca-823f-ecddd8819391",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b7a3137b-a16b-461e-ba07-59b61f4cd452",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f96867-cc33-434c-8a09-00015fcecdb1",
        "cursor": {
          "ref": "e8b9b77c-8888-405b-91f0-3f9d4b50b3b6",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6e704837-90ce-482b-83da-500cbd8d46f8"
        },
        "item": {
          "id": "a6f96867-cc33-434c-8a09-00015fcecdb1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "083c41e5-31bd-4232-b740-529a0cbbfc15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901feee1-dc95-40b0-82e9-68d265b32d63",
        "cursor": {
          "ref": "dd2c3cb3-fdaf-4cd1-81ec-109493bc68c3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a1025488-9f16-4069-9348-c2faecdafab5"
        },
        "item": {
          "id": "901feee1-dc95-40b0-82e9-68d265b32d63",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a4e2e309-78f1-4d95-9ca1-ca52579ad83f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef07cb6b-1d34-4f67-9555-d1804212fe77",
        "cursor": {
          "ref": "2a04bb09-1b79-4fcf-a7d0-4adb458864ed",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5d0c8656-552c-4ceb-b0f3-99197092f4c7"
        },
        "item": {
          "id": "ef07cb6b-1d34-4f67-9555-d1804212fe77",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "62b3fce7-04c2-4fdc-b76d-2d12c9d7720e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d7513b-318a-4643-b118-7e6d2b34efb2",
        "cursor": {
          "ref": "6546c728-83a5-4a4a-9504-afe3e47034fb",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7fdb147f-2a22-4e31-89e1-50bce18c1c35"
        },
        "item": {
          "id": "f9d7513b-318a-4643-b118-7e6d2b34efb2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "84c88bce-66e7-4a66-be59-4779912a3a73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43dba4c9-74dc-47ab-af0a-a8d12cf97eaa",
        "cursor": {
          "ref": "15c952ec-e488-4334-a029-5d1a96366fae",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "477d4bc5-58e5-460f-a823-cae78d70a96c"
        },
        "item": {
          "id": "43dba4c9-74dc-47ab-af0a-a8d12cf97eaa",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "08ced8f7-ca29-4a38-a33d-0eff410b8d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fea02b0-5d84-4b3e-b962-038d0523c554",
        "cursor": {
          "ref": "3194773b-3516-4e8a-bf61-285ce05751fb",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3adc7ac8-13da-4cd3-8354-cba6b91d348b"
        },
        "item": {
          "id": "5fea02b0-5d84-4b3e-b962-038d0523c554",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "48822096-324f-4bec-b317-c034a7cc6b33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10849f89-d77e-41b3-b61e-e84517083408",
        "cursor": {
          "ref": "4bb88a70-4424-45d5-8414-8b2ca4e55d44",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "058b63e5-8c8b-4819-8403-dee9d9cabbcb"
        },
        "item": {
          "id": "10849f89-d77e-41b3-b61e-e84517083408",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a5f94e30-fe13-4583-88ce-9b6ba487e6f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0957243-95d6-4843-a093-a7de85d876c7",
        "cursor": {
          "ref": "90e786d3-4411-42a4-a85b-47d32872d171",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "63b1f3e0-ced5-4757-af74-730501e2f3de"
        },
        "item": {
          "id": "f0957243-95d6-4843-a093-a7de85d876c7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "48f81e03-3017-4e00-b412-b811ffe215a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfa8a3d-e7c3-4df3-8ae6-05b64bf9039c",
        "cursor": {
          "ref": "9e1e9ab8-46c7-4442-b63f-c63ebf8d13d2",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6053214b-7fa9-4c5b-9f08-f9ed024a7fe2"
        },
        "item": {
          "id": "bbfa8a3d-e7c3-4df3-8ae6-05b64bf9039c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bed9174c-58da-43bd-838a-0860d8cd85e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602c37d4-373f-4622-9ddb-fe1108b8868c",
        "cursor": {
          "ref": "8aaa482b-31f5-435c-859d-a7c0fdb0fe36",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4342f655-bafc-496a-afe2-dc0abff113a5"
        },
        "item": {
          "id": "602c37d4-373f-4622-9ddb-fe1108b8868c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e8d938ac-511e-440a-befb-7bf74526d526",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e79d33-26da-45af-a836-6ddfbf0468bb",
        "cursor": {
          "ref": "70d9df38-80dc-4462-993d-d0fee448302a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5b8a9b8d-4327-42c7-81f6-6dabc48d28e5"
        },
        "item": {
          "id": "31e79d33-26da-45af-a836-6ddfbf0468bb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "99c9766f-2555-469b-a406-eccbe8a6ad12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d853de-2883-4fa4-977d-ec4fce8f357d",
        "cursor": {
          "ref": "26586237-90c6-40ea-b6d3-311cd95bba6b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0c9fd485-5f14-4e10-9e82-df2f34e4783e"
        },
        "item": {
          "id": "30d853de-2883-4fa4-977d-ec4fce8f357d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cf067062-c7e8-4441-846c-e9c7fcaa1009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574b6daa-625c-4d08-8f9f-7b573144e8ac",
        "cursor": {
          "ref": "6fbae90a-817d-4c45-859f-8aa1385bcb84",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d258eb32-3ff6-48f1-94ee-3fc1a62ac804"
        },
        "item": {
          "id": "574b6daa-625c-4d08-8f9f-7b573144e8ac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2f848b83-bfe3-438b-913b-98e44780afc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d15e894-2f80-4e45-9847-a6d9b84940ca",
        "cursor": {
          "ref": "f50ae71c-66e3-437c-b6e5-a9b72f2cb8f4",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "03c1b85d-a597-47db-a1cf-8745a9e49548"
        },
        "item": {
          "id": "0d15e894-2f80-4e45-9847-a6d9b84940ca",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ece3f5a9-ae37-4f26-b885-a54294636feb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5901e0-226f-4429-90c1-f16737252c79",
        "cursor": {
          "ref": "75c945b9-1a65-49ee-aaa9-84ef504f49cf",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b7964be-3d97-46f9-9194-28efe71da050"
        },
        "item": {
          "id": "3e5901e0-226f-4429-90c1-f16737252c79",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ccd988af-5cab-4e00-a95c-cd1e1ca76832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa03a47a-1777-4c7a-8984-611d0d611fce",
        "cursor": {
          "ref": "45c2060d-9229-4e63-912a-165a5c6fa9c9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6038410b-cea5-4694-a05f-15f2bb00b8ce"
        },
        "item": {
          "id": "aa03a47a-1777-4c7a-8984-611d0d611fce",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0dfbf8d0-c24c-4bbf-9981-525b40f1d271",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabe6db0-8626-4d7e-827d-09d77af721ee",
        "cursor": {
          "ref": "ba5907f2-fe19-4655-b568-55f651d966b4",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b8fe5662-ecf1-47f4-974e-bbc03fc5746e"
        },
        "item": {
          "id": "cabe6db0-8626-4d7e-827d-09d77af721ee",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d915f8b2-16b1-47f8-a57a-7ac93679f085",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab75b13-9011-409f-9401-138f00de4ef4",
        "cursor": {
          "ref": "afed09b4-9d40-46aa-af74-6294948f7d14",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "510f3e65-e8c8-45cd-8872-369d345bd6e1"
        },
        "item": {
          "id": "9ab75b13-9011-409f-9401-138f00de4ef4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b8317b8f-2754-4ca1-81c5-f3e4e6e71886",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc385e9-3ebb-4e7b-bf55-a1075e23a03f",
        "cursor": {
          "ref": "77538297-f391-4246-ba6c-2f5db7eba9f7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d8f696e4-7acd-4993-ad19-d4eff0e52909"
        },
        "item": {
          "id": "6dc385e9-3ebb-4e7b-bf55-a1075e23a03f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b639065a-5c43-4320-a446-186592362b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc3afe9-a5ac-4507-9d25-3dace8ca0c5e",
        "cursor": {
          "ref": "51275a3a-5740-45e6-9486-6b2326704648",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0c96f6f7-0bbc-48ad-8bba-ec484f786a74"
        },
        "item": {
          "id": "7dc3afe9-a5ac-4507-9d25-3dace8ca0c5e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ff4edade-fe69-4672-93cf-e3c2f6dbacbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c80a21-a039-4b39-82d9-aae7f5ee7cd2",
        "cursor": {
          "ref": "c2cc836b-efbc-42f2-9961-22196af4da1b",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e75aac16-98a1-4206-9cf0-493082bea221"
        },
        "item": {
          "id": "62c80a21-a039-4b39-82d9-aae7f5ee7cd2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e10a1eac-bd07-4beb-a717-9e608bc709aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5485210-e5c7-492f-93db-85c01f3427e2",
        "cursor": {
          "ref": "d4d7874b-55eb-4cc3-840e-01df5de0eef8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "524833e6-b3a2-41a9-8366-90fe9e96a99c"
        },
        "item": {
          "id": "e5485210-e5c7-492f-93db-85c01f3427e2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e2acdb97-e596-4f2d-946d-55fec8fa2346",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baee3b0-d3a4-4d5c-9dca-6de2a844ff6f",
        "cursor": {
          "ref": "d7accf87-b2cc-4632-ae1c-bb9055c37cca",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "41338355-72f1-4dda-b291-e570e117c4fc"
        },
        "item": {
          "id": "4baee3b0-d3a4-4d5c-9dca-6de2a844ff6f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "557f17a6-e4b7-4c75-a2b5-0d82725ede44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38d5628-9bd8-4cd0-9c6e-ad71242fb15c",
        "cursor": {
          "ref": "1836f61e-e8d4-4afb-86e9-bf6e5eb36ce4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9a1beb57-104b-4118-a84b-c423e824abcd"
        },
        "item": {
          "id": "d38d5628-9bd8-4cd0-9c6e-ad71242fb15c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "efe61059-d3a1-4965-aebf-68c8d0c644ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaaa100a-124e-48bb-b95b-61a8156b0816",
        "cursor": {
          "ref": "3db9b200-03b3-42bb-840a-ed486b2ce261",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "605b86bc-242c-4e3e-9327-2edfa8c5096b"
        },
        "item": {
          "id": "aaaa100a-124e-48bb-b95b-61a8156b0816",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "297f14dc-3ac0-4441-b7cf-439c08f698e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21182f34-c7b6-493e-939c-ccfa3456a30f",
        "cursor": {
          "ref": "7ba9f040-4333-4b3a-812c-3cb3ab177822",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "875d19c2-bfef-4867-b78e-aaa5b482b472"
        },
        "item": {
          "id": "21182f34-c7b6-493e-939c-ccfa3456a30f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1e346bcb-5609-4910-b797-9e9598d7140d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f545346a-86a6-4892-a5de-e7caf4214b84",
        "cursor": {
          "ref": "169030d8-1eec-4dfa-8c37-053b25eebda4",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "69c0868b-3325-4a2d-b537-b175aa58c295"
        },
        "item": {
          "id": "f545346a-86a6-4892-a5de-e7caf4214b84",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5b9a9963-1b7c-4a23-a001-89cf83b9b9f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7d0b6a-e0ed-468c-bf42-257508f6a745",
        "cursor": {
          "ref": "a76293ee-e001-4e4c-85a1-93dc11f42257",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0e47761b-335e-429e-b9e9-9df0165ce0c6"
        },
        "item": {
          "id": "1b7d0b6a-e0ed-468c-bf42-257508f6a745",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "47bd72f6-d906-42cf-a01b-83ea32972795",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a64e5b-a85f-4908-b5c3-dc54e0813cdb",
        "cursor": {
          "ref": "bdeb3d16-94e3-4202-8f84-79680063ff95",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "86a991e8-99b9-431f-b283-9b48ca3b7b7a"
        },
        "item": {
          "id": "27a64e5b-a85f-4908-b5c3-dc54e0813cdb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f4015716-6b25-4a9a-a57c-58a447dc4035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f582d3b-840f-4d7f-bc72-b1d63e961693",
        "cursor": {
          "ref": "8093f392-880b-4839-9457-a49f405a150f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c49bf999-76a3-4505-90cf-297ed9c22e7a"
        },
        "item": {
          "id": "9f582d3b-840f-4d7f-bc72-b1d63e961693",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0cd7c41d-1876-4bd7-8620-11717451125a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6cdecd-7679-475b-8347-4b75fd5f242c",
        "cursor": {
          "ref": "082aca8b-67b2-4425-bca1-3dd600b3366d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d56295ec-8e25-44c0-a010-3ebd68eb96bd"
        },
        "item": {
          "id": "ee6cdecd-7679-475b-8347-4b75fd5f242c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1732ea9b-4e65-4612-9011-6cbbb4830dee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc86f44-4d90-4b64-9f08-c2644c0b9a93",
        "cursor": {
          "ref": "ec29ec21-456d-4e88-a9f9-8b414d092fe5",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7e61740a-d804-4098-b206-0504c9604161"
        },
        "item": {
          "id": "1bc86f44-4d90-4b64-9f08-c2644c0b9a93",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "164145e4-b959-417f-a3fd-098d330bf264",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083426a8-a48d-4786-bafb-8f6bfc66cf9e",
        "cursor": {
          "ref": "232d719b-2c97-44c8-aa6b-fea1394ba09c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c70ec6a8-b4ec-4de8-b36f-cdbec8b6cd9c"
        },
        "item": {
          "id": "083426a8-a48d-4786-bafb-8f6bfc66cf9e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ae8399d7-6e78-48fa-8cea-ba5bcadb5df3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a0c40a-f523-48f6-9892-813fbe018c20",
        "cursor": {
          "ref": "3c2d31c6-9f46-4c36-800b-e5a0deb3978e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "92f5f0a8-7688-435e-ab4c-96fca64053c6"
        },
        "item": {
          "id": "72a0c40a-f523-48f6-9892-813fbe018c20",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c7895e66-3aee-42d7-9bdf-55b5b2fe7ddb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9b41db-785e-45b8-bf10-653ac6e6f65f",
        "cursor": {
          "ref": "bc345b0b-0eeb-4ec9-86d2-e08a78b854c0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "69604216-09fe-447f-b760-700f74f688bd"
        },
        "item": {
          "id": "7e9b41db-785e-45b8-bf10-653ac6e6f65f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8745cf62-7efb-49d2-b064-9f7a2752b28c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d161705-bb9a-4cfc-b29a-5bf187704af6",
        "cursor": {
          "ref": "8fa414e4-e17b-4e28-849a-c00a07d35d6f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "feeef022-2bec-4312-9ccc-c3a0a4667001"
        },
        "item": {
          "id": "6d161705-bb9a-4cfc-b29a-5bf187704af6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "033aa381-4a9a-49de-9693-70c68d5a4ebd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fccb828-23e2-4bf7-8aa9-fa63db61f0ac",
        "cursor": {
          "ref": "9517c888-621e-418d-928c-10493fbfd3d8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b1c1e4a0-4363-46d5-af0f-b7c512a04619"
        },
        "item": {
          "id": "2fccb828-23e2-4bf7-8aa9-fa63db61f0ac",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "341ced89-c43f-48a0-8256-59e1756c024c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27485cc8-96c2-4952-8d2d-f19413855a4f",
        "cursor": {
          "ref": "5b2e752d-2e99-434d-b667-d324c3e47e89",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d479f5f-31c6-4519-a13c-27ecad25c056"
        },
        "item": {
          "id": "27485cc8-96c2-4952-8d2d-f19413855a4f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d0302420-c201-4da7-a776-1e1da8839597",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883afc2f-d350-4b1b-8642-6fede3b60a75",
        "cursor": {
          "ref": "fe68b1c4-b17f-4c87-893d-57b51b60f955",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5970ea38-5b75-487f-b46c-2f2b30f54095"
        },
        "item": {
          "id": "883afc2f-d350-4b1b-8642-6fede3b60a75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ef897c38-7839-4d32-81a3-75682cf3c9c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005c0627-629e-4116-9b6f-81bfad0c647e",
        "cursor": {
          "ref": "0d292b92-a64b-4192-a65e-5866d4939f23",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "230dc25c-9784-4f89-ad16-8112224330fe"
        },
        "item": {
          "id": "005c0627-629e-4116-9b6f-81bfad0c647e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7ddb7a18-83cf-4799-a6bd-3d94ef6ccaf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac83562d-5f26-4a72-8748-5e5fa9f9966f",
        "cursor": {
          "ref": "33ae2279-68e2-4616-8b10-9e49bca7b609",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "be31e110-1cee-469e-a50e-0bdc27d8c8eb"
        },
        "item": {
          "id": "ac83562d-5f26-4a72-8748-5e5fa9f9966f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0af67b8b-808e-4584-b74c-930c10a38697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669e59d2-00cd-4714-9d05-bdaa101effd4",
        "cursor": {
          "ref": "6b7db227-11c0-454e-b8a5-2174f8c86288",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ae4d536c-f904-4643-95eb-f6cec52e6ae0"
        },
        "item": {
          "id": "669e59d2-00cd-4714-9d05-bdaa101effd4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "211c7dbe-7af4-46d6-8da6-d82d1dd77fe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7037eb6-d6dc-4b54-8977-b1cc05525981",
        "cursor": {
          "ref": "e21f2231-ffbb-40b3-92a1-07b3bc4afe2f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2b4f4665-b4c9-4032-a9af-3960a911c94e"
        },
        "item": {
          "id": "d7037eb6-d6dc-4b54-8977-b1cc05525981",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8ea05f3f-a8a1-4908-a8c3-c18aaa48ea5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6356ce-48d6-4b4c-a662-50eb0d92946b",
        "cursor": {
          "ref": "2af085d0-bb37-400f-b216-b0724bf55854",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4deeb70a-ce4c-4be3-8263-19046e346494"
        },
        "item": {
          "id": "8b6356ce-48d6-4b4c-a662-50eb0d92946b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "018f016a-dc29-48a2-9ba5-02580fa4fa3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46641256-cf67-4acf-b792-c52f2ff3e982",
        "cursor": {
          "ref": "1910d501-0ee6-4da0-a8bc-a851a3a3b1ff",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "72c02fcc-6581-45d1-94e1-93519e22f5de"
        },
        "item": {
          "id": "46641256-cf67-4acf-b792-c52f2ff3e982",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "34438bc4-3622-43d5-9d38-bbf076875d2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e38a510-ddff-4eeb-a041-b240da856940",
        "cursor": {
          "ref": "dd132796-4922-4532-89d6-81304f6659a4",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "605b52bc-a9b6-4197-869e-7c725e6a2d8f"
        },
        "item": {
          "id": "7e38a510-ddff-4eeb-a041-b240da856940",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "720f8b72-a185-40e6-a4d7-ed7e64324c44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893a6e39-546e-49e0-924e-7ef2fcccc7f0",
        "cursor": {
          "ref": "7927b756-8db8-4dcf-93ed-901cbaa38fd6",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6d8f47f9-3ee2-4448-bf87-750b3508f700"
        },
        "item": {
          "id": "893a6e39-546e-49e0-924e-7ef2fcccc7f0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "df77eec1-2d4d-439e-ad6b-c08ba79963ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3672ed-9a5e-4780-90a3-97d7435e7a68",
        "cursor": {
          "ref": "4cf531e9-28df-4216-a902-fd695ea496ad",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "af42476a-19ed-44f4-8a81-b6272f70a2ce"
        },
        "item": {
          "id": "1d3672ed-9a5e-4780-90a3-97d7435e7a68",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "437c223f-a8d5-4baf-acbd-f5f13957f119",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7492bb6-c6b9-4f85-9019-537e3a4f9a5b",
        "cursor": {
          "ref": "d3fef016-f681-4b71-aa43-c34a3dc156a9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "36ef331e-cae5-4cd0-956a-bc11f34b464a"
        },
        "item": {
          "id": "f7492bb6-c6b9-4f85-9019-537e3a4f9a5b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "18a2e3de-4c6e-4441-a7c1-aece8d342d34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c92aaf-1cb6-4b0d-a0c7-1a29a8da50c4",
        "cursor": {
          "ref": "de750eb0-2598-4a9b-bd3b-e6cfe8824d52",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e4a738cc-4008-48e4-97ce-7927653841f3"
        },
        "item": {
          "id": "95c92aaf-1cb6-4b0d-a0c7-1a29a8da50c4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "66dfe2c7-a51d-4420-bbd9-56c3134a7c70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff9c33b-b03b-4473-b5bb-f845eb0731ed",
        "cursor": {
          "ref": "fec35eda-8beb-42b4-bd0c-13ee2b90933b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "15b69a0a-d406-4716-a8f5-a23273ec4bcf"
        },
        "item": {
          "id": "2ff9c33b-b03b-4473-b5bb-f845eb0731ed",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2d4550c7-9659-47bb-80b3-2d04c66ccd24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b819fa-fa74-412f-99ae-e15bfcb477f5",
        "cursor": {
          "ref": "f9950e78-7430-4f8b-a966-56781716484d",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c9d47aa0-f7ed-456b-a4cb-153fdf316699"
        },
        "item": {
          "id": "c9b819fa-fa74-412f-99ae-e15bfcb477f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aca2ecc2-ac01-4ba3-850b-182731f66a6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846d495c-e970-41e7-8ffc-b19ebc027af9",
        "cursor": {
          "ref": "f930feaf-c394-4fc3-a261-7b1d68d8b68c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "89f21051-9515-4edc-858e-3b93e751bcc4"
        },
        "item": {
          "id": "846d495c-e970-41e7-8ffc-b19ebc027af9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3b8cbbb1-d84f-4cf2-8479-6a3180aaf0c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f37788e-fef8-4f47-8c38-82887283dc7d",
        "cursor": {
          "ref": "ae5a4cc4-1c43-4021-8320-51aeb8180e3a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d95c5bb4-29d6-447f-a069-5a44e408f400"
        },
        "item": {
          "id": "6f37788e-fef8-4f47-8c38-82887283dc7d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "30676552-a7be-413b-8afb-b6f0497acd96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c66dca1-7109-43af-a583-1e79c0388785",
        "cursor": {
          "ref": "15d2c934-e549-40ca-adb1-a6eabf1095b9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "53232b2a-b334-461c-8b03-76f710b8345d"
        },
        "item": {
          "id": "7c66dca1-7109-43af-a583-1e79c0388785",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dc35ccd4-61c7-482e-a43b-6cf01290c7d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2377a4e-5a7e-41cd-af14-479f461f1f49",
        "cursor": {
          "ref": "9ddd957c-b4e1-4009-a6b3-9d68eb0cfe55",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "09902bfa-bed7-4eee-afd7-617854ce7b38"
        },
        "item": {
          "id": "b2377a4e-5a7e-41cd-af14-479f461f1f49",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7b4d4c6f-c005-4895-8dc0-e88ccc7feae1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8a102a-965a-4ba3-81d3-5e3a81a99f86",
        "cursor": {
          "ref": "84987edf-6daa-4180-b4ec-97e5f5bd3537",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b3203712-4f92-4215-9334-4a5889f48a4b"
        },
        "item": {
          "id": "8f8a102a-965a-4ba3-81d3-5e3a81a99f86",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f9baa551-317d-4f06-9de7-393140503db7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ee2837-8cd1-4f3d-9353-b9bd8d6cb91b",
        "cursor": {
          "ref": "ec2b25bd-f688-498f-8fdf-aecb988bf030",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "44742796-335e-45bb-94df-aef1155964bc"
        },
        "item": {
          "id": "09ee2837-8cd1-4f3d-9353-b9bd8d6cb91b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0645fc02-7a3c-4813-ba98-3cd716fb22cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8016807d-190b-4095-a3cf-dd757e6a7a03",
        "cursor": {
          "ref": "efcb9cad-1d26-4877-8f62-6266b8831052",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b84650f6-3d40-42f2-856d-c899aa72aa6b"
        },
        "item": {
          "id": "8016807d-190b-4095-a3cf-dd757e6a7a03",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d3c62eb4-3b82-4e26-a896-86f58527eeca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c6b2e3-0cd1-4e4f-924c-1dc6943747c0",
        "cursor": {
          "ref": "306666df-7331-44fd-abec-a603d1a46623",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "92a5983a-5e25-4f35-8677-31ab22b1bd14"
        },
        "item": {
          "id": "66c6b2e3-0cd1-4e4f-924c-1dc6943747c0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f64a4631-0dce-4ed9-ad21-b9971634b128",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3ebbf7-9830-4e61-b751-e13d47f728d2",
        "cursor": {
          "ref": "874d106b-b9c9-42aa-8eae-612bfd6af2d2",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e8900d1f-8b4b-4e84-8b16-7ab01cc13a5c"
        },
        "item": {
          "id": "eb3ebbf7-9830-4e61-b751-e13d47f728d2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0a8bc635-7fe3-4c39-b597-5887f671bcc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8fccba-063a-4283-b957-e69896e062d3",
        "cursor": {
          "ref": "39ae8301-abae-404e-a30f-7cbb2489f52b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2d9adb0d-c801-4e5e-90aa-7e446335ff43"
        },
        "item": {
          "id": "8e8fccba-063a-4283-b957-e69896e062d3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "39f4e6f2-8000-40e9-bd4a-ac70f92a6bb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6e4f0c-115b-44c9-8a76-157f7ddd0d62",
        "cursor": {
          "ref": "636a7474-9358-4559-a17f-07eb811c4626",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5f3446b3-edc1-4ed0-b65a-2c35782f378a"
        },
        "item": {
          "id": "ad6e4f0c-115b-44c9-8a76-157f7ddd0d62",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "69f950ce-c63a-4198-9691-189bfe726f16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adb7c70-1ba7-4e20-beda-7f2a447a217b",
        "cursor": {
          "ref": "efcfbde4-a125-4f80-b0de-e554272b7797",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "05df893c-dfde-49c1-b879-4213db552632"
        },
        "item": {
          "id": "6adb7c70-1ba7-4e20-beda-7f2a447a217b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "737c1856-f6a1-4a99-93fc-f983abf0fede",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b714ee-178a-402c-85f1-e51c49c14c2b",
        "cursor": {
          "ref": "97935c2c-fcc9-443c-a6b2-eedb52d30b5c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "84738241-be86-48ce-9828-8c5e383b1829"
        },
        "item": {
          "id": "e0b714ee-178a-402c-85f1-e51c49c14c2b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "47f26150-49b6-4c91-a7b9-ad2d2f45d8c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb32c81a-a3ca-40d7-b0f2-b5604b46c968",
        "cursor": {
          "ref": "fabda437-6c28-4391-941d-4b7428587ff6",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "322f5a57-a052-4afb-bdd0-8ba57da3a604"
        },
        "item": {
          "id": "fb32c81a-a3ca-40d7-b0f2-b5604b46c968",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c6304a98-e837-4861-ae0e-5683df2d96ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766b554d-f9ac-41b2-a511-7542f8431a6d",
        "cursor": {
          "ref": "aa36f7ac-63a1-4948-9242-d4d9c25ad9a6",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e022f77d-205c-41c9-bcdb-68018df24d18"
        },
        "item": {
          "id": "766b554d-f9ac-41b2-a511-7542f8431a6d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fabda0a8-aa09-4cab-ae03-0c9110365b9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da36b73d-2148-4bdb-850c-5a406cbafc55",
        "cursor": {
          "ref": "51145d18-7f62-48e6-95b8-158df52b1926",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e79600b2-32a3-4380-9c04-34869e7c07df"
        },
        "item": {
          "id": "da36b73d-2148-4bdb-850c-5a406cbafc55",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "142aa78d-79ce-43ff-b788-c145bb01b3a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efaf51fe-9c08-4d25-aa6c-49b9382ec597",
        "cursor": {
          "ref": "06782b1b-466f-4768-bfcc-94fac4aa1fb6",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "435c680b-938d-4bc0-88de-75a7ca8e1238"
        },
        "item": {
          "id": "efaf51fe-9c08-4d25-aa6c-49b9382ec597",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9874965d-affd-4c83-86cf-0ce2f8bf8fdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd48ab3a-8a9f-4772-9a64-08d56c91f146",
        "cursor": {
          "ref": "c4212b28-aa28-44d0-b892-005d907ade19",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c567da12-8d7c-4963-ad1f-f48fef40499b"
        },
        "item": {
          "id": "dd48ab3a-8a9f-4772-9a64-08d56c91f146",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "15f5d045-40a2-4ecc-8be8-5646874d839c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43be6212-ea8c-452a-850d-e9ff0a89043d",
        "cursor": {
          "ref": "9f77f963-d631-4b72-ba00-cbf0d9a3bfcb",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9b24bfc5-76f7-4d38-bae9-97786a5a8a20"
        },
        "item": {
          "id": "43be6212-ea8c-452a-850d-e9ff0a89043d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cda2a548-1e3e-4e36-bd57-f68089fb2060",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74d560d-c7a2-4b5d-8f02-ba6b5457d325",
        "cursor": {
          "ref": "2aaa926c-3aa8-48e2-add6-8b19a65559c2",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "674a626f-b51e-483e-9742-979796183cca"
        },
        "item": {
          "id": "f74d560d-c7a2-4b5d-8f02-ba6b5457d325",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "83f55289-668c-408c-91ab-3dcf202e1f16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff656396-3548-4355-b5f1-eb78db7b4f8e",
        "cursor": {
          "ref": "8c1bd228-d966-4fb6-a3a6-cf0a72fddfd0",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "88006bbb-bb3e-4271-9928-da3cf19cdfb7"
        },
        "item": {
          "id": "ff656396-3548-4355-b5f1-eb78db7b4f8e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b6a03628-ceb6-41d1-b887-1f89fcc43368",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68410210-e666-46ea-8a65-d2610e895746",
        "cursor": {
          "ref": "245efb7c-708c-4c2f-894c-730f42880a96",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d70c7b4c-6afd-488f-92a8-d54827096231"
        },
        "item": {
          "id": "68410210-e666-46ea-8a65-d2610e895746",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "05c8c1b1-0ec7-4b73-95b7-9511e9b3226f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645723ae-ff04-483a-93e9-8ed88b0a3f11",
        "cursor": {
          "ref": "31400274-fd63-40d4-8805-26d1ab5604fc",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0f30d4da-4a6a-40f4-8497-d608009e1d3c"
        },
        "item": {
          "id": "645723ae-ff04-483a-93e9-8ed88b0a3f11",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "519d68a3-98b7-4100-afd5-0672d179360b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4c5939-eb71-4500-b06c-41562834f1b4",
        "cursor": {
          "ref": "71074d6f-2d79-4c68-b2ab-1ad83664ecec",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "02a2d0f5-4e21-43d0-aff3-0763e848f4bd"
        },
        "item": {
          "id": "0f4c5939-eb71-4500-b06c-41562834f1b4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "56345e4e-ba13-4ee9-beb3-fc5039d51b58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61371e0-a251-4de4-8dbb-b5b9d0cb703d",
        "cursor": {
          "ref": "3126c8d1-c397-4d69-8630-ee30c25eef50",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b1ecabf9-bf8d-43e9-adee-ccf81a4ba776"
        },
        "item": {
          "id": "f61371e0-a251-4de4-8dbb-b5b9d0cb703d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c7a0044f-691e-478a-935b-78283bf8492c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b469b140-14f8-48b6-93e8-3fb248c30ac4",
        "cursor": {
          "ref": "df6eebfb-1c41-4a14-9c20-abbf0ed5f92a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3c753478-c54a-46ae-b5f9-2d13033f645b"
        },
        "item": {
          "id": "b469b140-14f8-48b6-93e8-3fb248c30ac4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4ebd998a-2f8f-4360-92e3-a0d70f6f1ac8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc23993-032d-46ac-94c6-15b072323e2d",
        "cursor": {
          "ref": "74d93323-267b-4213-9108-1ef6249dac24",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8795d52e-1659-4076-9e8e-42ddde481f94"
        },
        "item": {
          "id": "4bc23993-032d-46ac-94c6-15b072323e2d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9dba567f-0dc7-4a3d-9ef8-c7efcb1725ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffd9935-a7f6-4947-ade3-2319f06cff09",
        "cursor": {
          "ref": "f893c735-2d51-4263-851a-76d44d54848d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f235aa69-8015-4857-b15f-6908a86cc622"
        },
        "item": {
          "id": "dffd9935-a7f6-4947-ade3-2319f06cff09",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "33674ef6-cfa4-426e-a4c0-4e2ef752b9a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4404d4f-880d-49ec-b69b-272a2bf25011",
        "cursor": {
          "ref": "b105b248-ba6d-43e4-9927-1497e36441cf",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "239a20ff-88c5-42ae-9b8b-ef3aa8462da1"
        },
        "item": {
          "id": "e4404d4f-880d-49ec-b69b-272a2bf25011",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3eaf5b72-6458-4d91-9136-50c1d0d0d697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ba3919-c93d-451f-bf9a-420bcf8277f7",
        "cursor": {
          "ref": "aa59982c-0d88-410b-a250-6038eacf5c8f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7c6e57f1-e404-4d2a-a209-843548bfa836"
        },
        "item": {
          "id": "d8ba3919-c93d-451f-bf9a-420bcf8277f7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f4cd6bfb-6df4-4abf-b42e-69b3f68e326d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6c75ba-51d3-453b-971b-096aad7e2d70",
        "cursor": {
          "ref": "90331508-d40a-48a9-9b43-fad0b2dd9759",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5cb83437-9962-4fe5-a37b-bbe9309fa4ea"
        },
        "item": {
          "id": "5f6c75ba-51d3-453b-971b-096aad7e2d70",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b644a938-a689-4a08-a65e-1c248db2336d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9153c5a5-6cb7-45d4-8537-da18966a1637",
        "cursor": {
          "ref": "b2ec1e3c-0e7f-49c3-8e6a-26dfe88fe4f4",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "48a00b54-2f15-4ba4-b8e7-d91631bb5abf"
        },
        "item": {
          "id": "9153c5a5-6cb7-45d4-8537-da18966a1637",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ee199f64-7cca-491c-a894-f171fc7c5e14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65ba571-8a22-409d-8a17-e70eed011872",
        "cursor": {
          "ref": "60f46d04-99a0-4512-bb83-6b6a2ffaf3b0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a3b618c6-aeee-47bc-8d0d-4019106a5d4b"
        },
        "item": {
          "id": "e65ba571-8a22-409d-8a17-e70eed011872",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ff312264-31a9-44ca-b2c7-63b50530e83e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4733d278-301f-4d70-9d04-f083e3698be8",
        "cursor": {
          "ref": "621f036a-568d-48bd-ad9d-12e59f384278",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5344be46-fb4e-4919-9558-be8976daf0f4"
        },
        "item": {
          "id": "4733d278-301f-4d70-9d04-f083e3698be8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a5bf0f30-5a6d-4bcd-a933-82498952f162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf1319a-6859-41e4-9976-cfeda0e5cf9d",
        "cursor": {
          "ref": "a2b4ae76-b4e4-48a9-aac7-6ac09b5a48ce",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bda22eeb-4084-4d00-b946-762ff9374cbf"
        },
        "item": {
          "id": "2bf1319a-6859-41e4-9976-cfeda0e5cf9d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0f1ea0fb-7bb1-4c88-8ac6-de370b8d2d0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599cad54-a321-4304-8980-bb54562681f5",
        "cursor": {
          "ref": "088588d8-eaaf-45d6-b1fc-a0edce0e5049",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c9e81f3c-4d2e-4bcb-a17a-eeb4b91884b2"
        },
        "item": {
          "id": "599cad54-a321-4304-8980-bb54562681f5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "acbda982-e6c6-442e-b627-cdecd653369f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a6f56c-90a4-4008-9c78-3114728e994d",
        "cursor": {
          "ref": "41f03041-f679-4f09-8efa-27059a6ea099",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8ce4a292-1785-4223-9c53-3b249efb1f9a"
        },
        "item": {
          "id": "04a6f56c-90a4-4008-9c78-3114728e994d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4cf8286b-8d1f-4a87-a727-77b309854887",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6a280e4c-6d90-436a-b9ad-92f75a5fae98",
        "cursor": {
          "ref": "10101d34-0782-4cd2-9637-6d4ca0465c5a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b68df627-6b02-4a7a-825d-b26ec13f675a"
        },
        "item": {
          "id": "6a280e4c-6d90-436a-b9ad-92f75a5fae98",
          "name": "credentials_issue"
        },
        "response": {
          "id": "36006256-5ec5-4d67-b92b-9325ee23eb90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 228,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "75d5558a-ab2a-4741-90fc-7f8dfc73315b",
        "cursor": {
          "ref": "f161d4a9-98e4-4aad-8d44-130a98f36bf9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a84e9fd4-7f6e-47e2-87a4-2ee20464d052"
        },
        "item": {
          "id": "75d5558a-ab2a-4741-90fc-7f8dfc73315b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4ed61cba-4d30-4406-b987-c24e19089406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "6920634d-730d-44f4-9b17-0dd3b3f43ac3",
        "cursor": {
          "ref": "f75659cd-d64d-4fc3-9639-c87382fe5263",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9ed3d233-4d78-4cb3-acbe-9ea9d0d115be"
        },
        "item": {
          "id": "6920634d-730d-44f4-9b17-0dd3b3f43ac3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "422b46bf-2fb1-497e-8bf7-98e4b31d9788",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "470f9eb3-0db8-4f50-bb9b-59fc9067ea7f",
        "cursor": {
          "ref": "42b718b9-5454-4d05-9d15-72bffad6e637",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8b978371-51a8-4b61-a47c-72462a21a14f"
        },
        "item": {
          "id": "470f9eb3-0db8-4f50-bb9b-59fc9067ea7f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "383bb7d5-1af6-4069-9b77-7d1b83c14a7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "187643df-6541-453f-aff1-6031c6b26493",
        "cursor": {
          "ref": "0047cbab-e71d-486e-ae2c-a17757f1ef08",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5afd1846-bf1c-4d3e-9d15-d365b26e6c8d"
        },
        "item": {
          "id": "187643df-6541-453f-aff1-6031c6b26493",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b2a6b77e-0839-4979-b232-4771cb0fa980",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c0a2c75f-157b-4317-a93c-0ca1e3a3e019",
        "cursor": {
          "ref": "0a6be754-af04-406f-9621-f054e7692f8d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f4558f72-6094-4a92-8ebf-dbd46e4be001"
        },
        "item": {
          "id": "c0a2c75f-157b-4317-a93c-0ca1e3a3e019",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "60fb5bbd-fa71-4743-a120-185a67916570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "cae3c584-21b1-4ff5-832c-537527d1d78e",
        "cursor": {
          "ref": "061dd6b5-b43a-4713-8887-94ad0f1c4d81",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7bfa3efb-2b20-45c6-88be-a8d560d64c75"
        },
        "item": {
          "id": "cae3c584-21b1-4ff5-832c-537527d1d78e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1af06168-a022-4c96-9c0c-50a9f8349c90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77f61f8-3c73-4716-b870-82a971c70053",
        "cursor": {
          "ref": "3b165623-ea2f-4fc6-8a08-223a9a21261b",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "29935f1f-e4eb-44a3-b80f-613f1aca752e"
        },
        "item": {
          "id": "b77f61f8-3c73-4716-b870-82a971c70053",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7a0d6ce-3f49-4e45-ad66-0f926e74e12d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7339b802-cf44-4cc8-a1de-ad4724ae24f5",
        "cursor": {
          "ref": "505c3c53-4399-41ac-80b6-9a5e4cff1d07",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b027670b-42be-43fe-bd16-3db0d7451c88"
        },
        "item": {
          "id": "7339b802-cf44-4cc8-a1de-ad4724ae24f5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "216a4354-0a6c-46cd-9307-ae7276292b9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbdeeb5-8c65-4e3d-951d-fa3f413a0935",
        "cursor": {
          "ref": "9294cd79-6fe3-449b-84c8-44979265e1d1",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f75fb6d7-dc2e-4bc5-b674-2f22245f512f"
        },
        "item": {
          "id": "acbdeeb5-8c65-4e3d-951d-fa3f413a0935",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f8bf41eb-b1bd-4e09-acd7-8f8b98df980e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c44369-9a05-48d2-bbd1-0f36f5118f2e",
        "cursor": {
          "ref": "429161a7-18f5-47eb-892a-c0204d740aa8",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1c8c4f9c-a66d-4cd4-aeb5-19805a706bd9"
        },
        "item": {
          "id": "30c44369-9a05-48d2-bbd1-0f36f5118f2e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "97f4e8a7-e71a-4d59-82c9-81fbae1625b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1798f02c-c2c9-497c-9ebd-4dd83db3e852",
        "cursor": {
          "ref": "9b568a51-04f9-4d9c-aefe-b91a6efcae4f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "91c76c62-dc58-4058-8097-b06293aa8e4b"
        },
        "item": {
          "id": "1798f02c-c2c9-497c-9ebd-4dd83db3e852",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5842c433-8de1-4192-8925-f7d6a3e88e42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccf62c7-a15a-400c-9f36-3575b8af18ca",
        "cursor": {
          "ref": "aea82208-48ae-41f4-b3bb-997bfb89af1e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be2a3a33-7d77-4e0e-8197-d54c74babf58"
        },
        "item": {
          "id": "6ccf62c7-a15a-400c-9f36-3575b8af18ca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5996b55a-b9cc-49c7-9ab3-608d16489314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6ec2cd-e336-4f46-a6ea-6b58dca4e603",
        "cursor": {
          "ref": "6de0891a-7431-49b6-8ad1-50752e726a00",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6b39c91e-4397-4c1e-a901-9b5dd1c708f9"
        },
        "item": {
          "id": "ce6ec2cd-e336-4f46-a6ea-6b58dca4e603",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "282fdc03-5687-4a5e-80a9-9d3ed56b29ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041a63d5-dc9d-4d61-925e-e5d566ae88b1",
        "cursor": {
          "ref": "ed272cdd-cab3-49b9-8e17-63a7af1c9a98",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "23fdea89-9c18-42d8-b654-124a4bf2cda2"
        },
        "item": {
          "id": "041a63d5-dc9d-4d61-925e-e5d566ae88b1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "54e46c30-e1bc-4bf1-a8aa-aa9514d05c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4475f296-1bd0-4f9e-aae6-783ef9b1506b",
        "cursor": {
          "ref": "b1536627-06a5-4321-aa26-4418ae0b273e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cd5c84ca-86bb-448a-bfe6-c1e4d2576fc0"
        },
        "item": {
          "id": "4475f296-1bd0-4f9e-aae6-783ef9b1506b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2cdf3de9-cb84-4d31-9a61-bf07b95388d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4964fa62-f637-4fd1-9ddb-31e91e4efc27",
        "cursor": {
          "ref": "947ad455-1f2e-44bf-91ab-ad9a98c8795a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2572209c-bbd7-416f-88d1-959bdf69dd0a"
        },
        "item": {
          "id": "4964fa62-f637-4fd1-9ddb-31e91e4efc27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8b4bd0fe-b0ff-4ef0-a963-1e7097ae16db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf03176-cf9d-46d4-8b24-aedc21016b7f",
        "cursor": {
          "ref": "c58513ae-765e-48fa-968e-1b1019006adb",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c600ffef-1fe8-4dd1-b69f-09fa0e8514a0"
        },
        "item": {
          "id": "bbf03176-cf9d-46d4-8b24-aedc21016b7f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "303e2221-a51b-40f7-a118-27cd17b91c6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3166323c-93f6-4200-bdd3-93fce2a822d9",
        "cursor": {
          "ref": "f5cb81bd-2f15-43cf-a3cc-4463b2d3683a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "22f5b363-8c5e-4fd2-aa5c-51573d9ad1bf"
        },
        "item": {
          "id": "3166323c-93f6-4200-bdd3-93fce2a822d9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bd5b9fb7-04cc-458e-82c9-cb42adfcbc64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cc1007-5fed-4b25-a6d4-9181cdfc07f7",
        "cursor": {
          "ref": "526e6087-6c40-4129-abfe-b0395fa50667",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f544b928-9898-48fe-bb77-9dd3976c35f2"
        },
        "item": {
          "id": "25cc1007-5fed-4b25-a6d4-9181cdfc07f7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "068f457e-6a51-46aa-ac47-ae81d37c2f6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4793296-7dca-4bac-b3e2-e393f9e10c23",
        "cursor": {
          "ref": "8bdf4df2-2622-4b68-8615-abab7223f53f",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b41697b9-73c5-4165-ad7c-bc6fd488b8c1"
        },
        "item": {
          "id": "c4793296-7dca-4bac-b3e2-e393f9e10c23",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "43beb7b7-d553-4b55-80e6-849cd1667cae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba00b3b-2ff6-4cf2-b9da-0d2c6515ce2a",
        "cursor": {
          "ref": "8733362d-ccfb-4d24-910f-c146b797541c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "47e67fec-423d-4f2d-9050-b1fa2433678c"
        },
        "item": {
          "id": "fba00b3b-2ff6-4cf2-b9da-0d2c6515ce2a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8d5827fd-5234-4708-a2d4-651e1666ffce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca1e9a5-6887-4e1a-b34c-9532d21bb86e",
        "cursor": {
          "ref": "9cd98686-5486-41b1-96ca-d90caff2dbd3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8f3184c6-c6d3-4379-8752-b7821b4d5eb2"
        },
        "item": {
          "id": "aca1e9a5-6887-4e1a-b34c-9532d21bb86e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bc204c07-49a8-4d9b-bdc6-0c0d01ab4f72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d8cc22-0601-4d74-8eb0-711aca299dab",
        "cursor": {
          "ref": "fabb9aea-9c47-41de-9669-2c93e40c01c5",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9926526c-8c9f-4228-95d8-50ac3020a728"
        },
        "item": {
          "id": "d3d8cc22-0601-4d74-8eb0-711aca299dab",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1b4d6ec3-a7da-4147-b213-144eef0a1a88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebbc183-0c7c-45c9-be22-931a507b5ccd",
        "cursor": {
          "ref": "0f1da72e-3b47-46d4-b5bb-34c81dd0f170",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5df390bb-899b-4892-83ce-7e5105c0312e"
        },
        "item": {
          "id": "4ebbc183-0c7c-45c9-be22-931a507b5ccd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1ccaa8a7-8e3a-4087-a028-cd21d1ac0e1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7965425-cca7-4bf3-a7e5-070292ff9c7c",
        "cursor": {
          "ref": "f96b5b96-c8e8-42e1-8e6a-1930b4ef215a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4c3b9e1c-99d3-4cfe-a5d3-ce7c1abd3884"
        },
        "item": {
          "id": "d7965425-cca7-4bf3-a7e5-070292ff9c7c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3fa5015-10a5-4b1e-b6f4-eeedb93e212d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f354366-a965-4dcd-b181-bd3e2aa7bc05",
        "cursor": {
          "ref": "6195ebe1-322d-478f-8c16-67f19aeb87ac",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2e0f21c5-07e6-4cfe-a2fe-1d58c4778126"
        },
        "item": {
          "id": "0f354366-a965-4dcd-b181-bd3e2aa7bc05",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2efada55-30c4-4912-aad0-b23343a8e640",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3950b190-4419-4699-9412-1d6a28ecd92e",
        "cursor": {
          "ref": "3f4086e8-25a5-478d-9b94-e0b0add7cf94",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f76cd268-8fbe-4732-96f2-6397e0258434"
        },
        "item": {
          "id": "3950b190-4419-4699-9412-1d6a28ecd92e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "433b85c1-ebd9-4094-94f4-ce61975a9642",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d835e9db-bc8a-4c66-944c-c447afd307e7",
        "cursor": {
          "ref": "9be6c785-d550-46c1-a787-3b0e5f337493",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "79feef46-f2b1-41a2-a841-4aa229afcb39"
        },
        "item": {
          "id": "d835e9db-bc8a-4c66-944c-c447afd307e7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dd80d220-9de5-420d-87ca-bd9e2c03f511",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8fea2b-4ccb-4d17-ac7b-795dbe059d6b",
        "cursor": {
          "ref": "afa64658-5b47-47b3-844d-4ba4cdbbf28c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "82b8d7bd-28fe-4a75-986a-ccf4cd65a02d"
        },
        "item": {
          "id": "fe8fea2b-4ccb-4d17-ac7b-795dbe059d6b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b8fb2721-e379-46c7-b949-9ce2226307e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5ee98f-7e9e-40d6-9d2f-72b0dd1e790e",
        "cursor": {
          "ref": "254ed4ff-25f6-478c-99f7-8232bb5db1f3",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dffc0080-ca64-4c56-858d-fa2ca9af851d"
        },
        "item": {
          "id": "fc5ee98f-7e9e-40d6-9d2f-72b0dd1e790e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a2d51adf-553e-435e-b058-3e389d755d1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb30eff7-4235-4ca3-b751-aebd1d78a45a",
        "cursor": {
          "ref": "293fc33d-8e6a-42f6-9f4a-48ecc8d8fe3b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3c60712e-4904-443c-8f96-4931156b890a"
        },
        "item": {
          "id": "eb30eff7-4235-4ca3-b751-aebd1d78a45a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3e2c3e96-8f32-4d0a-bd4d-fc4547abcadf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7390bc1-3705-47b7-9983-67f4149786fa",
        "cursor": {
          "ref": "b368311d-715b-4761-9872-61eaede53a81",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "99e8b654-3cd0-40a2-9d3d-76bd519bb6e8"
        },
        "item": {
          "id": "c7390bc1-3705-47b7-9983-67f4149786fa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "849e3716-5acb-46ca-a597-78ca2b94d500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf784442-f925-422b-812c-3bfc56a14bb7",
        "cursor": {
          "ref": "4ca15bcb-3f4c-44e8-b6a5-53139f8462c6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "683a5bd5-0588-4d1a-a0a7-2bc698b2d642"
        },
        "item": {
          "id": "cf784442-f925-422b-812c-3bfc56a14bb7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "418168cd-8a5d-43a6-a441-53699f732f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302e4c39-4d48-48ba-a3a6-4231f5f693ee",
        "cursor": {
          "ref": "2fba4aa4-283e-4a96-b1d4-1ca037f5083a",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e8b621c-64f0-4a61-9cb9-3e4ba83ae23e"
        },
        "item": {
          "id": "302e4c39-4d48-48ba-a3a6-4231f5f693ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "add716b2-6f3e-4177-8590-0ca783af9d95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b852eb7e-898b-4c15-9bc2-5d9c368aab51",
        "cursor": {
          "ref": "67fa6b62-eca4-459f-a823-947e2fae1e4f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d0a473ac-35ff-47e0-9fb7-62042aa86e33"
        },
        "item": {
          "id": "b852eb7e-898b-4c15-9bc2-5d9c368aab51",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "22234f80-c77a-4d3d-ade7-91451100a603",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060f1c53-743c-4f22-8f9e-4256a75b4999",
        "cursor": {
          "ref": "e7009afe-df7a-4dcc-acdc-4e836927b8a3",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b43a48c1-6325-4f73-b945-21915e7dd0e6"
        },
        "item": {
          "id": "060f1c53-743c-4f22-8f9e-4256a75b4999",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7c9018fd-7e66-4e6f-b176-e047d15afa6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0696cb16-b470-4321-803d-edbf9ae97e57",
        "cursor": {
          "ref": "6b9b9775-f70e-48b3-a775-c41d793e0a05",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "40bc08c5-c60e-48ab-9119-53c0d1839347"
        },
        "item": {
          "id": "0696cb16-b470-4321-803d-edbf9ae97e57",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a16e8472-ff12-431d-b644-60c24f13e228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7cc104-2ca4-414c-b1e7-9bec576161be",
        "cursor": {
          "ref": "a7ddc1d0-0bd8-4392-bee3-131c06317df9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7b72f6c7-6856-4911-840d-9395915e6bcd"
        },
        "item": {
          "id": "6c7cc104-2ca4-414c-b1e7-9bec576161be",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9a92bfa3-8cc0-4fcf-bd73-2f2e210a9fc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e60319e-3482-43ad-b9b2-ed4ef5c7f865",
        "cursor": {
          "ref": "63343c2f-1d51-498b-8ec6-aaa645001cb3",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e202696d-321e-4623-a810-e679068a4a4e"
        },
        "item": {
          "id": "2e60319e-3482-43ad-b9b2-ed4ef5c7f865",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5e30e002-af65-40d0-a63d-e61eb26ea7bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085269a3-230d-4a32-9ee1-c8cb10251dd1",
        "cursor": {
          "ref": "7faef847-9529-4653-b4da-069d8d25c250",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3182fbf3-4a9b-4698-a5f7-2e73d91ff967"
        },
        "item": {
          "id": "085269a3-230d-4a32-9ee1-c8cb10251dd1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "352202af-866b-4035-806d-4289cd18551d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5f3e0c-2179-4b55-ac70-36387b2d90da",
        "cursor": {
          "ref": "c229d184-0f71-45e7-80a4-5d4b66c94a53",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "652fa21f-c686-4c05-bdc6-ea7ef1a34a0e"
        },
        "item": {
          "id": "bd5f3e0c-2179-4b55-ac70-36387b2d90da",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8f0a430e-5517-4264-9285-bdd066887e92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3f2eaf-054d-40f5-bc3a-cd729fc31010",
        "cursor": {
          "ref": "5a8816b2-7e5d-4bad-a852-23efb0212bb3",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "411bf3d8-3ee8-45dd-a05c-550164e0bd31"
        },
        "item": {
          "id": "ab3f2eaf-054d-40f5-bc3a-cd729fc31010",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "132dc091-482b-41d2-807d-edf29ca397f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507af94d-ccff-4219-89d5-d8d0c6de4dce",
        "cursor": {
          "ref": "8c1e5ce9-2f0f-4369-9ef5-64932ad65568",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "208e5bbf-e0e5-4b77-a82b-20a7af06dd0d"
        },
        "item": {
          "id": "507af94d-ccff-4219-89d5-d8d0c6de4dce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "21370288-c301-456d-bdf6-103976d165b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a018e0-d8f1-4664-acf5-711a60643fa5",
        "cursor": {
          "ref": "55ade50a-64cd-49ff-936f-ce6460911a06",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8151b49c-402f-4805-a33e-4365f9b9f397"
        },
        "item": {
          "id": "a6a018e0-d8f1-4664-acf5-711a60643fa5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9eecb91b-b950-4752-8346-2c253d958a4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6d7d23-1fac-43c9-8afc-d63894fcce59",
        "cursor": {
          "ref": "550eaae0-0ecc-411a-89a7-9247ac7edd7c",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4d34431a-8bd8-494c-bbfd-02f786a7b299"
        },
        "item": {
          "id": "cb6d7d23-1fac-43c9-8afc-d63894fcce59",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b36c4d85-18ff-4aac-bc5f-735f4b9097d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c938ec5-9678-4779-95af-a8ad7217d036",
        "cursor": {
          "ref": "c3a769b2-1f48-4be3-b489-f1f171e20b54",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ce43378c-8726-42f8-bf09-8d30b2a6a229"
        },
        "item": {
          "id": "3c938ec5-9678-4779-95af-a8ad7217d036",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "87379709-61ff-48fd-a2b5-f78915824575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78410625-baf6-403d-9ec0-5ce7df8a683b",
        "cursor": {
          "ref": "9d158467-ebd2-4c9c-acb4-2d5a9cae498b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "38177807-e321-4dc1-92e7-7e0d29d30e7a"
        },
        "item": {
          "id": "78410625-baf6-403d-9ec0-5ce7df8a683b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3c76ae0a-3c8e-484c-a297-34af4eb760dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a98311-2cbb-4c17-b4ad-3c63e3985c5d",
        "cursor": {
          "ref": "7692d53f-e416-4536-a2a4-2cc8502a5e4c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7518369b-c2cd-4256-8a7c-7dafdfb212f5"
        },
        "item": {
          "id": "83a98311-2cbb-4c17-b4ad-3c63e3985c5d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9472493f-1646-4920-8999-b49a7992d70b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13506b30-c358-4aa3-9930-0321b199166e",
        "cursor": {
          "ref": "533a0346-d027-45db-a116-f5bd72a67660",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3f668579-e683-467c-8e54-f170dbff2fb5"
        },
        "item": {
          "id": "13506b30-c358-4aa3-9930-0321b199166e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d8175c6b-1d1d-41a7-849f-0a8caec6706e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18423520-ff39-4a5c-9908-21e478ebc4ea",
        "cursor": {
          "ref": "328153a8-a1fc-4c58-8865-ffbd627ee6b9",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bd9679fb-e278-4afd-8d31-4aa496a78925"
        },
        "item": {
          "id": "18423520-ff39-4a5c-9908-21e478ebc4ea",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c86ad58c-446f-4116-ae13-72c3d086167e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e4a4a5-ac01-49f9-b4c3-dcbb45f2fa4a",
        "cursor": {
          "ref": "f23cf2f4-5c72-465d-993e-3e92c4223f9b",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "089fb838-0739-43ea-9d65-62abc1d5e2bb"
        },
        "item": {
          "id": "f0e4a4a5-ac01-49f9-b4c3-dcbb45f2fa4a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2df9928d-03c1-4b91-a005-9163c650f1ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111cb9f6-ad4e-40f9-899f-3bdb3c6a4cd0",
        "cursor": {
          "ref": "11ca78a5-5847-4c47-ad1e-eb3f454c4354",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7eb96a44-3c83-412f-972d-f2a420f9d2bf"
        },
        "item": {
          "id": "111cb9f6-ad4e-40f9-899f-3bdb3c6a4cd0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8e17c9ea-fe7c-4bfc-a8cf-0cb59d8f81a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f15e93-d2f4-481a-8a96-c5a2b9c7377e",
        "cursor": {
          "ref": "6b959248-ef50-45bd-a949-adb8bb35fa09",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d18ac2f7-4305-48ff-a9b5-61540be0fbd5"
        },
        "item": {
          "id": "90f15e93-d2f4-481a-8a96-c5a2b9c7377e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f76a45ab-4903-4315-9b04-f18380086c1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea31a9a-3c71-4330-a0cc-4bed8d07840a",
        "cursor": {
          "ref": "05fb6dee-05a2-4a38-9a12-76be91f68535",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "02c98c07-3efd-4d20-998b-add6141b3ee6"
        },
        "item": {
          "id": "5ea31a9a-3c71-4330-a0cc-4bed8d07840a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "285433bf-2c0f-4423-bef6-51ca2f811eba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb745a-f6f5-4004-8b17-ffd04486b5a8",
        "cursor": {
          "ref": "6c34a78e-0d90-45c9-8718-57e5826fbfe2",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f712d4f1-2d31-4512-abbe-7a3cbded2d32"
        },
        "item": {
          "id": "8adb745a-f6f5-4004-8b17-ffd04486b5a8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ee20f64-6a22-49aa-8268-03706fd93b6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28337068-125d-44b4-852b-823b6cd7a9ba",
        "cursor": {
          "ref": "6f06b43e-361b-4d90-abd4-522ba1d2ac63",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ff873b20-6549-4bc6-8473-7c0650bbc1a0"
        },
        "item": {
          "id": "28337068-125d-44b4-852b-823b6cd7a9ba",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "dfcbf152-11dc-4fba-8c13-88cdb3253b0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abcd957-0b4f-43c7-8616-f81847fc1323",
        "cursor": {
          "ref": "02c8e32e-84ad-46f9-a732-307731660c2f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "734d9e12-563c-4c20-89d2-b65a4b9dd863"
        },
        "item": {
          "id": "5abcd957-0b4f-43c7-8616-f81847fc1323",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "784b6667-1d4e-4d7a-adc4-1effdd663aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa8bdf1-5b8b-4207-ac16-b6fe6915d08a",
        "cursor": {
          "ref": "effea6b0-291b-4237-ac8d-42beb32e91d3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "65b533d8-8aaa-4499-b815-8f8993eeb2cb"
        },
        "item": {
          "id": "1aa8bdf1-5b8b-4207-ac16-b6fe6915d08a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d9a5d7e8-88a2-4867-8c71-8c7b125d132c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8df0cb3-b615-4279-8282-fdc14da7b818",
        "cursor": {
          "ref": "5cb8e346-84de-4fba-8a32-b37195a1fdea",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "34c1d1b5-5696-4d61-933b-c327b19a6fe6"
        },
        "item": {
          "id": "e8df0cb3-b615-4279-8282-fdc14da7b818",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d2a20338-34df-40ee-81ba-d480206ee05e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b631fa95-c88e-462c-82b6-f3a9edab16f4",
        "cursor": {
          "ref": "1faa7a51-3ebf-4812-b298-d132851e827e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "eba1d4c6-ccb7-4e3f-a77d-9bc657ca171d"
        },
        "item": {
          "id": "b631fa95-c88e-462c-82b6-f3a9edab16f4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "95c3d41f-529a-4db5-bd3b-59e363ef5cfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50ac339-98f0-4235-a87a-3232ab3b8002",
        "cursor": {
          "ref": "64c272f7-9cce-4bc6-953b-96b6acaa321e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "957f93e1-0e56-49c4-87a1-38f41b28a571"
        },
        "item": {
          "id": "d50ac339-98f0-4235-a87a-3232ab3b8002",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d48e6549-4e62-47b9-9a0b-4dcd0d934beb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9e2a0e-22b0-48a0-8090-9a5ae4c6990c",
        "cursor": {
          "ref": "d392574b-ad04-4a5c-b6f0-48293a0c52e6",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cc18f356-e428-4a58-87f7-a1ccf1a056f8"
        },
        "item": {
          "id": "cf9e2a0e-22b0-48a0-8090-9a5ae4c6990c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0a139d74-4e34-4273-bb46-7527a5cac742",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda6b157-f70f-4c2b-bf9f-e84ee5c9e325",
        "cursor": {
          "ref": "e1025bdc-e076-48b5-a429-aa5dd9443f38",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "afd8547a-3cc5-46e4-a07f-62b9c1756296"
        },
        "item": {
          "id": "bda6b157-f70f-4c2b-bf9f-e84ee5c9e325",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6fda14dd-4139-4a47-9faf-bec0567a3d25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f732d232-bf70-4cc0-88b1-d84a4adac08f",
        "cursor": {
          "ref": "149dcd65-f7e0-4c39-b7f8-8e593d39fd91",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e1d338c-ae29-469d-a80d-edf4d50699de"
        },
        "item": {
          "id": "f732d232-bf70-4cc0-88b1-d84a4adac08f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4194b548-3f5c-44ac-9949-300f46f2d4d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88338ec-0c15-4869-931b-b59d69f8e256",
        "cursor": {
          "ref": "98a3a698-8034-4665-bf1c-d3a60d8b7d6d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d76c7142-646d-4f92-99ef-a7286fa852f1"
        },
        "item": {
          "id": "c88338ec-0c15-4869-931b-b59d69f8e256",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0adc3d70-56cb-4556-a9e6-1d7ec4b9ee22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94981505-8b31-4b65-ab77-202ca1dbe770",
        "cursor": {
          "ref": "ff7c20d9-bd11-42ff-9848-b56aae4800ea",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7ec981be-684e-4346-8304-f076054fadcc"
        },
        "item": {
          "id": "94981505-8b31-4b65-ab77-202ca1dbe770",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1813b27c-72c5-4374-887d-e85747a08a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eb0101-b277-4821-9ef0-17ca7559a344",
        "cursor": {
          "ref": "e13281f2-2d90-4e55-8c9a-afb27642650e",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0967b971-25a7-4115-972d-7f2d1ac18e13"
        },
        "item": {
          "id": "86eb0101-b277-4821-9ef0-17ca7559a344",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d7fae6c5-3abe-4a87-90ce-f49778b5845b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1451fb16-4708-4561-a95a-ee68a58499f6",
        "cursor": {
          "ref": "f2271fb4-eafb-4c3a-92c6-4174ae3a5c47",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b74e9a5d-340c-4d4c-99a0-8295dbbe1709"
        },
        "item": {
          "id": "1451fb16-4708-4561-a95a-ee68a58499f6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dbe9f323-78f6-480c-81a5-27b3162e99b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474e1a2c-72c9-4ec8-90be-58a141c1bf1d",
        "cursor": {
          "ref": "07eff090-f682-4caa-86ec-9891cb67a361",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e0340c49-aade-473f-a510-b059d6618c4d"
        },
        "item": {
          "id": "474e1a2c-72c9-4ec8-90be-58a141c1bf1d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e50bad7-6b48-4227-8693-9498cf5735d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e913130b-5303-4b72-8d42-627f16e9263b",
        "cursor": {
          "ref": "984ce169-af5e-42d5-83a5-3150f09a17f8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2b59f449-c374-4c98-811e-5a7d67f2e758"
        },
        "item": {
          "id": "e913130b-5303-4b72-8d42-627f16e9263b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fe8064c6-e74b-46b1-aae3-f50c3da8db85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6a031b-9a93-4c1c-8914-0e547a8764bd",
        "cursor": {
          "ref": "5af97204-c508-4164-bce4-1fc98fcb1390",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "28b28f6d-862b-433e-9241-c114bf3d5b75"
        },
        "item": {
          "id": "dd6a031b-9a93-4c1c-8914-0e547a8764bd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2d5364cb-737c-4a42-98b0-2458542e45d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32abeab6-911e-4b28-a6ac-098f38ca2b4b",
        "cursor": {
          "ref": "e23ed491-6825-4b2b-937e-43d09cb1823e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e4f43410-84ff-4476-9a2f-bfb67c8d67da"
        },
        "item": {
          "id": "32abeab6-911e-4b28-a6ac-098f38ca2b4b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c3ad81a6-d311-495e-b4b8-c30bc48140b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74d471a-5e30-4ee1-baaf-52949156ae85",
        "cursor": {
          "ref": "56af7838-30e9-45f5-9fbd-1779c001bb31",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2ca05f82-3ec3-45e5-80f0-62c0c6ec302c"
        },
        "item": {
          "id": "b74d471a-5e30-4ee1-baaf-52949156ae85",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6a14d725-b315-4043-8ab6-714606d56552",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377836d3-d22d-4a72-b9de-fca0f64ecd2a",
        "cursor": {
          "ref": "43d725d2-9bd0-4b88-a2dc-2f64ba8a9b9a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b6faf8e2-0545-4a34-b8b8-8c9ff9582015"
        },
        "item": {
          "id": "377836d3-d22d-4a72-b9de-fca0f64ecd2a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7124eb8e-b6f0-4e97-b9ae-b246175bf75a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb219e8-a01b-4aed-8aa7-3f98f73fe15d",
        "cursor": {
          "ref": "140ff070-1486-4311-bfdd-5db38879a390",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "03af6cb0-3c3c-4104-9e52-d1f9ddeaafaf"
        },
        "item": {
          "id": "6cb219e8-a01b-4aed-8aa7-3f98f73fe15d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e337010-7d4e-4843-885d-672f8062ca70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b00050b-7b55-47ff-94f4-4a7f48fc883a",
        "cursor": {
          "ref": "2ac2de66-bf91-4440-b10b-5209a200acab",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9de4d579-db63-49cf-b8df-1e50795bc7c3"
        },
        "item": {
          "id": "7b00050b-7b55-47ff-94f4-4a7f48fc883a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1c460e8e-72b9-49c4-9677-81e9c71b48ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d60cdb-1360-4b55-af43-f24904bd53e9",
        "cursor": {
          "ref": "03edfb2b-977f-49ba-ab46-8d49ba40d9c2",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e5468225-837f-4d2a-8218-94b49f911800"
        },
        "item": {
          "id": "42d60cdb-1360-4b55-af43-f24904bd53e9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f05dc4a9-d493-4828-8229-bdbd0823579a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2019d2b0-fba6-4bb7-9e10-2ab442c70563",
        "cursor": {
          "ref": "a9aedbe4-7049-427d-b328-50b2fc1507da",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6cd94d09-c3ba-4e50-935f-cd19d7402ecd"
        },
        "item": {
          "id": "2019d2b0-fba6-4bb7-9e10-2ab442c70563",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "45d520b5-38b9-4a7d-bc50-446cbadefd7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28385cd0-8109-4762-8318-77ef579a380c",
        "cursor": {
          "ref": "47926d0e-a80b-4931-929c-a8a806b84362",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "44efb6bf-1c2d-4fce-9cc7-b815e0b172b0"
        },
        "item": {
          "id": "28385cd0-8109-4762-8318-77ef579a380c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7c8f938f-46dd-4d91-9192-3ef9ce040d6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76871a7-7e2b-484c-b1e3-043721ca0f43",
        "cursor": {
          "ref": "83cb3386-81e6-43b4-958c-1efb23e90f71",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "85f3116d-5436-40ee-8a8d-1f3993af295a"
        },
        "item": {
          "id": "a76871a7-7e2b-484c-b1e3-043721ca0f43",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2c9fd698-b2d1-491f-9535-48e0366f834b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa21cfc4-2104-4141-ae28-8da2e6dcd86b",
        "cursor": {
          "ref": "2d5dab3f-e872-4796-97e5-80c2bb4edfaf",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7c052e0e-cb90-4e39-b998-6ae8e1f831ab"
        },
        "item": {
          "id": "fa21cfc4-2104-4141-ae28-8da2e6dcd86b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "33729802-c101-4271-8bec-d2f8414f09dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adff24ff-27e5-4d71-a7f9-16d3d52ef3c6",
        "cursor": {
          "ref": "e5de561c-2795-4f89-91a2-e4a9bf19ceed",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "61ffd306-e0bf-4de5-b59d-050b6b412924"
        },
        "item": {
          "id": "adff24ff-27e5-4d71-a7f9-16d3d52ef3c6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2da4c289-e2fb-423c-833c-445b73d65ce4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92666249-9baa-4046-8186-c6d29cce2dc9",
        "cursor": {
          "ref": "cd78cb40-e2c5-4317-bc83-9e0d5fb6c55a",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1fd5c1fc-f743-45c6-8402-412c91db55e7"
        },
        "item": {
          "id": "92666249-9baa-4046-8186-c6d29cce2dc9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7f4bb31b-2bc6-49ee-9e5d-fadda7f63fed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdeac22-a3b4-4a15-a520-0d9358d88ba4",
        "cursor": {
          "ref": "7d98e9b5-c437-4e66-9e34-2aecdca171ad",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "17fd36af-358f-4153-a3c8-4940030d74d0"
        },
        "item": {
          "id": "8bdeac22-a3b4-4a15-a520-0d9358d88ba4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db7b3fd4-42af-4848-b3f8-725cc4d6a57e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd543848-41f4-44e5-a8b0-3adae189f875",
        "cursor": {
          "ref": "0366ac65-cd6c-40ff-8a4f-0886c7ba4f34",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "64bd20f7-ffd6-49ed-a5b9-b0a3de804cdb"
        },
        "item": {
          "id": "bd543848-41f4-44e5-a8b0-3adae189f875",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "27ead17b-1ea9-4544-8f3a-7f83c90fd70d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea7659d-712e-4f78-8a0a-942a9e93cb8e",
        "cursor": {
          "ref": "229239bd-8840-4117-83fc-5a9c608cc971",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1d6de1b3-3724-44eb-88a8-8eec9bc85d1e"
        },
        "item": {
          "id": "5ea7659d-712e-4f78-8a0a-942a9e93cb8e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "249d25c1-fe25-40d8-9bc5-62d26df3d908",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5423aaf3-7470-4d74-8d77-c9061891c68c",
        "cursor": {
          "ref": "9317a5d0-17a1-4b5b-a33e-068e1ea052ea",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4da5653a-1fa6-4f7e-9e81-89262674786d"
        },
        "item": {
          "id": "5423aaf3-7470-4d74-8d77-c9061891c68c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "37389718-08c0-4b31-8b1f-ecd7e884bbdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d39c8f-3ed6-4ab5-aea4-b89a1456edff",
        "cursor": {
          "ref": "5dda8954-1090-4d35-919c-b2b7d6267c92",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "764b589b-394b-444d-aa37-d5dedb2fa346"
        },
        "item": {
          "id": "a4d39c8f-3ed6-4ab5-aea4-b89a1456edff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2bb3030d-6bb5-4f1a-846d-1b6e154853b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505d6cd8-93b3-44cf-a2ca-2977137075f6",
        "cursor": {
          "ref": "17b569f7-5d47-4596-933d-8b8b15912bbe",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ce597cb8-b6c7-49b9-9eba-02686f490a74"
        },
        "item": {
          "id": "505d6cd8-93b3-44cf-a2ca-2977137075f6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eaacb411-abeb-4268-9119-b86f83eef6ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec53f05c-b7bd-4ef6-9bc3-e641d5dc81dd",
        "cursor": {
          "ref": "b17ff406-1103-4976-918c-2d5662bcafaa",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0ae2af68-e54d-40f2-8065-11ddadb33573"
        },
        "item": {
          "id": "ec53f05c-b7bd-4ef6-9bc3-e641d5dc81dd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f6f0a43b-a670-43ca-a52e-36bf450c4a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ad3235-481b-45f0-a655-ab77b07ad1af",
        "cursor": {
          "ref": "ac75c65c-dc9c-4a5f-b8ca-ff33fff660a2",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b2c992fa-8505-4c2e-8d72-fab5512ae36f"
        },
        "item": {
          "id": "11ad3235-481b-45f0-a655-ab77b07ad1af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b781daa7-3372-4992-b5b1-314e81616c92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f248ba-a73e-4bd1-bb4a-c8b73fa76195",
        "cursor": {
          "ref": "b6482e27-5a18-49c1-b114-bdab4e36f0df",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e2e912fe-567b-4be0-ac3c-bf2640f039a5"
        },
        "item": {
          "id": "77f248ba-a73e-4bd1-bb4a-c8b73fa76195",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "81fc245e-86ad-4a8f-8c16-7ed04a8f8d51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6789eeae-3db5-4ca8-8a1c-915b833832b7",
        "cursor": {
          "ref": "0b13cf40-cc80-41f7-b8fd-c8aa61e1e150",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e7a11082-8386-463d-8590-6bb38fc59565"
        },
        "item": {
          "id": "6789eeae-3db5-4ca8-8a1c-915b833832b7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "606fcff9-16d8-4f74-b244-e1cb2d25ddf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094115e9-e038-496c-985b-33f389fa390d",
        "cursor": {
          "ref": "aaa1157f-deb4-4587-bc82-7c3c4ffaaa5f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f6b611a1-32fb-43b3-abd9-175faa2ca84b"
        },
        "item": {
          "id": "094115e9-e038-496c-985b-33f389fa390d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ba8bb34-43ce-48e1-81d8-75a46a7dfb56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15264820-28b7-44d0-856f-d28a0359b9f2",
        "cursor": {
          "ref": "96272944-5d4e-42b5-8a7c-593a5be5c9cf",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5945a17f-3163-4c64-a089-5d406591c51e"
        },
        "item": {
          "id": "15264820-28b7-44d0-856f-d28a0359b9f2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "056d9ecf-0540-44e9-819b-4ff74874c913",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f00adc-9406-4cef-ab12-871b3c2342c0",
        "cursor": {
          "ref": "ef9ddcab-a7ef-4204-98c8-9ad29a46664e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cee82b2d-3f4d-49f0-a70f-7614a04dacff"
        },
        "item": {
          "id": "a1f00adc-9406-4cef-ab12-871b3c2342c0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c5681bbc-d724-4f3d-befa-2b123b8c6b4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c90629-b0f6-49a4-acfa-33e161ad9e79",
        "cursor": {
          "ref": "9ef4c66b-cf65-4726-a287-4a73e19b2d67",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "89282210-c87b-4edc-9aeb-98bad318b761"
        },
        "item": {
          "id": "b9c90629-b0f6-49a4-acfa-33e161ad9e79",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8505bf8c-492c-4b4f-9b94-7cbc6f60d83a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4a702d-ffa9-444c-8ad7-157b3dbde182",
        "cursor": {
          "ref": "4b0ed0f3-949f-4333-9adc-fcb7307c5f1b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "54c9ac01-51c5-4de0-8b83-5eec3fdea919"
        },
        "item": {
          "id": "fb4a702d-ffa9-444c-8ad7-157b3dbde182",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1250e6ee-cc16-4a5e-b7d2-ca4b79cc1071",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dcf19a-9395-4703-aaad-70ccaf50784d",
        "cursor": {
          "ref": "cbf58c97-cd91-47ec-8d99-5f740c0dadf4",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "57209657-e260-4e99-93d6-b4b2bf6b6cf5"
        },
        "item": {
          "id": "a1dcf19a-9395-4703-aaad-70ccaf50784d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "165d75da-680c-45e7-8845-45e9fd8c6216",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c6cb89-b4b5-46fe-ad31-737bd631617a",
        "cursor": {
          "ref": "e260552f-bbce-4271-bfd7-0b447faae8b9",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "280a619b-7c85-460e-9fef-9c163127783d"
        },
        "item": {
          "id": "43c6cb89-b4b5-46fe-ad31-737bd631617a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9fc86b14-78cb-4473-a533-072890fdd984",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2963a00-9d91-4456-a568-c1515dd0bbe3",
        "cursor": {
          "ref": "79349fe5-6d6c-49c8-808f-5bec8af0ea3b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "65c6c6f5-f1e7-4863-8f6a-a3bbb02809c4"
        },
        "item": {
          "id": "f2963a00-9d91-4456-a568-c1515dd0bbe3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4e509d8b-9695-4d23-bfff-8d58d3218898",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4537531-bf60-48f1-9c1c-f9803e25832e",
        "cursor": {
          "ref": "6d3e7f96-12e8-4b39-8690-e24743ec3628",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "33ddeab2-4aad-47c6-be01-b72f1e9ff98e"
        },
        "item": {
          "id": "b4537531-bf60-48f1-9c1c-f9803e25832e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "97a58815-3d96-451b-a78b-cdbd0a2c69ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5499db0-7870-44fa-9f21-457ad1a33f16",
        "cursor": {
          "ref": "16ed4015-3af1-4024-be85-f992c2e2cbe2",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "00c44785-22f9-4fe7-9497-e0d51fa9eb6c"
        },
        "item": {
          "id": "e5499db0-7870-44fa-9f21-457ad1a33f16",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9f66104c-bf7a-4078-aa2c-ee2ba789ff96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1a9cb4-14f9-452d-8dfe-54cff95a2703",
        "cursor": {
          "ref": "bcd96513-c037-4250-8b68-466a605de74c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f3d4d51d-8dad-4882-ae5e-4015efba417a"
        },
        "item": {
          "id": "dc1a9cb4-14f9-452d-8dfe-54cff95a2703",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "21ae9432-0d87-4800-8ef3-2bcb64bd0b0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b76a8d-5bd3-4396-9163-4c716545c52c",
        "cursor": {
          "ref": "b74390fd-5bb8-48ef-9d7d-db8908a28049",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b8dfc385-1fea-4945-b999-04417fce21ef"
        },
        "item": {
          "id": "a7b76a8d-5bd3-4396-9163-4c716545c52c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "73221f68-0119-4191-8c1b-bf35d29df3f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578d12ac-ac53-4e41-b354-e7a0b39116d6",
        "cursor": {
          "ref": "9ae4d43a-cda5-4e1c-b6db-973b37e15622",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "89a22cc1-922a-4979-b130-ca4a7c824d1e"
        },
        "item": {
          "id": "578d12ac-ac53-4e41-b354-e7a0b39116d6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0a3d1b3e-87a2-4fd0-b9fe-ded95a8438a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cfc12a-0f63-42e7-91eb-648c59a96bd2",
        "cursor": {
          "ref": "45f0697f-0cc0-46ea-8745-e346d3314752",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fcdb9873-0176-46be-a123-5bc2d23055e3"
        },
        "item": {
          "id": "c7cfc12a-0f63-42e7-91eb-648c59a96bd2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1c801e00-ca9c-4270-a0e0-ee8026fa53a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa97718-fcb3-46e0-9c5d-dcd26770d3a3",
        "cursor": {
          "ref": "389c7488-ae08-4fad-a231-0056208dd717",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e9ae883d-cf1c-4341-b563-979ddaf25f73"
        },
        "item": {
          "id": "1aa97718-fcb3-46e0-9c5d-dcd26770d3a3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1c7d262e-4042-4163-9bdf-8bef53c6d024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba734cb4-a04c-4048-927d-26e564da1bae",
        "cursor": {
          "ref": "8e293bab-264b-47b3-a856-907af0fdd7c9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "64099d83-f5e7-45cf-8267-625b9b2970dc"
        },
        "item": {
          "id": "ba734cb4-a04c-4048-927d-26e564da1bae",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b89f143f-b4f7-46d2-a6c8-ed76656caf67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74f590f-4dd3-4d23-9de1-da1ab11b8370",
        "cursor": {
          "ref": "098f9698-0d35-455e-ac77-b1d5d6403003",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "837c45d4-26f7-4cdc-866c-4b47bb8625b6"
        },
        "item": {
          "id": "c74f590f-4dd3-4d23-9de1-da1ab11b8370",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fa255d96-59a9-4c40-bebf-7cf33e5d8b80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df21b14-c3c4-4b64-8921-c98c323c4300",
        "cursor": {
          "ref": "5f7664db-44e2-442a-aa5c-fa5ce83551d2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "89ac216b-0776-499e-96af-4e247e94d079"
        },
        "item": {
          "id": "0df21b14-c3c4-4b64-8921-c98c323c4300",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2c13c12d-5240-4f1b-a81f-968eb5afcce3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f986a90-3372-44ab-a4db-0b12361db285",
        "cursor": {
          "ref": "b15d5f7b-3972-4640-b7dd-2d2ee50a2ba3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "90f4a9a0-d7e3-4cff-b5f4-640ba8b6304d"
        },
        "item": {
          "id": "1f986a90-3372-44ab-a4db-0b12361db285",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "aaf03f93-909d-489f-8ce8-ae3166b141e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef43a9e7-e12b-4d8a-a4e1-05fe3e00cddf",
        "cursor": {
          "ref": "34cca99e-622b-472b-a046-8d44f84f60a7",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "267de393-695b-4e43-87b8-840286364b5b"
        },
        "item": {
          "id": "ef43a9e7-e12b-4d8a-a4e1-05fe3e00cddf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e4dbc1e6-efb7-4450-a8c7-c457bd24ed0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03042fd9-1440-464f-a2f5-12fb3b77ea5c",
        "cursor": {
          "ref": "7e788865-d89c-4fc1-a54a-6a34bffd7e59",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "14aa4c51-ddec-41d2-803b-7c7bfac6a8b7"
        },
        "item": {
          "id": "03042fd9-1440-464f-a2f5-12fb3b77ea5c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e620c652-34d9-42c5-9ebf-3be55e0cd7b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69784b7-47f5-4999-9db6-29bf520487bb",
        "cursor": {
          "ref": "dda1def5-0ad6-4ff0-991c-c7e10593e64c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1d17eeb5-6935-4515-9e07-e6f0c3a67f83"
        },
        "item": {
          "id": "a69784b7-47f5-4999-9db6-29bf520487bb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fd148d3d-d6e9-4679-9aa2-cae6b32d2a38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03307b27-ca0c-4a22-9ff7-be60bd421ac3",
        "cursor": {
          "ref": "29a13291-e584-4a1f-9673-6322a0599df8",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42a357a2-99a9-4b2e-be14-62a5ee96b4af"
        },
        "item": {
          "id": "03307b27-ca0c-4a22-9ff7-be60bd421ac3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e2a09493-1e30-42ad-adea-5327ca6fac1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096ec5a2-2b54-41f5-aaf5-20f71972182d",
        "cursor": {
          "ref": "5db04a12-4490-4108-984f-605417a1a7d5",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "db4171bb-7e15-4cf4-ac32-fc1dc313fe93"
        },
        "item": {
          "id": "096ec5a2-2b54-41f5-aaf5-20f71972182d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c33f118e-bda1-4d7a-8d39-9b65bb1eae2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097be196-73ef-4bfb-8fcb-69162a18c733",
        "cursor": {
          "ref": "5bb5c6b7-906d-447f-8856-eff1664119a2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "510b3b06-45d7-4c22-821d-18b1417322e4"
        },
        "item": {
          "id": "097be196-73ef-4bfb-8fcb-69162a18c733",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1121c4a3-5ce0-471c-aa3a-71e389b48483",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70a291d-17bd-4f60-9027-c22ced012419",
        "cursor": {
          "ref": "6607f1b9-aebd-4836-98ad-0ac63902a386",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "96b498e3-c20a-4068-b13d-88fb7d14e763"
        },
        "item": {
          "id": "d70a291d-17bd-4f60-9027-c22ced012419",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3852ec99-22b8-4605-baa0-a27b666eb77b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38672b6-24a0-4b65-a20c-e8d3b9ae4ce0",
        "cursor": {
          "ref": "a188e6e2-b75c-48b0-994d-60ebff4d5390",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7afc834e-e937-43ad-8b71-dfe9220fadff"
        },
        "item": {
          "id": "e38672b6-24a0-4b65-a20c-e8d3b9ae4ce0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "70767008-422b-4f1d-9fdb-3d6430eee57e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c01525-2c95-423a-98a6-ad2ad6bad50e",
        "cursor": {
          "ref": "9653f8a0-cdea-4b29-96d1-805049d50f5c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5a4c3625-621a-4f2f-8a2d-47f001f5df30"
        },
        "item": {
          "id": "00c01525-2c95-423a-98a6-ad2ad6bad50e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "12286ac9-772f-438d-8db3-f32ca875105f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da331dc6-67dd-4f9a-be45-f78862300097",
        "cursor": {
          "ref": "c8bf9312-7ee6-407b-9dad-af2d30871ba6",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "40cf328a-176d-4d3f-86e0-5b7f8db579cf"
        },
        "item": {
          "id": "da331dc6-67dd-4f9a-be45-f78862300097",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7d481c2b-9034-4129-82c2-0aa1a1aed27d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38135e92-b9eb-4307-9531-ec73e4e0070d",
        "cursor": {
          "ref": "6da02a0d-442c-43ef-9669-8ff8d1a2b159",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ecd72ed1-a682-4a83-a47c-81a299dbd246"
        },
        "item": {
          "id": "38135e92-b9eb-4307-9531-ec73e4e0070d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "246d33b3-bf93-4a72-a2f1-830b8f4d8ff6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7c6ce9-da15-454a-879d-a490fc5bfa9d",
        "cursor": {
          "ref": "bb57b0a2-d2cd-46b0-b72f-1edd0e485e65",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "80023d06-4699-4bb0-8341-8d3f0d2bab4c"
        },
        "item": {
          "id": "1d7c6ce9-da15-454a-879d-a490fc5bfa9d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6fb8091f-1460-4ecb-82ba-a1647d081d57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b174a7a-8580-4c36-8925-c61171656598",
        "cursor": {
          "ref": "afa62556-d49a-430a-8aef-a26f15c75dbb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "136a8239-8cfc-4e9d-bc44-8a5469841e83"
        },
        "item": {
          "id": "9b174a7a-8580-4c36-8925-c61171656598",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6d8f1bbe-3b8f-4f76-a789-b5c0f3f2c47a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92981f63-4d80-4c62-85a2-5bb87a91519d",
        "cursor": {
          "ref": "8ecf295b-e4e5-4086-9f6a-d3e73c5588e3",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fd0ffc62-6be4-4b3d-8e99-687ac804e4e8"
        },
        "item": {
          "id": "92981f63-4d80-4c62-85a2-5bb87a91519d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d0f2aae6-a740-496d-a20c-1d8ac8faba39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89c86d2-83bc-4c6b-a2f9-f14aa43fdb13",
        "cursor": {
          "ref": "9edcc5de-e52a-4146-890f-4a2fb692886f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "698098eb-bece-421a-af0b-87ae7c6bca2b"
        },
        "item": {
          "id": "c89c86d2-83bc-4c6b-a2f9-f14aa43fdb13",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4a81d1b5-d6dc-45a1-855a-dbe186a9db23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9bd4d4-49ed-4cf8-a13c-78db075d0246",
        "cursor": {
          "ref": "03686c17-83ac-4212-a82f-3c774eba07f8",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eab928e2-7947-479b-a72b-5c81358bd7e8"
        },
        "item": {
          "id": "3d9bd4d4-49ed-4cf8-a13c-78db075d0246",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2ef6d6a1-4ecf-4e89-9998-0385ee9b4b4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1059d1c5-a4e3-42eb-9b54-4053cea9c25d",
        "cursor": {
          "ref": "1ebc3a7a-a4c6-42c6-b838-13ad84614f59",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "32935f8b-45da-4c50-9064-c50469ccf9d9"
        },
        "item": {
          "id": "1059d1c5-a4e3-42eb-9b54-4053cea9c25d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f2540af1-46fb-4d1c-a2ed-5bdd45ea815c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2c3c1d-173a-4d8e-b0b7-26807cb717cd",
        "cursor": {
          "ref": "ef84b7fe-7c41-4091-a2fd-e7241ab32728",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "037cd3e0-c8fa-44f9-80ca-a9d966edb220"
        },
        "item": {
          "id": "7c2c3c1d-173a-4d8e-b0b7-26807cb717cd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "69236024-e1f1-4de0-ac0b-c57ced769ed7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e080514e-18d1-4827-bee4-20b43ee49a77",
        "cursor": {
          "ref": "a8b3a28a-8a89-4ce0-b1a8-0dcab3202587",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "65e26a69-9377-4165-b47b-5fb87fe1f888"
        },
        "item": {
          "id": "e080514e-18d1-4827-bee4-20b43ee49a77",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8ff38290-e272-449d-95b3-b641e24301a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb00624b-534f-4ab8-b7a9-8b4e277b28fe",
        "cursor": {
          "ref": "1f7d12a5-39e8-478d-bbed-c9a1fd730715",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5760e957-d78f-4718-8e86-24bfc727a7fc"
        },
        "item": {
          "id": "eb00624b-534f-4ab8-b7a9-8b4e277b28fe",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "26ff6b38-f3ad-407f-b070-93d4d07b4804",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1281131b-f0c6-474e-998c-7f07efeed17b",
        "cursor": {
          "ref": "ffafcccf-9ef2-4b10-82f2-fa69a27e5301",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c6c9c9de-ccb1-45c5-b505-ddd59f5541c1"
        },
        "item": {
          "id": "1281131b-f0c6-474e-998c-7f07efeed17b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "52fa28cc-e62e-491b-8e01-4ad180a93474",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae352a2-5885-44e9-93aa-156ee3393375",
        "cursor": {
          "ref": "f121efc7-959f-4480-9ac9-76333e0363cd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f27bb739-3050-4192-a01c-d2d78041c9a3"
        },
        "item": {
          "id": "2ae352a2-5885-44e9-93aa-156ee3393375",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6f0506e0-7e31-4bd8-aa37-e1b4221e17d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148a285a-f3fc-44f5-89d8-bf1ad6849305",
        "cursor": {
          "ref": "efd72136-e536-40a6-8f91-bfe0de8a2c55",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d4a6101d-e5f0-46be-95fb-9158feb50cca"
        },
        "item": {
          "id": "148a285a-f3fc-44f5-89d8-bf1ad6849305",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "35aef7ae-dffc-45b5-9650-5bf1faca37de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51939bad-d951-4abf-89e5-09c989d80ea4",
        "cursor": {
          "ref": "2f33d782-7d42-4a80-b84c-a99062b20ab6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4823827c-88bf-4dcc-a357-2edac13f20f0"
        },
        "item": {
          "id": "51939bad-d951-4abf-89e5-09c989d80ea4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bb5747f9-3456-49e5-84f6-4cb78ae0edef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1041e4a7-9c4f-4b50-9428-dca030c204a3",
        "cursor": {
          "ref": "ee4acfc5-c1d8-401a-8894-6afb02511df1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c649a8c1-3a67-4f1c-a74a-e85cbf8ebe5d"
        },
        "item": {
          "id": "1041e4a7-9c4f-4b50-9428-dca030c204a3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb2fbaf0-42d3-41fe-a368-dbd90453fbe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396ecda0-a657-4562-babd-6c8206ab2ff5",
        "cursor": {
          "ref": "fc753864-085d-4266-af7d-fa4116f21950",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "55de3ab8-54af-4a29-b8bf-e9e8e110fc12"
        },
        "item": {
          "id": "396ecda0-a657-4562-babd-6c8206ab2ff5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4f8c3682-1643-4212-8b82-da63a1599ebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2e29f0-cc5f-42f4-90a6-05dc55ff9bb0",
        "cursor": {
          "ref": "19075bfd-a616-4c1e-a81f-248db3e05a69",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ab1faa24-20e6-441f-9ee9-9a920a958e4f"
        },
        "item": {
          "id": "fa2e29f0-cc5f-42f4-90a6-05dc55ff9bb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f6a21a6e-49ae-403f-8426-d368e7978a7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807b7131-d4b4-4a1d-bacf-1b705ee857a3",
        "cursor": {
          "ref": "1eac1043-9c50-479c-90ea-473c671bb681",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8736b752-9cb1-44ff-becc-04097e4ff823"
        },
        "item": {
          "id": "807b7131-d4b4-4a1d-bacf-1b705ee857a3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6555c472-1f33-476a-b860-cf44e3506ecf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba49ce39-2e58-4713-994d-c37b27ec5b8f",
        "cursor": {
          "ref": "1090651a-307f-498f-84b0-b2e3bba7d809",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "62b767c1-4d2e-4632-a288-c205c8a37794"
        },
        "item": {
          "id": "ba49ce39-2e58-4713-994d-c37b27ec5b8f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1f8c89cd-8ecb-4e7a-b859-56a338df6c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaa920d-5c60-4419-911d-eaff4a172ea7",
        "cursor": {
          "ref": "632d0671-9be7-4522-bc71-5fe0b27d8b2c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "936470cb-b053-4699-8920-7a838f688547"
        },
        "item": {
          "id": "2eaa920d-5c60-4419-911d-eaff4a172ea7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3eb87e09-975e-4efe-bf37-56706045fbc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2aee27e9-322d-4930-9863-2173fd9588ee",
        "cursor": {
          "ref": "fab8e54a-c85a-4c89-aad4-3a65e702b23d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "80105319-7282-4080-8d0d-d598ee04d5f2"
        },
        "item": {
          "id": "2aee27e9-322d-4930-9863-2173fd9588ee",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7dffd44f-7a9e-429f-9d32-906c3ab1d9b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "b50c23e1-564d-4fc7-8e4b-568dddafc2e7",
        "cursor": {
          "ref": "b5dea63e-624f-4d05-9355-a565f8f904b0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6e30483e-e54a-424a-9ee0-56aa3ac6345f"
        },
        "item": {
          "id": "b50c23e1-564d-4fc7-8e4b-568dddafc2e7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "19da2137-9162-4037-88f4-6c08d7a23103",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "bf4338a2-df77-4663-89c0-7cc18b07ab44",
        "cursor": {
          "ref": "5319e460-17f9-4f82-aab8-3e62d830e4f4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e5b4b5a-cb24-4a3e-91d6-237b3e11dbf6"
        },
        "item": {
          "id": "bf4338a2-df77-4663-89c0-7cc18b07ab44",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b8800e3c-0e94-4a27-abf0-66b808670adc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4338a2-df77-4663-89c0-7cc18b07ab44",
        "cursor": {
          "ref": "5319e460-17f9-4f82-aab8-3e62d830e4f4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e5b4b5a-cb24-4a3e-91d6-237b3e11dbf6"
        },
        "item": {
          "id": "bf4338a2-df77-4663-89c0-7cc18b07ab44",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b8800e3c-0e94-4a27-abf0-66b808670adc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8162a8c-a514-4169-ba28-822d47ebe6e5",
        "cursor": {
          "ref": "02bf9782-9be1-49e3-a54a-2ca79766a868",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eea3c8c4-924e-4768-a07f-35cec0e5f85b"
        },
        "item": {
          "id": "b8162a8c-a514-4169-ba28-822d47ebe6e5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3de0cc12-0d0d-4da2-95d8-52492d704755",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a5faeb-76df-4b93-917a-b979304e213b",
        "cursor": {
          "ref": "b2abe335-c009-4638-9e20-57e1a228920e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ab6e2bf9-072a-48ac-a1ab-6e0eff6313bc"
        },
        "item": {
          "id": "72a5faeb-76df-4b93-917a-b979304e213b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0a46ec0d-2a21-442a-bca6-471ffd2aedbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}