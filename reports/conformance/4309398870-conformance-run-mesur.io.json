{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5555671a-8033-4ecc-b4c3-6c160326c0be",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b6046a02-f951-4a6e-a6b4-049020369605",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40db5eaf-535f-48f3-83ec-653b0aaf3e71",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4048352c-6fe6-4086-9e2d-985b77f710ad"
                }
              }
            ]
          },
          {
            "id": "035225be-253d-4494-b60b-fc103c8b95f2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "462f6c5b-c949-40f1-9928-5db118659b33",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d53de46e-bb73-4a2e-985b-30e30ca53ed1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d900ce2b-66f2-4f4e-b254-b363399cb0e0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c476f8fe-1fbb-4188-ad40-7940eb1fe0c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d60bc86-f798-4d28-bfa3-c7a91befa55e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba25c80f-9913-4427-a110-718735395a5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78408184-e7c1-43bf-b637-12a247fab351"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccbf8fce-48f5-4e8e-ba86-70c131343e81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1530c0f6-f6ef-4d99-8b64-69f7847ef9bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3633cca-5c94-4387-b850-925239b48912",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4bc0c767-a590-44d1-a97a-8d647c350003"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "694509a7-9651-4d32-87a7-343913d204c5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cc5f27cf-44a5-4c04-b1b5-64638d946390"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4680f55-00fd-4217-b7ca-fd5bb74c6c43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fb57655-ffd0-4b2d-94ce-5465c24fcd89"
            }
          }
        ]
      },
      {
        "id": "62869e50-9c6d-4979-bab7-51e74069369a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e9990e50-b822-4f68-bd93-04e7b2ef611d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5cbe858-4054-4734-93ea-2ce828711c60",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85448fcb-5ccb-4b51-8df6-0c6f3cca4ab7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fa9780-81a0-4a17-acc5-ce7c64de5da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09f3c3c4-8e8a-4f1b-9822-483df8d41a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc726ca1-4e39-4df0-a8be-618cf2e0b252",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53a12b1-7c5a-4709-a7bf-380ce85a5a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fb012bd-852a-4d51-bbd1-395b6d0ea2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88df1c8b-bcc3-457b-9fac-9d6fac788f3a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cbde5a-aa49-4e5d-b5a1-6a01671f4bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a620e2e8-687b-4be4-b12e-d35c2469e9af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ac400f5-91da-4b1b-9adf-76f38f56272d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52be0c82-ebd6-4088-914c-56370822229c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee9a203-1169-4108-9503-826cb73d3906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12a56298-dad1-4705-a69e-0523b5703903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b76e52b-41a6-4856-8d34-6f3b415172cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a861b33c-4bb1-4e1a-aa4c-4104c71ef6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf404f3-1d32-45dc-a4ba-84e66a5c2355",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dd6874-b56b-4d6f-864c-75b31408d40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f1948fe-64f1-4c54-bd85-b6675568ac3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bed16e7-ec0c-448d-bf42-d6bb60ca6ce7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f64d816b-89cf-446c-b5d6-c71f3ca0df6e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c183992-e0db-4dc5-999a-df8e6b3046a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7091b1fb-efe7-4845-a581-446e599a81dd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a78d1060-5bcf-4ec6-852d-bb55b022333b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0e4f7bc0-160b-4f90-becc-6f7b3f369ff4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4378de3d-4597-4d8c-b268-b8a88f4e54a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b0f92e29-0492-478f-ab0d-160c6fbce24d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fdd6672-bbc7-46f4-8675-97632c4677f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20e7fc87-bcdd-4a77-8d5f-4e79a02e6476"
            }
          }
        ]
      },
      {
        "id": "e2eb278e-983b-43bf-8171-9337ccf43403",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "672d058a-c971-4dd5-b530-fc021fc7ef01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "300338df-193f-4736-9ab8-1b2d6194fc4c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a57c445b-4ae1-4c30-99a2-cf8d72084a42",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc653a8-c23f-496f-9d57-dc2865f92fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0287114-a45e-443f-8e22-955957176d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4a273b-98df-408d-a485-dd0d8201a5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b10aa07f-6255-4dbc-8d5b-cd996cf6f179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d72e909-d71c-48b4-b256-b20538131b8b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b1b627-939c-4965-8e8c-920477c92166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28538dd7-3a58-4f34-8136-e12cc70bbb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8a1ed8-9901-4dee-8f8e-6d29bf9bd743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54306593-577b-42c4-97cd-db93a773bc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e2f1b1-2a29-4ade-8ec2-910a2de220ce",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f231ba1-e513-42fe-80ce-7cf1cbaf640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff9f152-1a62-48b8-a7d6-43de94b9b55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6fda04-dcd8-4ab0-b302-9d8f4d0ff924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0103720-2ce0-4bb7-b633-bdc66592a742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17426779-8a4f-453b-b9d8-f556552583e4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befd26c3-2425-455d-971d-e0c25faa5f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7ede56-4f28-422d-94ba-a4568cf326f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36732bc-880c-4193-9646-82a4ff1ad54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "678f8bbe-2e39-42ca-a583-09ffc5a782b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c938b20-fa19-4ce7-8b3e-497f85270726",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03da8d30-0274-4da1-a3bd-8cc9fa847f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75560c5-bd41-4b8f-920a-ac799e1982ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd27f1a0-4143-44b6-89ac-8afe1c2e16a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c19245c7-ab1a-43de-9eb0-747c5e1cffa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d040aeca-3479-469d-bc8c-47c5678a74a7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cfbdda-97f0-4e30-8b1a-12ed5f754665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42936895-3f4e-44d6-be42-df09a78f7084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d072ef1-707d-41e6-bff9-65b57b9d3292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d209a70-8a0f-44d4-a6c7-05fcf89cb077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fddb97-ea14-4e15-baaf-c1a41445be6a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1e3e59-3da2-4c8f-8dc7-118f04b735a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de583176-9e71-447d-8320-99300f8a6a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd50ad8-5b17-454c-9570-a2ee6d5fbe19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5269395e-d4d4-474a-9d54-0c5b09da7722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a060a92-18d0-4886-88aa-adc98b929005",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2824650-642a-4e21-934c-7a10d9427289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2f3307-8212-4baa-b59a-8637f85dc993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dd9f66-6c9a-4bf1-9d7a-15d27ba65321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afd0c5c7-dc6b-4ff6-bd88-47854306dafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8be8d5-4dfb-41e6-ad13-a1513f779bc3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446648c1-da33-446b-b781-76c28ef6f640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed8ab7b-f983-4acb-b62f-f18c4520d028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f88f0d-86f1-42b0-95ee-8ee821f2c018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3947dc5b-a8d6-4f53-bac6-97c3556a868f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0280f18-c5d4-4dab-aa9e-97776e765a04",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29a1e7d-bf4d-49d6-aa6e-4fd412c5edbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3ae561-efba-4832-af54-deb7aaf2f054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970bfa24-f519-4760-a757-0467ee227c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc28415d-12a9-4e8e-b397-519df2022372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424a43fc-c473-4e03-9729-9bdb95e1a82d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c1191f-6fa7-4ccd-b8b9-a7f16b2c7e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d360a7-2650-4305-bb90-dfc2e4693bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb0395a-d4ef-4ebb-bce5-98f005986511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7307fbd9-d168-4d40-8efb-3b7ee389c419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de730b20-ee0c-47bf-9e96-dae54406ab32",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5698577a-8f90-49df-a3d0-b6c5e2bd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f4da06-3112-448b-af7d-40a67b320f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f732f2b-807b-425f-81fd-bf6b3ba8b1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb61ec1b-163c-4562-a411-07b46da30995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3919337-54f4-4353-abc7-5f184fc36a39",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea762a30-a9b2-4331-96e5-a1281ff7aeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aedbd9c-e066-4334-9d7c-6210c69f486b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375aa943-e894-4eea-a3db-58970d531a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e897f0a4-5fe1-43b6-bed6-74519fef6e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5080ea-0f9f-46d2-ba4c-53741d344752",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e51a7-345c-4008-ae2c-905bc7c45495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25b89d3-3975-4321-920c-03e69f8e8a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83525f8e-402d-4c50-bbea-4f022e34930b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c5f6c52-9c26-4e9d-881c-bda86ff1b694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af60177-b35e-4c74-9022-1c23e735a45c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c591da4-9f96-48d2-a5d1-c2670a9d44ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba9aacf-1049-4891-b925-796c0a35458f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6f1d00-370d-4e00-9a32-a37561c5b5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fea53b30-af44-4aa7-a10b-9c07a9e887ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128a6278-a6ae-4d1c-b545-038108991223",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0487544b-06ee-4183-ab38-a5ac52552a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91e51e5-95d8-4d91-a195-3b8ae98731b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450f5ef7-b103-4d09-9d27-1f85fb49a5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36a17cbf-b513-4d41-971d-f22c87cb2ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a83a94e-40f8-4a13-92ea-1edce571e495",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3bf7a8-7958-481c-9431-f9d65c334ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bf39e2-f140-4a38-8fd1-d2321dcc3eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f31f91f-37b1-4c3b-920c-c77fb5f1ead3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4a74fc6-a51d-4755-a90a-dc89fb7cff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72bf53e-b624-4f1c-a9dc-5323b422b7fa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9d98a2-a470-4fbc-8e9a-a5963d41ce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33179c3e-2fc7-4057-a200-a15ddf93ccbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a126494-15d7-4e46-a529-dff3391014b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab71f39-361e-4bb0-b625-04dadad126a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40adeb65-cb5f-45d6-b467-c56316e5f162",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85bc3ec-d177-4ebe-8576-61c768a8b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe84b9e-1e37-44f4-8f28-7211d09a991f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e56b225-44f0-4109-b5a9-cf7a0d113a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1a209a-cf35-4f5f-8085-9d1ed3fc42a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8c77a2-3285-4657-b64f-0327151506f2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9a77c6-b520-4028-b7a3-b66efcb68b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e57a08a-1927-4add-b336-c9812f89a56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58998b91-b9b3-40c6-8dcf-eb502a9a164d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf86ecdd-8706-45ad-be29-7579d4aefdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cedc2f-bc15-4e67-a4f7-d58161f94087",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e96253-7204-4c25-ae2d-0e1773e78531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96046ef5-89fa-48db-8071-f0cb512f8aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166c9a32-96dd-47fa-b703-ce0f2b53cbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9568dad-e5c5-4003-b864-615a088be56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377e03f3-e10c-455d-8eda-c3046c76c974",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b07b96-10c2-409d-8725-82c1aeb6064d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a51eb30-3420-4b87-b82f-ef3e663ad6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a82b9f3-2622-4218-9b17-ba3308fc2b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc28ad1-f3aa-4c5f-aae5-66a6627700af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9bf5dd-91fd-4fdf-9852-8293e2d3014e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4b7ce7-ae62-4a20-868e-3c9ba5c56478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba448812-da4c-4a32-bc21-1e017214b109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bfb7c5-cb53-43ba-b26b-713dd23cf105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83b51081-ba35-4154-b021-f50aaabaa68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b3b94e-4129-45fd-9f03-d43d5e7589bc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7442e46-d610-466b-8993-e7d0b124ed96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650018a1-2767-411e-a567-0a5b1d8ae0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f36a5a-28a5-46fb-a26a-c61557e8f8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0d177a-3c20-4d5f-a097-9b5d65fd1d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323533f7-e1bd-46ec-bdff-1e23a8f1cdf8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3fd3d4-32c0-4dcc-9451-fa25e1ffe694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bc8e32-c141-48bc-b7d3-3e718e89cf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e796139e-c99d-4ac8-91f0-83e8dc234bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0bec6b-8609-4e24-9609-1b84c125f5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06cb9ed-baf8-480f-8573-4f3d3701c4c7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e22ff21-6d5c-4023-aa36-1939bde0475d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9d042f-d4bb-43d7-b3b8-924367d148a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdb8f09-d8cf-4522-b16e-4f2f84db1cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb1cacc-b8b5-4bb9-b6c4-eb4cf3cc5dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8039e4c6-00cf-4b27-9b4a-12e8be04a551",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3074694-f687-43c0-974e-c9454a443131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd0c36-543c-4b37-babc-525b5a05f660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45017255-f41a-44c0-8c1b-3fb223745292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3db8278c-a34a-4677-8367-309923b47ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523af589-b159-407c-8f85-0d5dc523ec3f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefe96a8-4d59-42fb-bf90-7b4ecc7453ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c770e9d8-a1f9-412c-b94d-5776218680db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba4c7f5-d939-4c6d-9598-d8fd72489c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcab6bc-aa0c-46eb-bc94-56b2ff9916cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71159399-3e12-408c-b5c0-3bbd49541309",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51b28df-925b-427d-85da-2c3d2bb421d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972bf5a5-7064-45e3-9337-eeceb7d7588a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb5b658-bff2-4bf5-b7f9-5acb6fe95753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e6dcb60-6f5f-482c-9dbd-c027728a69eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0d2b48-f2b3-4c16-948e-0ec71fa4482c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccebff19-e768-4402-998f-fd3b5c3a25c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618b4dd2-126d-4ecf-ab68-fb747fdd2584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18179572-0da5-4270-8fbe-7afc0916248e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae64a67-716f-4d3c-addd-175884420ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee60e2b-4770-4fec-967c-881848a1e217",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad473ed-b374-4907-aaf6-75e1ed7854ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffccfe85-cd81-4f72-acf4-7babeb01ba4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485999b9-3635-4d33-8ef2-e3cb2c13ead8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc21bc2f-8b5c-425b-9a85-2dd9f1ac1259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66de710e-dab0-4a37-ade8-fa4856c1fd20",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9a5e2d-4205-4dd6-a14e-d7bd43aea248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cfd917-87c2-4e22-b99b-42f4d2ed1bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e551efb2-60e3-4134-b670-145620b15e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb09f39a-a164-431c-82c3-2a2aa1effe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd72f5db-c9c6-4f49-8379-45ab454b2e3c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda703d3-59ea-4a0d-99bf-9bbc718db709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d76a6a-be67-4a46-a4c7-9f6d1b1b7d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73806ae-9355-4104-afde-576d121713aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4758033-b7cf-4825-9bfe-abce1f7c337f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1cbb7e-2797-4e7d-831e-c545298f94b6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f91094-f023-4ce9-a922-a3008b5f311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401b2a34-d2e4-4ac7-8837-00959897cf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c206e4-a855-4897-98de-cb2e4201d8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b710435d-8157-4070-aa23-940bfdedba2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedc6c83-845c-45f2-a25f-45aed794a956",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30cc8fe-53ab-4d0b-9cd8-113af1223b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80feecd8-f9df-4543-ad7f-c0759159d6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12acd814-2458-4421-bb64-7ddeb43d1375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "683d83b5-16fd-4a8b-8055-62f2a4eb250c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ddf26f-50ee-4443-99a5-23c47f8f6c40",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9b5778-895e-4ea7-99e8-62a6ed858fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bbe37e6-8d01-49f8-8481-e4b5d5615ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60f62d3-f230-4d5e-bbce-a8c6dac66be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b41129-3455-420f-8b82-8aad5b3bb295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b0bcc3-5e1d-4142-bf53-b89260f9a419",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ba847b-a182-43dc-b51a-1913c2409c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56206b85-c295-41db-909d-0668d47e639b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e967063f-3643-4b46-a9db-3b2894d6d6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "141b86d4-2d69-422a-bf19-02992f7703d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12418cf2-8dba-4b12-8402-f77adbfedd97",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f5ddde-a757-425c-b381-e6615c26892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5dde73-99f7-40b8-bee0-99c8756904e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245e5973-8b30-47ed-947c-53c5be01d754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c21caa5-50df-4d5b-a98e-0c9dcbe4b7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ec96d0-d816-4b35-934d-f49cdea8845f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6bd302-3046-489e-8de5-78f16c6f3e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b3642a-de40-4897-9949-4772ec01263f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914731d4-87e7-430b-a0d8-95326e976f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbf89b0-6e51-4b18-9d1f-6ff48e9958e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cebfe9-a742-45f3-ad49-061cd3f8cc63",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f49e79f-998c-4a62-bfc9-81977c96c9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7cc9f8-00d8-46fa-b921-46d46ddbc255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1701a2-f6ea-405f-a339-95ec2ef9b42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eee165b-3169-4d58-8e4f-81960e27507f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43794f5d-d4fe-47b5-a436-b981f61afbf2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d42939-c6f6-449b-8422-60ee9a4d1bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3780f9-4346-426a-a81b-245e22119b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b78375-be1e-4546-b062-50eede42241c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c8adf6-73a9-4f16-a59f-3c7b581cca8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06a5842-1655-484b-98aa-12141ae298e6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c01246c-c9cc-4513-9955-a83dffdc9de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc00a3c-a3df-406c-b00b-a2184b6eefc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454eac1b-cd3e-461c-af17-4c36d7a3ce5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "081424d3-6299-4bcf-a7f2-7e15ae8622b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b5bbd9-2776-4440-b3db-2de3e1eb063c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34c7521-304f-475d-931a-0c04a737cdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ac420d-6ddf-43a3-ae94-a06c18032404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca85541-59bd-488c-bd41-16f37791071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c028b5b2-4a42-4658-865a-1202d9697d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58b0238-651e-4acc-b427-df977c95187e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e085600-5e5f-435f-885e-632196b83e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771f49b5-da47-4b2b-b9e4-16ce4d3d537c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e334b0-d12e-4e4e-a371-b4cac916971d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a093a1-cae2-4cc7-9e1a-fb4d963d4849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0613fa1-b534-4a3b-83ff-cc18f6094d26",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef668288-119e-4d8d-b0f2-16dedb95801f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6620ea71-c1e2-4617-a8f9-9ae4de357d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abdec35-5058-4c97-ae87-369d82608347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10801043-b26e-43ea-ba43-471388a00245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1188b01-3770-4bdf-8dbd-c4e202030d6b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7167d9e-ba8f-43d7-8f48-b49880b54c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810a9524-3e69-4345-a883-1a68a52d4b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3cc2ca-0bb6-4f96-8f2b-fa140a43fc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c082508-0091-4b8f-85eb-d402dfeefa4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8642570d-47df-4b8a-bb47-1feb4b70cd3c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d97726-8996-4cc2-abff-07d6e578ba28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8dadb2-0a43-45fe-89e6-83678fec9b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52ee048-7b6b-4143-a4b0-9bce2dddb821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fa3df6-4b19-4ed9-83f3-2b461aaed89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc4a0d1-3f9e-404c-85b8-6d11271ece36",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3465ca38-0067-4f91-908e-797885ebcb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1605b8-6c81-4ca8-a888-7f8bb28600cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4823eb-5461-4703-9cfd-ef1889ada453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f37a2a09-75ad-4a22-9ad0-e40d4cb5c7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca86ef3-649d-4826-82f8-860195d14b68",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdc8762-1749-48e3-a98f-84cc8b13b67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f49305-a40f-4b98-a057-1f02f2f233df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02867101-492c-4821-a557-5a2e3739a010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d9bd35-18bc-4bc9-82db-44f8c3d6ee04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c9a737-214a-4f22-9030-44bdf61aa413",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508518f6-3fc9-48eb-ab74-5858bf1826d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ca607f-440e-48ff-b1cf-3a77e5d42795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb73c3d-60f6-4e8f-98d3-be83c6f9abb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43bc858d-d1a9-4fcc-92c8-89b7702a3eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427a4dd0-3841-4bae-a4d6-83e2bad4ffb3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a2f617-e4f7-42c9-9efd-52baf8754a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2e0b6e-bfea-4580-80f0-a16edfe20d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ad4ec1-10df-40f6-9d4b-f115acfe8d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ab17e0-9130-44bc-8dd5-44efcf3464cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f278957-9715-4bdb-97a5-e24744bcfc83",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e1f626-40b9-44a4-8e66-3a737a7262fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819dc085-ee2c-49da-8d1e-6918eaed81c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695768b2-37c5-4ce3-a30a-ea029934e1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1f6909-6085-4f46-9dcb-ff07e2124e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae3b7fd-1eca-4fa1-b4a2-4dd5c8c8cd57",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198ebac0-698d-461b-b860-fe2f1017adb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f69dfe8-6cee-475f-a6c8-abb28f5ae29b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11394b6a-94db-4a76-bd1f-59c5a1695608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c254e17-018a-443c-884c-890c22dd8cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516348d3-b645-4a1c-bf68-0b482da9dcd1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f1b661-ed0e-40aa-8f2b-884091027d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9ea368-f4e4-4282-a1e2-3e6b9926f580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7bbc24-e50a-4f0b-9ad1-c59176691455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd1fbd5-a0ba-450a-89f0-994a430900ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410f20f6-1253-42fa-b284-d22864565117",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f4b367-7d2f-42da-8e0f-dc88d0f503f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14b3afd-668d-46d3-a8b6-802ccfdffa0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e6a9c4-67e1-4ab8-91ed-3ab4753acfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f096c22-db52-4d36-8ca7-8efb87fb769a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21634422-086d-4453-8cfb-3a0be31e6523",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d660f4-6773-4709-ac1f-32df7f1911fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e684ef44-82f9-46fa-9516-2b16706403ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1ed56f-fb34-40d0-aa0e-bbfce29e3cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "430a9ee5-7f42-4661-92d2-f17c50247bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46338ec8-1b75-4951-91c8-351d264a87fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11edb7e0-27cf-467c-9133-39f650809bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e4f14f-0208-4ff2-9f5e-f678e309549f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7c804d-3a76-4833-8b13-76575ccbefff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf30f66d-6d33-4986-901f-ba067f20b73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e674548-4012-4bc3-865b-3041cca26d07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edada7fa-75d9-4056-ae31-67208a01a260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba086aa6-33ee-4394-8eb7-ad9dce060fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45bf58-54d7-4a32-b176-0901f13ff781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60e09d7b-7427-4e1d-bdd9-7f03ba26f350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272e8675-a69b-4d2d-8a6f-9358c1aa7572",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4c61cb-4be0-437f-a3db-46af62256004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e55e84-0e88-484c-a6df-7b7a21ec4fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad369e7b-5c75-4c59-828b-eaa362c986b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7c0c2f-1819-4135-ae86-968c43351607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882fd06e-8547-4edf-afb3-67e0f97ec467",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e5cd7-f1c9-4756-93aa-85cfee5414c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66a0ac6-09e2-4408-b7be-50fcb63ea6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc48222f-65f6-4350-a87a-32f92d3c29e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c32508e5-34ad-4bc1-83a7-112995a64fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0434f8-0639-4ff7-a9da-42ab7d9977b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4f331b-c19f-47e1-85c7-011318715406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa649f93-6350-46a3-9e3c-a9ef0d91f6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95d04ea-c56e-4ba1-901b-edac3616555a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b58c530-81a5-46a6-a617-9999573f4332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd6d660-dee4-47c6-a899-420cef25a8c8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2cc742-9bf8-4fa2-8193-33458635fb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88165be-4e33-42a4-a17e-820cd71432bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812dca32-3bdb-4655-9962-c74055db112e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d0f705-cfb4-4759-a55f-a5d486d222dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c33441d-f757-414f-a911-48db4e07da71",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b34945c-c9f5-4c9b-96f9-48e9966fc8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0779102-28ad-4fba-9cca-8fe20e87e2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01999f5-d4e2-4795-87fb-e379bca1ec8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1751df06-bdc0-4fda-9fe2-b12c193e4528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c85d65-5d09-4cb9-ad06-f9b50f6c70a2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78de398-9402-4dac-be2b-89f0bb01fd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e441782d-c388-410d-b867-305ba041254b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4297f5-4300-4b84-914c-b535ad73ab53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4a69f9-a6fc-40ac-9fc5-4392ceaf2a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689347c8-f7a4-46b6-a465-04491db5b076",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4862f73-bf1f-40fe-8d6c-9f566e92ad7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de0ac38-dd16-432a-a1ae-f91c57b82f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32405f82-5da3-45bb-bdf1-e3f56ec8e0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8ac193-9269-461e-9e86-6ef16cc495f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766d3d0b-5770-411d-8089-ba8dad3ddbde",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1d520c-d171-4c6a-a8f3-845ebad45164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcaaea7-ba6c-41f3-a77b-56ba77c21bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f230ea8a-0a3a-4b7b-b904-768d417bb901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea73b73-2e73-46f6-b85d-a50304f5bad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206e7f33-bebe-46d2-8168-97d5cc6b3095",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88978a9-0e31-4523-b141-a6377afc0f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1119b89-7279-4a2a-bda8-a2809832e019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8979a5-2da7-44c3-8d45-00d9c0af36ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90c232f2-6dec-4f96-870c-987866c7d6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500e899-3396-4d21-8942-1c32411c90fc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700cda71-4eae-4f4a-ba93-b3f51f1a404f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280b214b-ddfe-4efb-afd7-6bdfb07d3767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a082c822-37d1-4dda-b42c-ea94f84bbbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "794d70d8-a469-4d2e-b62c-4898077885f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb493b-aaad-456f-b34c-6d7f3a946635",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ca0960-3aef-471a-b193-0bcdaad4ced5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f72cab-fb84-4b1d-ab06-7c8f41ca76f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ae483c-a73f-45ce-abb5-f000d75db6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "853f8366-17bc-4857-9e4b-a8a61d6db251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624bb441-532f-473f-8c8d-d5a241f7a3e4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469bd839-03c9-43e7-8b83-9ac02612fe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a73e8f-1bb8-4afb-8d24-6bf4268c6f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06cc9c4-adcf-449b-b697-df4bcf52482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dce425b-2271-46f0-9336-12d41cf42fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f05772f-d72a-48fc-922d-d73bdc881a8b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6ef9d8-097f-4cd9-af4e-ecfac6763ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b151fe1-5a6b-4544-ace8-ce98423e6727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0447912-8fe6-4695-bdfe-6c000cbdf6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7992241-d17d-428b-af44-0abeaa6a870d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7364616-d2c7-48bf-b129-60337f872aea",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269feea3-c40a-42f6-9616-aba9cab4679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6daf42e4-f2c3-42db-a078-c55e29695d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e1cdad-1e96-4ec3-ba6b-9b0abfe8e607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20872661-bb9a-4e27-aa0d-aa2758d700ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db61301-3ba6-464b-8385-14f123eabb9b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787be74e-b802-4b95-80a5-68422128587b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "134827ac-0bea-42e8-bbec-52569b7dda6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa251509-52ec-4faf-be7d-d14ea032d266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e4c09a-74f8-402e-adea-2e293ac08e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d2cce6-1c6f-40f5-bb95-ab1a194246e5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85587ce-57bd-4d61-9e51-61b568ccc6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403cfa7-9e81-4449-aaf6-9e1710e151d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd27eb3-81c6-4021-9854-d4b72a3c269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e25a258-bfdb-4f9c-abaf-01a8458bf360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecb4d99-8647-4a29-bde9-3309a575006e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58c8a06-0546-4a17-bc28-b1fcd67d2a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f4b387-b6c3-4170-aef9-9f3f644eae74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a9e177-23d5-47ce-af83-0ee26119d163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1896d982-a1b9-44d0-98a8-d4a0068af504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c78d52-aa64-430f-bc0f-f2186a2df262",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0d08b2-11d4-4c60-925c-49f5a47f9d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e3ede4-417a-4be1-a50b-43f7be9a16e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd1da5f-b1ce-40c4-b645-25a642efb6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcad8269-64a9-4d78-b690-7208df3b6e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471d0eb9-1bf6-4a3c-af97-74fa2d62a889",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2ef89a-862f-42b8-a92b-cf5535e9caf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670a30af-67b4-4104-8228-d94d62f2c898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372afb0c-c547-4f32-9ecf-3fbb1ed3b27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba86040b-b4cf-4fec-a542-7fb587fc8340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c33b0ef-49f6-4e48-b14a-4cdc20dbda64",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd015ee-941a-4a5f-a249-f8f8dc9ef363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec31d16-75f5-423f-8c37-cc70be7444c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b7939e-2352-4afb-acb6-f1434075e5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e21fbd0-f4c4-4b89-8c33-cb246828c62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fa9dbb-d108-4957-adcf-350867ec3742",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ca513e-3d59-47b9-a76a-6a06483f422f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fc5a16-4728-4381-85e6-e1558f9842e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccd2375-873f-4606-a9c3-77fe168ae9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a78a95-fc50-42b9-aa3f-38943275f879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bdb4ef-cb1d-4018-bc64-ef93836f32b3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1523b8ab-0c72-492b-97f2-4746372125e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09373f48-6839-4d07-9eb6-eec4a34d70ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317febe1-c47e-4d3d-ba0d-6d05b8b17b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb06163-76a7-4c0b-97c7-27ab003ffa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332f5aee-9a7d-40f0-9c19-98345cef0a89",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d519d3c-4613-4e22-a975-a857e3507251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a144add-70ae-4dd6-a71b-d1ca79924d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc982e9-e9af-48b5-a4d9-937aefcd2bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60ad095e-0f1e-442c-a8ce-88c30a62536b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23432d40-6e81-4f17-9131-fd35af7d5c40",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab64a6ac-c114-4c5b-8e5a-fb2bc21cedc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d06079d-a238-4069-9bd9-2a9974989b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de2a20d-a171-492c-8d0e-dba944efd052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb949eac-1e89-4cf6-a193-2edd382b3db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c1021f-90b8-46d1-88bf-bad9612dad26",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719a385b-3457-48c4-8163-e65d982ff02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd2c518-afea-4852-b223-677d98cc9db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1a49b1-ec1a-4e66-b34f-e83ed491cf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdacd401-d4e1-4a23-956b-b3e895c63347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfeab98-8090-42b9-a22d-8ddb7f4f972f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98410b2b-ba11-4d99-b49c-9eff3e109568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d01466e-5b20-4d05-a3ca-f1840d889fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96c0244-3150-4942-bad0-d3a25a52611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b847aa-c3e7-4d35-88a5-69ce475086d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81935d2-08f5-47d3-8586-5836adf4f958",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb4db61-399e-402a-8651-297719b819b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31922fdb-8d71-4937-8257-240d929b28cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6472c7-0011-4346-9995-9b4fbaf0ff93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b28cb9c-0fee-493e-b547-69d10383e1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d48aea-d4dc-43d1-8d04-9b2fe231a768",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1140f7-3496-4198-a735-6b5568491f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f992822c-ccbd-47d0-aad2-1b82f0f08678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b966eae0-850d-482c-bdbf-e72b6d155093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8397c3d7-e29f-476d-a9a6-a6e8d944f810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027b4dc5-2e85-4a68-b662-6f29aca4b5d0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff0f0da-cb0d-413f-8307-917dc4a0164d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32afb3ac-92ca-4994-afa6-0365322de138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5120cc04-15ec-4caa-b07a-c102129907ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "424e9039-432d-4254-be3e-0ffcbee56073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef4faef-c6b1-4df4-b619-c86c74efc212",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e650d03-0042-4240-a56c-c58374550520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e12c79-4ac6-4397-b9a7-b6607c797ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197f2e34-f87b-4037-a720-9470083da459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6447c4bb-8c48-407c-b0a7-97d69ea83c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16666aad-d9ec-4eaa-b135-eb898f93e6c3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3225fd-38ef-4fc8-b948-2ac43410937b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafe65a9-5530-4a6a-9831-0f6db55a0afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b8e95d-293c-4222-ab0f-66f1d5b73c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad0bc6d-a9ee-4f7c-b345-be9ae3e0e004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f04741-0381-4768-9d37-8de5661358e9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb01191c-392c-49cd-bf05-51c3fd431819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291dfcc8-d718-468b-9868-9a0927dac8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096793e8-ddae-4950-8a9d-7a44cc2e5fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "10445f25-402b-45a9-868c-4a321c446210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3073ce71-a220-4ef3-9a8f-da70bf7cf34c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5846276d-0eae-4ba1-a487-4b317ee6f492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c348ad2-6e16-474b-a047-2fefa872ebf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451bb483-ead6-4ddf-a023-83807e548341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "30b31515-b014-438f-8efa-e2727bb86481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b139466-a5f6-462e-a1d8-7c1bb5906c5a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edb6f3e-5b4a-4b23-b7e2-609c525870a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e5e2ee0b-c790-4e38-a2d7-32a4bb38c4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d70320-b25b-4bf5-a75b-c2f5f6813473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf48fc73-b8dc-4340-b6a1-a0fa8943444b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db7bd907-a8ee-4cb5-9505-fdb050afdc8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "219a32d2-07ec-4cda-9016-fb0a590cfcaa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50c5925-3727-4a74-8567-23f1d29b6773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "503cb01a-2463-41a6-a812-3cbfaacce161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41477834-acbd-4339-b815-fd179e0313a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a7ca8923-0853-4478-beb6-ce154251366a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ae5af9-9451-4d72-87c8-ea15303ed249",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece9aa44-a9aa-48b2-aac2-4774acd15c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a75f6f61-452c-427a-9cfd-82bd9bf9c176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6774ee-7433-4342-ac89-81858402a751",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3a1efb97-b334-4499-816e-031cdadfc113"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b05c7b45-572c-4e48-b0bf-884b998857df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb9bde26-bade-4b65-bfc4-2f12bea98d62"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f6ec0fd-f039-42b2-b05e-28e02cdb4bc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1f9c1c3-b585-4b23-b888-ba77d384736e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d2f1313-83c0-4812-98e2-a054cb63a90f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33a874e4-266c-4279-a34f-f7fb044872ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbae8113-f064-42a1-8533-3e4f02d37174",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e85df69-1c39-4413-ba59-cef6f153ced9"
                }
              }
            ]
          },
          {
            "id": "25ff9eaa-2fa4-418d-9b4b-d8f8d7e581ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2bf1aa8-ea77-4ca7-ae48-477389e5e7d5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09f5e71b-7b51-4928-be5c-3ff66fb2080c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aefe902d-9b9b-4789-a79b-dace4f01a56f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb398b5f-68e1-4544-a229-d96d8bfbdca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53ebfc33-f77c-4f71-af23-5c9c36b5bab8"
                    }
                  }
                ]
              },
              {
                "id": "dff91fd5-5a32-4dcb-b9eb-835452b959a4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4280766f-2bbb-4b65-9efe-f26ea246c650",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc761457-2fd1-40a3-8b35-dff041915421"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "503eabc1-90c6-45e6-a577-3c1a310246d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89ba05cd-cb2d-41f1-b4fb-ac46b1c71a85"
                    }
                  }
                ]
              },
              {
                "id": "b94313c9-aeba-4010-abb1-b072ef0c168a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bf21c45-b31d-438d-aebb-b603067f84db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f03cbc36-3aba-4500-a928-41d5d9488943"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09a6a221-d5d3-466b-8393-51cf6620b37c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ecce807e-3b2f-4a47-b69a-f4a3d3fe80a5"
                    }
                  }
                ]
              },
              {
                "id": "38186ef0-298a-4367-9d96-dca45e9cacea",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ff149fa-1d7d-44aa-9afb-a3faff31f0d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07e80f55-4ab3-4979-9d68-9ede531f4d89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b574f8cf-40c3-4bd4-b826-a835102a2795",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3c2b9dc4-6f07-4d3c-b8c2-e63cffb80716"
                    }
                  }
                ]
              },
              {
                "id": "8b754b30-feeb-4c35-8395-7354934ff754",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db56c0f5-6ea2-46f6-a48d-3d28f5af1d88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06648971-36e5-4f09-a702-aa6201017d94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92b74b14-4843-4317-8be4-1051c0166b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f438432c-68fb-400b-b951-fadbd40763dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b406217f-7bbe-45d8-81df-809ec37b4075",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e005c05-b3b0-49f8-b992-314715316807"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09cf1993-c478-41d1-b599-8563e41d6049",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ed24e02-5d4e-4c38-8cab-0cf1ccfe95b3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2be7dd70-ccb8-498d-bfe4-2df595f732a3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1e37e818-9837-455f-b93a-a6943b64e7f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "154b78cc-0b70-4786-82a9-c43a78b2e0e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8c8cbce-0c14-480f-b33f-4821ebc07962"
            }
          }
        ]
      },
      {
        "id": "796ff188-23e4-4957-8a91-0c10fe5c2600",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b85bfbc2-1e12-43f9-89fc-73e22ab4e480",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b5db5d4-2c50-480a-bd1f-29ed1b66af7d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "801b3e7c-4408-4b13-9b7f-16686e5cfce6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3850ed55-50dd-4059-b5c2-b9dc8b7db390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568a58ca-a3e9-4da3-af19-baa7acf11468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8a4b36-d527-4e5e-abe9-e474c222c3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f275a92-b8b7-4bbd-bd62-eee8b9cef206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be87db7a-96f3-4e3d-8fb9-3ef40b6de5bf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6829bd-4737-4909-b101-93178acd9d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0008ca8b-3211-471f-a9ff-edb8567b3485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadf15fe-eaac-4675-b8da-0c8b8eb5dbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4a2c5f-382c-4d75-ba79-e16acd3d52c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8514663-ff59-4379-9a71-a64d895028d6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ffef8f-36c6-48de-8fa8-1b35dee50e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d65d00-0ee6-48a2-8b2f-0b1c4e8e8dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81283525-c5e6-459c-948f-7cc68409d558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69a12a67-60d8-4ca2-bbfb-d58307a10db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d81634-08b1-44aa-8881-d31866d45731",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a964691-af13-4435-8c0c-fb7c43e89288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17cf21b-6655-4f73-aca5-eb1b22f3d69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b19519-da85-476a-b1ca-69e2ee712368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38bf71ee-4477-43c1-a696-ad55e995a234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6c83c8-567c-40d0-9527-bf6d4a889e53",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7607ea08-e153-4bb0-bb62-18ba5b7689c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb096fef-73b7-4027-85f8-390b71d0c039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27f10e1-4981-4c16-ba56-85d8cc54255a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "402bc9f4-6341-4a7d-8e20-300c18e3a0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fd296f-4aed-40a3-906e-95fc2aab1de2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb169aea-bc10-4f26-8d65-709cd21a7b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4769c2-23cb-475a-ab44-472db764a3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495e7b57-d013-474d-9265-88645302cfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5edfce-7687-4438-92bd-38898c6c4ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a3ee60-647f-4f2c-b004-dd1f1de11182",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0b046b-c248-411c-a0f3-880a8b7b73aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224bcfd2-23e8-42cf-88da-abe13b10a69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cef329-ce0f-4d44-8461-21bc1c7040f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dac91e3b-a138-48ce-86b4-9d523c1033e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a5a8d2-1256-4e0d-9305-e2ca5137afa7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de574976-f203-4746-998a-74d5c60ff165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d6b16a-b0f5-499d-8648-dd4fcfe0cd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902f9901-03bf-49fc-bc97-6487cdbea1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67f212e2-213e-42a1-a1f6-1a616ccbfb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b0a4d5-4f9c-4857-a560-d2e216c98fda",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176d9877-5fba-473d-8f06-a6e644d557d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af52e33d-576d-4e0d-a2ee-2728ff1b5bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db481981-2b92-427a-9252-625792586be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a95b052-7bf5-44b6-8874-c9c364226a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc1b2cb-8d8d-44c0-919d-d455df8c5cd9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30da61c9-34cd-4729-8134-a0eec2575c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5859fc95-9d85-49cf-b3c7-bd46477cba3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd54ca5-2f6a-45a1-a03b-788f8fc7bd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6635d969-5320-446d-a2bc-a03830c35b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3e1cb0-08f3-46c0-8cc7-c18305cf2ef3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab40d469-1254-4089-b6e0-32777b98cd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a1088d-6191-4e71-8a8f-fbcc1ef7fcaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d903833-fcc8-4c4d-8fcc-a0752c49dcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c10d52e5-60af-4084-aefa-666ad9853ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8754dba-ca8a-4d58-9fb7-9ad39fa52f55",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d36839a-19d8-4cfe-846f-9b4b6aa82acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869bd41e-3619-42ae-bbde-aa5b3ed13f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe3c2a2-4fcd-4af2-8d9d-b3237e9c3a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e89817-5fce-4dea-87cf-393a2076a439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b75b82-1544-4d9d-94a6-683532f1f934",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb007aa-7168-420e-bb83-41b4130692f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddda577f-094a-473f-b868-bba80694e03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ed0904-4285-49c9-8d1a-563948251de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c736a18-6f9b-4957-bd3b-8a9e5dd89626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36d88eb-eaa7-49aa-8479-63dde6e6f27a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016a32b2-ddc1-4982-8bab-2c40158f07f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b318b01-0e8c-43b0-9a97-e49e0e111441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b368847-29d3-4e8e-8845-f184cd5b1cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c627ae4-ec9a-4fe6-9031-a9531c3e8a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32b1377-3076-403f-a940-206a7f0a1051",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a697f0-b765-4b6e-864b-58b800fa861d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36035f49-644f-4632-a8f5-1cda8a69f305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853e84f6-f25c-4e91-ba3b-53c02a386994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae893ea-1529-4e31-917f-ebae4eaca885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b7dd9a-424c-403b-853e-bf824788fc11",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe58d24-c5c2-45c0-a505-16693e378c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3da3f8-1cac-482b-9ced-149ebb4df7bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109e0287-94a9-4d0f-96a4-2e6913739c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c716be3-b029-4e0b-be78-980776d5f312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3cfba9-32e6-4718-b847-8005a570ad86",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2333efbb-82d0-4c90-a5aa-68812bb2c132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b6556b-2569-42cc-a2a2-837786c76bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ddb3b3-89ae-4862-ad2e-f72f03879005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "94803efa-80c1-4d63-9ce2-04a6d7a9a42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9b5b4f-8c60-46bf-949b-a3d6a6c1890e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9887856a-fd46-4183-b5ba-fe69966e7cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8729622-eacb-4b7a-911f-6a5d0ce60b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9385f9f5-ba4b-40b9-aa58-4c2146b7456b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f1265b-8f62-4a4d-98f2-fbd23e4f43f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258483c1-5817-4ebb-b7bb-b7324d52717c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4454af31-a04a-4d5a-8151-359b3e028d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117ee6e2-d15a-4d08-9cf9-4dc0a47851c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1480e3-317c-4aad-92c9-3a82e5a9abcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f75bbb-f614-4f06-917f-6e28bddda07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0965fb7-f852-47e4-a712-00f3acf6905a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bb3080-8d9c-47fe-a899-94689414dc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1fb76f-7db7-4373-a3ff-c7b7fd882a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193a0d46-a451-4254-b76c-346adb46b710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f539a1e5-7954-43ef-88a6-0b9d4d5632e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c995b3-d0ad-4c31-9820-c3b5327c9a9a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09192ce-5342-48f7-90f5-ec6a2a90ce78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4feb70bb-ffee-49a0-a054-537acd59cafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b7e11-b5a0-4825-98fd-f93ea4495929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd18eb1a-8866-4d0a-830f-64b0fde294ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8092c20-2d6f-474f-9198-272a8d1ffbfd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade5c60e-8012-47d3-b58e-327428f70571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27358cf4-7829-4269-a6b9-e5cebe87dfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224b1b15-5640-417f-aa53-ef6d1d1eedc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a8d4b6-01c2-4093-9f79-80cb4a7ed7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d14bf1-6c1d-40e6-a9c6-c46228e2fcb8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d32a8ae-211f-4cfe-b2ad-3b525b2b6967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1baa085c-6390-4b33-90ef-8093e8d4280c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb3c80d-2385-4403-93e8-1ab9a2cc27a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "148122a4-065e-48de-a494-56d29268a613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700a4272-7e76-4256-9d25-16fc46e1edab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3576c25-77a2-4135-b650-e7023d2d903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d9c9fb-6897-4798-bcda-425e80173690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf718eb-b96f-4373-aacd-e05390aee78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4f59f8-b43a-49c0-9920-b7bd1e01c592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7664cd03-0e7a-4ab8-aa9d-11adeef47d8f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808ec798-dcb9-44cd-9c27-b5c4fdfc0ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8119dbf-141e-4477-a6a2-43f018c451e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000b3e98-f3ab-457d-be03-e5f281b29912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8053eb54-23f4-4d2a-a6fa-9cd0d4063798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740c910b-13d7-4354-b0cf-e88cfdcdd28e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30624e47-aceb-4982-a5e5-acc5fb5c1eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b108f3e8-a33e-4b0f-a90d-be89b14cfcb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb1c5b1-672e-436c-9028-a534ef20d5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7523592-452c-4c4f-813a-0906d6974498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a0bce0-653d-4a01-b59a-abaa010344d6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8358aa-294b-4131-8ddc-d3370f33f792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63f4e05-e8f8-4093-8eaa-eb13d1b898ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db234700-a890-4cd4-8a1c-fe5c80fa503d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4aa5b3-b101-4e2c-aa1e-a22ef69e00d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70778fa4-72d0-4da1-b3df-85be32db2da7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea063211-f303-47df-8299-8f0805674db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d68ef20-3f8d-4622-87a2-a3bee684dba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f1ad5d-b040-4fce-b09c-42003465b6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a812ceb1-500b-41b3-8685-9eacb1445db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cd08aa-727a-4b20-94a9-205da02b1e07",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecca5406-77cd-4fcb-b6d7-673c703a40a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2742e66-07e8-4c99-b986-8629c5d90336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c002ee8-e23a-45d9-bc30-3eb0456cda1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b68de84-65ed-4995-879f-2042ab3ef488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04659eaf-bc23-4d7f-b3b5-a033c3026398",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf67e9a-af11-42be-8cb7-a6d9c18ea54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2043e59a-8fae-4ae1-9e97-886d2d376486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c20f06a-6b74-496c-9ebd-348e0fc1f846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12b0d7aa-2f4f-429e-9968-d674746f8640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223485a8-2f07-4900-ad18-4107e88e0854",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cafef2-2da5-4c1b-a40a-cde3324e6820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a682b1e5-3887-47a1-a72e-756b3ff6a168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd74df9f-4c72-487a-93fc-a1bb9413c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0edfd92f-d8de-4420-87fb-54da51c53dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d5b4dc-7e41-4c01-9bed-28b887efecae",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1c7e26-d47b-4ee6-9f1e-a6613ca6dd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916400b7-880b-4696-96ce-3e1a2370fb99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0caa2d17-cc22-4fcd-90f8-e67ff31b6867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc3d89f-8244-4384-9de9-7d1bda3db877"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6917236b-5f5d-4d61-8afd-cf5e96e74163",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2111a3a-29f2-45f3-9749-bcada30bf6c3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833bf0b7-d952-4144-bf3d-d74cd60cfcf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d69ed8-2336-4c5c-9139-c6ed7b0b69f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c47ecd-51fa-4089-864a-8855b42383d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8bfc510-8bc4-408c-acbd-1aa192970097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff585e6-b15b-475e-9933-16813b429f65",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd48470b-0cf7-4d88-b7f4-1857f933a576",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "45ed30bf-4682-45dd-9133-d5fc517492a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a267ceaa-e899-414a-bfc8-bc3aee0e02dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "780e7260-735a-48f1-922a-456293d7c14c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2c7dabf-aa82-4062-9a3d-e3338198ce32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b0e082b-151d-4d9a-bf25-96f12f541060"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b9bacf9-78e8-40c9-b19c-478c1f61ad4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afe55c09-64f2-45fb-847d-f5e33027ae89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2487b3d0-0268-46a2-9428-c69fa5d76c5e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b06e6a36-a8d9-4a20-ad4c-9cdd0924c6ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eedcbc56-a48c-4bc9-ad97-77185f59e8b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e635f52b-3529-4061-917e-1400207b0ed1"
            }
          }
        ]
      },
      {
        "id": "585038e6-5409-42cb-a632-a00b6296d874",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c2d7f6ed-04e4-4ef1-9050-2720da9b3afb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "572e1e77-159d-4a31-b1e7-0aec7cf03ff8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b2296268-dcb0-4b03-b8de-be2cb52dcabd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c36e4d-6076-4cf3-92a6-dff7cf3e3aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a25a24e-3f2d-4995-8a5c-ac5960bf12e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2506b5-eea9-4259-ad37-10a246d70b11",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6282f7c-b2ae-42d2-9e6e-b1acf3bf2099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7130200e-7d8c-43f9-9032-5607ab7647c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a6f6ff-d323-40e7-bb76-fad0e0d7ca8c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14270f1-2cc3-4b6f-ad4d-0cbacfec7f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ae713b-d95f-4dba-bda6-2646eb8b940c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca364cd-825e-4e14-9cd8-f892489c5e85",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5c1f40-a8a0-41ef-94ae-d166e50f892f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190c0390-1b0f-4ead-9a6b-596b59a29440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bc1535-93b9-4c74-b366-4362fe361fe8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e887267-c710-432b-8c87-9b08305a45db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7042069d-5bc6-44cb-9274-fc98ed0cb167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3396ce-c826-46e3-a2fc-c8090009d5af",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f1f3de-74a1-4967-a502-6171816358a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37dcb7f9-a69f-4920-baa5-acd46a501c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda443cb-b4d2-4b8a-877e-5643faa8b020",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42627500-6997-4093-8dac-24397e8270ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b57f5db-dd2f-4b87-bfa4-f450931e572c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64df2bc9-90fe-4e8c-aafc-e134a51bdd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567e4bfb-35ab-4606-940c-6a0ed301916d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81948183-f7e4-419a-a722-3e98c2aecbd0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70877f07-7efb-4b7e-8c28-e79e7376cb2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21146765-1be7-432e-9011-32903ddec589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d1e42c-c926-4d6d-9243-867ff1630ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0886286-f4ad-4747-af5e-9164e6471435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6582ae7c-b9e9-4148-9a01-bbb482413930",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5eba93-5dc0-445a-8d53-e30de7a7fc74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dc49e01-be49-4256-936c-bb47dde545a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c1f027-6d98-4989-ad92-c823ff1ba5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3314cb4b-3715-42b2-aab9-998f2a02c3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7126701-25d7-4a62-8eda-8d51c82d843f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1932f24-d261-463d-be3d-471db1cdc282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e56760-31eb-4a85-ac42-826162637c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0240d24-821c-4b1e-98cb-eca17862c129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef7790b-7f11-49e6-b79b-0af04236f766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3275ca-9eaa-4c56-b50f-45fd74bcb89d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2692c52c-939e-4519-9f80-a2a90f20dc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee642e2-1ec3-45d9-bfa4-9bbfb82a37fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219b098f-46a5-4130-9666-39735e901de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90882b98-9809-4b18-9c09-2cf6dabd328a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57062769-2e7c-4553-987e-370f1abec92f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94a983f-5059-42fe-8fc1-a9002a3fa529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3ad755-34b2-42a4-8785-0d7b83ca81f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dbbd89-356a-424b-9915-e8df494fe50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0011c5-ea71-45ea-a5fb-3b6343c7d3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e396bba5-291c-4ece-a2a3-8a670594ddea",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63f879b-480b-46bf-94e7-dd0658c8882d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6a336d7-e0f8-4c6b-b98f-41619fe96168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9d467a-4ee2-4d33-933b-d54a59f85914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbc736e-0a96-4777-b568-88523b6610a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b72c138-8fc9-4b38-8be6-ceec9156088a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4954fb-90f8-4ba6-8ad3-0e09292e1699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4599451-ec9a-40b6-813b-283d946ee07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b786a0-cc92-4446-ab0e-4411cc5e1e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00607bca-beb5-468c-9a7f-469c1683039d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0869cf0a-5e32-475e-80cc-82ba5482956f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86b26ff-15a9-4328-a108-a957324adf62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee2d45c7-1214-4659-9c95-68ab1335bf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab83296f-7aab-4265-8a51-6ed187aad766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf77dcf-4561-4993-bc73-3688e53e17ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a4a945-68ec-4abe-8ebd-81bbd261c2fb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4cd97b-b3d6-434f-ba49-c2f46da17f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a1a50c-891a-4ffe-b41a-db915a8f383e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52274a81-95e6-4b94-b189-58e23d0acf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7912789-ab1c-49a4-acf0-7401f8e51749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef6ff2d-9590-45f8-8158-904d6bfaed41",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3861c375-d95f-4af7-aafd-df961053af2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4f0e4d-fa12-43c6-99a7-8842990e8581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b84bcdb-6391-446b-91cc-d2958f42cda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2fe867-bffa-42a9-93ad-f35636fc568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98b3869-50ed-424a-9a13-6ce8ef048708",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1a7e68-9abc-459c-b0e3-7f9c42fca9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53eac10-638e-43d7-8594-20606de62b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a8d551-5221-4d93-b81e-c42691409314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5901da-7cb7-4245-a367-1810f070f4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8153e770-5c0d-4825-840d-cf61c41f0f62",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bc741f-a710-4287-9c18-d920a24f01e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec03057-70c7-4b65-b084-959f4c68117c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56b2aef-57e3-4a7f-98ef-e5a8442e9e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343ff3c9-6a6c-44b6-a33f-c538b9baff9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02443a41-4308-46cf-8078-bc8b68861a39",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beef02c4-cdfd-4473-aea7-fd15fa18de01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169413f5-7d4f-49f4-88ed-a772947ffd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76a46fb-06a0-40e7-b36c-e8a667b748e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc9e2aa-82bf-45d1-9337-17fc8f2838c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f98ea1-d9f5-404d-9321-c56275cd7231",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e144a758-e1fe-4622-8ced-74efe543b4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bdf4a2-d8b3-4ca0-aa44-38bdf6af9604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7072bf20-a092-4d2d-9348-daa746c8ade2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95aaaf93-853b-4878-a529-4f72951bf821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e03583-b9df-46ff-ae2f-c9c82d83484b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0517787-69bb-48f8-842d-002c1886d301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3972371d-7374-418a-877b-9bd5a3b201ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4f4f0b-fe75-4d0d-a80b-224574a494dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70519791-1ff2-4d78-9cad-59698b5cfa7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7de60bb-89dd-4336-8306-2144802f99f2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788ee534-a47c-4386-b5ae-c0d56ddd9000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5ed1a0-6398-41e1-a68e-6b26a8f6d047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275003cb-97bc-4bcb-bf57-6cb2ec1df81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115e2bf5-1529-41a7-9931-412e7a4de150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c2f6b3-9c35-4cce-8663-416a92fd6746",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e207453-6403-4426-bf60-a0dfee8af68c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc7baed1-06b7-4b4b-b64c-4769c7f949b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a777d-f2d3-4ed9-8c1d-d7031fb24520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a59fa3-9f10-4e2c-a8df-ec31c3d83740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70efac55-8a32-456e-ae62-d381252c6818",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37182926-df69-45c9-9247-a71b4c1b16ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "985481cd-acc7-4b6d-b8ae-0a7d8c2bf048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e319f0-9a31-41aa-87d6-73b03c1d03f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ca9b97-6b0e-4983-975b-0073eb29fbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9965e1da-5002-4132-9b13-57888e5c5228",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8e643e-1d91-4d3b-bade-b48f82b5d8f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad74863-bdeb-45f5-b670-959604899dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e112c41b-6f61-44a7-93d9-8913022129d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838643d1-cfd0-4de4-b8ef-c215faaeba10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49141678-4281-4c2b-8ff8-208827a0d293",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189d54d0-5bbf-4b40-94e0-39ca9acabda4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a66f9cc-c435-4e74-9f68-9d58cae31f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed67f10-cbb1-432e-a642-10a482c14f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb5c4c2-ec71-4171-aa14-7398278a6cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c36ee3-89d5-4d6a-a110-5fdb237057c1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6bf9cb-f7b4-4f40-bbbf-decbb2a8bd12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c066c0-b8c8-4bb0-9163-0e8869c8da94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851ee75d-cff6-455a-b26f-8672c733022c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ecdad3-9c37-483a-9044-87ec327d583c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac67bac6-dc39-479b-b40a-2c44888a9313",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241f7fc9-8897-4a3d-83a0-da7d46bf1ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f77f68-8af9-40cf-88f3-aa9a481f8073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ee7b3d-4690-4363-8032-34229f5d678a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecabbe3e-1c18-4225-b260-e1202c439e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e6e953-da06-4700-8eff-d6a5635ed72c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b592e131-14d6-47be-8884-2f4f7dfa2ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e14d27-c1db-4dfb-850b-377bf7373597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22398cb-60b3-42ba-b5dd-70ea98000ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7d675f-74e4-438f-b36f-82f29e3e451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2d9c2c-0967-4e65-a83e-d486f45547fe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d02c07-e4c0-4d4d-88ff-cd9da46dd225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ef7dd5-c907-4997-b39c-53735edb09de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e71e72-2fef-4bd4-8a36-d702bfe63791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a3647c-f27d-4b73-83c9-5e1bc04106c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78f4bde-3bfe-4f65-89dc-86b92191902b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e1fd79-1b05-488e-9565-652dd0ee4ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95975fc0-9a5c-4e07-91cd-c9329ca783a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7905fa-851a-4c59-8540-d46f90a87be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a8da9c-24b1-4f44-bfb2-5437420d62d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1998611-a90f-42cb-9b1a-e152ed118891",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ec440d-d464-415c-8a31-f65c7ed15486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd0e936-5bc2-4dcd-afcd-9796ee31e321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a2637c-c117-45d1-9c04-cf97dd449089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fc5b53-f4e8-4434-853e-9a9721d08245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d294b49-2ffc-443b-8970-70401a928170",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd9aef9-b28f-4aeb-b2d9-8ad379500bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bdbf1ca-67e2-4618-8b6b-ce4068c628e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef71961e-3553-4426-9f2c-79bb3ebc90d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434d76b9-e637-4c18-ae01-40c58835ed84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d34924-ce7d-446a-ae53-28ee4ea3ef6a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15efd431-5b67-40f5-9d74-58bad43648b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23253df8-488f-47e0-9c44-bac37003db2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e40d430-cde6-4e11-96b9-0fbea8a5a4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b25dc9-bd5f-467a-8317-ed97c13ac1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e319796-ff8b-4c5c-bb61-90aa75d34a9c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b83d167-81e2-4cbc-aadb-a67262bfa116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3dd184-93fc-4e9b-a62d-b07403b5ee5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509e3ebe-ef2b-4116-a31d-491722d1a31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5625a92-8558-4624-8243-fba499fb0ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca90b9a-63e5-45d9-8aa7-b126834205e1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054d759b-a352-4f8e-a0dd-16ae3bf5407f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa931a38-90ca-4148-ae4f-5ddac0907dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa84893d-f04b-440d-8322-12b0d24a0a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dac4c4f-46c8-4cb7-bbbf-1d405731d4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8db4f3c-c7d9-4588-8424-7f615ac3e497",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8bc5c3-54e3-4f98-88a6-a390cb0fb1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7f9318-7ed3-48a2-a252-8f7f70786165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071c9590-ef9d-4f54-a103-91bea1c4e18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab008e39-eb79-46d9-984e-3c00ea2215a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741ff7b4-bc37-46dc-abea-67f09842dfef",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074ced05-c2c6-4b93-9162-05aae106070f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305d32b9-92ff-4f5b-9fe7-ccef2bcfc4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bfb791-f731-454b-8759-8536bb80633f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6708124-c411-4580-a0c7-878bf9458eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac75c958-545b-46d8-918b-0cc25a557b4f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd764dbb-0ae1-44c0-9235-450029f430c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc05eb3-c373-48d7-905d-32a52fb76e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68147c80-82a6-4ca7-ab00-9c29c3b676b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bb1bac-f1f5-45c1-aa2e-ba70c04a914e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ab8b86-f34b-4614-83d6-d13782fcee05",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cab243-2b67-47f0-89a5-54b1423c42b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883ac6c9-36a8-460f-876e-5ce341bcae54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64103df3-9775-492a-81d9-e25a52da16ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d07beb4-ec23-4261-97e8-17c0cd124b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21f4521-b81b-4866-9482-5f5c7248d38e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c53758-35ec-4db3-82e9-e23c08ed578c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8fd803-4923-46c3-9a00-9fc5185ffce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ded7f1-d12a-4158-bbd1-fb3df14a3b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c5515b-ee0e-4ca8-85a2-ccfce638e596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778be337-bc41-43f1-9618-f0ea68b02061",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29edafc-36ee-4dd5-9f94-00fa769bef05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2be41c-1b28-44f2-ae29-fd840596fef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e8881-b8d6-4924-96b4-22f27f52a4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a068fc44-ea61-44ed-b2f1-da0aac439eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0838d523-4983-4c81-975e-c8d189fe8114",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd86f74-3b6f-4e59-bc7d-8b8f695ea2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ddc92b-0411-474b-9fb3-77808ef05264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7fc918-6045-4da3-b206-fbd9d3b7ace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381f7d4a-8cf0-4118-b39d-a29da2d40bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa2c38d-077a-43bf-84bf-237bb8cff4c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ce78f0-4a09-49e4-b5ff-0f0d7e840492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb10326d-d265-4774-9027-b05b0221516e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f6d845-69bd-41cf-9c4a-175fe5fdf58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e75a605-3981-4283-881f-65f9c99445fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2ea2c8-b66a-4ccd-88a9-3c32c7b883a2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8136c2a8-b7ab-416f-9790-e8261478abeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b588d149-ea2f-40ea-8a45-daa7d1d45422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23c925b-b3e1-47da-9130-0bbf414d40f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8a5108-b4fa-4f83-8900-09193bddcc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fabe11e-f35f-4d62-94de-db063fa928c5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e087376-ece2-42c0-a62c-3cf4ed3b2001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687918ec-a89f-4bbc-8a55-16b56c175aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2310d3d-04e7-47b8-8a86-60f386e66068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711974bd-a4f8-47dd-8645-9b7893db0dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f8d625-15c9-46f2-8671-a9aeea3cb686",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13f0563-8eaf-4e6d-be9c-448fc114df22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c9dc54-19fa-4eed-9643-06e42790eb5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fcb1a6-5d9d-49d4-a6c7-07a7e10ea9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a2d086-5e1d-47aa-9656-d275f64b468a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbb7c1a-7b17-4333-ac79-18bfa647baf0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e131f0-48e0-4dd9-a35f-8acc650a4930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b37a3b-9508-498b-be2c-5748208fbadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ab2a19-3953-49ed-a50e-def79c112753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ea3864-88d5-4a4f-9d78-368b2d24dc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2a3914-e22e-48a9-a8fb-5652a0013dad",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdb6a5b-bf83-43b8-8816-34c574f6ba5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcc79cc-b847-4c8b-9421-1e494d2371d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f27144-0e6c-40f3-8c32-9b5abf02831e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99010855-26ee-446a-ba6c-1af5bd88da07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479d0ee4-4f4d-43b6-add6-1449a3f0fd99",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab11cf7a-2eff-4217-b1cd-6d229dfaa4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2262b9e8-4279-4eaa-84ce-c434e5dc661a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf9e534-a4ee-47dc-b091-1b9ddf2135ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38069fc9-c481-46e7-96e9-d66f79886270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f75044-ba86-480f-8013-ab42938ea258",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830e0049-9762-4a0c-9584-07d265559be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a667d13d-876f-4b48-8ad6-772e8c4d6ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f0e0c8-502d-44e5-bcb6-9a569ad76d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97b9485-8b17-41a4-b7bf-1cc81fd89fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7caa33-4bfc-43fd-adc7-008ed653c99b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278c7b0b-cd2e-4352-891d-9c445aac2766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb83e7a3-551e-44f1-8b4b-d6e788d3c9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9323e8-b194-4e59-952d-05acd97ce06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8eceb8-ee60-4dc3-88ae-f636b923d254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470bc897-fb02-4880-87a7-ceb248598de0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed29b0c-987c-481e-8f1e-edea9b93c148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351862a7-cc55-4da0-9a9a-48a070a9c7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d74a15-7aa3-4f61-9dad-149b9bbbde16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a48cfe-9cba-4648-8d4d-24a369847b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924900f5-2266-491d-b709-47a0d4715977",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda88663-a2fa-4af5-a21e-b812aeeafa20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e75d856-8a07-4d2b-9c6f-1e8f417695ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c829ae7-eda1-40b9-8cbe-47d5d1a834f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af1d5dd-4d89-4e57-953c-474077f8a560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e462191-bbe0-452f-b888-09a0c04a1db5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3399c9ed-20e1-46b7-886d-e98a59bbe301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1bb1dd-f3f5-4a2f-836e-fa8e6bc5f75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db350f2-816a-46a3-b24e-c9bb9ecb9bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bdbcb5-b5ab-4606-9aae-5e19606e8db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e297f4-2e22-4db8-9959-09945d06c276",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b20186f-d7db-41dd-b80e-e40e7d11cf4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7be3ab-c806-45c4-a9a7-b9eda8bf620e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289ecf04-aa44-4981-8b00-0e3f776cdb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e6837c-7921-45a8-bf34-8ae096cc9906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da653afc-1e61-4dee-bbda-fce411d64e00",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2ccf05-c948-4e6d-bf89-81d2c0891f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8caaf43c-7049-49ca-b958-822b011fc4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394974d5-40d8-4f1e-88da-5f984b6c3d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f914c116-1443-49b2-bb7a-dfa7e28d8410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2e3ce4-c417-4d4f-9628-d1a203061b96",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfd6e0a-be3e-4a63-ab8b-7e3c06c5410c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35784226-6a4a-4872-b73d-09adb9bb5f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8bcb19-74ba-4bde-93b9-2e7299bcc826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69340608-90ca-4626-b605-7ea217ab67a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495db0e0-eae2-41a8-a99c-32b28f56511b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6992b23-fe4c-4db8-a5df-d30f22448b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0741a70-9cf8-42f1-a9cf-07ca14b13bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a816373b-d2ac-4cd3-9395-8f2dc2ef05a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba08e7b6-f13a-440e-8881-a489458aee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2ddc80-8734-419c-8d84-f9cc7de812a2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e4a169-cc13-4745-a86e-8b3274519999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8030cf6-61a5-4d8d-9b52-603507a5ec55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee99495-eb0a-4d6a-9285-90cbceab5c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562e7e1b-0dad-4ebc-9625-33560ed8df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1881ce46-d035-4c73-a1b8-1c7645a37ab7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c90260-e31f-4a97-a07e-9749b99493cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c55c048-06d1-47d5-88d3-542c390126b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fa5625-4d82-456b-b323-18691670955d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9849af2e-1d23-40de-b4df-d494785a9313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c543262f-711d-4381-94c4-b399d8710e03",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104a79c6-7191-4ea6-a3fc-8a276f73e144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73755229-fdae-4a3a-a6c5-1da0d4397eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba09667-d2cf-475f-bde1-b52d65fa32c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e8be7a-cdbc-4ed0-8eca-d3c689fe7243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653f4266-6a5c-4a25-8637-7253522effc8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f9c239-6396-41ba-9e8b-68b4293bb564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3a6004-9f2c-4506-a423-77c848ee242f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27727300-fb79-4324-a75c-8f0a6a06fd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e535e112-847b-4166-90fa-4af1edaa3a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa33bba0-1a59-458b-bc35-fd596aef2ba7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80c4666-f247-47d4-9a57-ca501ffd5288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c31e1d-3ce3-4c4a-b1b8-9ed27eb2bb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a4e95b-38de-4635-86d2-b717480c81ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3858bbfe-9c90-4dfe-9ffa-634cbe0d9229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3984f1c5-3074-4996-8050-77cfec245e2a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080c21b7-d89a-4ff2-9aa8-d284c160f843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d8b3bd-fa3f-4781-898f-12ad9c6ce83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ce00bd-2763-4837-80ca-c358ab72987b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cd8a29-45aa-47c5-ab09-b698c60b14c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65656d6a-44e0-4fb4-ada7-780879a3f0d0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918d49f6-fdac-4f3c-9d1b-f3ab2a6cc274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fccb1254-4c36-45fc-a1f4-b649b6f8e273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfb476f-3263-41b0-bb0e-7be4e8a5566c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1143d75e-48b4-4236-913f-8c7f30cf2c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4babe3fe-2c8c-46d0-94c1-d864e641dafd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc79a15-4507-4458-8465-5dc7785ff5a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b21012-4ac7-4361-adc2-f1def08a52f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c0d912-03aa-4720-894c-6d7a3566481c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871ca6b9-7af1-4c7a-b58f-1e8b1c06921a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcae621e-248f-48de-a892-1a908dea34de",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46c95c2-8fcc-40dc-9a36-fda1d66d85db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a661294-c9ca-4441-ab16-a3db011196f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce55f8ee-aa3c-4f28-8cd2-d6c2d3b1dc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b895394-5bc0-4f74-b46e-3d30be8b7315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8774f38c-fb3e-4182-ba35-21710381ec5e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5cb67b-0b7a-4129-a91c-c0c185f499fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff7a682d-57e1-480a-a1f8-27a928bbe8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ac488f-2785-47ef-a7d4-90eeae8f58da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4aa54b-057d-4877-88d7-9ad920786946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddba6b3-fef3-4101-9f02-4555434e5e1a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77714aa-bde0-44f1-9dca-bf9ed18621a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53074953-8643-4924-b45a-5d8c14273ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae407ee-54cb-48ee-908a-2ff3ea802c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ddd982-fc64-4682-a6e9-83de8cabc41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a7172f-2566-49bb-98d8-eb5020ed44ca",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff109ee-2416-47c8-b3c5-58fa1eddcf4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba583b6-ef82-4b67-bed7-7d8823784963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4eab98-da20-4412-9e8b-a0d92d9bc28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c879e37e-ff31-4f70-9e67-d40f16c1797f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126a4914-da9f-4c79-b55a-bbe0c990080a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6851e1-0e72-4945-99a3-a766306d249a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a1c8d87-0e3b-4847-9362-f12873486aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26578fab-0a4b-4f77-ae49-44707c237a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f59800a-c7c9-40f9-b0bf-5d6093a5e7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb91d91-3ac9-47f4-ae76-11b0a14b7586",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe90a34-c7ca-4182-b44e-d0965250c1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6660aae4-3438-47fc-9492-666985e0ae0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bdb2c3-faff-4ed6-8c16-916c0242f8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f92149-1476-4337-886b-eef2dde91e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59785240-4903-4e7c-a68e-af85a7e7d2e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd4d617-3094-4be7-a4e1-13a0ae6aeaa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "174e7188-8881-471a-a87c-0c15094bccfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beab6f02-9fe4-4e22-bf95-dc76d19d6010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74928cf7-7cb5-4a31-bdd2-0a3ecacf8d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389d7566-d638-4cbf-ad55-cbae1537d169",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047af37a-3887-41ab-a23b-beb491e5ebf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96a531c3-ddc0-4440-b387-8e6492baca20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb41a7a-6e3b-4849-a529-26eff131ed18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b909af29-805a-43bb-8589-275e59c0f87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c38092-1dd7-43a3-b631-8b3a41985ce3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6765b2-7fac-4f0e-b953-52296d34685d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b50c81-9da0-4625-92fc-2d6c438c94d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafb3faf-d3fd-4b5f-af87-e182efce3150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b974749-4dd9-40c7-b32b-99c20d3dd693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226ae3e6-9828-4ffc-9fd2-3ae0cdee6c6e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cf4e0d-54dc-4be3-a0fb-35c9160776ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eca135a-3703-41fb-9710-09327678a995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0188b10c-02fd-4020-95f5-48477d10f6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6270514a-6874-411f-8862-8bdf05dfabe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632c71b4-5691-4397-8b87-765ff4a0bfcd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212ecd0b-1cd7-428f-b331-f249143599de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ba7a672-3cde-4404-9a88-26d87f1fa791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460a9c01-88a7-40cb-af45-90245a62d316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359d2212-24a0-4914-8ec7-69e4fd1a9a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bdac04-a2d4-431b-a44f-d9433554a3cd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f4a782-acc8-4bab-b9e3-7d08218502ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad45f34-70c0-4ae9-a52b-cc0fe7c31d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6214c12-9800-4445-9dac-d5016116beef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453b5d21-ad25-409e-a47c-80c562bb9d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08a986b-c334-4e83-91c1-d0343a200cae",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f538f97a-7fe9-48ed-b335-2796b7200f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "890e4288-088f-4f6d-a6e5-a6318e3698a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df1326b-6f7a-46b6-abc3-82f619afc045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927af3b8-5d9c-4fd3-a9f8-31170ce62aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c428fc6-9739-463f-87f8-0b9376e76666",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df324a8-9514-4343-a01d-565baeac761c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d527877a-54e6-4cdd-a440-a15f75997285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b140de-acce-4920-92f6-44c8fc5618cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435f2bd5-6c73-4f37-8f5c-4d6fef5b4513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e181897e-1e37-4b4d-b107-8fe2fff84bc0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d21a567-33dc-4702-ad96-7c3bcbcb2559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b735f6e-b203-4189-a15b-ab6fa741bfee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9936ec7c-0a8c-471a-9fa8-159b367dad6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b169ddb3-08ae-4059-b572-2446fcf8a0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886f6edc-ea26-49f9-88f8-72559a2ae5eb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94454ba5-119e-4ed1-a5a9-98c2f1fb443d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd985188-d0be-4191-b421-7d01c694fa2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40851206-27a0-46b0-a16c-25ad9fb2155a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20eee470-0bfa-4bd9-b5b0-70a45ee42660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15989796-ae4a-48ba-b8ad-8d001bb39b49",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360526e2-3102-464e-b34d-15d776f0b207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80baace3-63c5-44b3-988e-e1400aeeb0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e9ea4f-73e0-4e93-8d15-a055f8796af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e01e4a-6037-4c76-9b7c-afa3858b67bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ccb79c-edad-4527-b731-190679241af3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be2277e-1f11-429b-8565-64efe230805d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f76295-0bab-4943-b94b-fefde1584aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5310fa2-1fba-4553-b494-724dcdce0049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc2db03-acfa-4d4f-91f3-eb33433ef184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6ea6b1-7b0e-433c-86fb-e7c794dd8339",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d0381e-3c9a-459d-a260-e60566ca5747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "907bfbd7-5d91-4e54-b9d2-a100c4578425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c61e72-30d5-4fa6-82db-a494ada24f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028acac9-3d5d-4f96-b18f-38e210b9b422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68126b86-7fae-496e-bad4-e363d559e739",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2924111b-6933-411f-90b4-6d61c3421e86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def4a68d-613d-4638-bb32-c3f411f4630c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b910a6c-e933-493d-8fc6-ba6e037b8dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c458f2-3d1d-474c-9aca-39c0b00b0c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17292ac-6596-4532-8196-af197759437a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d8867-9a22-43f9-873d-5bad7054d9ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c2a58e-7554-4cfe-848b-51b1b3b74a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95cc547-77c8-40a2-b1d8-b2e02d20b1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572089ce-9533-4f68-8702-761c878491bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72897602-fea3-4b59-a01b-a6e57ca98b0c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e80a492-e2b1-4222-9822-ef792a089ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f620dc3-ad6f-4d78-9469-dfa230ddc7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d42cc9-cc9e-4dea-9290-15ce0bca514f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fca1b93-00f0-45ef-8961-76dd35f2dd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ea4aa4-3a83-4c40-a01c-491c211169d6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32219a7f-4e11-4c31-94da-3ede020724bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45fb9339-ab73-4fd9-bea2-e9daa05697fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04e679d-5d59-440e-9ea8-f923e3774d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848cbe8b-264c-4255-8715-3882186f13ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98b6fcc-09a8-4ddd-9292-589668f21338",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc9cb5e-e424-4f3f-bfca-e05b1d9c8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e961e112-4700-490c-a4f6-ac5f6d721af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90618a6-da2c-4bea-82cd-c52f7536beca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5d52ea-d69a-40b5-a748-219e6bfd0684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f0feda-6091-4e5b-a2ad-430a2a1eedde",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1423fa-eb9a-45aa-ba2b-de69ba711aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d16a795-e096-4075-8f08-a12696bc7387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec1f8e1-b543-4503-ba2b-0b5481be94c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a690e2d7-5db8-4d82-8c2a-bfffd4af51d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041a10a1-51a4-4d64-908f-888dfb344d49",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f62648d-c6f9-46e6-a447-38155cca6e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21bd0f7d-0bcd-4126-a5bb-fc3b7537c4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4641ec2b-baaa-4960-99c0-11ee45a79134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147c213d-9e26-401f-9485-6fbc5742d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3eefbc-856a-4176-8516-33493957bc29",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b625e2-16f6-42f4-8ebf-3e8e96798393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b6d9c5a-0fee-422f-ba8c-7333076ec310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aa6632-a1e6-443a-83d0-49c66b5493a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb7068e-44b3-418c-ada3-1154e0951f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633f490c-b4ee-4a2c-b594-ef2f42839a51",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712a12c3-663f-492c-9c2e-fc7d0a07fba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9762f3aa-c497-4872-8295-063f904115b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fe32ba-0e99-4662-97b5-29f0ee3dc356",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4a0d02-cd7f-4db2-a9a0-fe2803987d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41e3ace-de95-458b-8be2-c459cd732e44",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0f8caf-b7de-48b8-a336-cf8f860f2fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b852cfe2-6711-4c80-ac99-3a97192dcd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcc413a-ede8-4666-bba1-78a500ad4e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061f17c5-e62a-45e3-b16e-1815a17a5d6d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "181c66e8-3dcb-4964-a8e3-6ea6f795fbc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8370a7a4-2d4b-43c4-b38f-f2038e988953"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6cd401e-da35-42cf-90b8-7be3a7fed3bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2b772b0-4df4-4382-8843-d08598c8138f"
                    }
                  }
                ]
              },
              {
                "id": "22402bbd-4d87-4ac9-b904-26f8f88353ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f921889d-5e66-47d5-b327-da3776bc4f67",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f34a79d-2678-48e8-9b92-b34231a42fb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "39af5d27-3af2-451e-bbba-374c8001fd68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939207c0-eb57-431a-aa3c-c2b24b946aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6510d12f-6bed-4acb-843f-c86c617bc5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f99130c-dc04-4ba5-939a-7025517d67fe",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80f8680-5586-40fc-b6e1-fc1496ecb33a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f2806948-0e53-4056-94e1-2a1306490e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a35e04-1859-4061-ae94-102d3c414dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b257380-70c8-4189-9b77-28b235589ec0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bdbeb0b-5776-4398-9663-307d325838b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bc3bd5b-4015-49e1-bc27-aeb987b1306b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6d885c7-f68d-40ee-b349-9ac646581756",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4834d97-3292-4ad6-b59c-65e024771d61"
                    }
                  }
                ]
              },
              {
                "id": "c827b343-19da-4209-9185-42effae77289",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "633d9512-344c-43a3-81fe-02c5e1203bd4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c1a366-3b55-4ee1-8d35-9b9e9ad246e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5d344752-8a4e-4253-b8e0-c7e10e305621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265fc05e-68ee-425d-8183-41b42bbaf139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe319f57-fa3d-477e-ace0-c8452325c020"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "016c6d48-5c74-412a-90fc-ba23ce512280",
            "name": "Positive Testing",
            "item": [
              {
                "id": "80a5401e-e2a0-477b-ba9f-ef9429db5359",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fac84f3-bc2b-4572-b217-91409dad14a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e9e7753-0a2f-4f2b-b931-446c86ab74b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45fc6386-8a46-42db-8cc8-cb39a5fa68d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f340a86-a305-4ea3-a8bb-79a41e388811"
                    }
                  }
                ]
              },
              {
                "id": "9a9c913d-fbfd-4f67-a34d-4e7ad4fef2ec",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f4d7bc3-252f-4f5b-a544-c149a625c31c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "77241475-2329-4c97-8157-128feed9ae6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5562bab-eaf2-483b-8972-af735f4c4287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89cbd84f-82af-48a7-afb0-e56d22f8b844"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a24be859-68fc-4acb-8323-defa4ae3f7a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "916e4614-b1fc-4e49-9b1f-c178e9d598af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2571bb5b-e5cb-4a93-9d75-6ba44944b551",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41985e89-91e9-4412-a848-0bac7b1d40ec"
            }
          }
        ]
      },
      {
        "id": "561a4ce0-23b2-4c6f-8a03-6c56d3b1ad66",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a5aa2f17-515a-450a-9c0d-7cdfbba13cc7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9539e33-4477-47ca-88ed-7f760d8de6fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f062ce00-dbe0-4b70-be26-d6847d783aa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "857bcc6e-33af-46b7-97c9-6e59646731da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2192c5fe-75be-46ab-8621-b62ca721149d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1a28720-a0b8-4717-a1c6-2d61986f6223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc1321d-6ca7-4c5f-b350-336b9e0fdc5c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0a3e10-81ee-42af-8c99-46085e55f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2736ae05-2eac-479e-a6a1-132ae6bc96cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136d81a2-16a7-4391-b2e2-b5d739d09208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f13f9a78-b83c-4023-87ce-c7b41b4fad2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3313ac76-10a5-4073-8966-6c34ac3f4cf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5936eb31-68ef-4ef4-b5be-a4933a7ebe32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f8494bd-89c5-4857-a40b-6ea7289068f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa277f8c-4988-4860-bfe3-36b5e0b60259"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f5bed07-4b37-4056-94b7-27c5659b36c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "db9de6ae-9b8a-430b-a316-3df4ce3f1510"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ee398ec-3afe-420f-9595-00924ae9f723",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fc55971-bb1d-4232-aaed-898340286dbe"
            }
          }
        ]
      },
      {
        "id": "0f73a2a8-83a1-4e57-8e3e-d49f4b73a149",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7a162325-b58a-4f84-bd59-35fc43795059",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5387c491-c799-445f-8482-a0236968865b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b92248a-8956-47f0-9444-6e9798721f7f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa58e15-04f7-49ba-a4eb-c2521647e469",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "34fadbf3-7c8d-4d51-b63b-3b3a23c4b8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4220823-c663-49f9-a54b-fe728307d162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06e97c8f-5e27-43be-a1a7-907f154cf266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d5982c-4b3b-4eb3-bf54-79e0f96757d1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188723b6-136e-4c7c-a698-95f81577de60",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7e2fa2a0-5d27-40ab-a304-335785aa1545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e8d4bb-fdeb-4286-a8ac-63e821fbca31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "211a552a-5ac5-4ae5-8566-8268efaae5d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ece56e0-a9a9-4ccf-b61b-39f91f59ccd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c5e985f-9415-4a93-adc2-3b9e4ba9bfc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bce61fed-fc9c-4f83-abb9-9224495c3964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75f58a86-f495-468c-bd93-27c4960b1457"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2109f664-ff86-4041-907c-8e892d1097dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "56eeed18-3e96-4296-8a1b-e22169fbd13d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "336841a7-00a0-4085-9229-8ce5fbf1d8e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d5a925a-04c9-41de-8b11-cc1d5f4e003f"
            }
          }
        ]
      },
      {
        "id": "f5237feb-bfe9-4f6f-81b6-f01c2ef71021",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9682c4e9-cea5-4440-b018-926652df099b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65cbf418-748a-40ea-bb74-08c7582174c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc59bec2-d960-4651-810d-c8f24190eb25",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a633f02-cf7a-4b6c-a5a3-b2baf4bb8c54",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "64510e58-3cbc-4a1a-a189-bad330db7055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c455ea-2d4f-4135-9969-24c2a4513496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e2107b2-7e8c-4531-a1e4-e11f55b4cb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea958559-5ecb-421f-95b9-348a818abd1d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e87545-de03-4e87-9be4-258b3dae8647",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "df9d3b9e-1917-4d2a-8352-9300b56c13cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb94f99b-322b-43b2-8ee6-afd3ef637593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46c62a40-c973-4f06-a053-2340679e8af4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73a478d5-564f-418b-8df1-2c36f97d6d45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e859b1e5-a9ae-41f1-a1ca-65783eeb49a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ca79a23-299e-4224-ac3f-4828e138cbbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190d57f6-c592-46fc-96ee-17db5712a803"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e6ad4ad-db81-48bc-ad24-d17bf1bae05f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "06f06cb9-a290-47f6-9406-e6448d214739"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b283800-0fff-450d-a8f1-d623a087bc97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e53a9fb-3841-49dc-a00d-9119d644b133"
            }
          }
        ]
      },
      {
        "id": "3eea4081-a680-41ad-b097-d899f66886cc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9617ad2d-3306-490b-8f3e-a825b57f50ac",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d997892-04a0-4aab-a942-a12e0c6c2d84",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e14660c3-2048-4e8b-905e-45295da6b252",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b5e443f-3305-4557-9a24-1f480d8fec2c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb867f4b-0966-4039-8a18-b815d2dfc5c9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18.8841698841699,
      "responseMin": 8,
      "responseMax": 370,
      "responseSd": 39.35927599118525,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677717867204,
      "completed": 1677717884520
    },
    "executions": [
      {
        "id": "b6046a02-f951-4a6e-a6b4-049020369605",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b81a418-eec5-46fb-92ec-ecdb78a56870",
          "httpRequestId": "51b01459-22f2-4f73-a9c7-837d1970974e"
        },
        "item": {
          "id": "b6046a02-f951-4a6e-a6b4-049020369605",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "92156386-f56d-480b-b043-0e3f5164b8f7",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "035225be-253d-4494-b60b-fc103c8b95f2",
        "cursor": {
          "ref": "2840a662-b8d3-45fa-a1d2-80c5a7eafe59",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cae244ab-08ff-40c5-8fab-b63cf1b86c56"
        },
        "item": {
          "id": "035225be-253d-4494-b60b-fc103c8b95f2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "370e496c-7dc0-4ab1-aa4b-1ed136e36101",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "3d60bc86-f798-4d28-bfa3-c7a91befa55e",
        "cursor": {
          "ref": "05663c5d-651d-4dad-845f-2d1e78601928",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32e99e31-3a1a-4325-b452-3df1379ddd4b"
        },
        "item": {
          "id": "3d60bc86-f798-4d28-bfa3-c7a91befa55e",
          "name": "did_json"
        },
        "response": {
          "id": "370855c6-9341-47a3-ac34-09464050cec1",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85448fcb-5ccb-4b51-8df6-0c6f3cca4ab7",
        "cursor": {
          "ref": "8d516078-abe3-4ce4-ac51-2d0f0526ac94",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fa1aff2f-d0ad-4858-8077-60edf83e1c42"
        },
        "item": {
          "id": "85448fcb-5ccb-4b51-8df6-0c6f3cca4ab7",
          "name": "did:invalid"
        },
        "response": {
          "id": "d918d6b4-7c94-4981-bbcd-eec9648d6dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "85448fcb-5ccb-4b51-8df6-0c6f3cca4ab7",
        "cursor": {
          "ref": "8d516078-abe3-4ce4-ac51-2d0f0526ac94",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fa1aff2f-d0ad-4858-8077-60edf83e1c42"
        },
        "item": {
          "id": "85448fcb-5ccb-4b51-8df6-0c6f3cca4ab7",
          "name": "did:invalid"
        },
        "response": {
          "id": "d918d6b4-7c94-4981-bbcd-eec9648d6dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "dc726ca1-4e39-4df0-a8be-618cf2e0b252",
        "cursor": {
          "ref": "3feb0dcc-021b-443b-9aa0-42e52fbc6a53",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "099f4302-b826-4b4a-89ce-4ffff3d88c08"
        },
        "item": {
          "id": "dc726ca1-4e39-4df0-a8be-618cf2e0b252",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "502c378a-300b-4c7c-a80c-96c1a9af3f64",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88df1c8b-bcc3-457b-9fac-9d6fac788f3a",
        "cursor": {
          "ref": "1bc542ae-01c9-4bd1-b0d7-5cea46da459f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6a9794ac-2897-49de-9a96-c687cf30cf3d"
        },
        "item": {
          "id": "88df1c8b-bcc3-457b-9fac-9d6fac788f3a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dd504dfd-1f92-418a-8d1c-7721f8761cfd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52be0c82-ebd6-4088-914c-56370822229c",
        "cursor": {
          "ref": "d56dea13-ced4-4a27-aea0-5b4c92ab0125",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1d80df19-db1f-41d6-b9ef-d835da2e81a9"
        },
        "item": {
          "id": "52be0c82-ebd6-4088-914c-56370822229c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "abf5b721-2089-465a-9297-729deb436be7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf404f3-1d32-45dc-a4ba-84e66a5c2355",
        "cursor": {
          "ref": "102e9e86-ad6e-4598-9f7f-a3e6cf476bdd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f7612f2-0c13-47ba-a711-18e32d16bb05"
        },
        "item": {
          "id": "dcf404f3-1d32-45dc-a4ba-84e66a5c2355",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fb25cf2b-bb8f-48a6-b95c-c3af9be5569b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf404f3-1d32-45dc-a4ba-84e66a5c2355",
        "cursor": {
          "ref": "102e9e86-ad6e-4598-9f7f-a3e6cf476bdd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f7612f2-0c13-47ba-a711-18e32d16bb05"
        },
        "item": {
          "id": "dcf404f3-1d32-45dc-a4ba-84e66a5c2355",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fb25cf2b-bb8f-48a6-b95c-c3af9be5569b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7091b1fb-efe7-4845-a581-446e599a81dd",
        "cursor": {
          "ref": "074c536d-e894-4f6c-a29a-30d1040b23ad",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "87eabf2b-b72d-41d2-bde6-fc9e8b1c286d"
        },
        "item": {
          "id": "7091b1fb-efe7-4845-a581-446e599a81dd",
          "name": "identifiers"
        },
        "response": {
          "id": "54cb38bc-fa96-4dd8-88e3-c78ceb905053",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57c445b-4ae1-4c30-99a2-cf8d72084a42",
        "cursor": {
          "ref": "b6e707b9-6705-441d-87f9-d3bb66817541",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb07bacc-da7a-4333-9b92-0b43e4faedb5"
        },
        "item": {
          "id": "a57c445b-4ae1-4c30-99a2-cf8d72084a42",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6ec84f61-0dd5-4aa2-806e-4d7f9a4be181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57c445b-4ae1-4c30-99a2-cf8d72084a42",
        "cursor": {
          "ref": "b6e707b9-6705-441d-87f9-d3bb66817541",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb07bacc-da7a-4333-9b92-0b43e4faedb5"
        },
        "item": {
          "id": "a57c445b-4ae1-4c30-99a2-cf8d72084a42",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6ec84f61-0dd5-4aa2-806e-4d7f9a4be181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d72e909-d71c-48b4-b256-b20538131b8b",
        "cursor": {
          "ref": "c00d5377-1e02-479b-b478-12d2c3f394bf",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "57d54415-a8da-4bd3-bb8c-256124011d1a"
        },
        "item": {
          "id": "0d72e909-d71c-48b4-b256-b20538131b8b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b2be4fcd-d66e-4ef9-a35a-a09ec6e7c52a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e2f1b1-2a29-4ade-8ec2-910a2de220ce",
        "cursor": {
          "ref": "94ac4c0f-ca95-44f4-93c2-ddc2621bf6f9",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0b7504fa-446a-4598-95bb-78b7571a9823"
        },
        "item": {
          "id": "44e2f1b1-2a29-4ade-8ec2-910a2de220ce",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "30b8b51d-17cc-4b7f-8b3d-5f790d915478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17426779-8a4f-453b-b9d8-f556552583e4",
        "cursor": {
          "ref": "8c424554-d53f-4c7d-b2cf-99ea687bf0fb",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4c450b4a-760f-4373-b5fe-242ef61bb27c"
        },
        "item": {
          "id": "17426779-8a4f-453b-b9d8-f556552583e4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fbc60754-3ae8-4392-957a-2b6f9a0233e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c938b20-fa19-4ce7-8b3e-497f85270726",
        "cursor": {
          "ref": "bf4b5744-08ff-4628-8398-f2702a13f354",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "62175b18-0ba7-4229-8cb1-a55ebb18205c"
        },
        "item": {
          "id": "9c938b20-fa19-4ce7-8b3e-497f85270726",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d4934027-10a4-4577-b00b-66c18e420af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d040aeca-3479-469d-bc8c-47c5678a74a7",
        "cursor": {
          "ref": "eb73fd60-ed0f-4b86-87f4-676c8a6e4ad3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1c841abe-26d5-4678-99c2-041536f8c66a"
        },
        "item": {
          "id": "d040aeca-3479-469d-bc8c-47c5678a74a7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "49d0923b-9807-4f9d-a9f2-835efbd0ffac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fddb97-ea14-4e15-baaf-c1a41445be6a",
        "cursor": {
          "ref": "10b6bc94-6849-47b7-aa6b-4d187632915b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c0f2bebc-7904-4dfc-8b04-afbcb99bc49d"
        },
        "item": {
          "id": "50fddb97-ea14-4e15-baaf-c1a41445be6a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "54bff547-b529-4a8b-8fa7-1956a4a13e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a060a92-18d0-4886-88aa-adc98b929005",
        "cursor": {
          "ref": "250663a2-2a98-4f0d-9040-87342382f710",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3a172153-7af1-40e0-9431-92e6a9e2efb4"
        },
        "item": {
          "id": "6a060a92-18d0-4886-88aa-adc98b929005",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c1e7e9b8-ee79-4030-b68b-f2f38edf8196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8be8d5-4dfb-41e6-ad13-a1513f779bc3",
        "cursor": {
          "ref": "5ed1860d-c424-4a76-bd3c-34e4d463699b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cd96fdc5-19b5-44c8-9f7b-73fa1b229a7e"
        },
        "item": {
          "id": "7e8be8d5-4dfb-41e6-ad13-a1513f779bc3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "764c4d90-24d0-46f1-9f1c-6655037a5d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0280f18-c5d4-4dab-aa9e-97776e765a04",
        "cursor": {
          "ref": "7256284e-4bf6-4685-b148-a8167900b4f3",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c2c50ea9-cb5c-4562-8101-d7de1c32663d"
        },
        "item": {
          "id": "c0280f18-c5d4-4dab-aa9e-97776e765a04",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "19a2855d-976e-451e-a1a5-a1d557c48e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424a43fc-c473-4e03-9729-9bdb95e1a82d",
        "cursor": {
          "ref": "85746b5d-7dbd-4fff-9601-b6bc982bef24",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cc61b25f-9197-4c65-8d89-843ec5186af1"
        },
        "item": {
          "id": "424a43fc-c473-4e03-9729-9bdb95e1a82d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e11ae21f-80e6-4cc4-834a-f02be17bd379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de730b20-ee0c-47bf-9e96-dae54406ab32",
        "cursor": {
          "ref": "bb43d455-729a-4926-897f-fc9ef6840d68",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0b95f24b-f7b9-447d-a583-26f99901c597"
        },
        "item": {
          "id": "de730b20-ee0c-47bf-9e96-dae54406ab32",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "13a4266a-39b7-48ea-abab-229bf96cde9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3919337-54f4-4353-abc7-5f184fc36a39",
        "cursor": {
          "ref": "b8cc7fbd-8e43-4f73-b3d5-5f7a7834ada3",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e716307b-a17b-41de-a353-30477bc628f6"
        },
        "item": {
          "id": "e3919337-54f4-4353-abc7-5f184fc36a39",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8f5b5afe-9405-4b1d-a7fc-8b0cb03eb968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5080ea-0f9f-46d2-ba4c-53741d344752",
        "cursor": {
          "ref": "bfc6d977-c063-4a1d-af28-67f923de4c91",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5203362e-048b-4c6f-8da4-78bbd9437abd"
        },
        "item": {
          "id": "ff5080ea-0f9f-46d2-ba4c-53741d344752",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "770c1305-c6f4-4945-920c-f00802fafd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af60177-b35e-4c74-9022-1c23e735a45c",
        "cursor": {
          "ref": "5ba844dd-03f4-4889-af17-33cb5510fcf9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "934d9796-30d2-41b9-9d8a-4c934cce97d8"
        },
        "item": {
          "id": "9af60177-b35e-4c74-9022-1c23e735a45c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "105cd1ad-c65f-48aa-aa67-81ed62aaa6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128a6278-a6ae-4d1c-b545-038108991223",
        "cursor": {
          "ref": "caef8b3d-f70f-4781-acec-8e5d2e33da67",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7752fba2-f460-433d-a0ca-fc991ad55470"
        },
        "item": {
          "id": "128a6278-a6ae-4d1c-b545-038108991223",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ae2d689c-79aa-454a-bfbb-f48030b57b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a83a94e-40f8-4a13-92ea-1edce571e495",
        "cursor": {
          "ref": "ad7fbd4a-6c4c-4560-a036-3a1fde9b9883",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "69ce207f-25c2-4a28-9c0e-dfe476978b96"
        },
        "item": {
          "id": "4a83a94e-40f8-4a13-92ea-1edce571e495",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "144606a6-a116-403a-838d-a81f9e427c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72bf53e-b624-4f1c-a9dc-5323b422b7fa",
        "cursor": {
          "ref": "8a20fba7-72bb-4f3a-800e-3ad75c434eca",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1e5034e5-a229-41fb-a381-50c76e539264"
        },
        "item": {
          "id": "a72bf53e-b624-4f1c-a9dc-5323b422b7fa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3c9494d2-daab-4a7f-99fc-ff1d615084e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40adeb65-cb5f-45d6-b467-c56316e5f162",
        "cursor": {
          "ref": "39d38a12-c8b8-4222-9d96-256d04921b00",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "946a314e-21e1-47c4-9912-0c4df8faf5ec"
        },
        "item": {
          "id": "40adeb65-cb5f-45d6-b467-c56316e5f162",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b5091126-4a60-48a3-b262-b5a1d85dcf5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c77a2-3285-4657-b64f-0327151506f2",
        "cursor": {
          "ref": "7cea4c6a-ea0d-4bff-bf03-bd263425728f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "48407a2b-b831-45f1-9d12-87a2cb756f54"
        },
        "item": {
          "id": "8c8c77a2-3285-4657-b64f-0327151506f2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3256554a-d217-4ac2-a01c-d8176f3b0101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cedc2f-bc15-4e67-a4f7-d58161f94087",
        "cursor": {
          "ref": "838b9855-d06f-4664-902b-6df394df38d3",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8d790289-1042-41a3-ab1d-fffd56f57a8b"
        },
        "item": {
          "id": "02cedc2f-bc15-4e67-a4f7-d58161f94087",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3888dc0e-fe62-4620-8da6-de9164578b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377e03f3-e10c-455d-8eda-c3046c76c974",
        "cursor": {
          "ref": "6357a811-6965-4f75-aae8-65d6d51e4741",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "729ba4bb-c5fa-4609-a649-70c8b0f3c212"
        },
        "item": {
          "id": "377e03f3-e10c-455d-8eda-c3046c76c974",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ea191c4a-2185-4189-8ea6-eeaf1b5fd7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9bf5dd-91fd-4fdf-9852-8293e2d3014e",
        "cursor": {
          "ref": "a4066a9a-e6b4-4a0a-8519-8c855e9e764c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "605e0e7c-3c20-469b-a0f5-0eaa37a26840"
        },
        "item": {
          "id": "ea9bf5dd-91fd-4fdf-9852-8293e2d3014e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "286b1f44-4398-463a-836a-7996acd55e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b3b94e-4129-45fd-9f03-d43d5e7589bc",
        "cursor": {
          "ref": "02cce832-ccbd-4bdb-b0af-ce2b618b8c1e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "38b0aaec-821c-4996-91e8-0bc60ae3be89"
        },
        "item": {
          "id": "84b3b94e-4129-45fd-9f03-d43d5e7589bc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "00797b28-b9cd-4510-87e3-522939ac23d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323533f7-e1bd-46ec-bdff-1e23a8f1cdf8",
        "cursor": {
          "ref": "ca0d5a83-80cc-4435-9024-94ff0e4e0161",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fba63946-48a5-477d-9c4c-4d6f17535b5c"
        },
        "item": {
          "id": "323533f7-e1bd-46ec-bdff-1e23a8f1cdf8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "559582fa-4aa3-424b-9662-33807c27f079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06cb9ed-baf8-480f-8573-4f3d3701c4c7",
        "cursor": {
          "ref": "7fe90aa2-fced-44af-ac58-7c64efa74813",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f9022a19-969c-4311-829e-5e107b92578e"
        },
        "item": {
          "id": "d06cb9ed-baf8-480f-8573-4f3d3701c4c7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9d2b1775-a144-4b32-8b85-1ba966d4494d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8039e4c6-00cf-4b27-9b4a-12e8be04a551",
        "cursor": {
          "ref": "4ee6134e-9eb8-4c97-a21f-261b2c39514b",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c870a0b0-b8e7-46d1-8235-b3d3ffa530b2"
        },
        "item": {
          "id": "8039e4c6-00cf-4b27-9b4a-12e8be04a551",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0dfb16e2-82d6-4527-8e62-9f32d5042827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523af589-b159-407c-8f85-0d5dc523ec3f",
        "cursor": {
          "ref": "cdd73015-a647-449d-8203-5e3256d954d4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6de9b3de-a5bc-494d-9412-cbf2295775ca"
        },
        "item": {
          "id": "523af589-b159-407c-8f85-0d5dc523ec3f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7d4bde1d-29c9-4fef-a090-f6ee0c7fef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71159399-3e12-408c-b5c0-3bbd49541309",
        "cursor": {
          "ref": "2c116546-434e-4591-8f3f-fe93ebef5719",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b863c655-601f-4fda-afc8-911bc8d43749"
        },
        "item": {
          "id": "71159399-3e12-408c-b5c0-3bbd49541309",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4478102b-47d1-4047-93b7-a28029d7dc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0d2b48-f2b3-4c16-948e-0ec71fa4482c",
        "cursor": {
          "ref": "be967b9b-9d01-4d46-ba7d-29c83e19f0a0",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "58d1bd2c-00f3-4701-bcfe-7d6bb2735b29"
        },
        "item": {
          "id": "ca0d2b48-f2b3-4c16-948e-0ec71fa4482c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5a1876cc-00f5-4c73-af76-6586388e3452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee60e2b-4770-4fec-967c-881848a1e217",
        "cursor": {
          "ref": "dfbca18a-f2e3-46ae-9d3c-9a20a21e1f8f",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "391e1078-372f-4776-adcf-15d3aef95195"
        },
        "item": {
          "id": "6ee60e2b-4770-4fec-967c-881848a1e217",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8e41fe7f-1f81-4839-a1ef-148f6b42efd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66de710e-dab0-4a37-ade8-fa4856c1fd20",
        "cursor": {
          "ref": "7f7b01d8-4664-494e-9f32-3d1771b797cc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8bfe4923-0417-40fa-96e9-19dac1b038da"
        },
        "item": {
          "id": "66de710e-dab0-4a37-ade8-fa4856c1fd20",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4c79e44b-97b1-4be3-b958-a8840af40655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd72f5db-c9c6-4f49-8379-45ab454b2e3c",
        "cursor": {
          "ref": "773b3021-ba74-444a-870e-d068560f3f04",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "81b64432-605b-41bf-8f4d-4b30696f2101"
        },
        "item": {
          "id": "fd72f5db-c9c6-4f49-8379-45ab454b2e3c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c2572a7c-3d06-49df-8fff-48bcd05f1953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1cbb7e-2797-4e7d-831e-c545298f94b6",
        "cursor": {
          "ref": "259108a2-643b-4bf1-a52f-0e8ea9537f48",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "baa0c425-651f-4d7a-a6b6-65574209ffde"
        },
        "item": {
          "id": "fb1cbb7e-2797-4e7d-831e-c545298f94b6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5be95b29-9fb9-4b63-b1e8-5a709f7d1390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedc6c83-845c-45f2-a25f-45aed794a956",
        "cursor": {
          "ref": "747e8df7-33bb-4c28-9fd1-3da4a9ce5e37",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "25a83560-c30c-40fa-a9d6-0cdf6d4d097e"
        },
        "item": {
          "id": "dedc6c83-845c-45f2-a25f-45aed794a956",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "62adca7f-cb6e-424e-a0a5-8b64775ba738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ddf26f-50ee-4443-99a5-23c47f8f6c40",
        "cursor": {
          "ref": "d9c2de98-537e-4589-a91d-a578580d2468",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ffb51356-257b-4a1d-990e-b8064488b24d"
        },
        "item": {
          "id": "b7ddf26f-50ee-4443-99a5-23c47f8f6c40",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "11b9e813-2961-4f59-90ad-f53d9021dade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "12b0bcc3-5e1d-4142-bf53-b89260f9a419",
        "cursor": {
          "ref": "00950f34-a516-4732-b02a-18eb0303b917",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a734445a-fe17-4861-b2bc-240fcd675b09"
        },
        "item": {
          "id": "12b0bcc3-5e1d-4142-bf53-b89260f9a419",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e8c389bf-72f1-432c-b996-bd987e3a3f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12418cf2-8dba-4b12-8402-f77adbfedd97",
        "cursor": {
          "ref": "c3ad4d4a-b84d-4401-a1ad-056abe877138",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2b5b6009-79db-42a0-8532-080155a2aac9"
        },
        "item": {
          "id": "12418cf2-8dba-4b12-8402-f77adbfedd97",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2601c5f8-74e3-481e-86cf-115ba2d2a507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ec96d0-d816-4b35-934d-f49cdea8845f",
        "cursor": {
          "ref": "72bbbee0-912c-4743-a87c-26ff12878761",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a41debbe-45b4-452e-96bf-8fe32cbac61b"
        },
        "item": {
          "id": "25ec96d0-d816-4b35-934d-f49cdea8845f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "44df6f3d-7ffc-4f1f-ba3c-89718b43f3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cebfe9-a742-45f3-ad49-061cd3f8cc63",
        "cursor": {
          "ref": "fde7eb87-2a8a-427e-9dee-51c158349141",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e3bf7666-3061-4e57-a2f3-557a9cbfcab2"
        },
        "item": {
          "id": "a7cebfe9-a742-45f3-ad49-061cd3f8cc63",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "acd42195-598b-44b1-87ea-dca6b1fbf645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43794f5d-d4fe-47b5-a436-b981f61afbf2",
        "cursor": {
          "ref": "235d4105-755e-425c-a367-4cd74b32a731",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ec2d516d-f400-422d-9a49-39b28ea87057"
        },
        "item": {
          "id": "43794f5d-d4fe-47b5-a436-b981f61afbf2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "869ca18b-0e85-4f2f-9bdc-0285564fa071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06a5842-1655-484b-98aa-12141ae298e6",
        "cursor": {
          "ref": "ad5f1a44-1e09-4348-861a-63c656539747",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d5cc9a28-76d2-4279-a435-2491d590c39a"
        },
        "item": {
          "id": "e06a5842-1655-484b-98aa-12141ae298e6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e3757579-1420-4fcc-a19f-7b703ae0b6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b5bbd9-2776-4440-b3db-2de3e1eb063c",
        "cursor": {
          "ref": "7b97158e-60ac-415f-815a-369afedf23e4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2730553b-ed8a-42b1-ad88-7555ac9f34d6"
        },
        "item": {
          "id": "77b5bbd9-2776-4440-b3db-2de3e1eb063c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e9913282-c277-4848-897a-a4886fa25579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d58b0238-651e-4acc-b427-df977c95187e",
        "cursor": {
          "ref": "a0971c41-f633-4b1c-84e3-4d7810405019",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1761e7e3-36cf-4ba0-9bff-121605dba048"
        },
        "item": {
          "id": "d58b0238-651e-4acc-b427-df977c95187e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84a8accb-9392-4626-9494-a63b0a44f5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0613fa1-b534-4a3b-83ff-cc18f6094d26",
        "cursor": {
          "ref": "8dd47963-9c42-45f2-81ca-07e686dbcdb2",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e2e58499-6bff-4415-9173-189462706210"
        },
        "item": {
          "id": "f0613fa1-b534-4a3b-83ff-cc18f6094d26",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "39825a0f-62d0-4cfc-bf51-d17b090dbaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1188b01-3770-4bdf-8dbd-c4e202030d6b",
        "cursor": {
          "ref": "a64210cf-6fed-44a5-8900-712a768c98c4",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "62d66ddb-d7a5-48ab-a2e8-05cfb790e6e6"
        },
        "item": {
          "id": "c1188b01-3770-4bdf-8dbd-c4e202030d6b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3d8e787e-8f61-4bc4-abd9-e9c07c4f2067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8642570d-47df-4b8a-bb47-1feb4b70cd3c",
        "cursor": {
          "ref": "6c835caa-d5ae-4ddd-b2e3-d981ca37eec7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bfd4ba18-6f21-47df-abd0-a963aa57d380"
        },
        "item": {
          "id": "8642570d-47df-4b8a-bb47-1feb4b70cd3c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "46cb9f7a-3bc8-49d0-b2a8-b7fbd34e4e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc4a0d1-3f9e-404c-85b8-6d11271ece36",
        "cursor": {
          "ref": "1553c95d-45d5-4e60-9c1b-ac6b05dccff7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6257d93d-f575-4fae-b4d5-3e6a1455932c"
        },
        "item": {
          "id": "5dc4a0d1-3f9e-404c-85b8-6d11271ece36",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "62258915-72bb-4007-9e57-2b68d4c2d070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca86ef3-649d-4826-82f8-860195d14b68",
        "cursor": {
          "ref": "aa9f7016-2af7-48ee-abef-44cbb64830af",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e21a9801-c85c-469a-9287-b22f6897c5f5"
        },
        "item": {
          "id": "bca86ef3-649d-4826-82f8-860195d14b68",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9371af16-40df-47ea-a2da-88db13e95fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c9a737-214a-4f22-9030-44bdf61aa413",
        "cursor": {
          "ref": "fddb5c58-de34-49f1-90ce-4e05f286b2e6",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fc2e264f-364e-4658-8f22-0db3e158bd2b"
        },
        "item": {
          "id": "b2c9a737-214a-4f22-9030-44bdf61aa413",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e1357add-526a-4ee8-b2b1-194b1fbbcde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427a4dd0-3841-4bae-a4d6-83e2bad4ffb3",
        "cursor": {
          "ref": "bf549159-5329-4757-8056-d010a5fb7be1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bddfa11e-00fc-470a-9e80-0e4c67075ee6"
        },
        "item": {
          "id": "427a4dd0-3841-4bae-a4d6-83e2bad4ffb3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a241036-ce05-4cd8-96e4-5d04dffda0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f278957-9715-4bdb-97a5-e24744bcfc83",
        "cursor": {
          "ref": "c26e3f88-e050-4509-b3a0-ede46ec6bd2e",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "43a55bbe-97be-4d8f-b152-e26bc029e3fa"
        },
        "item": {
          "id": "1f278957-9715-4bdb-97a5-e24744bcfc83",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c29d2c04-c774-499a-940c-3a585eed7c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae3b7fd-1eca-4fa1-b4a2-4dd5c8c8cd57",
        "cursor": {
          "ref": "c8bc81c3-e4e9-4fde-aeea-acffa36f7e6e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4a2b90fc-0a36-49a1-8661-173e44d90fd3"
        },
        "item": {
          "id": "3ae3b7fd-1eca-4fa1-b4a2-4dd5c8c8cd57",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e70f5093-1d46-4f04-aa69-c028607f5b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516348d3-b645-4a1c-bf68-0b482da9dcd1",
        "cursor": {
          "ref": "e02b705d-65c1-4a59-af42-17d24678e509",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3a6f6a0d-42c1-422c-aae6-a3fc65831908"
        },
        "item": {
          "id": "516348d3-b645-4a1c-bf68-0b482da9dcd1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "069e224f-b195-45e9-a21a-7e2ef7cc2667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410f20f6-1253-42fa-b284-d22864565117",
        "cursor": {
          "ref": "ce3fa522-f53d-4c34-ae36-ca35368067e3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "894a9249-d63e-4bdb-8f12-2150ec899717"
        },
        "item": {
          "id": "410f20f6-1253-42fa-b284-d22864565117",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5e2b2ef4-eb40-41cf-9d00-c55d9c3a88fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21634422-086d-4453-8cfb-3a0be31e6523",
        "cursor": {
          "ref": "6fd5cebe-d161-41f6-8cdc-7e6cd7dfd3ac",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a75a66a4-fb1d-425e-95fd-2f8c1dc244ec"
        },
        "item": {
          "id": "21634422-086d-4453-8cfb-3a0be31e6523",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2430336a-749b-49a6-aa0a-94eb449efea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46338ec8-1b75-4951-91c8-351d264a87fe",
        "cursor": {
          "ref": "4219060c-272f-4eac-83a8-a734221c1624",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4858f706-1ced-49a5-a7df-7b26d2d67a09"
        },
        "item": {
          "id": "46338ec8-1b75-4951-91c8-351d264a87fe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9c9dc194-0312-424a-ac3f-0bcf02de3c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e674548-4012-4bc3-865b-3041cca26d07",
        "cursor": {
          "ref": "87a219fa-828a-4320-97a3-a4ee31822150",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "45271a10-0356-4ea7-9cdd-c401df4ddbf7"
        },
        "item": {
          "id": "0e674548-4012-4bc3-865b-3041cca26d07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76279712-c632-4c2f-8a90-efb09b07c1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272e8675-a69b-4d2d-8a6f-9358c1aa7572",
        "cursor": {
          "ref": "4b238c0d-4260-445a-9c7a-2b89509a1161",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bf840bf3-7336-47b6-9c95-5f5f7d19e907"
        },
        "item": {
          "id": "272e8675-a69b-4d2d-8a6f-9358c1aa7572",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e9ca5917-54fe-447a-b6f7-c053caacccd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882fd06e-8547-4edf-afb3-67e0f97ec467",
        "cursor": {
          "ref": "0c99f00a-27ea-40b5-bb6f-85f663614bc7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17d7a65d-c9ff-46f0-8816-e8f2e7401561"
        },
        "item": {
          "id": "882fd06e-8547-4edf-afb3-67e0f97ec467",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "08a41e8e-1d03-4615-89d2-0b43377bd105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0434f8-0639-4ff7-a9da-42ab7d9977b0",
        "cursor": {
          "ref": "abe7e4d2-227e-4202-8667-5d187fcf6feb",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a0cf6f26-99cd-4397-836f-7a782f60bbb7"
        },
        "item": {
          "id": "dc0434f8-0639-4ff7-a9da-42ab7d9977b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5e00e077-cd3d-48ba-b164-1bda00af1ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd6d660-dee4-47c6-a899-420cef25a8c8",
        "cursor": {
          "ref": "2fc60ac7-76ae-490a-81d8-f628f026452a",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1c092d4c-0cf8-45a2-8584-db20e347d20d"
        },
        "item": {
          "id": "afd6d660-dee4-47c6-a899-420cef25a8c8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "750d29b0-4054-4770-a702-488bb229e748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c33441d-f757-414f-a911-48db4e07da71",
        "cursor": {
          "ref": "4a0c3e0e-f9eb-4311-99fc-bfb1f9730875",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a0e86864-7b9f-43ae-82ea-2790c4c2e372"
        },
        "item": {
          "id": "0c33441d-f757-414f-a911-48db4e07da71",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6b695b95-320d-4c5e-9104-9e1728e666d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c85d65-5d09-4cb9-ad06-f9b50f6c70a2",
        "cursor": {
          "ref": "0d3f2b30-76cb-41eb-be40-c2b5a7f248c9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "69b5288f-c857-4ed7-a601-01c810e7a785"
        },
        "item": {
          "id": "d8c85d65-5d09-4cb9-ad06-f9b50f6c70a2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f53c1ad-d4f5-4d80-a666-747839a7cab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689347c8-f7a4-46b6-a465-04491db5b076",
        "cursor": {
          "ref": "8b2ef30c-a0f4-4bee-90cf-92026f07a55d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ef40cfd8-b3ec-4f3d-b3af-3e78f1e6dfca"
        },
        "item": {
          "id": "689347c8-f7a4-46b6-a465-04491db5b076",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "40a26025-8737-4ec7-a903-e8ee0acd4091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766d3d0b-5770-411d-8089-ba8dad3ddbde",
        "cursor": {
          "ref": "a41730db-b77e-4a34-8c52-45afaad735b2",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d79ffcdb-d3e3-4388-bf7d-34861288c4c4"
        },
        "item": {
          "id": "766d3d0b-5770-411d-8089-ba8dad3ddbde",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0b5100af-260f-412c-a01c-26d236f76d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206e7f33-bebe-46d2-8168-97d5cc6b3095",
        "cursor": {
          "ref": "febedeca-89ba-4e32-9041-ab7b983b6edd",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c628a27-e6fc-4389-9722-5e07af60a1a8"
        },
        "item": {
          "id": "206e7f33-bebe-46d2-8168-97d5cc6b3095",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9b5571c1-6ee1-4ae3-9e8d-9108f6793852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500e899-3396-4d21-8942-1c32411c90fc",
        "cursor": {
          "ref": "05ea80ca-f064-4b73-a693-87cef00fa906",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "50a972fa-aa2c-489e-a270-7397d13bb60c"
        },
        "item": {
          "id": "e500e899-3396-4d21-8942-1c32411c90fc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "41a9ce84-b8d9-4152-af6b-b876ef2c1385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eb493b-aaad-456f-b34c-6d7f3a946635",
        "cursor": {
          "ref": "9f5e12f5-34da-40eb-a843-a53c8e1b945a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2b5a9cbd-5712-44e6-8e3b-64b751b0ba63"
        },
        "item": {
          "id": "d3eb493b-aaad-456f-b34c-6d7f3a946635",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c9ab6e07-b852-4c53-b528-273cd330ba5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624bb441-532f-473f-8c8d-d5a241f7a3e4",
        "cursor": {
          "ref": "e177bde1-fb82-41ac-8e84-78912596b18e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "05969724-8b78-4fc0-9ae0-fcf8de4cd60c"
        },
        "item": {
          "id": "624bb441-532f-473f-8c8d-d5a241f7a3e4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "89d7d881-fbb6-4c08-baef-b5ee5d222065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f05772f-d72a-48fc-922d-d73bdc881a8b",
        "cursor": {
          "ref": "60ce1012-470d-4759-9238-cf7184317a8a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1f0ec9ad-7705-4c9c-b326-8ce6c7fa930b"
        },
        "item": {
          "id": "5f05772f-d72a-48fc-922d-d73bdc881a8b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f4174da5-33d0-44ef-aa19-b1a7116df370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7364616-d2c7-48bf-b129-60337f872aea",
        "cursor": {
          "ref": "4d89fec8-3245-45fa-8128-db2a4e70db15",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c6e7351-31e6-4a04-be0c-e69a2528a34d"
        },
        "item": {
          "id": "a7364616-d2c7-48bf-b129-60337f872aea",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "198e2051-a8e4-44db-b97b-6b5182a65bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db61301-3ba6-464b-8385-14f123eabb9b",
        "cursor": {
          "ref": "5c82bdf0-f056-4aa1-a619-f5d4bdb7cc24",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4d06b93d-e0ee-417f-b4ba-5309a9a7445b"
        },
        "item": {
          "id": "3db61301-3ba6-464b-8385-14f123eabb9b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "53b89124-ca0b-49dd-89b1-7fd1097144ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d2cce6-1c6f-40f5-bb95-ab1a194246e5",
        "cursor": {
          "ref": "9d823d12-ee15-46d3-9afd-5db0e73849ec",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "beb2f8de-cd84-40fa-a289-0d8890d8843d"
        },
        "item": {
          "id": "89d2cce6-1c6f-40f5-bb95-ab1a194246e5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "228bbe92-adbb-41b5-b48a-20f4d954a791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecb4d99-8647-4a29-bde9-3309a575006e",
        "cursor": {
          "ref": "4b45358c-15d1-4549-a952-d1154c8b0381",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4f3f590b-1fff-4d20-b2af-15247b9a2d4c"
        },
        "item": {
          "id": "8ecb4d99-8647-4a29-bde9-3309a575006e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a3b42cb5-03ee-4316-a0ea-d995394cf455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c78d52-aa64-430f-bc0f-f2186a2df262",
        "cursor": {
          "ref": "81c1044f-658c-4fb7-939c-f87c9184ebe9",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdb9432f-1d15-4a92-baab-082786101d33"
        },
        "item": {
          "id": "93c78d52-aa64-430f-bc0f-f2186a2df262",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "01767d7a-bfc4-4844-b55e-c4fec22c3951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471d0eb9-1bf6-4a3c-af97-74fa2d62a889",
        "cursor": {
          "ref": "d14e6067-73a8-481f-a93a-a3fec3336eef",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "24b3dc26-0bfb-443e-885c-d97ea7a0e6ba"
        },
        "item": {
          "id": "471d0eb9-1bf6-4a3c-af97-74fa2d62a889",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "20999f49-9d92-4796-ae5c-dbaaf89d9e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c33b0ef-49f6-4e48-b14a-4cdc20dbda64",
        "cursor": {
          "ref": "55000f54-e3af-470a-9373-9d6325bb1d20",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fe9772b9-7c06-4c7a-984f-c560224f9d96"
        },
        "item": {
          "id": "6c33b0ef-49f6-4e48-b14a-4cdc20dbda64",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "436d66d0-eb1b-401b-98d1-34938230c95e",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "39fa9dbb-d108-4957-adcf-350867ec3742",
        "cursor": {
          "ref": "2cbe1b72-e36c-40d6-b9d4-468a613580c1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2a42a22c-ce2f-41c8-ada1-98b2caf1ffc5"
        },
        "item": {
          "id": "39fa9dbb-d108-4957-adcf-350867ec3742",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3a0855a6-fb84-4dd5-8827-597235f95463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bdb4ef-cb1d-4018-bc64-ef93836f32b3",
        "cursor": {
          "ref": "950c85af-c37c-4cbc-8b43-a0641f6aaea2",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "35f148eb-03d5-4ee5-9311-494fe81c1b2c"
        },
        "item": {
          "id": "67bdb4ef-cb1d-4018-bc64-ef93836f32b3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cf5f6d5a-bc0b-4ae0-a3b1-5d2adfa1b01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332f5aee-9a7d-40f0-9c19-98345cef0a89",
        "cursor": {
          "ref": "5ee14b1d-ec8a-4f8d-99ba-59edfab19848",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "be4256dc-8a8e-4bb0-a461-e3387980899a"
        },
        "item": {
          "id": "332f5aee-9a7d-40f0-9c19-98345cef0a89",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "23f5c36b-712d-4185-905c-015227cce95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23432d40-6e81-4f17-9131-fd35af7d5c40",
        "cursor": {
          "ref": "dbc446fa-176a-4bdf-87c0-21db3674f406",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ba59e715-f9fc-44d7-9bd8-16f65c4b4327"
        },
        "item": {
          "id": "23432d40-6e81-4f17-9131-fd35af7d5c40",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "81fcbb3e-10e6-47a7-8abe-dbe3c1fb4f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c1021f-90b8-46d1-88bf-bad9612dad26",
        "cursor": {
          "ref": "4e207888-9e92-45bb-93de-61295b6687ae",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "53612684-77a4-4f71-99ee-a3a4d73e799d"
        },
        "item": {
          "id": "a3c1021f-90b8-46d1-88bf-bad9612dad26",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "35fb1570-1d2d-40e4-8250-a332b62f9896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfeab98-8090-42b9-a22d-8ddb7f4f972f",
        "cursor": {
          "ref": "ba970a3d-2cb1-4f33-add7-194473370f36",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9b851f0f-cf9b-42e2-99ac-e1050568d08f"
        },
        "item": {
          "id": "acfeab98-8090-42b9-a22d-8ddb7f4f972f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f7d7f8ed-9d86-42bc-a54d-df00b79567c8",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b81935d2-08f5-47d3-8586-5836adf4f958",
        "cursor": {
          "ref": "9cd9d90f-7878-4fe2-9cc5-c78162373d5e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "44e743a4-9100-4228-83fe-758258ed3cef"
        },
        "item": {
          "id": "b81935d2-08f5-47d3-8586-5836adf4f958",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1ac89ec2-4ddc-4890-961c-20905188e36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d48aea-d4dc-43d1-8d04-9b2fe231a768",
        "cursor": {
          "ref": "d392fd5c-54d4-4f39-9562-61a13ff8fa7c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "54aac5fa-3ce4-4210-9437-54955eb1e72b"
        },
        "item": {
          "id": "c1d48aea-d4dc-43d1-8d04-9b2fe231a768",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e23d2d96-736d-492f-842f-31c70bace9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027b4dc5-2e85-4a68-b662-6f29aca4b5d0",
        "cursor": {
          "ref": "41d0e5af-53d1-4d32-8044-5f2779cb8174",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c5895fec-94f3-4d3c-a219-65b2827bdddc"
        },
        "item": {
          "id": "027b4dc5-2e85-4a68-b662-6f29aca4b5d0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e29a6bcd-d420-41de-88f8-f918b1553076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef4faef-c6b1-4df4-b619-c86c74efc212",
        "cursor": {
          "ref": "89d92217-f2d0-4f95-8424-37a3bf560998",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a09575d-91fb-4666-bf25-b77deb059352"
        },
        "item": {
          "id": "eef4faef-c6b1-4df4-b619-c86c74efc212",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "43ad6b48-4a3c-49f3-a195-a046763a4b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16666aad-d9ec-4eaa-b135-eb898f93e6c3",
        "cursor": {
          "ref": "2b755ac4-d4e2-41d7-9e06-5eb9c633abff",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6550b828-8cf9-4ee5-836e-cffb017a14a4"
        },
        "item": {
          "id": "16666aad-d9ec-4eaa-b135-eb898f93e6c3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7ab9dbb7-77fd-44b7-bd6b-88cc56333077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f04741-0381-4768-9d37-8de5661358e9",
        "cursor": {
          "ref": "6ba96270-350d-4f9c-927f-8ff852be2ede",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5b36c7c4-68b2-4cbc-b81a-ca8d8f9def3b"
        },
        "item": {
          "id": "a3f04741-0381-4768-9d37-8de5661358e9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "26b7fd25-1e2b-48d9-9041-2acc3bd25941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3073ce71-a220-4ef3-9a8f-da70bf7cf34c",
        "cursor": {
          "ref": "2e989287-1f88-4fe5-8314-5eefd3e2effb",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9f2649a7-e344-4b8c-8532-c52cad8131e4"
        },
        "item": {
          "id": "3073ce71-a220-4ef3-9a8f-da70bf7cf34c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dfd7a321-1f49-40bc-9cd7-6b91ad37cfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b139466-a5f6-462e-a1d8-7c1bb5906c5a",
        "cursor": {
          "ref": "3a72e6f2-ef6e-4d59-aac3-4b2fc574bff0",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9464dd67-6a65-4fbf-913a-82c6b79967b3"
        },
        "item": {
          "id": "1b139466-a5f6-462e-a1d8-7c1bb5906c5a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8f6bcba9-c5dd-438d-b85e-e31d9d8a7362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219a32d2-07ec-4cda-9016-fb0a590cfcaa",
        "cursor": {
          "ref": "190faf72-e7ee-447d-a37d-5dad602c5fe4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c5e49c53-9d2a-49d7-abdd-188d5733549e"
        },
        "item": {
          "id": "219a32d2-07ec-4cda-9016-fb0a590cfcaa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3e8d80d2-4e01-4520-a116-acd41277574e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f2ae5af9-9451-4d72-87c8-ea15303ed249",
        "cursor": {
          "ref": "79350001-2b57-459e-9fee-7a9f6c2d7169",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0983bc5e-c5be-4451-9bfc-bfedd98a2529"
        },
        "item": {
          "id": "f2ae5af9-9451-4d72-87c8-ea15303ed249",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b5dc5e90-2d0c-41d6-9910-426ff24bd029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f2bf1aa8-ea77-4ca7-ae48-477389e5e7d5",
        "cursor": {
          "ref": "10773fc6-cd5b-45d2-af80-2be610e79f98",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7e546f86-c386-4302-8e47-89f1d45daf8b"
        },
        "item": {
          "id": "f2bf1aa8-ea77-4ca7-ae48-477389e5e7d5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eed85514-dad9-4bb1-80e0-b1f8ea58e264",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff91fd5-5a32-4dcb-b9eb-835452b959a4",
        "cursor": {
          "ref": "cfbfc574-4e3f-4b91-86d2-6954c5ce8c04",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d16bb6e9-2e5b-494f-9e32-fe2cc3c330d9"
        },
        "item": {
          "id": "dff91fd5-5a32-4dcb-b9eb-835452b959a4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6daf7775-ec0f-40ab-a342-9e1cefc79974",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94313c9-aeba-4010-abb1-b072ef0c168a",
        "cursor": {
          "ref": "00319b61-eb53-4337-96f2-443a9369da32",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1035ab45-ff66-4d61-be9b-607c8932c61d"
        },
        "item": {
          "id": "b94313c9-aeba-4010-abb1-b072ef0c168a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4d62614c-db84-4e64-a15f-a977e265546b",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 884
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38186ef0-298a-4367-9d96-dca45e9cacea",
        "cursor": {
          "ref": "ad008931-2187-4483-97bc-f5a40f1ad6b3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bd3fd76a-654a-4925-b27d-15d33288d9ee"
        },
        "item": {
          "id": "38186ef0-298a-4367-9d96-dca45e9cacea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f474d40e-af24-4758-b0cf-f8a0a7bdd86e",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 852
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b754b30-feeb-4c35-8395-7354934ff754",
        "cursor": {
          "ref": "cbe3e2ba-70eb-4975-aacd-9af156453ceb",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6e76af49-9fcf-413d-95a2-dd6bedf2664a"
        },
        "item": {
          "id": "8b754b30-feeb-4c35-8395-7354934ff754",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3f60a74e-2614-43e1-a9d6-a4bc23ddcd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "801b3e7c-4408-4b13-9b7f-16686e5cfce6",
        "cursor": {
          "ref": "32f87248-4814-4047-b2c2-2884f61212cb",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a2f8898-587f-4bbd-99fd-d848685ef9a7"
        },
        "item": {
          "id": "801b3e7c-4408-4b13-9b7f-16686e5cfce6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7db07d85-7519-418e-a0e6-7511dec8161d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801b3e7c-4408-4b13-9b7f-16686e5cfce6",
        "cursor": {
          "ref": "32f87248-4814-4047-b2c2-2884f61212cb",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a2f8898-587f-4bbd-99fd-d848685ef9a7"
        },
        "item": {
          "id": "801b3e7c-4408-4b13-9b7f-16686e5cfce6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7db07d85-7519-418e-a0e6-7511dec8161d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be87db7a-96f3-4e3d-8fb9-3ef40b6de5bf",
        "cursor": {
          "ref": "f6c79a9c-1d9c-432a-a8da-b453596d3c92",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "694a8b07-3f7d-4ccf-b6e5-470c4cd3262b"
        },
        "item": {
          "id": "be87db7a-96f3-4e3d-8fb9-3ef40b6de5bf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "286e7555-3c9c-458f-b1fe-1f56f3322e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8514663-ff59-4379-9a71-a64d895028d6",
        "cursor": {
          "ref": "caf59351-ab2a-4133-9bd6-6261f9427a4e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d7cad161-c4b2-4594-87e2-3220090c4958"
        },
        "item": {
          "id": "c8514663-ff59-4379-9a71-a64d895028d6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b9b1a53c-9f59-4d8b-aaac-afa1485354fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d81634-08b1-44aa-8881-d31866d45731",
        "cursor": {
          "ref": "cca72c8a-8936-4e92-9bed-3e9fabc668ed",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1bb29e84-e693-4fbb-9c3c-9193f05f45a8"
        },
        "item": {
          "id": "f5d81634-08b1-44aa-8881-d31866d45731",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e1121ed5-45d5-4a7f-b81a-b603ef4aff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6c83c8-567c-40d0-9527-bf6d4a889e53",
        "cursor": {
          "ref": "415b296c-f83f-472e-a56c-cc514e63217f",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2da11891-69d5-4701-89ee-aa2f84716c48"
        },
        "item": {
          "id": "bc6c83c8-567c-40d0-9527-bf6d4a889e53",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7f1ba456-7f9a-4fac-8c59-28c51b3faf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fd296f-4aed-40a3-906e-95fc2aab1de2",
        "cursor": {
          "ref": "ca18c02c-ef76-4127-81a8-e67db98e600e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f6f3cb1d-4822-4d9a-92c5-695ef6249e87"
        },
        "item": {
          "id": "70fd296f-4aed-40a3-906e-95fc2aab1de2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "955bf99a-41ab-4f3b-be5c-6e823c096c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a3ee60-647f-4f2c-b004-dd1f1de11182",
        "cursor": {
          "ref": "3295351a-257d-4299-9e8b-ae0550056dbf",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cfed3e4d-89fd-4848-92ec-7cfa220d4a06"
        },
        "item": {
          "id": "74a3ee60-647f-4f2c-b004-dd1f1de11182",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1c4401af-abaa-4acf-85eb-acc9353558a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "89a5a8d2-1256-4e0d-9305-e2ca5137afa7",
        "cursor": {
          "ref": "11a06ce4-ccf8-4685-8795-45ab790eb57f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4b2c55d0-54d8-4821-8dcc-1fff7e295872"
        },
        "item": {
          "id": "89a5a8d2-1256-4e0d-9305-e2ca5137afa7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c1313af3-e679-4de5-b3eb-67f2edf468b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b0a4d5-4f9c-4857-a560-d2e216c98fda",
        "cursor": {
          "ref": "40a4657b-502a-4e0d-9c83-0f1e79b584f2",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f33ff6f8-b833-40f9-9fa6-d408d178237e"
        },
        "item": {
          "id": "90b0a4d5-4f9c-4857-a560-d2e216c98fda",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d2d73c38-9494-4ab5-8fbd-70e529e1bc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc1b2cb-8d8d-44c0-919d-d455df8c5cd9",
        "cursor": {
          "ref": "b4265bff-78ea-414b-a37c-e9482cf20194",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4f25cb57-b135-43ac-a53a-ba31f3dd9150"
        },
        "item": {
          "id": "3cc1b2cb-8d8d-44c0-919d-d455df8c5cd9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bf115528-535c-4526-b667-2f3a85b8cf00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3e1cb0-08f3-46c0-8cc7-c18305cf2ef3",
        "cursor": {
          "ref": "5179501b-e488-4b2b-8409-bbf0ddce1356",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "28de949e-97d9-4c6d-a1da-28a13a38e1f5"
        },
        "item": {
          "id": "4b3e1cb0-08f3-46c0-8cc7-c18305cf2ef3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1c3add6a-62d1-41a6-9909-dec73a8c1f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8754dba-ca8a-4d58-9fb7-9ad39fa52f55",
        "cursor": {
          "ref": "de656268-a59e-424b-b844-3b9cc98fa5b6",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ea48331b-3977-4868-8f1d-dee6a9aa5ad3"
        },
        "item": {
          "id": "e8754dba-ca8a-4d58-9fb7-9ad39fa52f55",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3ee00f23-99a6-48f5-a7d7-2fa31e2746bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b75b82-1544-4d9d-94a6-683532f1f934",
        "cursor": {
          "ref": "ec92ea93-5296-4faf-8fc3-56523b197209",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1476d41b-cc17-439b-a6e4-46ffe9726519"
        },
        "item": {
          "id": "e5b75b82-1544-4d9d-94a6-683532f1f934",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d4572fcf-807d-46b8-ac0b-57f7a1d2bf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36d88eb-eaa7-49aa-8479-63dde6e6f27a",
        "cursor": {
          "ref": "be4c53bc-f4a6-47db-88be-0f42b969421e",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "50358c5f-0cd2-482f-abec-d8bd735d016b"
        },
        "item": {
          "id": "a36d88eb-eaa7-49aa-8479-63dde6e6f27a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a3ff137a-5296-4c2a-9a7e-0c14a4a48304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32b1377-3076-403f-a940-206a7f0a1051",
        "cursor": {
          "ref": "4e3ec7bc-d3fd-4d6e-88d0-2cc2c51ecc51",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3f7dd430-a731-43eb-94e2-94ae8b6993e9"
        },
        "item": {
          "id": "a32b1377-3076-403f-a940-206a7f0a1051",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2a3dc290-fc22-421a-b0dc-88221a16a1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b7dd9a-424c-403b-853e-bf824788fc11",
        "cursor": {
          "ref": "af50dc90-0b39-41f3-9327-972f5f8ea00c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b4a79287-607a-43aa-86ca-2e7a49093886"
        },
        "item": {
          "id": "a6b7dd9a-424c-403b-853e-bf824788fc11",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b447e501-bb55-46ad-9f65-4adfa4b0a939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3cfba9-32e6-4718-b847-8005a570ad86",
        "cursor": {
          "ref": "12f1c119-f233-47a1-9239-cf61a7f1e271",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a01da777-c53f-4140-bd4c-2780d4a5e0e1"
        },
        "item": {
          "id": "dc3cfba9-32e6-4718-b847-8005a570ad86",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e1560a7f-1485-470d-9da5-e13385976870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9b5b4f-8c60-46bf-949b-a3d6a6c1890e",
        "cursor": {
          "ref": "ca83edf5-162b-425a-a59f-f687e00d7812",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f98c34b7-1e7c-4fb8-abeb-08bf7580feba"
        },
        "item": {
          "id": "4b9b5b4f-8c60-46bf-949b-a3d6a6c1890e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4c3f9414-50f2-433b-8492-e3813acaa2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258483c1-5817-4ebb-b7bb-b7324d52717c",
        "cursor": {
          "ref": "2a111443-2b6e-4ad4-8fcb-a37efb6de905",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "42f6fb2d-ccfc-428d-86aa-e66dd9e07f76"
        },
        "item": {
          "id": "258483c1-5817-4ebb-b7bb-b7324d52717c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5bd3e055-c8f1-4534-b912-1f21c2cdb763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0965fb7-f852-47e4-a712-00f3acf6905a",
        "cursor": {
          "ref": "953ae044-4cbb-45a4-8a6b-b3e98054e578",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d2345d05-aa70-4224-8297-fac97e4d62cb"
        },
        "item": {
          "id": "d0965fb7-f852-47e4-a712-00f3acf6905a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d425ba04-a7fa-48b1-a2ce-94f7c8bd3cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c995b3-d0ad-4c31-9820-c3b5327c9a9a",
        "cursor": {
          "ref": "5c094092-82ef-40da-beef-529fc08f5979",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "217a3ebc-0c99-43db-9880-8546874dbe84"
        },
        "item": {
          "id": "15c995b3-d0ad-4c31-9820-c3b5327c9a9a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7a180e38-5871-4b53-9d6d-45aa3f8c868f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8092c20-2d6f-474f-9198-272a8d1ffbfd",
        "cursor": {
          "ref": "495fe176-ef79-4550-8604-62bd737967a7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3db3f6a8-3d68-42a2-abff-8869f285ed1d"
        },
        "item": {
          "id": "c8092c20-2d6f-474f-9198-272a8d1ffbfd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6b4a0ab1-f1e0-463c-99f2-e687af55e617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d14bf1-6c1d-40e6-a9c6-c46228e2fcb8",
        "cursor": {
          "ref": "207688a2-aaa8-4621-8219-ed3033397a6c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4f781f3-b10c-40a7-9b56-1f8b751fa17f"
        },
        "item": {
          "id": "d5d14bf1-6c1d-40e6-a9c6-c46228e2fcb8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "da49c535-aff7-43fd-adc6-e113a374e581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700a4272-7e76-4256-9d25-16fc46e1edab",
        "cursor": {
          "ref": "7665432d-fce0-49a7-82f1-50e72797200c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "53b3451e-29f3-47f9-bf57-552d41be5ac0"
        },
        "item": {
          "id": "700a4272-7e76-4256-9d25-16fc46e1edab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "12eab418-f47f-469a-b847-a03766149e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7664cd03-0e7a-4ab8-aa9d-11adeef47d8f",
        "cursor": {
          "ref": "42a88223-09d7-4bfc-9245-0665baf9d8c0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a1f0fb2a-69d6-4a9b-8b80-46b82c89ce41"
        },
        "item": {
          "id": "7664cd03-0e7a-4ab8-aa9d-11adeef47d8f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8db46e12-dcb9-4f97-8bc3-c15ac3dc3648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740c910b-13d7-4354-b0cf-e88cfdcdd28e",
        "cursor": {
          "ref": "6817cc06-9484-45aa-9ac2-b3dd0a78a0ef",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0816ba31-f7b2-450a-82f8-7b9733d2549a"
        },
        "item": {
          "id": "740c910b-13d7-4354-b0cf-e88cfdcdd28e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "56624dbc-0776-4b00-b438-937674705a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a0bce0-653d-4a01-b59a-abaa010344d6",
        "cursor": {
          "ref": "c24def74-5009-4d91-99b8-bdc52ac4d902",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fc1b0a63-431d-4533-b06e-8853ce54ea96"
        },
        "item": {
          "id": "c0a0bce0-653d-4a01-b59a-abaa010344d6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7578183c-4581-4f78-bec6-a5e849870d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70778fa4-72d0-4da1-b3df-85be32db2da7",
        "cursor": {
          "ref": "ef5ca230-2661-4ee5-9e54-27679db2a6d1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f1b607c7-b463-4dda-ab51-863e28640660"
        },
        "item": {
          "id": "70778fa4-72d0-4da1-b3df-85be32db2da7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c424a929-6b39-43d0-bcc4-f5081e682649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cd08aa-727a-4b20-94a9-205da02b1e07",
        "cursor": {
          "ref": "4c654ba2-efee-4dd6-805c-d40e76378384",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "475e21e1-54db-4edb-b4e0-1574630b21e0"
        },
        "item": {
          "id": "72cd08aa-727a-4b20-94a9-205da02b1e07",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f57cae49-015f-4973-bece-24e09be2ab86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04659eaf-bc23-4d7f-b3b5-a033c3026398",
        "cursor": {
          "ref": "acf24a94-eef2-4f36-9cd0-a9565830650a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "758fdc4d-0b30-4d36-ac9e-9f6a185338cd"
        },
        "item": {
          "id": "04659eaf-bc23-4d7f-b3b5-a033c3026398",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d234a91a-c808-43a7-a3a5-22a8207f6f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223485a8-2f07-4900-ad18-4107e88e0854",
        "cursor": {
          "ref": "71015055-691d-4552-8eff-5e7c129463e7",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1a2dead8-4fe3-4913-9a41-f8cd8af5ac27"
        },
        "item": {
          "id": "223485a8-2f07-4900-ad18-4107e88e0854",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c1ed4116-5c47-4b85-beb7-440e4b422edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d5b4dc-7e41-4c01-9bed-28b887efecae",
        "cursor": {
          "ref": "956ad15e-b126-4539-be10-5e7ca0d06cb0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8492888a-817a-43dc-846c-ba1f9c347ee0"
        },
        "item": {
          "id": "92d5b4dc-7e41-4c01-9bed-28b887efecae",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7cb1559f-5616-46d4-bd69-a88a3e5d7d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2111a3a-29f2-45f3-9749-bcada30bf6c3",
        "cursor": {
          "ref": "47c43abb-538b-4d98-935d-d8d1aadae4db",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45a23fc2-5705-4c79-a47c-38702fe36d2c"
        },
        "item": {
          "id": "f2111a3a-29f2-45f3-9749-bcada30bf6c3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "157b733e-d583-413f-ae29-73cff85d70dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4ff585e6-b15b-475e-9933-16813b429f65",
        "cursor": {
          "ref": "c81e16d7-4026-4d31-bd4e-40d58518d175",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e04e9b1-404c-495c-a261-dc9aa2a041cc"
        },
        "item": {
          "id": "4ff585e6-b15b-475e-9933-16813b429f65",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d79cad76-ea71-4a3b-9ea6-56a8aaebc330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b2296268-dcb0-4b03-b8de-be2cb52dcabd",
        "cursor": {
          "ref": "7972a422-da15-4f05-9bd1-846b78048dce",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fa81e433-f121-4d97-85a8-6b2ea6107578"
        },
        "item": {
          "id": "b2296268-dcb0-4b03-b8de-be2cb52dcabd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c7cefadb-708f-4dac-bebf-e0c822209379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2296268-dcb0-4b03-b8de-be2cb52dcabd",
        "cursor": {
          "ref": "7972a422-da15-4f05-9bd1-846b78048dce",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fa81e433-f121-4d97-85a8-6b2ea6107578"
        },
        "item": {
          "id": "b2296268-dcb0-4b03-b8de-be2cb52dcabd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c7cefadb-708f-4dac-bebf-e0c822209379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2506b5-eea9-4259-ad37-10a246d70b11",
        "cursor": {
          "ref": "62d46eb5-b212-405f-b708-f7be73e43740",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "641f9718-f2ea-4528-9126-d27d64766de9"
        },
        "item": {
          "id": "3e2506b5-eea9-4259-ad37-10a246d70b11",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1f342ffa-10b6-4b5a-bfa7-ac725dea8a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a6f6ff-d323-40e7-bb76-fad0e0d7ca8c",
        "cursor": {
          "ref": "f2c18648-4187-4af2-a138-52004a17ccb9",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e4a11e3d-eb89-443c-9a5e-4d3ba1fe8688"
        },
        "item": {
          "id": "28a6f6ff-d323-40e7-bb76-fad0e0d7ca8c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4c8191c9-d0b1-415c-916e-3e8270ecaaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca364cd-825e-4e14-9cd8-f892489c5e85",
        "cursor": {
          "ref": "1c4101cf-ea5b-4e34-91dd-f52f93e8ed1a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d00a47b6-259d-4206-ac95-97e1d8f93a41"
        },
        "item": {
          "id": "fca364cd-825e-4e14-9cd8-f892489c5e85",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "05f5bb24-f2a1-4150-8fc5-fdca96d636c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bc1535-93b9-4c74-b366-4362fe361fe8",
        "cursor": {
          "ref": "b8b2f6e0-7fe3-45f6-b80f-4c5e443af0b0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3dfa570c-102a-4e70-8cdc-9d238b00c655"
        },
        "item": {
          "id": "b4bc1535-93b9-4c74-b366-4362fe361fe8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "138a1f0a-bbc2-4b9c-b102-cbbaa163cdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3396ce-c826-46e3-a2fc-c8090009d5af",
        "cursor": {
          "ref": "cd85185f-d2aa-40d8-ae55-9c5fc45af0c4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cd9b6a3a-fe65-421f-8280-85af6608b86a"
        },
        "item": {
          "id": "5e3396ce-c826-46e3-a2fc-c8090009d5af",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0c20c7a9-54f0-4a8b-9852-0f0842e9d35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda443cb-b4d2-4b8a-877e-5643faa8b020",
        "cursor": {
          "ref": "78ea915c-ef6c-43fa-9d0f-efd45467e4d4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4406ca96-d8f4-4904-81df-aaef2cd9e8d3"
        },
        "item": {
          "id": "cda443cb-b4d2-4b8a-877e-5643faa8b020",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2c6379f6-ea82-4aab-9ddd-afc88679968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81948183-f7e4-419a-a722-3e98c2aecbd0",
        "cursor": {
          "ref": "16e77b66-73bf-4972-a5d1-f60825bf7e04",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cc2b1ea1-0d01-4f1e-9857-b5040343211d"
        },
        "item": {
          "id": "81948183-f7e4-419a-a722-3e98c2aecbd0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "11c21a33-5da3-4caf-8743-893e079bb328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6582ae7c-b9e9-4148-9a01-bbb482413930",
        "cursor": {
          "ref": "1d7263bd-0437-4700-a1d4-707754ae1896",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "32b948e3-f5fe-4786-a292-6fc888c82753"
        },
        "item": {
          "id": "6582ae7c-b9e9-4148-9a01-bbb482413930",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60d6c305-e6ac-4685-9216-c57a447ae823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7126701-25d7-4a62-8eda-8d51c82d843f",
        "cursor": {
          "ref": "132dcfb5-0c76-411f-9ddf-7f1b73915457",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bb1b01f0-05d9-454e-95c3-fe09bfc3592c"
        },
        "item": {
          "id": "a7126701-25d7-4a62-8eda-8d51c82d843f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "43f3aebc-65dc-4752-9dc4-3147399207c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3275ca-9eaa-4c56-b50f-45fd74bcb89d",
        "cursor": {
          "ref": "de7fa417-22e2-454b-a05b-7e99ac35dd81",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "58d7f7d2-4bda-4677-b4b1-62c908d702c5"
        },
        "item": {
          "id": "aa3275ca-9eaa-4c56-b50f-45fd74bcb89d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13fd1710-d666-4b22-b929-94ae0986092c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57062769-2e7c-4553-987e-370f1abec92f",
        "cursor": {
          "ref": "4230cd1c-7c22-451e-8d00-0183fab9578d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "efbf69c4-fa2f-42e9-9a1d-4f0a12c04767"
        },
        "item": {
          "id": "57062769-2e7c-4553-987e-370f1abec92f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ef07ea50-ea98-45f6-8580-ff45f24d2955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e396bba5-291c-4ece-a2a3-8a670594ddea",
        "cursor": {
          "ref": "934d4bfb-e55e-42bb-b468-910ff40c4f31",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7f11bf3a-1f6b-49a4-af5b-2c45bb4dc3aa"
        },
        "item": {
          "id": "e396bba5-291c-4ece-a2a3-8a670594ddea",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "87129a50-e8a5-4171-87cd-25c45b405366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b72c138-8fc9-4b38-8be6-ceec9156088a",
        "cursor": {
          "ref": "5d493e6e-08b9-49c9-8bac-f3e058359aa7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6089f06e-0dcc-4ef4-b1f3-c195f914f904"
        },
        "item": {
          "id": "2b72c138-8fc9-4b38-8be6-ceec9156088a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e96c4429-84a0-4dd8-bf3e-81f2289a8dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0869cf0a-5e32-475e-80cc-82ba5482956f",
        "cursor": {
          "ref": "b620bdf9-6ace-4c67-a8de-ac78c7a1e577",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "73e033c0-59c3-46fe-9efa-45bd601bfe0a"
        },
        "item": {
          "id": "0869cf0a-5e32-475e-80cc-82ba5482956f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "11cc3b14-8c0a-4139-b585-bd93d7b1eb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a4a945-68ec-4abe-8ebd-81bbd261c2fb",
        "cursor": {
          "ref": "96094b09-3b58-4b44-8276-46b879019f37",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a42e6df7-63a1-4246-99bb-a9e4561d9f2b"
        },
        "item": {
          "id": "f4a4a945-68ec-4abe-8ebd-81bbd261c2fb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "45a6f1ef-eb4e-43c9-8e25-c2e1717dd823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef6ff2d-9590-45f8-8158-904d6bfaed41",
        "cursor": {
          "ref": "88b47aeb-7e91-41c1-b220-a9faacd8204e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "820024fd-5d1c-467a-8e82-d996def5011b"
        },
        "item": {
          "id": "bef6ff2d-9590-45f8-8158-904d6bfaed41",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "09f9fc4c-1a75-4267-8c9a-56b1202fec3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98b3869-50ed-424a-9a13-6ce8ef048708",
        "cursor": {
          "ref": "5b1ab13c-9a48-4d77-a6b8-703b2abe22cb",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1609468f-b6b9-4049-83df-e3fa1f515863"
        },
        "item": {
          "id": "e98b3869-50ed-424a-9a13-6ce8ef048708",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a4ec55ab-a442-4067-81a7-c89bd4caa4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8153e770-5c0d-4825-840d-cf61c41f0f62",
        "cursor": {
          "ref": "1017fb1c-8dab-4c5e-b48a-f43dc69f66bb",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e42f5b79-bbfe-435d-8552-059b0bf9d333"
        },
        "item": {
          "id": "8153e770-5c0d-4825-840d-cf61c41f0f62",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "82890b86-eb3e-4399-8221-65bddc8f3cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02443a41-4308-46cf-8078-bc8b68861a39",
        "cursor": {
          "ref": "a83670ae-b436-4b88-8b24-b652b54fe7d9",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f6e0a0f4-0ee1-4534-bbc5-6c4f78414667"
        },
        "item": {
          "id": "02443a41-4308-46cf-8078-bc8b68861a39",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a74f4ceb-4d5c-4fc0-878f-2235c8d9f9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f98ea1-d9f5-404d-9321-c56275cd7231",
        "cursor": {
          "ref": "30a71489-4314-4e80-bc71-631abd75b013",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f417252-f53e-470e-9bfd-f17d171ff41b"
        },
        "item": {
          "id": "73f98ea1-d9f5-404d-9321-c56275cd7231",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0691fd98-ba69-4117-ac88-785ca39a99a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e03583-b9df-46ff-ae2f-c9c82d83484b",
        "cursor": {
          "ref": "d0065cdb-c1ba-42c2-97c6-dae5240f5ea4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ce8a178a-2768-4aeb-87e9-8334df650ffd"
        },
        "item": {
          "id": "62e03583-b9df-46ff-ae2f-c9c82d83484b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "82d7604f-e72c-4ba1-95d2-76633f7da9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7de60bb-89dd-4336-8306-2144802f99f2",
        "cursor": {
          "ref": "2dd18129-0a3f-4768-be43-eeb60ce4e336",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74a001b6-53ef-4484-8579-1179fc026987"
        },
        "item": {
          "id": "a7de60bb-89dd-4336-8306-2144802f99f2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c0b56174-ca91-44e2-a49c-93e01c1622b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c2f6b3-9c35-4cce-8663-416a92fd6746",
        "cursor": {
          "ref": "1534145f-e7ff-444e-a8ee-786d3c87b89f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2ad27017-118f-4a9e-893c-5e166e8da07a"
        },
        "item": {
          "id": "f5c2f6b3-9c35-4cce-8663-416a92fd6746",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1b21e190-9016-4fc1-865f-c1f0a6ba904f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70efac55-8a32-456e-ae62-d381252c6818",
        "cursor": {
          "ref": "6b181f11-ccdd-4089-9be3-dade4a7f6348",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "83b40b86-6dd8-4126-b083-79439984f855"
        },
        "item": {
          "id": "70efac55-8a32-456e-ae62-d381252c6818",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8831394c-1f7d-466d-b907-9ddb54ba8f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9965e1da-5002-4132-9b13-57888e5c5228",
        "cursor": {
          "ref": "9760132b-4f4f-495a-941a-56ab2b214bf4",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1f1f99c5-e99d-4b96-8a3c-cf9362a2c80d"
        },
        "item": {
          "id": "9965e1da-5002-4132-9b13-57888e5c5228",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "106d2ba3-13a6-43b9-85af-e9872c119318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49141678-4281-4c2b-8ff8-208827a0d293",
        "cursor": {
          "ref": "90db8832-efea-4503-9d5f-0d5f93fe0a13",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "87a9de03-181a-4a8d-8f15-a57713fcec56"
        },
        "item": {
          "id": "49141678-4281-4c2b-8ff8-208827a0d293",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ea54532-494d-4b42-aed2-543c7016e2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c36ee3-89d5-4d6a-a110-5fdb237057c1",
        "cursor": {
          "ref": "b120866c-6830-4993-82fa-6fe930f95193",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "67cd348b-7d54-466c-9611-2076fe110480"
        },
        "item": {
          "id": "c8c36ee3-89d5-4d6a-a110-5fdb237057c1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "21ac75fb-6f27-48de-91bc-017551561029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac67bac6-dc39-479b-b40a-2c44888a9313",
        "cursor": {
          "ref": "d8d13af7-1fb7-4e12-ba28-96a7f98ee94a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9929d91b-e0da-4c99-a036-4d2d3b1f69c2"
        },
        "item": {
          "id": "ac67bac6-dc39-479b-b40a-2c44888a9313",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa217a51-0347-4598-9354-38aaf33dcc60",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a1e6e953-da06-4700-8eff-d6a5635ed72c",
        "cursor": {
          "ref": "c6928d94-cc13-4d23-b69e-f5ef5ed80563",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b039d9a0-5b41-4f4f-a67b-d622dbf1ee2a"
        },
        "item": {
          "id": "a1e6e953-da06-4700-8eff-d6a5635ed72c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3753d7c1-412f-4080-bf17-5a7f8f6ac894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2d9c2c-0967-4e65-a83e-d486f45547fe",
        "cursor": {
          "ref": "1a6db13f-52d2-4347-82b5-3157bd742004",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6ce11150-8e28-42b4-92e3-116724e9899f"
        },
        "item": {
          "id": "9a2d9c2c-0967-4e65-a83e-d486f45547fe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5c4c8f5b-0c41-49f1-9368-bbbaf9dce3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78f4bde-3bfe-4f65-89dc-86b92191902b",
        "cursor": {
          "ref": "e31c7c56-30df-4590-9939-331a6353c659",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f07d3db7-0f78-44bc-b334-2e58c14a5bd9"
        },
        "item": {
          "id": "b78f4bde-3bfe-4f65-89dc-86b92191902b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d174dffb-4d31-4793-8218-17785c53bc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1998611-a90f-42cb-9b1a-e152ed118891",
        "cursor": {
          "ref": "772eb6fc-096a-46cb-bfcd-a30c3655ccb4",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bfb65ed8-f380-4719-a8f4-611f7f7c2fa2"
        },
        "item": {
          "id": "a1998611-a90f-42cb-9b1a-e152ed118891",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ccc9e684-b5cf-4b49-984f-b0b489eea86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d294b49-2ffc-443b-8970-70401a928170",
        "cursor": {
          "ref": "52d8e8d7-4e9b-4800-96f6-2955e816d669",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "02c3e41c-7516-4a6f-bd2b-bc3bd3151836"
        },
        "item": {
          "id": "4d294b49-2ffc-443b-8970-70401a928170",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bc2e2b75-185d-42bf-ae0a-371bf0be70b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d34924-ce7d-446a-ae53-28ee4ea3ef6a",
        "cursor": {
          "ref": "c18e13a6-330e-456e-9809-5b40a2fd6c3a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d897f853-4d0c-4525-b514-ee900618eab3"
        },
        "item": {
          "id": "85d34924-ce7d-446a-ae53-28ee4ea3ef6a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1036512-c16d-4ed1-ae7d-07cb91312fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e319796-ff8b-4c5c-bb61-90aa75d34a9c",
        "cursor": {
          "ref": "def303bb-31b9-48b3-91d8-a751f3ed90b9",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9d7be6fd-261c-4bc3-a67b-6fdaa995ee25"
        },
        "item": {
          "id": "1e319796-ff8b-4c5c-bb61-90aa75d34a9c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c1102027-d789-4bcf-8a18-81f30ba523b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca90b9a-63e5-45d9-8aa7-b126834205e1",
        "cursor": {
          "ref": "b8a088a0-dc4f-4404-a1cf-ac28a97e8a36",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "78e87ba6-a0cb-4557-a525-fb6748fd295b"
        },
        "item": {
          "id": "eca90b9a-63e5-45d9-8aa7-b126834205e1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8c6b9afd-c4c7-4bd6-addb-2bd45197efcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8db4f3c-c7d9-4588-8424-7f615ac3e497",
        "cursor": {
          "ref": "36f7eb86-7091-438d-8c84-338621a4fcbf",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff670a99-747e-4a36-a433-f8a95533b713"
        },
        "item": {
          "id": "b8db4f3c-c7d9-4588-8424-7f615ac3e497",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7301a66c-ef25-4d20-b5fb-de8bdbf292de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741ff7b4-bc37-46dc-abea-67f09842dfef",
        "cursor": {
          "ref": "dd9e3c7f-38de-45f7-a8df-7e43289c6a96",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cf6eea6c-13bd-4cd9-8cf4-f9f72663a80c"
        },
        "item": {
          "id": "741ff7b4-bc37-46dc-abea-67f09842dfef",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0d9f5f22-9223-4cb0-a807-a9651d14f64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac75c958-545b-46d8-918b-0cc25a557b4f",
        "cursor": {
          "ref": "48773326-1a4c-4f5c-9441-8b216cf5c861",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "05cf249b-5545-4ec0-923e-6d55b0da8883"
        },
        "item": {
          "id": "ac75c958-545b-46d8-918b-0cc25a557b4f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b47c346e-40cf-44f8-a696-89a0610c2f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ab8b86-f34b-4614-83d6-d13782fcee05",
        "cursor": {
          "ref": "3d7b0cad-7b9c-41cf-b3fb-5e3c10fb6e61",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "abd63ade-7350-4a58-bc65-3d6db956a7c5"
        },
        "item": {
          "id": "31ab8b86-f34b-4614-83d6-d13782fcee05",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7c1826a3-b3c4-4b8e-a75d-8353e351b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21f4521-b81b-4866-9482-5f5c7248d38e",
        "cursor": {
          "ref": "f87b5fa4-c57a-4cbf-a305-8b4e77d02b87",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b8dcef82-3485-4f02-9360-752a9146b518"
        },
        "item": {
          "id": "c21f4521-b81b-4866-9482-5f5c7248d38e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "18dffc62-5af8-4caa-a2e6-feb21430da51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778be337-bc41-43f1-9618-f0ea68b02061",
        "cursor": {
          "ref": "3d5b7fe9-08b6-4b61-b8b1-1270cdb32947",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7a397bb1-30d1-45ea-a215-b02d1680407a"
        },
        "item": {
          "id": "778be337-bc41-43f1-9618-f0ea68b02061",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d3e444b2-7987-48a7-943d-4cc7f82344c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0838d523-4983-4c81-975e-c8d189fe8114",
        "cursor": {
          "ref": "6bff4b71-f69e-480f-907e-7107730dcc01",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0c0f664b-a114-4fcd-ba53-a8b083f8fa62"
        },
        "item": {
          "id": "0838d523-4983-4c81-975e-c8d189fe8114",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "96bdb7f4-1224-4435-b4f6-bf7722e6b219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa2c38d-077a-43bf-84bf-237bb8cff4c8",
        "cursor": {
          "ref": "6a127902-eec9-49e3-a6e5-5e8acc1b717f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e13cb341-b08d-443b-a22d-a637d3af540f"
        },
        "item": {
          "id": "5aa2c38d-077a-43bf-84bf-237bb8cff4c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "20a8469f-22d8-4649-b8ee-5ab3bd913151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2ea2c8-b66a-4ccd-88a9-3c32c7b883a2",
        "cursor": {
          "ref": "4685dc43-5705-4d4a-9b13-02a5ed656cb7",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f334b161-1265-4c0c-ab56-15f8da300b7c"
        },
        "item": {
          "id": "8f2ea2c8-b66a-4ccd-88a9-3c32c7b883a2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ecb7b52a-caa1-49b5-ab52-8d77b265d35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fabe11e-f35f-4d62-94de-db063fa928c5",
        "cursor": {
          "ref": "7fe44000-47e8-4839-9dce-4a4c74605eef",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "78041b7a-7e45-4e17-840d-df7ce50f9b6f"
        },
        "item": {
          "id": "7fabe11e-f35f-4d62-94de-db063fa928c5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8efd2170-fadc-4d4e-91a9-2bb95bb16e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f8d625-15c9-46f2-8671-a9aeea3cb686",
        "cursor": {
          "ref": "8d335a81-ad17-46f8-bd8e-f2b938e0c1cf",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e4a8b83d-6b6e-40e4-9e35-9ca1038e12db"
        },
        "item": {
          "id": "22f8d625-15c9-46f2-8671-a9aeea3cb686",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7a2b7234-25c6-4bd9-b275-846edfc78289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbb7c1a-7b17-4333-ac79-18bfa647baf0",
        "cursor": {
          "ref": "088cf47a-f3ea-423f-ad5e-0a751b68e3db",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "634dda79-b178-4182-8736-5d5ba062ece6"
        },
        "item": {
          "id": "6bbb7c1a-7b17-4333-ac79-18bfa647baf0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bfcec3bd-b280-4aec-911a-b03f4043e946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2a3914-e22e-48a9-a8fb-5652a0013dad",
        "cursor": {
          "ref": "5f835dbd-6bc4-4bd5-b269-0fcd8e3c7822",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8fc57f81-bd0a-4d4f-bc6d-d1cd8cd36595"
        },
        "item": {
          "id": "cc2a3914-e22e-48a9-a8fb-5652a0013dad",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "830d173c-0046-4683-9c6c-d042d5e26daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479d0ee4-4f4d-43b6-add6-1449a3f0fd99",
        "cursor": {
          "ref": "a4814ee1-5f06-42f4-b674-acf36b9449c2",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1f4a6468-052a-43c8-b59d-96b63c61fa8d"
        },
        "item": {
          "id": "479d0ee4-4f4d-43b6-add6-1449a3f0fd99",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ef1c99fc-9449-4262-bbea-410f4672a040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f75044-ba86-480f-8013-ab42938ea258",
        "cursor": {
          "ref": "77430767-a5ad-4db5-8b6e-a754abd2b550",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "99f17f36-6766-4467-a35d-47133aeb582a"
        },
        "item": {
          "id": "a2f75044-ba86-480f-8013-ab42938ea258",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bb5b622a-0982-4a89-9e02-c206b558126f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7caa33-4bfc-43fd-adc7-008ed653c99b",
        "cursor": {
          "ref": "75564802-8e31-48f7-a200-7e9cbc000822",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e0c8340f-904d-4255-9d21-f594accf1594"
        },
        "item": {
          "id": "8a7caa33-4bfc-43fd-adc7-008ed653c99b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d675e767-fdb4-4649-8e70-a0eab47390de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470bc897-fb02-4880-87a7-ceb248598de0",
        "cursor": {
          "ref": "e84104e0-0fc2-47f4-8f3a-7a8c3d2c5833",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4bc25b29-77a1-41d0-ac0c-615f7dcf05ed"
        },
        "item": {
          "id": "470bc897-fb02-4880-87a7-ceb248598de0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5bf9b325-3d85-4242-9fb0-64dcaed70165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924900f5-2266-491d-b709-47a0d4715977",
        "cursor": {
          "ref": "ee88f346-0dae-4c7d-97ae-f4790e913bcd",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56a90435-1c71-46fa-89b3-74c212f16340"
        },
        "item": {
          "id": "924900f5-2266-491d-b709-47a0d4715977",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "53c8a1ab-1e9b-48f0-8084-5994da2a7e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e462191-bbe0-452f-b888-09a0c04a1db5",
        "cursor": {
          "ref": "e9016342-1d5c-4715-8f2e-c69735b9fc27",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fb3ad113-a214-479a-aea6-c42505989177"
        },
        "item": {
          "id": "7e462191-bbe0-452f-b888-09a0c04a1db5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "24381158-a482-49b5-90d3-9697fb868d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e297f4-2e22-4db8-9959-09945d06c276",
        "cursor": {
          "ref": "5c3e1c27-d855-47f9-9f15-430893e5276b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a8370180-0c81-4931-90cf-def1742ac9ab"
        },
        "item": {
          "id": "68e297f4-2e22-4db8-9959-09945d06c276",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93817e95-ed94-4df8-a210-ff62714c1315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da653afc-1e61-4dee-bbda-fce411d64e00",
        "cursor": {
          "ref": "4e83b228-f3fe-40f7-b825-db814cca9948",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3e62a96-ba21-45f3-aa48-a0575d92feba"
        },
        "item": {
          "id": "da653afc-1e61-4dee-bbda-fce411d64e00",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4a5d01c8-6de1-4e1d-b8c9-41b22fd8df5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2e3ce4-c417-4d4f-9628-d1a203061b96",
        "cursor": {
          "ref": "2db427e5-4b66-472d-a7c8-660cf828cc65",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a6b89783-6900-48e9-b668-50b25eeee8ab"
        },
        "item": {
          "id": "ab2e3ce4-c417-4d4f-9628-d1a203061b96",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6383d896-5d68-40b1-948c-e34637eb979f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495db0e0-eae2-41a8-a99c-32b28f56511b",
        "cursor": {
          "ref": "3885a506-ac92-4444-87de-682a68df56b5",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "29148d5e-15d4-4f0a-90eb-4f68350a6190"
        },
        "item": {
          "id": "495db0e0-eae2-41a8-a99c-32b28f56511b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e37912b8-72e1-4afa-9e42-a58917bb8008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2ddc80-8734-419c-8d84-f9cc7de812a2",
        "cursor": {
          "ref": "47916e90-d6b9-4744-8c75-6a289a78ae43",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "87ac251b-2e8b-4f5d-aaf1-63627617bee9"
        },
        "item": {
          "id": "1d2ddc80-8734-419c-8d84-f9cc7de812a2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e83429f5-4eab-4396-96c1-a81f33ada871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1881ce46-d035-4c73-a1b8-1c7645a37ab7",
        "cursor": {
          "ref": "7e93040f-6c99-4ac9-a651-86bb8745c051",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4edc81da-4bf4-44b8-979d-285548bcd20e"
        },
        "item": {
          "id": "1881ce46-d035-4c73-a1b8-1c7645a37ab7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "37b93ead-7145-4d8d-a77f-d1d9af6802ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c543262f-711d-4381-94c4-b399d8710e03",
        "cursor": {
          "ref": "e2d9f770-6b23-4d38-aa71-d600f6ef85e7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "125ee6a2-feb5-4c87-81dc-a8c4539c7a2f"
        },
        "item": {
          "id": "c543262f-711d-4381-94c4-b399d8710e03",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d562e0d0-87b8-4223-b24e-db02747a5180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653f4266-6a5c-4a25-8637-7253522effc8",
        "cursor": {
          "ref": "9115ae6f-7e03-4931-a97d-7765141d6a09",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "389cbd81-aa7e-4209-80de-75c1fa9460c9"
        },
        "item": {
          "id": "653f4266-6a5c-4a25-8637-7253522effc8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b65a62cb-0eb0-405e-a027-10b5eee17e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa33bba0-1a59-458b-bc35-fd596aef2ba7",
        "cursor": {
          "ref": "7cb7e181-8a51-43a7-9f03-80af9d837751",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b6937800-fd75-4d01-ad22-5485a58b1a6b"
        },
        "item": {
          "id": "aa33bba0-1a59-458b-bc35-fd596aef2ba7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "426501c0-d887-4013-9cc3-f536663a9c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3984f1c5-3074-4996-8050-77cfec245e2a",
        "cursor": {
          "ref": "a378e171-8fa3-4dec-a332-6376dbae0057",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ec5d714a-6970-4941-88d7-b914b6870a73"
        },
        "item": {
          "id": "3984f1c5-3074-4996-8050-77cfec245e2a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d93c1f1e-7371-4bd6-98b0-946380f6b3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65656d6a-44e0-4fb4-ada7-780879a3f0d0",
        "cursor": {
          "ref": "75fd31bd-cac4-4e29-a4cc-efab59d6712c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e25bd418-8f42-4842-b637-ce334b719908"
        },
        "item": {
          "id": "65656d6a-44e0-4fb4-ada7-780879a3f0d0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4e824d60-7b9d-4cf3-a711-c3fd1372c1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4babe3fe-2c8c-46d0-94c1-d864e641dafd",
        "cursor": {
          "ref": "0015b06d-2f05-48b2-b709-d1f910639e13",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "49b638eb-edbd-4b5f-a5df-5bbf3b5906b0"
        },
        "item": {
          "id": "4babe3fe-2c8c-46d0-94c1-d864e641dafd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ee4ce986-7715-48d4-a96a-3c3c7f4ed667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcae621e-248f-48de-a892-1a908dea34de",
        "cursor": {
          "ref": "db373d2c-42ed-4aff-8107-85dfd5e69435",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a6e9d077-05cb-4dc4-9286-9337899abd89"
        },
        "item": {
          "id": "bcae621e-248f-48de-a892-1a908dea34de",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4ce5bb3f-2a04-4caa-b428-63682659045f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8774f38c-fb3e-4182-ba35-21710381ec5e",
        "cursor": {
          "ref": "4aa2529e-b60a-40d7-9647-5d17cb37c0f0",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aca8fee8-a1c7-4f4d-95e4-efade57a9036"
        },
        "item": {
          "id": "8774f38c-fb3e-4182-ba35-21710381ec5e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e6447fa-60db-414e-bc87-665389fd47d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddba6b3-fef3-4101-9f02-4555434e5e1a",
        "cursor": {
          "ref": "0ba67776-9f34-4b0a-ae43-8606fe725474",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5ed9ebe2-383b-4638-9277-e84c068037a8"
        },
        "item": {
          "id": "3ddba6b3-fef3-4101-9f02-4555434e5e1a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a9e1cdb8-6b19-4f25-b91a-976275cbf5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a7172f-2566-49bb-98d8-eb5020ed44ca",
        "cursor": {
          "ref": "0f2e5179-9d6d-414d-a368-0c9c43293785",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4243b1f5-4940-486e-9ebb-2b8d8c8a8ad5"
        },
        "item": {
          "id": "10a7172f-2566-49bb-98d8-eb5020ed44ca",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3124d64a-4933-4396-8cc6-eacf6dab21cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126a4914-da9f-4c79-b55a-bbe0c990080a",
        "cursor": {
          "ref": "1b05d9bc-b394-4bd2-91fe-4e7822d5bc92",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ef73ef37-637b-47cd-9d68-42275d96189d"
        },
        "item": {
          "id": "126a4914-da9f-4c79-b55a-bbe0c990080a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb7ff001-ac03-4668-a689-1ae322709bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb91d91-3ac9-47f4-ae76-11b0a14b7586",
        "cursor": {
          "ref": "7b8ce492-ea84-4f37-a420-f3ef3939c984",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7df9952e-d953-4144-a105-57ab4b38f2ac"
        },
        "item": {
          "id": "3eb91d91-3ac9-47f4-ae76-11b0a14b7586",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fb491fc0-63aa-4d43-aa91-e22c16728977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59785240-4903-4e7c-a68e-af85a7e7d2e5",
        "cursor": {
          "ref": "c6a2d272-9a8d-4c53-a773-01df454d87e8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "53f0c0ae-d054-4b17-b753-9d53e3fae063"
        },
        "item": {
          "id": "59785240-4903-4e7c-a68e-af85a7e7d2e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "de5d2d55-4479-4b1b-8043-2e0372bbdbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389d7566-d638-4cbf-ad55-cbae1537d169",
        "cursor": {
          "ref": "1d3adee5-6261-4336-919b-fb50fcb2b6db",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "efdb774a-a1dc-4798-83d5-1620dabf348e"
        },
        "item": {
          "id": "389d7566-d638-4cbf-ad55-cbae1537d169",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b04074aa-0386-48dd-861f-c58104c328f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c38092-1dd7-43a3-b631-8b3a41985ce3",
        "cursor": {
          "ref": "e5d565cf-67eb-4bef-a7a3-5308f812f9fc",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "846dca9b-2eb5-4e2c-a0ef-9050cef335c5"
        },
        "item": {
          "id": "39c38092-1dd7-43a3-b631-8b3a41985ce3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dce1def7-ca4a-4d86-8e8b-092cd927fa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226ae3e6-9828-4ffc-9fd2-3ae0cdee6c6e",
        "cursor": {
          "ref": "03a4934d-3695-455d-bada-8e6badd8318b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8b01f22e-7e02-48a9-846a-a753e9d8a2b0"
        },
        "item": {
          "id": "226ae3e6-9828-4ffc-9fd2-3ae0cdee6c6e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5cddcb51-4ffa-4f97-9b85-ebc12aef85c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632c71b4-5691-4397-8b87-765ff4a0bfcd",
        "cursor": {
          "ref": "79ec4b4a-38a5-4fa6-8c12-e1cab478ff2b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f4f189f8-65b5-4ce7-9b33-726d6cdeebcc"
        },
        "item": {
          "id": "632c71b4-5691-4397-8b87-765ff4a0bfcd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8d6999e8-baa4-4a83-b311-5e150c9899f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bdac04-a2d4-431b-a44f-d9433554a3cd",
        "cursor": {
          "ref": "6ebce18a-a7ca-434c-bef6-2fd7620a24ae",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e43e4433-50c4-4339-a416-410af2cee914"
        },
        "item": {
          "id": "e8bdac04-a2d4-431b-a44f-d9433554a3cd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f3748975-0f80-4e2d-9f83-999355ee6af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08a986b-c334-4e83-91c1-d0343a200cae",
        "cursor": {
          "ref": "a9dda3ae-c805-48e5-a261-4aa2e2d0c965",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e64e7fbe-693f-4fc6-a407-65e57c10fb5f"
        },
        "item": {
          "id": "d08a986b-c334-4e83-91c1-d0343a200cae",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c91bcdeb-23b3-493c-91d7-e9629bb24c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c428fc6-9739-463f-87f8-0b9376e76666",
        "cursor": {
          "ref": "b0f52f13-7257-4034-a190-6dd93abcc476",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "72a710bc-db57-4e6d-b403-22241063d3a4"
        },
        "item": {
          "id": "2c428fc6-9739-463f-87f8-0b9376e76666",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "939efec8-92cb-4298-90e8-ce9c27d07071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e181897e-1e37-4b4d-b107-8fe2fff84bc0",
        "cursor": {
          "ref": "9afa6863-2ddb-4694-ba1b-9b4346ee74eb",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0dbb2301-0259-4b35-9d48-1193942293b5"
        },
        "item": {
          "id": "e181897e-1e37-4b4d-b107-8fe2fff84bc0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "948cbaef-1700-427e-9089-10897ad701f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886f6edc-ea26-49f9-88f8-72559a2ae5eb",
        "cursor": {
          "ref": "8376c69f-4d30-4d73-b016-1935b91704a0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4c62b72a-dbc4-4abc-a015-1b1abdd848f1"
        },
        "item": {
          "id": "886f6edc-ea26-49f9-88f8-72559a2ae5eb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "397db314-a600-4212-b552-a79013334b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15989796-ae4a-48ba-b8ad-8d001bb39b49",
        "cursor": {
          "ref": "17121daa-0163-4843-b1dc-41edd95272a2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fe884b02-0e50-4724-a79b-871d82f25f6c"
        },
        "item": {
          "id": "15989796-ae4a-48ba-b8ad-8d001bb39b49",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ae560502-d77b-42e0-a0b2-e4868357a066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ccb79c-edad-4527-b731-190679241af3",
        "cursor": {
          "ref": "c1bfe5c1-7e8d-4595-aa0f-32db15784615",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9bcf8e3a-e5d1-4dc9-aa39-a9520f54205f"
        },
        "item": {
          "id": "95ccb79c-edad-4527-b731-190679241af3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ccd482af-f686-4ced-9cd9-fb2af8d58b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6ea6b1-7b0e-433c-86fb-e7c794dd8339",
        "cursor": {
          "ref": "319fbec8-1dec-4de0-8c10-f3e4a3fddf27",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3d554beb-9617-43bb-bbad-aa8844ff0bee"
        },
        "item": {
          "id": "cb6ea6b1-7b0e-433c-86fb-e7c794dd8339",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6ac405af-b36c-4d35-a0bb-1a18227b6344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68126b86-7fae-496e-bad4-e363d559e739",
        "cursor": {
          "ref": "12b19887-7548-4aeb-b38e-f2732c937de2",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "36801a00-bd6a-4178-b422-67bf7b3f027c"
        },
        "item": {
          "id": "68126b86-7fae-496e-bad4-e363d559e739",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2608de9f-9429-4a56-9d6d-0c82e91865c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17292ac-6596-4532-8196-af197759437a",
        "cursor": {
          "ref": "8dc0087b-fc24-45a9-a0a3-6e5da2ce213d",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "74ec23f7-27b5-40ea-acb1-e2b8b277ef8c"
        },
        "item": {
          "id": "b17292ac-6596-4532-8196-af197759437a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ad34bdaf-e8c3-41d1-a7e7-752447a54ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72897602-fea3-4b59-a01b-a6e57ca98b0c",
        "cursor": {
          "ref": "62e5f2d9-a7e4-4624-9c96-9f6eebe77a54",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4cc6812a-7b36-4477-9db8-840cc7792c72"
        },
        "item": {
          "id": "72897602-fea3-4b59-a01b-a6e57ca98b0c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "598f2edc-d7ec-4255-b176-c3a8f8651963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ea4aa4-3a83-4c40-a01c-491c211169d6",
        "cursor": {
          "ref": "cd58875f-b07d-4102-ba31-ab593ecb0362",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ba85e200-1f29-42b0-9230-c47190c81be4"
        },
        "item": {
          "id": "84ea4aa4-3a83-4c40-a01c-491c211169d6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "95384a60-750e-47a7-8077-725c1a29ec0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98b6fcc-09a8-4ddd-9292-589668f21338",
        "cursor": {
          "ref": "c27c745a-b3d4-4c4a-b376-a80c43227069",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7cdb0da2-df20-4070-8cdb-1fbb6d04358d"
        },
        "item": {
          "id": "d98b6fcc-09a8-4ddd-9292-589668f21338",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "59c2226d-01e7-4c57-abc7-b9aa56d1e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f0feda-6091-4e5b-a2ad-430a2a1eedde",
        "cursor": {
          "ref": "641df2da-a887-4601-881d-a3b1cbd5d181",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "005cf3df-805e-4109-846a-27c051bf9338"
        },
        "item": {
          "id": "80f0feda-6091-4e5b-a2ad-430a2a1eedde",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a587d3bc-3e57-4891-b304-aa931412c9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041a10a1-51a4-4d64-908f-888dfb344d49",
        "cursor": {
          "ref": "48dc760e-1501-4d44-9a2d-e7305414f5f5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "05dc898d-417e-4230-ab49-8c6e14e57113"
        },
        "item": {
          "id": "041a10a1-51a4-4d64-908f-888dfb344d49",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dd8894b9-13e6-41b3-9e72-52738318b745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3eefbc-856a-4176-8516-33493957bc29",
        "cursor": {
          "ref": "a1aead6a-55b1-41c0-a6ae-845a950a88b7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "63dd9f0a-0e70-49d2-b779-2ec4fd27e1eb"
        },
        "item": {
          "id": "1b3eefbc-856a-4176-8516-33493957bc29",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dd8d6edd-3f75-4f9b-a413-2f24ba6bd808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633f490c-b4ee-4a2c-b594-ef2f42839a51",
        "cursor": {
          "ref": "e558a5c0-3925-40a7-8780-10237dab5d60",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ef02f0e8-ef28-4e47-a07f-f1864b6d177e"
        },
        "item": {
          "id": "633f490c-b4ee-4a2c-b594-ef2f42839a51",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "677fcec0-aad9-4cd2-9789-f7dd5295441c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41e3ace-de95-458b-8be2-c459cd732e44",
        "cursor": {
          "ref": "a82acabf-3bbb-4089-b6bb-7b57ceedcceb",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f9fc3067-6599-43cd-b865-94045c216b8a"
        },
        "item": {
          "id": "a41e3ace-de95-458b-8be2-c459cd732e44",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f6c8b4ae-7c37-470e-a797-18c58f6b16cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f921889d-5e66-47d5-b327-da3776bc4f67",
        "cursor": {
          "ref": "714b384d-1729-4668-9542-59c5626c6359",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b4b4fb58-1f90-4dcd-b773-1e0459ae8071"
        },
        "item": {
          "id": "f921889d-5e66-47d5-b327-da3776bc4f67",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "67b4a7c3-faee-495f-a790-fb84e622064e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f99130c-dc04-4ba5-939a-7025517d67fe",
        "cursor": {
          "ref": "c9dad4bb-daed-49cb-b17c-1cd16008273a",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4231b294-1093-4668-8be3-eda42823f67a"
        },
        "item": {
          "id": "4f99130c-dc04-4ba5-939a-7025517d67fe",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4cd7770d-9de7-4581-804f-1b66a1dba9dc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633d9512-344c-43a3-81fe-02c5e1203bd4",
        "cursor": {
          "ref": "f5363ba7-7f44-4590-8eed-19040e5dbb06",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0d07c344-9b12-49eb-bf1a-846b05346b0e"
        },
        "item": {
          "id": "633d9512-344c-43a3-81fe-02c5e1203bd4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a20b8599-1cc1-4866-bfcf-d959452f3338",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a5401e-e2a0-477b-ba9f-ef9429db5359",
        "cursor": {
          "ref": "3533322f-b953-456d-b406-f611087b62b6",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "05f0521b-485a-4d94-aea2-a648f5a1961d"
        },
        "item": {
          "id": "80a5401e-e2a0-477b-ba9f-ef9429db5359",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b8a99226-eec1-4499-acfc-58fed6332c07",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9c913d-fbfd-4f67-a34d-4e7ad4fef2ec",
        "cursor": {
          "ref": "98b7e25c-16a0-4838-886e-41be44449028",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "18154fc0-9e11-496f-b063-41dd028f721f"
        },
        "item": {
          "id": "9a9c913d-fbfd-4f67-a34d-4e7ad4fef2ec",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1275d2b8-6067-4ac3-aa02-86a00cb20cb7",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
        "cursor": {
          "ref": "c860e3c3-92c6-4780-b439-a1c7671c3e63",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bc41e633-139b-49b8-aba8-e85f9a6acdce"
        },
        "item": {
          "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcdc2bf4-0cd9-4a84-82b2-563afab25031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
        "cursor": {
          "ref": "c860e3c3-92c6-4780-b439-a1c7671c3e63",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bc41e633-139b-49b8-aba8-e85f9a6acdce"
        },
        "item": {
          "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcdc2bf4-0cd9-4a84-82b2-563afab25031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
        "cursor": {
          "ref": "c860e3c3-92c6-4780-b439-a1c7671c3e63",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bc41e633-139b-49b8-aba8-e85f9a6acdce"
        },
        "item": {
          "id": "0d50d3c3-9184-4cea-88ed-064545787d02",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcdc2bf4-0cd9-4a84-82b2-563afab25031",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc1321d-6ca7-4c5f-b350-336b9e0fdc5c",
        "cursor": {
          "ref": "755a0651-1d1b-4c0f-a67b-9c68d4d069ee",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fcd5f484-7512-4b05-95e3-b48d4a1743d7"
        },
        "item": {
          "id": "fcc1321d-6ca7-4c5f-b350-336b9e0fdc5c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "792e0df0-c6bb-4d1f-ac40-795263ebb4d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b92248a-8956-47f0-9444-6e9798721f7f",
        "cursor": {
          "ref": "7ff7c4cf-2853-4b57-9e6a-2a4b4ec5980a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dad38747-21f1-4ae6-aad5-9d6d0c0b213c"
        },
        "item": {
          "id": "7b92248a-8956-47f0-9444-6e9798721f7f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0769628b-1e91-459b-8fec-6916c91b9526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7b92248a-8956-47f0-9444-6e9798721f7f",
        "cursor": {
          "ref": "7ff7c4cf-2853-4b57-9e6a-2a4b4ec5980a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dad38747-21f1-4ae6-aad5-9d6d0c0b213c"
        },
        "item": {
          "id": "7b92248a-8956-47f0-9444-6e9798721f7f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0769628b-1e91-459b-8fec-6916c91b9526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "33d5982c-4b3b-4eb3-bf54-79e0f96757d1",
        "cursor": {
          "ref": "dde90bae-82f2-43a9-98d0-aa54c0c60bf2",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "02fb7f14-082d-4539-9ff1-6d435d870593"
        },
        "item": {
          "id": "33d5982c-4b3b-4eb3-bf54-79e0f96757d1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "40a91082-14c5-4960-971e-80165f95aa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cc59bec2-d960-4651-810d-c8f24190eb25",
        "cursor": {
          "ref": "c4addee1-40e4-4d57-a0ed-aa30f14f041b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bca385ed-c58e-45df-8b84-64986faf288f"
        },
        "item": {
          "id": "cc59bec2-d960-4651-810d-c8f24190eb25",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a1641028-88d3-4268-bdee-4e0596a311b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cc59bec2-d960-4651-810d-c8f24190eb25",
        "cursor": {
          "ref": "c4addee1-40e4-4d57-a0ed-aa30f14f041b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bca385ed-c58e-45df-8b84-64986faf288f"
        },
        "item": {
          "id": "cc59bec2-d960-4651-810d-c8f24190eb25",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a1641028-88d3-4268-bdee-4e0596a311b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ea958559-5ecb-421f-95b9-348a818abd1d",
        "cursor": {
          "ref": "33d3f375-ee60-4640-969b-f4461aafc246",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f4152ec7-af0a-4d97-ab9e-da453868305a"
        },
        "item": {
          "id": "ea958559-5ecb-421f-95b9-348a818abd1d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8d90a243-3ef5-487b-a349-1a030c05504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}