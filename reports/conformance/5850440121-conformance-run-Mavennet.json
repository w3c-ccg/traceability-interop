{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9ffaf054-df43-4651-bede-0fa7e16a34cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5ec99bf1-ab25-49c4-95c2-bd6597472a92",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89960f82-f835-4fe3-85fc-d0a472ad7e93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2a19c909-1bca-4e55-bf7e-8100dcda1efe"
                }
              }
            ]
          },
          {
            "id": "46d3b8d1-3bb9-4b1c-afa3-128bf1c8bac2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d47af44-7566-4bd9-9cfd-9e59a8abd989",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e2dcaab-72d3-4e7f-939c-d1d99de88abf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dbebf0de-9a56-4fe8-bd3b-7f27aef48a43",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3ad14c89-0a79-4391-aa3a-0a8d8b3ef99d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19930a33-5d7f-451c-b13b-13b57c0cdaa8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cccd3974-aa42-4626-883c-3cfd2e01b9b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "723c06c3-3c8b-4bc0-a9f9-a9f367af9ed8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aecf9d4f-dd75-4652-8302-b7ae96dbc29e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af585cf1-4e72-41d7-a69e-3922afdfe43e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d959d64a-d9d5-4706-b79b-c822688b0b6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d30ee74-ef1a-4411-8e36-824ebf50b305"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f788af85-dbfb-4441-9bbb-85e95c49e978",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7ca3e83e-840f-45ba-92be-da7876f107fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d58ce7e9-7145-45d7-8131-c55f4bbd29d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43b15e74-ba07-47d5-aa29-24e0ac86d6cd"
            }
          }
        ]
      },
      {
        "id": "a8d36157-507e-4f70-b806-1af53c588d33",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "58983f77-ac32-4fef-81b4-fac55d76b58a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbbe46b2-77f7-47c8-80cd-ecffb448dc8b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44ab0dad-5feb-4567-bbd1-7edd5c66285b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1841f85f-3108-4489-b205-d6906f0d21a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "723146d2-aa38-4b66-b160-f198c7d12f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a14267-c4b3-4562-8e34-25c830040e2c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341fc67c-347e-4b18-8626-1ff1ce36f2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e87d938-07be-449d-9e1a-1c754ecbf492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff66d98-cfee-41a9-b028-b03ba3ae07ea",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979d08d9-8b0c-4e49-bdde-690a95cc9a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96ecc1ed-0364-4c75-96fc-96d079be2a5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4be7c316-30a6-4aa1-999f-1a28ca6c5627",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da74a33e-c17e-408a-b3a6-d476b26b51a6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba037034-bbba-43ea-91b2-84ca6fb81960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fb76af0-5fea-4f18-89a6-6ae79cc775d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a015d4f5-dc30-4dcd-8450-27c31c8e1a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1711c6-428a-4c55-a79a-5b21b144cc02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6cc967ed-415e-4ff4-a630-3b5053f4704a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09d9226d-0d02-4e17-88a5-11006a98b61f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15941052-e7dc-4d0f-be16-183f770569a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e3992b57-9030-4847-a028-6eee7408933e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce13d940-bd2a-4610-94d3-45b07a7c1c82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a5a4e263-cc4f-4296-b05f-80461d6525dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b9e99e2-a8f1-4cee-a37d-05d808f4676a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b0683c4-3e9d-43e5-b7a8-eba6d9a48630"
            }
          }
        ]
      },
      {
        "id": "21ca54db-5f95-45fd-b3d3-f1ed3e953cd5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80c3a6fe-a999-4a1e-8d0c-1d0fa9eebd8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0326abe0-ec0e-4ce7-94e4-9550dc6d4841",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ce156c09-71ad-42cc-9509-4c459bd89021",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d434608a-0a84-4a85-b03e-f076b62f4483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a9e8c1-9686-4db3-bd90-5faa2a134b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6114d002-59aa-4715-84f2-5be675f7667d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdbbe00e-74e3-43b6-a98a-6358d5ef0a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ac8426-cdc2-4e6b-935b-975cf7f497df",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc90dba-821e-4fa0-8f1e-9c35aa811fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7692922-4a14-4395-8f86-3f61c3301df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d882f03d-57f6-4be7-893f-fa7b96f7378c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca30afb-4fd5-4fb3-8797-cd5fb29e763f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f57f92-66cc-40ea-9c4b-2a5201f8162c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839b7541-e9c1-4cc0-89de-fb026070dc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7a7948-e598-470f-9cc0-75f1d20c1ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c0ffec-e6fe-4024-ab1d-f9eacd3396ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb36f6da-c486-4f8f-b6d5-43155d6ceec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a42144-1752-41db-9741-7909b8f5cd74",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e86329-f22a-4367-b807-01e00f357931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fff1599-c1b2-4eba-8ddc-e0925c4d1b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a29661-8594-492a-ad8b-27a6b16e9c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a0cdfbf-1171-4f02-a9eb-bcd2c5179d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86feef7b-3d45-4c8c-8daf-3b79024fe52e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed8be12-f5d7-4dc7-81d0-893a4045f277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ef1d3a-9cf7-4387-a3e2-0715326483f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ad7a68-cf92-42c8-8565-a9b8c7f7fcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3de81c31-ea06-4fdd-8578-0be58389b30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3141f404-0101-45b9-b22b-b6bd38d4b840",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8bc523-c0ef-47d9-bd0a-8e9a0a172e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bb852c-8829-49e6-9a56-f1265e2867d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101792ed-b159-4b20-8917-92dd7b47abe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04435c91-2780-4b55-8a82-6781de6d5a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206d5297-40a8-4a1f-a8e5-c9d49b50cd53",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8c14b1-5074-499c-9dc3-4459bacc9d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36f4dbb-53f1-4d5c-94b8-0d5a05d822c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed59b6a-001c-4cfc-8e67-c70dee49e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9658a4a-3c7c-4cca-b3bc-88a23c0e51f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9f8b30-f71e-4653-b05b-4a1d914fa811",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f47dbfe-203b-44b8-8924-7fa7b8261d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687f6cd4-cbcd-454c-816d-709c90a51683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247f4282-c7c3-400b-b6f3-00415167c479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fecea231-17f8-49f6-84d8-637830eb239a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea708eee-70b4-4909-8edf-03fb47582a87",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7f014d-2ca9-451b-a083-8faaa0932a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ec8ac7-b84b-49b1-9e27-6c90c4409d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82425265-ffec-468d-9161-f5db029e89ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71f06c04-23a8-421e-973d-9c89f474cc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27d880a-d993-40af-a25b-5dc741f10cae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377cff41-8679-4cdb-a541-5211e3411876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde45f9a-3b98-45f8-b562-a9b61a3f4ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75da86c-3bf8-45ea-86d7-b227540d52f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fbaf7b7-1977-4ff9-bfc2-f9a3c99ae4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbcbf45-b8cb-4434-aba0-da5ad5cad3fe",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de8effd-68f7-48ac-9c45-e6314617bf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fece803c-1317-4794-a4e2-96b7c662d444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60716cb9-50c9-4b29-9ca0-f969ada1cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e71a02c-c2c7-44f0-9154-29e77264fd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aeaa2d2-1524-440a-8a44-a2721e7ea6ca",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59a7b18-1118-4c3f-99fe-2266058c8c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52989060-c570-41f1-8612-16c35d8f77a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9331760-f315-47b9-b47a-194a1c50d9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "889e813f-dcb4-4a1b-94ba-f774d656e280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b5944b-44bd-41cf-9249-eb96599c4c7d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdef7e57-32f5-40af-b4fb-76f5341e9553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43c5936-a03c-4052-a9d3-7680a6bb3104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cc2328-d07b-421c-8ebc-ccfaadd747ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa0f0bfb-4f2a-4769-8946-86bdbe644326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cff645-13ed-4fa4-a8b4-1c7f42968ee5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afd3c65-0b22-4927-b658-a25db3aaa0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad3c36e-d739-46c0-8de3-7f6ee1eb4211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3c4baf-a78b-4d8d-b120-ef33dcf7d813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6161b604-be3f-432e-a102-50a9d69d3257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a569e9f2-1fd4-4149-a777-9b03b15572e6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74327025-25a8-4d09-94b1-8a0d99185913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e05930a-b942-4cf3-9e0d-dfff5c335e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c564571d-ba4f-4474-83ae-0cc12173d015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eabacf6b-69d9-491f-9eff-5870009c35e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed22b3ed-8d62-4d47-b73e-880393bf934f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e6dd76-38b3-4910-afd5-0b35b12d4f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6275139a-779e-49ee-a22f-0d00d4f7d9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94337408-3890-436e-bb7b-dfe51c62f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36d05c68-a43c-413b-8071-9a62f3ca35be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1be6a2-505a-41c4-a4e5-bcd5aac4ab56",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8513a1-ba92-4802-b2ae-c81830072267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44122c05-df12-4526-b8a5-dba596b3c488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc88102-e74d-4fc7-be67-9a218a73d233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0990a0bd-f8e8-45dd-bb91-0d799045ff30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0725ace-d956-488b-afdf-1fba1c33e3a1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ef5c66-e5a4-40ad-9e76-8625453dfd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a74b0d3-2194-4e44-82d0-d9eeec0b1267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b812cbc1-4df9-4bc1-9e1d-7ef27fbb6399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc03325-fc81-4dcf-81f0-42e883a406ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76cb96c-b438-4844-99b7-14e6a21280d1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1347a966-bbc6-4c04-9328-a57ad56a4b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d6fe48-4914-40d2-a7c2-e9fa2f22e89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9838cd3-5c70-409d-a3b0-b16fe66030f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4c62ec-4655-4839-b38c-4748214f6c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73898371-baa3-45da-91a0-a8364fb48b90",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2633d0a7-c3f9-4fe6-9169-3f39279e6ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253da45e-c6ca-46b2-8609-0b2d07e2ff2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4040801a-e833-4e1c-8b99-a9ac7cab88a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfee9a30-2be8-4cc7-ae26-c04d82128e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4eb946e-00bc-4fa2-997e-9c265bbe6ed9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577d8f8f-0230-4b79-9ab2-87467e3469dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debb611c-886f-4692-95ea-3d0d07b33f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ac0a72-de86-40e6-ba1d-ee387a7b6ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e655adf-4845-43b0-8953-83671fd45f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79fc40a-3b4f-4442-8f4e-47ebe76c5270",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663fd48e-0604-4288-bb12-175248a2f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb75d42b-2312-46b4-8052-7ea114458d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcd7518-da71-4cb8-a86d-80e86861f71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c24899a-c95a-4448-a852-995ce576ae0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127d528a-ab62-4e54-833c-124017d971d2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19334cac-e488-4209-8d02-292f160b707e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef86d0f-5315-4ec5-b018-c76903473e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048f79bf-9278-486c-8739-d548717b3eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56e0e5c0-551b-4846-8a05-cf44225474bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74adaff3-98e4-4387-913e-2eec255e5b2e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ac1683-a79b-4208-9d2f-650fd9b2baf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd854e7e-1177-4805-bc3d-d99e5b2320ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9784e547-7a27-46e1-bb4b-5f6af5eff311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b32048b-caf8-4872-9f0f-8567e526a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90291000-2bb3-4995-ab21-9d20405c22b9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da3b4dc-5621-4ebe-a2b5-180883293fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915c744d-275a-4ced-a868-ff05bea1338f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaa643c-6c8b-4db5-a964-cba9913a693f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "078d8a03-7e24-495a-99be-ba103d42efe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03f252b-835d-4ca2-9a20-60f71cc8d9aa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1f5e99-9b14-4a85-9504-812c5f60bb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d5ce17-841d-412c-9924-682b5d6780fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19034b4f-3989-468d-8303-25bdaffdc4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f605aa08-987c-48af-a5a9-078c9ecf4c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f5f432-fa22-49f4-a7ed-79eb5f3facd1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995b29e9-1eb3-4870-9b2d-c0af9ef79396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5939729-018e-4983-a107-64fd77b0d9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88284c1-c7a3-4632-a5e9-17673b998811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30cf055c-e13c-450c-92a7-c358bcec48b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9ad7d0-b2ad-4b67-a497-e53d4391ffae",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42878c9-6860-4410-ab2b-2eb012806ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bea68c7-7257-4886-899a-240807f31798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8048c8c8-5df5-43ef-a7b4-a4e9155b095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df997872-e1cc-4eee-8bf2-15b6b9e51b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c67a56-51e6-4b87-929e-20c1e10e15fb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a5c0e5-8609-4866-80f1-07e945fddb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1eaad5-3b60-4f50-888e-4d86ccc37518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a814ce5-cdf7-4cde-8731-a1690c985799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a075d32-0c4f-4c23-8c66-bbaafcd5647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ca4f3a-2dad-4ea4-9316-2c4b72a93a07",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9520d041-cdd2-40b9-ae88-26002f9bfdac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4be60da-0d16-4331-afa7-da9f9c3858af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b46064-61c4-4915-9dad-e3092a003e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "545daf94-d436-4a24-b988-fb8cab0c9aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc88a56d-03b7-446b-bec2-0b730eb4b4d7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec9a934-1197-401a-9de3-793980edd929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a786ae-4f02-488c-b299-b8313c308a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38b2feb-3aa9-4c27-abc6-61e99a559572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84b2eea-e158-4397-921b-0657fc47d4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab3663-5f6c-42c2-badf-63397ba4ac41",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113ff999-faae-486d-8d44-e7c34f3f5003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7911e962-ec48-485f-ad10-8ef93940037d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0670669c-b766-463f-b98d-91ea3847bb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "165b47ac-39ea-45f7-8fb4-7871075097c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03386e42-8a43-4826-8e26-c40b152de211",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a820bd-215c-4b0d-8e4f-0fbfc18f3fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c9bd15-4917-4734-a71d-4f92b03f1935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a432417-2fa8-4c40-9456-7bcf9e89c207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4818f580-9efd-4475-a5af-f389d3a5513f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29d4855-bc50-49a1-a028-014cbfc9fba6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94944f5-0568-47ed-98b4-a156e418bb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9fec08-2c71-4880-8f9e-34f2c7bc8d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515dbda1-d5bd-416a-a1c3-238489b1d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "145f935b-ea0b-4a76-8490-62b4a6ff7e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880c18b0-a0bb-45a9-9528-35efbd871a4b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d4d5ec-9147-4a95-abd1-8ea00c4d559b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f496da-d46b-4109-b89e-8e9d8f3199f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94258be-cdd3-4f03-9af4-24c55c3ebd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "621d92b5-8b28-4388-83de-026ad3f8a165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e170630c-3a5e-4ad6-8534-80241f89c9d4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f03db46-3803-4667-8cf7-c79306944424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cee0900-e82d-4f38-bc9c-28558f61c90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88e75f8-bbdf-47a7-a144-c08cc6c0eb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64e871c2-653b-41d9-892f-33c109a92255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19800a78-e94f-4653-be83-d4e93d34902b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5b8512-2b55-431d-8a13-d791d9d824b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48821ca-99b3-4b43-b28b-1dbf54e4ec78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a6b33e-b35a-4f31-aba0-32ca8d3fe7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaec6c6e-e63b-4b9a-b578-d9f41469c2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39e71ca-3c6a-44bb-a36a-c85d88d681d6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb69926-730a-4261-a89a-19da9cd9ec3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a4ab1e-dc9b-4525-864e-e9f5f9eadb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec3d6f6-2b71-48f3-a319-9aad8a407aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4f9d87-1b0d-47a0-a6d2-805256e937c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e73149-d960-44a4-8d3d-f45b14c53f27",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbb2e1f-6532-4e96-8266-800b612b6afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3500d0f1-8470-480e-b07d-11cd3c40ce06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a486d29-bf51-48d2-a512-7ddc8b3cb59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c73f7139-81df-4190-9d7a-8a9f07c433fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0692e7f-e0af-4dd9-aaa0-ea34e5afc889",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7025122b-3658-4ae2-aa24-1935ab400a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b9e6c1-5311-4f09-aa23-564bfc08e21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5572828c-f896-4e79-b3fe-7d4db95ce624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2153c429-9df2-447d-b1a1-c06550c3e0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06f1d8b-eb40-4089-963e-eb02ab068eed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f51c826-dda4-4172-a290-2b6bd9ed69e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be125ff-00c7-48c2-9869-425431aa265c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4b14bb-ed40-4562-9ef3-d4be03f188a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1060222f-f41b-4a35-b856-a5777a068304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2932ef71-a300-49e0-b360-2681644c6806",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfad2081-4a9a-48c9-871f-d1b782cf2e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545fe912-8d0b-4e15-9794-c6004f3bf652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b200124-6061-44c1-8712-ccf1b7410993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "61093245-32e9-4b69-bdde-7911931d8013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dc4239-8b9a-4189-87df-04ed973b85d8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7072dca-3f55-497c-85c5-936f8657dcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fc58a3-20ee-4920-8b89-9e1980cb8952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5d7eaa-85cc-4a77-80f6-60d0a7c6ffe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4aa9b3-48fc-41d3-8a90-610238b12dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6cbdc1-1472-4c9e-91c8-3e6761b5cd5e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1802ad3f-1bd5-4202-adb7-a8f1ab5ab58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eea0c7f-e422-4810-abc8-712abf65aa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f73fe8-79f5-4389-ac15-f458ed946a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "42db5f6d-b251-49cb-aac1-4bfb5aae67ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f04409-94c4-4e3c-a71a-7417242120f6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa702243-b6b5-4cdb-88d3-3ab819d6c990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fbd801-abb7-4c15-b07e-0fe133c72dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fd4e92-7952-4cc1-9c4f-1feaa1ffff09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64c0167a-1776-45f3-a561-dae1f9b3b40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf84cee-8b86-478c-9e26-3c723d0213f2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83822c49-24a3-4fe2-846b-d745cb0e5295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2659fec1-c83b-4d7a-8222-364f8f740707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba71413-52b5-4635-b7c8-a392d951b8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75d67e58-d466-489d-a443-f8a205e073f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9ab890-956b-4dd1-913f-92c79593e1ed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c172b6-b7ad-4de4-a856-9dbb4dde8fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d4c5e1-ba91-4fb6-ab90-6d4d27e67d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e30176-90c1-4461-bb05-98f7af90bf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "293f7cf3-aae2-45f8-b68b-19d5e4f85f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc84d604-c4c2-43a2-abeb-8f099d71b29f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c9e580-fca6-4363-8ad8-a13b7d1661ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc835d8-4682-4229-826f-6575300937d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa1e5c-d2fa-4903-adcb-7b12244193eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b968da4f-7c59-4eaf-bcf9-24aa7a5dabd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa3542b-c070-4db7-9559-37bc83594647",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1013228f-1ae1-4a2f-a2df-9862e597248f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a554ca4-f87b-4e98-83a3-cf9949cbd453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef3b87e-120b-4d8b-9749-d4c5f110a71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d980a896-b914-4497-a9a0-7ac9ce4ea7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fee64a-5f77-46d6-85a7-e8b7f9185736",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6501f47-94b5-4aae-8567-bc9242c23b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c916071-178b-4686-8d57-4393c3c2087c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46a43b8-647d-4433-b8f1-9a988cfb626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8a416f-92a1-4b1b-8c32-5a32d1d0169d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e29d4b9-1648-4fad-9dcf-9c83f869f467",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa596245-60f1-42b5-ab44-61a2706a63c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f602a94-db26-4fc2-8d82-297cbd17134d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f20207-9b01-451d-a33a-a38c8fb3191d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "478d6c48-c4d9-48a7-86cb-f9402210c6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bb9799-4c79-4000-8d8a-476014b080ac",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec35399-29f5-4e1e-96b6-5f69ebff9e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30671b57-cbe6-4b2c-9c9a-8b0ef36edd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1622346-5ad9-4bc4-a75f-0a3b659c6c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "811674ec-d0df-4356-ab5e-ddafb247b7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa8ce6d-b763-44fe-befb-ae8642ca5221",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97823de3-3170-4a07-8b49-1c3cdb6e70a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449060aa-3671-4711-bbfe-e56f9371454d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0387f6-7116-48d3-a582-5290d7e2d3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb3923a-b6c6-440b-8cd4-9abe57e82c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb9dae7-deb2-408d-9be6-d34908e672ee",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d1b99e-c0cb-45d1-82ad-3911a31090bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4722a8-d8fe-48ad-8a49-de75e117c411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cc2b0d-bc9f-4d3b-bfca-d64fb072c234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b09c9bc-1388-4bf3-8c3a-b567dd231fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4661def-c439-456a-a21c-8e6897e065f7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef31d464-20fe-45a1-ae54-c6f9654b58ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50b794b-55c1-41ad-9804-dd151e34bb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb58e4f1-ec5a-4f0d-9cf5-c33af250211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e41a8faa-f269-46e8-9703-c9acb782b808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5548a6fb-9be4-4d70-bae8-35954ea81506",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5096609-32be-4033-8897-fe2eb1196701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f47dc26-ac8d-4196-8dac-a0e0668377b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575a2ae9-3109-46bd-a0ca-06c2259c96e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "eda56bf1-7680-4dc8-a165-f5170f05b64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc204b1-491b-47a9-9b2c-0b5b6b7b5bb2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e44707-e246-4cd4-af27-aca19e201916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb551f4-e496-41df-aad9-0c3ad8395c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb1051b-4c11-4588-a380-63fc1e3c324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8391eca-2655-4c57-9807-21ee39057cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194e1473-413e-4f81-9f49-9a01a96fc964",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dd8698-cc5d-4608-8e38-480e67bfac1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1413847b-80b6-404a-adc2-fd52955b41b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce865d4-9fc3-466f-a3dc-4d96f3e81009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8d0473-7707-4aea-b296-9d266083f1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56014fe-2dbc-46ff-95c2-c65c836c1aec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4654d9-2baf-4e8a-a8de-38946e037f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfe0508-ab96-4f2e-9350-4a6db1f959b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1881e9-bf1e-443e-98ae-3782d84d31a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8225aba-8996-4747-b96a-2c54a6f7babd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6468f15-c3a9-4411-b12c-f1f36551e43a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d23af3-e784-42f6-b212-c3696ae7bbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86672865-6e48-49dc-8206-8c53454aadc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1944a-cfd8-4c8f-b23e-927b8c35a213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a090d8f0-417a-4d44-a46b-6b8c753e8485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f5c38-716d-4f7e-90a5-6045b5a1435e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277edcd0-37d6-4ca1-8b4b-4aff65a3e4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17ba3c2-20f9-4415-89fd-3625ce9f236a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d90b20-52b4-448c-9c63-bfddefc572c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d27b33f2-6545-4148-aeb7-0df0d75a6a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef5ae93-caa6-4ca6-921d-6754ff82d02c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9c8269-8f4a-477b-acdb-0469b7fdc10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5d4b28-ef16-4a6b-b38a-dd6ce55979f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa34a12e-cabd-4e82-9b55-f5159041fd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56e8db2-7ea9-43a5-a5d7-f9721a56156e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1cce8c-6fe1-476e-b340-882a3b504396",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d15c4ae-995e-4c8b-b007-758dc2e93973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa42a350-4cd0-43ea-aef3-fd42830b62fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fa3070-ab4e-459c-87dd-103d16ac66d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7523cb-ecf4-4cd7-9e2e-0ec05a33b825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6af2de7-ff7b-467f-9052-a90f5a1847d5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3628eb8f-e946-4e68-90b0-8801c2ccc0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9d1602-a48d-42e8-af00-f465e338145a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be48840-cc22-46c6-9a2c-d0c667b2fa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2ccd05-13ee-46c8-9ad9-90582e6adf96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d6db3a-9ab4-42fd-b557-b8aa33e02e5a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db76d17d-4419-46b2-b7a7-257bd3c36eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76c7faa-6c12-4a97-9f8d-0f2d13c2e39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f1c14b-6395-46f9-a69a-5ecf794a7211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c608bea2-92ba-4b87-bab2-b4767f485b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143831c6-a066-4d7f-8864-a315f5e79bc6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5e2ff7-c393-448e-a2a4-4d06fd4123ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c950bcec-cd2d-4093-962d-c611fe29584c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7401f614-0ead-40eb-a3ee-f38e0bf1bf23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad1b6d9-fe00-46ee-bb24-c039bbecb3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2952d50-45e9-404b-bf45-8d4fccb29edc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd16f31-424d-404f-8ed0-464f31c044dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959fe593-6261-4477-8b35-23bb25a48728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3b5f14-d496-4690-a6bf-7a9e8f48b2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25ddf305-06ec-43a5-ada2-3e2c7457c473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6810b72-82cb-47fe-abc2-f952156fe8c0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dd2630-79f7-46f2-b6ae-d899efcda620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94272d70-9979-4674-92d4-16f69b2acd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaf2d56-0195-41ec-b680-8958bf0256ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47af0611-cbed-419e-beea-97a36f314bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7afa50-81cd-475f-8193-1b9e8ab063bb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c003e6-3f9e-4e2a-b55f-15e5006aa8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522fdfb2-df23-428d-94c5-eedf1ffa0e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecddce4-60b2-4b8d-be35-f08270b872ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0f150b-1a69-4432-99ae-030b5e35ca7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ad32d0-2c27-4f4c-b2c6-8d4d4ac12bf8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d303ae0-56bb-452b-b4d2-a8821a2de928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96408880-171b-4ec0-ba39-c2e316aba3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd883345-b2c7-441b-8dd0-cebaec38460a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f03a44-6f11-4077-a024-803fe96be903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71886f91-d00d-4fb1-9a89-83f592b59349",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7b4546-8d2a-4f14-bffa-47c7d4c63469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e632171f-ce95-452f-be97-cb01d0d81efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c82401d-93bb-4bbe-a97b-a175a35c33ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e35d533b-cce5-41f6-b7f1-015f00c5851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea305588-77d0-45bd-ba79-6ccd58f785a2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65078687-5af2-486b-a74d-59a27c2f1253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97139464-d88c-46cf-80e9-c24b6688dca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b09390-27c8-43d9-8f7a-806fd5c9623b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2c3543-8b9d-48bd-8597-3085c3106280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5894586-0d18-47d9-bc2a-2eab2b5edf13",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb75b5e-2728-4228-8245-26dd13674ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce1ec4d-3e63-4a97-a369-d8dbe672354b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae1fd19-75f1-4c51-abfe-939d1cd2c5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e866ecc-2578-41b8-a7e5-f525d40dc0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764db7cf-5b6a-4755-84ed-44a6d3a738cc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb60fbf-35a3-4792-b535-00233c436992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ac1c6c-87c2-4fce-8f23-9f827bbbfb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a50015-dbce-418f-8a11-1d77abe05891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65fa44be-42f8-4a07-80ad-da7d29e925e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4700ae15-51f1-4d25-833d-ee2bb85969ec",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2d1567-ce19-40d0-95c9-e9c47dcd9976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d00ec5-2dbf-4c35-a42f-6c130467194c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4f3b50-30c3-4449-bbfb-ebc2aa229614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7a0f30-6271-4098-a2f3-ad01d0b5ec92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc2c382-b019-4508-bf4a-e8c983579b16",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817f83ad-1292-4cf9-8394-cff3489ca89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5a97ed-979d-4872-874d-6e047f5ce312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511b4aed-98e8-47ad-91fd-a1990796f0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62104029-33f5-4457-b543-6bf3d011d779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666b29a8-aa2d-4fd3-b6e1-bf95735ea866",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec0c1c6-f94d-484e-9e5a-7d7802bf57de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57211d2d-93d5-44ab-b426-eaf5a5c9f950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1c693a-294e-441d-8ca7-e638d742712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3e1c9a-3b93-4b15-a89e-26947df34282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d372fb6-a9d8-4450-a495-252e77d6c712",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4d8ab6-0620-42ac-a0e7-5fb4de72b813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a744b94a-87a0-43e7-95c5-3a40a4efe619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65459dbc-8481-4fc7-8f1f-123e59c3bc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "733c1558-21ac-4567-90c8-e7919671a36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70374afa-5819-4e38-afe2-caafda0fd3f8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfd01c7-6492-4641-94aa-449fc4bab943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fd0d04-f01f-4beb-94a0-d00dcb0ce0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3740b9-9796-4d67-b650-e528786f6ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abf18d6a-704d-470d-a06c-af2b9808a385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bd09b4-08c2-418c-a4b1-beda4978fc8b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8493f8-1fbd-4460-9395-0f43720bc09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249a38c2-d347-4af2-a34f-468735e5d91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74641284-94eb-4c6b-b085-924e40194742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34a93a30-a145-48c8-9be0-11d322bf10aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577c2b20-1237-4cd1-93d2-2c1de960cd01",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea659103-f619-4146-90d6-878048a2106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8b63c3-3a5b-4db3-85f7-b8486e10a714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bf3176-c3e5-45f7-a859-60026bc197b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6de0bc7c-4a9c-4354-baaf-fd94cfec13d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4561cc-bc26-4255-babe-077c36846df5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c97987c-eb77-4965-a273-ae0daa3c7b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa617006-50f5-489c-a6cf-8feb8628951c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac6d4dd-395f-4a9d-962a-cbe3bd8a848f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27dc4cfc-0d19-4eb5-ad82-39a5386c77f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6611b88-dfaa-4167-b241-e428ee4159cd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f048b217-bf92-4787-9c5b-fec73cb3f9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb26e547-a4fa-49b2-80b8-219cfcf52b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce82349-114e-4ea5-ad6d-0c99a4206604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44e936d-348d-403a-ba58-81e6cbf90935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc84cb8-ca35-4508-b82e-4d8435298b5a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a30c26a-50cd-4629-81e5-d30966007dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2d396b-0916-4658-b728-da5169d6b862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48728760-88a2-4ecc-862d-42d0c348e9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7902f9-f455-4af6-9591-34fb34dd88b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae9cc66-5570-4d4e-8b47-432cbb11eb92",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125b8ac9-9dcd-4194-bc9b-a294c403e606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dac2af5-7e21-40eb-9389-97995a9ac963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9014c34-6dcf-4e4c-a436-b5a546a11150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "487d2b3e-0602-4764-91c8-0d9e473df524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502dd4df-5ee7-4ce1-965c-748ddaa400c8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16368db-ef94-4dfb-a431-541ec438c688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7319a8d3-eac7-44ea-99a1-8520c020277a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b7174a-30f1-4ea6-8812-154153406f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50985b14-1fa2-429e-a678-75b81c57c480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c45e58-72bb-4c28-9fdb-06b4eb7b4292",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b5fd4d-e735-4fad-8fdf-4e616d30c5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a362d149-30e4-4d26-aeed-5a3e31dd0025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be5bc79-c144-4a04-be3c-a67a90c4655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e183fd15-2c40-4f5c-91b2-8378af11bd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8c9a99-84a7-48a7-854d-b0b0e4ed7293",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc87136-f4c7-49b9-95dc-92ee5af34309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eca6dae-849b-401c-9c7e-83fd98b8b024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb48224b-49a0-4592-b3e8-91d4441c6967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9547b589-6a80-4c11-987a-bafab0e1ae65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68a84ab-b2f2-41cc-a07d-30ffa92ebe20",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb0bcf8-406f-4cb1-936b-cf479a09b153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e37ebf-75b6-4a7e-a6dc-803c9e4b8ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ed9de9-bc2e-4def-8023-3e5e2613dd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc45dc4d-f048-4ace-a017-a50a993ec58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb8ce5b-c045-4966-ba35-9469291b3a6c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fe1d3f-b842-4798-b8c9-2fdf0356cac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a50eeed-059a-44d0-b694-c3f6df717d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a863a8ee-2037-4371-a0d7-b6a675ce981e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "13ff4745-6fd2-4553-b74f-61c2f1d1faf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa6fde1-0bf6-4b43-8d65-135c18a64fd6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89fa46d-65b7-4b4c-8168-47ae9d5d85eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d0736d-dbcb-4f2a-8d1f-c282cdc61370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17263bd9-50ce-4d32-853e-d0b6815351f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "383c8d17-0d4e-43ff-8ff3-63c2dcc63678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73a2742-1428-44b7-9057-e5edc077fa66",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355c29ec-bcd4-451f-9be1-5010bf041ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8c91b5b2-c95d-47d1-9fb1-575ab3f15ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94abbd4-bea0-4062-995d-7b01cfcd69b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "53a2a5c0-47d4-495b-b9cb-278ab9190690"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35a3ca6a-8b57-49dc-80bf-2d9244b26e94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8db81df-99c1-413e-b0da-6810e34c5ad2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e30b09-4610-4f4c-b7c4-db629a32b43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b9011b1-f0d6-43d0-a591-9551bcaec20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff08be68-faba-4a73-ac01-66d61c1bbebf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "534cb80e-b881-4835-a2ca-3bbd2b32b542"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3786cd5f-cee3-46d6-b098-aeeaf890c4b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1642ba6c-c77e-4863-b617-79a5df16c567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfdab2a3-0fbc-42af-880f-336d713019d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9379e78-6882-4d08-a31c-a2d1b47571c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08287332-4c1c-4456-9a24-3801e1fd6a54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3109aade-684c-4de2-be80-91ea2443481f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2ee81c2f-8676-47cc-981e-636bb207d383",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4a75a14-3565-42b2-99e8-a06d6f59011b"
                }
              }
            ]
          },
          {
            "id": "ea18898e-7c2f-44b9-8b42-9a696fdb3fad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e65898f0-d637-4c0c-be62-3e64cd2685bd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c602a37e-b2b7-4df9-b1e8-eab8e120854e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82cbcc15-3f2e-48d8-aede-0191826943c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45cad34b-024b-4d17-9171-63c27c3d492e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e883498-f7ac-431b-86ce-9f2be119290d"
                    }
                  }
                ]
              },
              {
                "id": "eb11b135-d147-4d13-84e1-1acd1d97e3e4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b52a2b3-ab82-4990-a4bf-aa9ba72892a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "565e80a5-cb71-4c97-a588-74d53cd893d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d52ae9c5-6161-454f-9551-1a7f12fb5ef2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9eeca90e-3c35-475f-bd8c-1bd240aba378"
                    }
                  }
                ]
              },
              {
                "id": "eb5e0723-7692-4236-b277-124c5fda821f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c80a4021-385a-4258-acd2-e690dfe595db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f543426-9db2-4aa7-abd8-8ee2e5d96759"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c314881b-a70c-4423-9951-3c9d5fe782d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11925847-47ab-48db-91e3-2fe6d9b7c2fd"
                    }
                  }
                ]
              },
              {
                "id": "c4d43bf6-1162-4500-be95-17a74b8f47ae",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e33dc6f-2ebb-44ac-81e0-3de61a28aab9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a973f95-2472-4e17-b482-354536c1ba65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc05819c-0655-42d8-ba1c-c3e9b40ce1c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fd9d76e2-1ed2-4967-b7d4-371ad5c680c9"
                    }
                  }
                ]
              },
              {
                "id": "54b1b355-af88-4c9f-893f-b1b18ee29043",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "680a4551-f898-424a-ad61-4a6c3e0111c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4cbd239-2686-4a03-b03d-44ec34328e03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81aafaa0-b62b-46ee-9698-77b2dab6ae04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "51f28ee4-b9fb-48b9-b5cb-fdfeaa7ddb30"
                    }
                  }
                ]
              },
              {
                "id": "3c1c00dd-f4a8-4c76-bf41-b50fd91a3aa5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "982ed41e-e47e-4fce-ba68-3d13964c45be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8873129a-0896-42f5-a396-20f4270551cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2d49ced-f70e-4e22-8eaf-c0b4b6aafbf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c7ccf3c-d7ec-49ce-bd11-3a787e769143"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48e479ca-9abf-48b0-87e5-250b3a949dd5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4551bfa-b2b5-43f1-bf24-25a716d28ad8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "59b087fa-fe84-458d-9b5e-ea26cfeec679",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "478e2ec0-aab3-4938-8ac6-7252d23bc25c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffa2381a-c1f0-4445-bf4a-faada4c502b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "40bfb176-4011-4e94-a0cd-4cfe6d35d513"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be0b0e3e-45da-4768-b892-56552583c73e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fbdb943-edbc-4b19-85d4-65cdc8260bec"
            }
          }
        ]
      },
      {
        "id": "90554049-cd70-4133-beed-c20db7342bca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0b6fa8cf-e9e2-495a-95ea-8a013bf49208",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c850534-61f6-438f-afc3-1bc6248cd2cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2c17279d-c35c-4fa6-b5ad-c29a051702ad",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6555fb8c-3ef8-43c2-909c-8c070ccb95f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff6b8f7-edfa-42fa-bae4-0657c200f17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6efb884-69dd-406b-95d5-620bd6d868c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "91710f4f-cf39-4420-a3d4-cbfd07ce793c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068eb613-c9d8-444e-ad4b-573752d2b485",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53988d7e-1d72-479e-8ed1-5693efe33105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6fdda3-2167-4886-8841-10b2944559e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565f7ce1-4638-4405-81f3-bf58c01e88bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2f06e9-4c25-4b7a-9055-6e5f18586744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36255a9-36cd-456e-8c4f-15182d7de421",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41caab03-ee17-44de-b81d-3af2fd78433a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0164bbb-55d6-41ea-aaed-768b9ca24a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f2b439-e999-4315-b7f4-482f252758a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b1416e-06eb-4fdc-87cd-0ee1748a9715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078f1063-a453-4710-bdf1-099b6e880a25",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556a3693-623e-483b-b076-86dd06cf0321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01ad268-e0f2-4aa7-be21-0415b676bac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd3cb5b-0bd0-42d6-b59c-6e31594fba6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9199ca-af63-48f6-bb40-57c9d6499193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78b79b5-24ef-48f3-be61-c80779d7e885",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bc69f9-78cf-4508-949a-730fcc52ac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9955ad51-f864-4117-bb39-05035b92f400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6514a2e7-d112-4eb7-858f-536095234a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc6c591-4339-4a45-9eea-e78604e166cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95f2721-ddbf-422f-8b57-a8fbb0c0a6bb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55432af4-2db8-4b9a-870c-f9cfe56aa94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4563413b-97ea-4e32-a2ea-749008dd0a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a7d089-5311-4642-b096-029a332745e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3755517e-7bf9-4178-a391-409af1a6f986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19066f8-467e-44e9-aa74-a10085ccf712",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5f642c-b375-48a0-b98d-4c1fe3db7732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d28b53b-ae87-408d-b6b9-1c6508d77547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5201c5a3-2984-4550-91f0-27a56d363ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "402f6657-65e5-4959-9dad-0c6e3571de24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c82458e-7d74-4cdb-981b-d41e2440dde5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c5317e-6ab1-4cf2-b387-62195d325166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e738b365-9529-448e-9c99-24263c1f7cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b17cdf-f721-4aeb-b7ed-050fb31e4361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff075222-cecb-496e-a079-7e777418b9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3788edaf-1d94-4130-8daf-93b419f2afe7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3ca69b-48a1-4a34-9296-782d8eefe87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d4b57a-9e1f-445a-a202-cfa0db7916ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a566c626-d9ec-4ab5-bacb-ec8ca3aea529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f59be8bd-5c33-4343-989d-1c0345f7ecaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f232e8-a4d2-4c43-8892-2b595fa229fd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3a883b-f7be-4d05-a181-38dd2dee0be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9203e6-7aec-4836-bae7-cff6950b4cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148f7e01-4e8d-463f-8c0a-0fcbf59e456d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f422cfe2-9d40-4b7f-8389-94d3d0862ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ae679b-2dc0-4ace-b5d8-4d1913f1a103",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa552165-c3e4-4ccf-bc29-a16080f2cd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc0c02c-fa3a-46f1-90e0-4aa1b9e91a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b85f002-e0b1-4ceb-ab20-d3cc1227a0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4ff577-3b5c-40b8-9573-7c084abaf30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaddb9d2-3ef1-44b8-974b-2e844b667a18",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb67fefd-f5a0-44d0-98e2-32c8bbbb690a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80200256-e19e-4b98-8966-cf711989a1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44fec5c-e2b6-460c-a9c3-08ca7e7cbef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8545264b-be6b-4d5c-bf10-f38e646545db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3931d28f-6764-439a-8c02-3e0321700c60",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011fe58d-398c-4244-bfc0-c3ab3ed209ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae73fda5-c6b8-42af-89a8-8165ba05d219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd96ead-25ec-44c9-a45a-06ce158d9753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60488445-7a5d-44fe-bf19-1514afb1e417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eb8bcf-bc56-46cf-949d-96e075b4d70e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf7dbff-28f3-49d0-abed-77baade84834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c425b9-776e-45a7-9bd5-fdcdab31be9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f917812c-3331-4680-8b7a-35f19205ebbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f62dbc-140b-46fd-aff6-d6a99c218602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefb3570-36d0-4125-9146-0d394446d9c2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454c9b1-c8a9-4791-be12-e83af84c707d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2020d0d6-c7cf-4bad-b450-0b6e5a58f4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0054f9-b0b5-451d-8036-ca7ef415b798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2615d0-8d60-49eb-ab93-a096241f35f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43449f77-9d9d-4dc1-9233-8a26ae21a1c8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4fe0ed-46bb-4749-9ea6-1e1e064c82c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4958c5d3-b893-445a-a616-71ac326093cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef862953-a024-4b87-8220-a44f2d6400a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e9e75a-d6ee-4ec7-89d7-f933eea05f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a414aac-fc09-494e-b8df-45900c0bf1b9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b2c077-ab25-4219-96b6-570cedae86a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e641b5-dee1-40be-9eb0-b5e97c1a5a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebcf16c-6950-473a-aa83-c46363b5c9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "40211fb1-63af-488b-9621-004e9cfa6983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510374eb-8e3e-44f7-8475-a353c35dff46",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59a836c-25a3-40ec-ae55-689678a51983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e9d7ee-074c-4245-9d89-d98f85ebe46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbf7bbb-d53a-40c5-a373-edc90fe1ba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d882119-884e-4a8a-8ea4-0ffcecdff12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf28051-5fde-4299-a7c9-901156a6fa07",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23116460-1679-40df-8200-fcd37b4c452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632b9d2a-cb21-44d4-8821-bcebd830be46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d7fcd8-b10d-4c6b-842a-92dcacc57feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6c9187-9757-46cd-ba1b-e30ccd347dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8041bf61-8002-469b-a7bd-8c69d8f6b04e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c60a6af-a0d7-4ffc-a335-a4064e921312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a38141-e0ef-427a-ac7e-0f135dbb9218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9356af62-f710-4cfe-a2fc-503ee2def828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b64d9fa5-ef5c-4733-a220-bf48ecd13a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539b809e-dd0e-4eb3-81dd-87326fa29428",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358aee03-4273-43c0-9667-fdec8f9afd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83750f76-2505-420d-af6f-8efad31e6643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29739eaf-5f3e-4b9f-8ea7-b2779cb5b045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93da7943-0bc5-473f-9707-a2a2186f3774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4d0f0-f39e-4df5-b493-669f41274a9f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff4c632-74bd-415f-b8c6-b45335210f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49db478-4cae-4b01-b9c5-76fe48a1ae06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea936e1d-5643-4a5e-839d-fa0a779a6e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e483cb-e665-4260-a1df-ec59d40c87a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded4bca7-bf29-4972-bbd1-07d97ce145ea",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ddc8a1-b27a-4cab-91ac-e7f8e7ffb875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a2d8ed-f45e-4a52-a4e9-b66abc52588e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9889585a-ec59-4def-923a-3938a53518d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7147471f-9764-42c9-95c0-ec480ada0434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86d8ccd-3329-4c87-a31e-c99856dbc149",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e75c272-bfca-4fe3-b554-fc12c2fbba85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca670bb-2b3b-405f-a20b-97a849d20c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db6cdb6-bda5-4d6f-ab5e-b318170f06a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c980cd-a417-4da8-80ff-838ac0114a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63e7a38-fe6f-4594-8e91-a9c5f9049591",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5032be84-5dcb-488c-9d61-fc8985ee5b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437bec5b-2683-45a1-ae4c-f279dbc339f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe28ccd-25c6-4884-933f-47acf04200a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "096ec4a4-9b33-4b90-be32-f40ec833d16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746c0871-9982-42bc-9e0a-bfae5e7d5bda",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d5e971-841e-4f98-97d5-f7c4306bc1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead69678-6704-46b0-b556-b10952d8669f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110d7359-3d4a-4d12-98f4-e695732fcbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ebb083-4a7e-4eeb-99d3-8861f1dad39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55056ef8-40cf-4f1f-95de-e2f4b501d0d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23047412-09a5-423a-b918-b855fec9861e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b565d47e-6a00-457a-aa21-194bbbc55f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24da2fe-2ba0-43ab-9149-b37075a57303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da60823-1114-4797-94ad-427c3fa78d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9dcfcf-0f0c-4d71-b811-e8f221b4d64c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4660beee-c4bf-49c0-958f-46cfd20990fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df709ca-6212-413f-9caf-21c1dbe2e2ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c34f5db-2e3c-43f0-be7c-ca983de7b051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d5f142-ac64-4515-8ae5-2ce697737210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff35d2c4-4c74-41f5-a13a-c5b237d61ca6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a67d9c-d8ef-4c26-9a83-78cdcea7c2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe09f733-e0fe-465f-a498-4264116172cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd9b0db-0f42-41e9-a2a0-2c965f1e7da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35cac1d5-b781-4a6b-90d0-b297c59e07b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1128288f-8d8b-417e-9036-d099a1035d91",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84348c28-8fda-4a3f-8878-e098063884db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17db154e-5c1c-4336-8969-7b28415b3789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e2a8e3-1eb9-4825-a0f5-499822c99630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79564f14-8cb1-400e-8d33-8dea544c0a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bf94a6-1504-4686-bf33-8e90ada808e5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a75725-0950-47c0-8f34-2af04b75ed14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370244f8-e8dc-4561-afbb-6a65e16f137c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1a83e4-c983-40e2-aab5-2ba9646491e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af13b939-a7e3-4669-a64b-95bfee8a92d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab381d8-43bc-49c1-ab4e-331a8760f5e3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcf19f8-d015-42a7-867c-1b69499acccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed39c93-90a7-4e35-b0b1-92d935790266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db4c997-b7e7-4fb4-bdc9-154a7cedcd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcfb53d-e7ff-42b5-8e27-8a188f93d565"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d5b73ac-e309-4e89-997a-da3cd3d57a1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51e0bb84-0687-4246-b721-c7632bc06427",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31bd781-d55c-4f77-b446-6a67a0478da3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c9bc83-5312-47aa-b16b-0c3dd2693028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf9bfcf-74a1-4ff2-b36d-d8d544d2f743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffa05735-82f0-4caf-9ca6-8bdddd1c3adb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18a780dd-77c0-4a30-8e59-14e2a6bf5aba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bacbbb5-975f-4bd6-aff3-d7dc05404e3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a249f7e5-733d-4380-8217-e7bc722faa31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cfbc604-2b6d-43b2-a30b-f6bdb41a13a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f217a0b-eaec-438e-b93d-aa04788481b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9035dd9f-155d-457d-9b88-b155e9420dc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca5d55da-e161-4192-95b8-8ddb6a89c5e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da841a42-e0a2-454d-ab21-ccb34d5a4d54"
            }
          }
        ]
      },
      {
        "id": "a9c27977-4922-4665-a19c-21e3441b99d8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "74c94ed8-11f6-4fbf-9bdd-c7668031bcba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1a36da0-0c94-4bed-ab93-4611b98e8b25",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6911fbe-a8f3-4ae9-a857-d126c28a18eb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab64a8f-3d6c-48f5-9ef8-5e2dd157c4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5bb874-52ee-4086-a913-86519c391e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f5a062-0f0f-40fe-addb-3bc0b9ffc226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f28a9c48-4f02-448c-a9f5-6fcd8912b6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f76185-b1e5-48c4-9a4a-3cecdc4cc8aa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e00c497-7e6e-41f0-a744-21008ec03c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b66a14-a2a9-499a-adb7-f35e7316e8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ac8008-5c13-455d-8671-0705e0c58946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e68d0e91-4510-4495-9beb-d8d3a51cf1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c57cc9-f16e-4dbe-849d-c9dcb6f9e2fb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f626cab4-36e1-41f0-8064-dcde45405c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa060d6d-ae6c-4734-be65-c66ba4734ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b9ccc0-202e-4dc2-8bfd-8f6cf39d8df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "445f1ee6-3090-4a64-9ebf-1c17823db6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb1a26d-e6dd-43c9-9c4e-1a5551cad142",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1949a081-0c7e-4d05-8c74-be33880a12ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c827fcc5-c6df-4880-99cd-01f0b45bfe48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b727e9a9-3c7e-4a60-9b90-ec31ef970add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d04df9-c90e-4b47-b9f9-1b7f214c3c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8a43d3-acd4-41e3-bb16-07a56f3be453",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5859c45-d394-474e-9b2f-083f32f54422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1687a8-6edd-4b9d-9de7-dde18704f201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244aaf17-0faa-48d1-bd28-de4e5446451f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccec1f09-9817-4c00-a5f3-938c95c00d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0182b23a-4583-48ef-b3f9-7125a43606a9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac6b8d4-1976-40d4-aacf-9cf413074054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84bbcaa-e640-4946-bb74-619c593cf04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614caa58-9156-48e8-a8f9-a685351a6274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c75f966c-966b-4ac9-aa54-58cf10505b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea56976-c1a9-48e0-941a-fcd6e035a9b5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a156cfd-c829-46c9-9a74-49d838f5e0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5537797a-c38c-4e0f-a881-418e40438b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1225b0cc-8d8b-4b6d-8b8d-86cb34b6571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "579f44f0-1585-4a48-8750-10e6e6dfd1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457fb00d-c0a0-4bea-a56f-85564b7ae5a6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfb620f-9aaf-41c9-b810-f9dad0ce6df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b66b709-0bf0-48a2-be57-63e33fc67468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7253f5-d37d-4a6b-9d71-57dc7ebfa1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac52a14-8236-4a92-9327-c942526e25a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af8b67-c13b-4deb-bf2a-817e0767b87d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c239f5a-8fa1-4fdf-93c2-b1d1b6e7a7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be6aa95-66a6-4589-b3a2-07392c7790e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d164d059-835c-4207-882f-1f1513d4d9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4beedd-e8d5-4c8d-aa57-168cb4b8f1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f22247f-6bae-4b7e-b652-285c4ebb54f1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edb44ff-7434-4096-97a6-3cadd8205671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b207a6-90cf-4b58-9cc3-f808dd0858e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efd6b7f-c368-4b4d-92b2-63acddf352c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "718143ee-b723-4421-b5e6-2717b0d8a593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec550a1-15da-4611-a812-786e2e12ff21",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e4de3e-c1b4-4921-9d24-3075949d07d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b64b7e-d7c6-455a-a99b-3270d306b2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e66b3d-8399-46b2-ae37-581fca41c855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "53aa2ed9-3c53-4ade-b551-c699803df246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c93a58-1b10-4351-aff0-620c8cc75a9a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3389bc6-8dcd-416d-83f6-e242cbdc5f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc7699a-45c8-4990-bac1-54e129df570d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c698dc-b11f-4dcb-b55e-b9342f633523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "414b6c58-a94c-48ac-84b7-f75f0a941e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137362d4-3eca-460c-aa6d-22f57095a555",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bf1c29-66d1-4c70-a393-2c79798473f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a8d115-1de8-46f1-b6c6-4311bb80de5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e74761-c73d-4326-95c4-ca66d0226b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5455b03c-c991-4df2-bbfa-8ba2c2fd0e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d372eb3-a8d9-4d7d-bb47-ec9b5e8e2f77",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c29d995-dd80-4409-93df-1803b7fdcfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a3a75a-a96b-4d59-8d4b-3c0f391e7755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac8a8ee-4428-4c81-a9c8-515b5c76d8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "48125a48-4f07-4d25-b548-cab31d261e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae6e651-f528-4249-b80f-0be2681d0aa6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deed201-1046-428f-b6be-612652982e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f45316-90e0-44b9-a776-6bde49fe001a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6546f48-2325-41bd-9516-d3d0566a7365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6642af5-c27b-4bfc-a2ce-21b77e2824c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f84842-d557-439a-9cf0-9459cccff236",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50862dcd-f894-48ce-a231-4b79342a84d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8bfc96-ac2b-438e-83e8-7d551dca28b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a54e75-8bbe-4a6e-83a0-c6a6561d8069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fa77cb-f53b-46d4-aa12-5a145c6a5992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8e6eb8-310d-456c-af37-a595b0f9c5db",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e46d330-b7f0-4498-9ee6-7460dd601e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9a44e6-b3b0-4029-8da5-5a6e87fc521f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547eeb76-5151-4960-bc17-369e9b2121ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "aabb7cd8-03b2-4c1c-ad43-a3693640a06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a563515-f8ea-4e4b-aba4-14205808ebe9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51343589-0390-4857-8258-97d76177917c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba94467-3b26-46fa-bc7c-03e124bc71d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15e611a-c741-4d75-bc0a-c8703bcd293b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "904968c3-bab0-40ab-95e5-c3de68a99414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf1737d-2d9c-4bbe-bf50-0af81f334281",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ea3e45-53e0-46ce-8fe3-c68741b6bc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c0babc-f25b-4b47-bd1f-7d1cf67fcc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d5abf9-7cd7-4632-bb01-83c24ee1616f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322339bb-f8d4-46bf-94b1-54efdb30f83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04376517-b8b2-4055-b839-90478f7d9600",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22615885-6a58-4a24-9554-798e59ed8c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c510984a-3aec-4b4f-b75a-6f88e5aaac86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28709a28-a408-490f-91b7-c0a9390339c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c79d0fa-04d8-4a5f-8938-eed03aabc95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fc0a4e-4fc0-4918-b6a9-c5da720b046b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2960a418-f679-4f1a-8bf5-b208940254c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fcdaf8a-02de-4100-879b-b0ff3c933259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2e6fc0-0c03-4fe7-9186-7a04cb2185ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38ad26c5-f9f0-4bbc-bfcd-11dd5ad688be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119a9d30-2669-40fb-a73b-b422c294b1e4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60337f10-8aa4-4417-b41f-eaa8f7f79cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0253b43a-bc95-49c9-8ff2-3990a8768cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15337a43-5a7b-44de-be5a-035e06b2c9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e99f450-64c0-4ff4-a279-9db07175f117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd3366a-f7a2-4ca1-899f-3784fd79a17d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78800832-f758-405e-88cf-0d8fd66ba8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d48183-54a2-49ea-8c0d-d8233b352a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bd28df-b9a5-4c9b-9fe6-fdb72b4c56da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c016ac71-0ef8-4dfd-ba32-2fa171f8f6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d19c4b8-3202-4692-96a4-3194b6fbf0c9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41867580-0d55-4cfb-aa3d-db9bce7a88a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55871b9-764b-4cc3-9c1a-c2b41e456410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b19fbe1-3a9a-453a-b8ec-880acfcb9132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1292e945-c4d5-4df5-b5d6-ab453e4b3232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f184fe-5e08-4b53-9ba0-4714c106fef3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de24d44-c690-4f00-9bfa-7b3473caab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1177109-2d38-47a5-8a61-8676bddea452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa10128d-f8fd-4567-91a6-63f5ca66e1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0cf253-0cb8-48f4-828c-307bda69de23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2a68be-3c15-4158-83fb-e90e1ed39a90",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ba138d-e586-4796-9f51-163563caf588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379cdc15-bf27-4d7b-869a-f2cb73499c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31666e3d-6131-4169-b688-d45cb3eaba40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "029288c0-95d8-4f58-98d9-e17499c9afb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bc2e79-a03c-443e-9a63-7ce7c230b5bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7fe0dd-0c93-4632-a600-428e474cf854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57499fa-19ec-40d4-9001-2ffad005fb9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4264a2d4-6706-4e42-9268-66c3354abde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3045cc49-27d5-41b2-a1ad-dcb5b032f322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3af6e0-2016-4a38-b6b4-575194dec2da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e11dc13-8005-45b7-8441-bf5702a37687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b1d676-6e9f-442c-9916-6d0e84427397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619ec44e-db5d-4f3d-9519-80699873a92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf673c4-efbe-4091-a8d5-d695c2f550fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb25682-31e6-4dce-9f20-7606cb13d5dc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab54b44c-de7a-4450-96c9-2d76d33dbc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e9b0f8-351c-4bf3-9cd0-f21067e4a21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157ed921-8222-4af7-b6b2-ee581e47de19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2022e413-8c9a-4795-99bf-ac3a046b2449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea1d03a-1ed0-41fe-a336-9a212238f441",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba736a7-17a9-44a9-9a34-82eb52789779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c013a501-47dc-49c8-a5cc-6161b9a4a209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03409b0a-4c01-47e4-b159-d550d9a6bcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "652b0af3-d87d-436b-9672-171c1d9982af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bfb047-f317-4186-a903-e5986d3fa4de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc0ef9-ad17-409d-9fcb-11a14f9509e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22994ef1-d578-4a6d-abc4-e87df4b4b45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7722c3-caa2-452a-8c0a-6709fc763c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65563826-0ffa-469a-b429-60f2e92fb118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50594df3-fc50-428c-937b-2d9560809383",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a943359-a80b-4c6d-a7b1-811df1f21b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbaf20da-a874-4e75-8716-e5b31c28ded8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c92f1ee-55b1-4ed8-8f47-86a6de6f0931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "556a17c6-515d-4d50-8cec-45011640ee2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63981976-3f28-4efa-88b4-2f21aff5a4b3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733c8a74-589d-4b89-91ea-c98335899605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e952f202-cd55-4121-8d40-f6dfcee2d270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307d64e9-d869-4644-a537-651c23c368fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab9b291-8e14-4c4c-80d1-885cc862152f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdd564f-27e3-467e-a0f6-545968869c66",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebe7158-d640-414a-8ff3-cba82f1cd388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa53752-d6bc-49e7-83ce-227f4eed24d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c58523-9394-46e9-8a8a-64ba36cb45e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f208653b-6bd4-4c27-a617-649b1d16a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e56a39-df10-4675-b4ed-b456ab4c0f64",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19a8b46-6d58-4dcd-ae72-9b2529f14f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b57efa-70c0-40ae-8c67-4a4ed7f95b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866eda6f-8e67-42c2-a760-134ea8e8aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "455be8f8-41a4-4b0d-95be-7eaaaadca4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66dfa6e-4b05-434b-8908-e4deab407598",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5881db8a-357e-442b-9791-95e103cbc175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0793e68c-e032-4373-8fac-02068002bf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ad5d35-29ba-4fe2-bf25-bef3deaafa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "970d9835-b1c0-4b25-8514-b6e3bfeea00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daacea45-e18c-425e-88b1-d243348126bf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccebedb4-517d-4758-ad40-16eb77bce8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6961e5e-6751-42f8-8499-2b7d0970f252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d957f7e-8d34-419f-bc07-59497aead4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c14e11-5d34-462b-908b-d61b50af29b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e294759f-8a49-4e27-9e6a-7276e9cdc025",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65e302de-9670-41b5-b104-942b9516edc9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625c67fd-f69f-46c9-b09d-7a9d59e23382",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "022c910b-35a1-45df-9f37-31ebab498c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e7b106-334e-4af4-98d2-b77c7e70eaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b3d26ea-0f37-4d67-b522-aaac94ca5524"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "377b0683-f029-447c-84f0-54b3fe30d9d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8b03708-5104-4716-ae20-decb3f4869f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "12b08971-cda1-429b-9f53-c789b77293d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae371b1a-7d99-445a-9d31-5d75377694e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d5e3307-e280-4b13-a6b9-bd02705e7c47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1ddfc3f2-cf9a-45a6-9bc7-ccb5fef718bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f67aea87-9292-48af-b1fe-379d2da0a98e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b112ed8-3ea7-47f0-977d-edf40a009ccb"
            }
          }
        ]
      },
      {
        "id": "516f1cbc-fedb-4f35-b3be-c48ced84f1a6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b670d6f4-762f-4103-bc75-b6b2d11f1d22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2357a68f-221c-45a5-9f6c-e32f9ece7110",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66b76aa7-5573-4d1f-b060-efe7a20efc97",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7154f188-706a-4592-a8e5-6aa50cd4b0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d00cad-703a-4f76-9c2c-38d7a3bc35d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31eea5ea-301d-47aa-a53b-e0222fd03a67",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9cfd8d-f02c-4a4c-a584-476568594b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf63999-bbf3-420b-bd17-c5d5784321f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ff0146-8c10-446b-ad03-dac169258978",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8d8d24-7e88-4625-a899-3eda19467ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34f08b3-61cd-424f-893e-51818b6cdf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac34120-6559-4bfd-b805-7e3282757a6b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca133a69-2aea-4323-842f-3d49e3c4f46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1738b5-d7ee-4545-87cb-b59d330545cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3d0dbe-287f-4b74-b6cf-d779ee4b7e3e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9479ce46-4c19-49aa-b1ca-9099d35d0bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d32823-3583-441f-b0f5-0b38d0a3e218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706a4dd9-808a-49fe-b999-be50cd5c1d49",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dd56b4-2990-48c7-8fee-e46f80443922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a378f7bc-a96b-4887-bb2e-dac4805009eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839b3d4c-bdd3-4ef3-8d9a-f2fd265e1934",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f88299-a052-4002-84d7-397aa5ae8f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba1fffd-3479-4b2a-88ac-0b4e9257ab67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15ea46f-b30e-4bdd-a10e-e6e8b048b819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e337ee0c-1fae-4e67-a230-1157d4fbff17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb8a477-bf38-465c-a55d-0b15319e8e1c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82b77b6-935b-419d-b12e-83861b452a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3a35e0-2924-4aa2-83f2-fcdf2ec505cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf52b2b0-98fc-4cf3-a264-4503d2d35966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072f023d-50ff-4c08-bfe2-cc7624422775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014f3ccd-8c58-45bf-9c5f-ca03cef76add",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7929948-3821-4ff1-9206-555578d67063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa9bd23-b8e7-4382-8d1a-df4e6c3398fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb02728-6a94-4af2-ab04-476312e16232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361fb4cd-8ce4-486d-a390-a2ff434f80a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc39e43-381a-4c4a-b5d3-5c1103ea8f5f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51612f9e-8c8b-4c90-b970-bc2327847dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f916fad-70f0-4bf2-a768-f24c6b8245a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdd9859-e88a-4567-bc7d-93b73645cbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc5a7be2-9779-4214-a839-47d629586090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009699c8-55de-4a74-b9df-09cf432ccaa3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30da04c4-e127-455b-8716-5cd3ca9bd624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb90d9eb-95f0-4d13-b055-16f12f24f71e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc0c86e-7c3f-407d-9c30-b6aabd7f6a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddfaefd-8407-4102-b075-a2956bc91545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed82ed9-9402-41c9-8b10-d7e5878b492d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0214e472-c136-4b27-b1ed-eca472b5c884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcda447-7202-42a5-9ad0-a7cdcbd20de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cd7ef7-f8ac-43d1-8292-e407625f170e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32479de-cd6b-4c07-88ef-aad50c385526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a3234c-b473-4b92-bd5b-15e853b23c0c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d9a3d5-6eaa-42a1-8bdd-ce5e2becf638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2abe103f-26e0-4e9a-85aa-4916a3efa08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9393b1-5452-4d95-9cdd-a90c1051b1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9788c1da-4133-4c1a-bd9e-f006b4826edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b82844-10f8-4127-a5ba-c25df763a449",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4959e4c-1be7-4093-bf3c-9d9a4b62fac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ec2316-2d68-4ac5-bd63-f1d2ad9b63d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7ced5a-d40d-44b4-a68c-ab052610593f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67981bc3-0dfd-4de8-b641-d484480f1a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e469a045-e930-48f9-a06b-62645b3a519e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dc0d46-e462-4af0-86ca-d161576cda19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23799b8a-db47-43c9-acca-deb0544fd838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89300aec-cd6d-4c4e-9986-ab6e7825fb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875c98b3-6cd1-4fa1-8012-ece91ba061a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d310c228-1d9e-4af8-b03c-1c84fa52cf84",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977cb58e-58ea-4cab-a446-b80953ab9aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c67510-a3c2-4545-a227-dccb76528368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a7eba0-a389-4329-a000-888628be1ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53907c8-b5cf-45f8-9d9e-a220042ef9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7ebcb3-d1d1-49c9-872b-dbb269616477",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c708cf0-9558-458a-935e-b13c98953d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd98e47e-30ae-4f05-8db4-7d19179df8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0eb9f9-04e8-4f76-9dfa-7d0654ad9310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb7e91b-7e1e-4763-a12d-0ed4079af0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd16b2d3-ca1c-4783-9e02-d1e99f726dc5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747e605d-bba9-4ad5-83d6-fb09a691b0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1781587-9026-4a43-9092-3eeda582d7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b8b2d0-8160-4602-99b2-5f965b33c5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c2c7d3-2cba-4664-a6a5-353289ea549e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6f4f7b-2445-4909-b6e7-d9b9aecc1487",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae7df39-3abb-40c8-adfe-a8e1350ff436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352b0f3e-e3de-4e11-8c12-f3f1853e3bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a3aa19-a99f-4d37-9a0c-35c212de21b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe44ab23-17f1-445a-b815-966e3d681bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da38f49-4ca1-4635-9c7f-1d9778edf020",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f528349-ab76-4cd6-bd5b-57d9f3864fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0439bf9-6e65-421a-8376-48e498a31fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8271c334-6cb8-4c72-885d-a5bae3b65011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a4c1ec-a7eb-4446-9580-59e313477f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7a0c65-92fd-41f0-9210-764493c9945e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f1e971-d9c3-4e9e-8ed7-9809a9b7d9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8029c02-cc44-453d-824b-313ee5973b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15056012-9557-4e4a-b6d4-29072650e6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e9a88d-4490-4db0-9bdb-dd4fcefce147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1571995-d52f-4e10-b1fe-c22c5d9b8fd0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e81bad8-b1c7-4a4b-976a-87df07751fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b25a8a-782d-4bfc-a6b0-a78e16f4e717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a9ece6-8c13-417d-acf4-6e3df27845a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3b391f-bbe0-493e-b323-09a278a9aca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340a000b-5d3a-42bc-86ad-2a109877e6cd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c1b763-4d36-40da-8488-54007c258c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407657af-9ef8-4fdc-a601-9008fc395422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a33f88-6ed6-4eca-97c0-e78616466fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d1432d-f6bd-42d4-9496-b4f469b4d802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ddecd7-d37a-4dcd-9a36-75f176124c18",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0fcc96-4fac-451c-9806-3a85a6df2d61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba484208-37f7-448a-bc16-7c325c7713a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b988595-6f08-46e7-bfe7-5f83533a9468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fcde195-a22e-4ed2-9b40-8800c77ab174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c053807-4143-47a7-ac8b-afd6ee7c234a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c362bdf-6e87-4f4d-bd75-f8ba3add8a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d07b5b4-f817-4d64-bc8b-275c067da63a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec2a7fd-de3a-4df0-bf15-f963901418aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55d3903-ab3f-415b-87fb-310439bc1dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6071482-0875-4ca7-ab46-99cb046c4a01",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6609b56d-1895-4d7f-8c15-46fc85261274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aebb453e-dfa4-4663-a651-0faf2811cd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f5e306-45b4-4d2e-a0ff-944b05903e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10506e1-bc5d-4f6c-8e44-78b0c486639a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e8a991-6f4d-4937-96f3-4d3367b2e5bc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25739a26-6722-47ab-8d95-1b31878eb4e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c79f191-2e1d-4be4-ac32-2acc21c55db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c590f5-90c2-4bdb-a16e-bddeff9191d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a4acff-503b-438d-8a3a-db2570953d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2067908-3fc0-485f-9708-d056779d2028",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e6a492-50a1-421f-af42-bb0690671a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5462627-e0cb-4e74-b2fd-c207f052f5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b2f974-07c4-4641-9955-781e13ceb99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37c924f-2bee-48db-bd14-c5a78a25d3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a881ec3-c79d-419c-b52a-b26d29f8b9f0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63346d40-ec79-4e40-bf6e-5d34cfdf42b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b434f74-a4fb-4eb3-9c75-82c2ca1dd3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bc4bd9-2a04-4b88-ba6a-e30fc862d929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69d8637-4e68-4653-a14d-374e962076ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759a6397-4aa6-4bce-8a85-3cbab292020f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbb0371-c20d-4804-8138-48ee74380382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca34e68a-768b-49f0-9668-8dc572b30f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730bf1b4-b83a-4c2c-8e2c-756a9fe073ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d820ac1a-27dc-4e50-95ff-10e746cd4399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1147dd7-1aab-44a9-9e76-cb523cb5f23d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4080b0-a2fe-41d4-91bc-b1837f8cc7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f36651-b756-42e4-ae4f-7b4d73975fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e341d64-4427-4024-ba21-b1c0bcce9d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f53de6-7439-4fa7-9759-6e49de42edbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae041d8-8a6e-40e3-9b6a-1c20bd997350",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377d69f6-1d36-45dc-9448-9cecbadc81a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd2b200-591c-46e0-ab75-99c0bae7add3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9726996-dc9f-455a-8702-ded4add6fd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdf34be-cd91-40c8-ab2f-8e85118218ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e292bb-2567-48a5-afa1-bda9e672db58",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a416ada8-2d83-43dd-890c-6cdfd50a2bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b6f1e9-f93c-4395-b754-21360c578bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4117c07-1819-4d55-b185-1f3b1590d4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d76975-dcbd-4ea3-b9aa-d94562104dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b6714e-0055-4aeb-97c8-ffea8fbe27c0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be87466c-6445-46ec-9a44-7ab43ec4d550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2cec67-dd5a-4c43-b795-014bb09bac77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9c7d2a-d7c3-4dcb-98a1-19c4e5cefa01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c9cded-b44d-4611-97d1-10644da26320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f3f8b3-1247-4312-9e40-23113b3010e4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7334711-77fb-4119-a34c-0fd5948691e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cb72e4-4457-4678-9a4d-5e42e78153b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc6bcf2-df5d-4c28-b04b-06f6541dbf6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6fc0a4-cbb0-4a11-ab66-6301acf19eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966fb8e9-c499-458a-996e-5fd6e4a0a0ae",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a0c3b6-21ca-4d9c-bc7d-bb3c0f28bfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9ce773-890c-424b-bde4-f7e9210249ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67949f5-bf48-4bc2-aefa-7d49823840a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b65431-2194-47e6-b718-349b732360ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72c579c-8e89-48db-b2c6-2a16e975ac79",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0c2013-e6d7-498a-a1ca-7b2bc78a7e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2b48fd-4891-49ef-9e56-824dd3b9ae47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a014de0-3667-4ece-82b8-23c367fc241f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e2e82f-2696-4802-8dfe-8927918d7b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6073091a-e4b9-48d6-9717-87bcaa30ffe5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a7fa40-0066-4089-999a-40e0bc1d29a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a41e73-5594-4ad6-a6ec-1b5920b5522e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5675bfc2-1f53-4c39-82ea-84c1f4beace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67a849c-5309-47b9-aa3c-f293759093a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462e0372-1e95-4b66-bcf0-5adeeb02994c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7620d132-8fba-42c7-b4a5-929b70f75374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f642d656-ee67-461b-9e91-f27498f11fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0595f6-066d-4522-ab86-e5536daf87f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0caedd-f936-4328-809d-4185bc0d7284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc98d470-2a56-4c16-8fd9-236d0e82a2d9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71063ad-0264-493c-bf39-ec98db37e42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fe88f7-0fa7-4a27-a0a8-9639cfdfe56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2d4e70-429a-473b-b4e8-37cea9229ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c301f043-c246-41d7-a5cc-308b79b998f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf1dafe-fddb-47f3-8574-9eaceb01fe1f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3f9c93-bd62-4c49-b028-ada0d3836281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a433a8e6-393a-4987-9dbe-26c10ce806ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d560fa1-23d7-4723-b33d-931994e1f679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b6ad92-9839-4966-ac98-f48358e647d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665b3e6b-a144-4a84-9ec4-6197f3159b8d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a09f199-3ae6-4113-8f03-6af5065be0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669afc07-027f-4d3e-bae7-afebeebf2e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163405e3-f95c-402d-ab8d-ca99ffdbed6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b054485-c7b9-48b7-a38a-b43005d1e119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c8d608-c00a-4dd8-89a1-301a6b4d26b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781b4ff5-fc87-46ad-8981-46a34ba91ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4701d06b-4306-4dfd-ad07-8f56a747cbb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8099e604-f82e-4a7b-8f20-824efaeea34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fd6dd4-ff2a-4081-9fbb-cd751ab5d3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1b4eaa-6038-45eb-a6b3-63c0bf6e957b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b88300-9c06-4922-8b44-7b7f12095685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d319180-6024-461c-b08a-28ebc797b112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e45c19-94b5-4109-8147-db61531628ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9fa1a6-faa7-4662-83e5-5e8d18da7352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fc9345-6507-42fe-8d66-f58cb45b4566",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf787d-991f-45fc-9413-b2248ebe1c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018a15bd-fc3f-489d-b694-381baffa1520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9f771a-482b-46d2-b121-880eba4303b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917f8d69-eb36-4cfa-ba01-7cd95a8556ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998987cd-e004-48aa-8ba3-ae32e2171764",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61ee79b-90ef-497c-b3d6-90b1d30b14b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa71277-6b12-40f9-9aa7-35de4074d042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc059754-1972-42b3-a9c2-0a0b887e48f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d53e317-2869-499e-bf47-872c7e2d6d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afade1eb-be1a-4445-b285-109b4b6e8d60",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e992a1e-ee55-4798-a25d-0d6d3a179a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9724f29a-d23e-4a81-9360-05a02437b828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1c68c1-793c-459c-a977-dac4e84ee345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49535bf8-bd8c-4724-a037-96b03ea0ade9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25516ea3-8f8e-40b1-ab9d-49ff2f2992cf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11840eb-f959-48f7-b20b-1feb631af942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c762a327-ad16-45d6-bb36-337c22a69121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350c41fd-790f-452f-ab58-fcbb333e2624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2187457f-cf86-4c32-820b-ab77b1ed7c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae21c87f-00ec-4dcf-8a7d-1c20f90ea8d4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce54ba62-3993-4985-96df-eeb7717952c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a1f0a1-c25a-44bb-9961-8d0e84d33cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07880d6b-11f3-439b-a735-65cd92c9237f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0859fc2-3557-431c-82fc-6363052032c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0306bee-e0cb-461b-adb1-5987ace89ace",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e94102-a80b-4012-82b6-537763af559b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44810538-c63f-486e-a01d-522c96e661e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8156f79-a1e7-4624-bc99-1332afd551d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7268adf7-7868-40db-b8ad-0083df326f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a664f199-1cf1-4951-acfa-404f2056e603",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe1df05-0bc2-4702-8dca-5dde0eccb0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0165cc3-e55f-4042-aa04-d8dea0cb678e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c74e34-24c9-4b8e-8600-070bc06d6ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780b779a-014a-4a9d-bf1f-109a5764a6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c690e623-0f8f-4032-87ec-607478a6469c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f110d0-4972-49cd-b402-e2e08cbe431d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a1e349-aada-4c2a-a3bf-4f5ad43ea1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd4f8c2-922a-47ef-a3b9-0dc07930edfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b260e3ce-9586-4504-a8b2-336112676c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d481a94-e8fa-4311-bbf9-fe147e9b131c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8812de-4f48-48da-aa8c-a07a49a6e525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd13c13d-5cc8-420b-9199-bea258f98ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da40a0b-bf5b-4fb9-bd56-8d0e05da2385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754206eb-e903-4f1a-8f9f-9591e08bf38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f82d8fa-f8fc-42e6-ac63-5779cda33baa",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75df1322-ab24-4a17-8df2-323e79af04ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f47893f6-6d1f-4b11-8dcc-ef6ebc78434d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e9f21-8340-4284-bd6a-40f15ccf1b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf97a46-fef3-4ec2-9a06-ce84780c0232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00469166-f6cd-4399-bd6d-6dae4dcd76f8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7629826-6cdf-4a55-82f3-cbbb3728b177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f2e0b5-c937-422b-9209-3de215794adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9b377e-27f6-4bb2-943b-e01b561a6527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4db2f8-3924-478b-aa69-b797fdfc46f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7e11ef-bf32-4805-88bd-c74178d51470",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25234b83-b3c6-495d-92d7-99d47ab6a0d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42dbb6e-eee1-4583-b3e8-eaf634b9b2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde3f67-dec0-4af6-8396-30ec97fefefd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad717a4f-5eaf-47af-ac28-37bb5745663f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac612c04-adb8-4574-a77c-87f2448a777a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47542606-9de9-4644-985b-e6928f0948e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638c8122-83b3-4418-8087-7428a4064e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8647a450-0ea4-48b5-a900-3c2df41a5adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8f15e5-8ad1-46ef-bf9a-ed5614ba30de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a4f42b-74d4-443f-8b80-8d01d13f24a0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c053012-61fd-4278-bb92-f1a158aad72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c095127-437a-4357-ba4f-312e56feb52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d6579c-96c0-4b03-af00-822a046dc680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afcb415-0a10-4f30-b068-3461d96a5616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60260f24-4570-44fd-8b2e-26c5ea03a905",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed5bf4e-4c20-46d3-a5db-d8df2f2efb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb6f922-e5ea-4cde-8af2-7ef8d8f63d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2508d3-5336-4695-b2d0-f8c774991b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06cd089-b84c-405f-a5b6-df3be8574582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4e3bae-df4b-46c3-9b6d-ec386cd34e37",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2037e37-0a82-4fd3-a3d9-8211318fdcce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d0beab-f4d2-44f5-a81e-247a4cfc17a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eed16f-7593-4ac3-8014-59810e9b4bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bd13d6-5622-4c5a-8c32-817409144002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7cafe2-7fbb-42e3-a048-86c4fb1147c4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38317e4-589d-4650-b49c-f5259bb84557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4831ee2-196e-4ec0-a95c-9f69e34038e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705b3ef9-338f-428b-b8d1-f90aec2de924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4393881f-91dd-4daa-be2f-ef7236acab65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf1196d-085d-443e-9e41-1f8fd87e8b77",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f4b5b2-c28d-491a-af43-341c8ff0e251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5943cf1-5833-47f2-a377-c145876c463a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0fda3-6ba2-4ace-bf04-6dfbe40f64bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd1255f-b02a-4096-9612-f73ff9604f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b774c864-910b-4455-b6af-22a5a78faea4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4f6aef-3d78-4ac2-bb21-a2f7796c0b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676e131d-b0e9-4573-8646-26a2e4df4fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c8a598-d362-4013-89ff-14b8d87b9345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7ff82e-c8a6-4bc5-aff6-873d69c2df27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9459cb1-c9b1-4483-8d46-1bc7b6a220fe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e9f12e-18b2-447c-89b5-d9235df73040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d5f7ed-ca5a-4f32-bb69-0bde140135d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201bd93a-309b-4d00-bf4c-b3d8440c7742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e6f018-9cf3-4447-89a6-67019870a0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9725cb27-d6cf-45fd-b138-5f4d6acfa784",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2f8d79-da59-49c5-a726-75e33ec1a9f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c64eabfe-a835-4e02-89b5-38c22120c44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdf3278-86e5-49ae-91d2-18f278eca759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab8ccd6-11a4-460f-bbf6-b5d1076f983b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c183764d-db20-4efe-ae0e-69bf50fe186b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b64520-a8ba-447a-92d4-c887bd98a9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f17ea47-91bc-40ec-8b60-229413d034d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a16a39f-06d1-4433-8c98-d49fccdb8426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451e11e5-9d40-4ead-aa65-c57407d2534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6121f8-852d-480f-8959-c533921642b7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b542f1be-5c42-45f0-b823-b92ee1a03432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59869f1d-f0ce-4a73-a64e-8c40c0aa3f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e00e19-8e40-4460-9d77-c4b5a260a766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ec8fa5-0b75-4121-bbbd-64f39481352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0f910d-f3d0-44fb-a5a6-fe04f4106e6b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0af1e4-8384-4037-bd7e-c36634f711fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d06bfc7-2540-48bf-bb0a-ac28bcb7205b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee81800f-8856-42fc-92f9-a6e27e311d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03f2942-2141-4b10-89a2-a54672837777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479a2782-eb4f-4995-8fb6-b2a1e7f1e2db",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf25482-d3bb-4940-8101-397a7d8516c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c93abc0-5580-4d56-86cf-1ffe6afe99c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8648087c-60a3-4314-9dfa-3e43f023324a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc41d1e0-89ed-4e13-b142-28cddd38d55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095929df-ab9e-4919-92c2-2681500b4e18",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e11b010-b76e-4221-975e-8cc6312df180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4304e663-f231-4083-ac61-52002cd52def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761029a0-dcc2-4ee0-9c65-3741de8e31f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c12cc1b-6299-4626-b474-58400f0498f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c0146f-5948-462e-9a9f-6299f32439f5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547dc61f-43fe-4363-b221-d40bc9dbea23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb60d90-d98c-471a-b50e-0e03511d3d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e723d1e-3d7d-4dc0-b985-b26319167c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40340f2-75f9-4b8c-bce2-bfc0cf14d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4faa3a-2052-4b4f-8103-ca5c78b4bbf2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c2bd38-c041-4450-9948-84396e35822f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b8b854-40e4-43c4-89db-5aa603ced04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32c20f8-1e82-4436-bc5e-fc5efb63ab96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77911b15-cb4e-451e-82d4-663f46fa2456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488e301d-db72-4c6b-8b5f-0638202fac29",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaad258-7778-4d1b-afa8-5130404b8b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1428e08d-e32d-442f-aa7b-279c940c0d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1cf09f-941c-44bc-985d-62043666b563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7b8a13-cdb0-42f4-9993-0f2c4407a473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162bfa0b-086b-4c6c-bb33-b7ed944fe9d6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ae7622-fe05-44bf-b015-a3ea0a17cd78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c76a1abe-9220-4401-b48e-d7a8de46bcf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "811db059-feef-4a61-a19d-79a32f6c750f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6fb838-23a0-469d-9b48-8b713e4fa89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba28dc84-7e5d-412b-9e71-f97a3be3e18b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b0161e-c45a-4c2f-998b-ad9c488ad16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91887106-c6dd-4c45-88f1-446bb3179fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb62ee7-a7c4-449e-8217-8e427846b319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae2b5df-6820-45cf-b3da-7eba10ba5086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9df038-cc9b-4a1d-8e09-68620323dd59",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a84724-4e4d-4398-a7df-7ce8319463a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ebae86a-e80f-43c8-853f-51663fa4432a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd06671-4c38-480e-827c-59b67156a363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8580c769-72ef-47fc-addc-45a0d7a82ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f01ecd-36ec-4821-b3f1-0fc4d1dd41c6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff9c553-b457-448b-84cd-0de410fac0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71424cd8-536c-4652-8e41-c33533a7b11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b49e943-2168-4e04-ae85-9536605c6600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caae9a44-4be3-4672-93fd-e8eb608f753a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfa495a-2f91-4444-b9d2-c845474496a9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcdaa01-119d-4403-baa1-916db9edd34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c45bdf6-f9d7-45aa-b5cd-e4f2067567c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0169d27d-4cf2-43de-b0e8-7efde1ae80d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f633b9-7da4-47d2-84ed-703109439856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22244d35-5584-489c-9d88-61c092488aa2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ed0d7f-0093-4a24-aa32-6055efe88679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4717b2-f70e-40b8-8261-7e01f7527942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce28b3d-6f1d-447f-bbd2-4b453fa48cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a353ed53-e094-450a-81fc-0682e86de243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ce7f8a-69b6-41a6-8784-80fe85459e95",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc182ab-1732-4712-a76e-4200b4df5ed9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2feaed-bd6d-4739-a3a6-0a8d3a691234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e395d4f-fcb6-4f80-9d00-40448562fc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e4816f-c597-4dd9-ad7a-c379290a359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37438a7b-7528-48a4-954a-cc654ff7af34",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cabea3-7ddc-41ca-9101-cc5f89b6f415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b56410-fd94-4c84-81e3-3869d09d3706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9746cce9-140f-4510-a0d6-6e12e8d56b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f467782-a1e1-44ca-9040-ee786545d8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579699b9-45a0-43d5-985f-c2cedacad113",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107dc5ac-a1ce-45b9-8460-d44837debef6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b0b4ae4-277b-4ad7-a0ec-78df285984b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7a68b9-0f37-4103-aad7-9cc8f4aa0b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7188dd2d-1a8b-4d78-9bbe-746af8ba819a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c6547a-66e4-4efc-bcba-b2eb99a76bc6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3496beb2-0d3c-42a6-b360-83208b4cdc70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f2697c1-0a8c-462c-a3c0-005ab82af1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0ffd22-cf98-4041-8d02-308ba74227f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9b78af-8090-4ffd-87b4-d730482b1ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34995a7b-e6b1-44cd-b477-514ad3f64cf9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9c45b0-a83c-4157-b36a-ce090a4c0776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d67af90c-bbc9-4e64-9500-cc605e5d644f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fd1b46-6a8e-4b59-b204-2f715330ce57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4060bf2-a81b-4d96-9b63-36d1a30d5329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20b61a6-8eb1-4c9e-93a8-dce5fe22004b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b2cf56-37d4-42ec-b79c-b040017cd043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "325e1f33-2b68-44fa-a5a5-dac3d78604be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07084b09-d2b3-46bc-bff3-c17da07c33ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170ed745-9232-4953-84e8-22590f23eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc9290e-a922-4e29-a7d5-023bce270a02",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f285265-33e5-421e-922d-462bff9b4968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "316995b0-0a6f-4ec5-8d9f-79ca6393433f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968757c7-2386-452b-9858-e0a107fabc47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a612e1-822e-4f10-997a-68eed417eaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2a2161-3e4b-48fe-817b-734a5386dc9e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ae84c0-ece0-439e-ba7f-672033b3141f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40747e2-d394-4414-a54e-07c1abdecd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8fa7ca-2cb0-4c99-b290-6fc633f3082c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062cd6eb-a656-461c-a297-1f114f015fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f153273e-6778-48e9-8a42-9e71fc3f81f9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01f7e5c-b223-416d-80a4-c57e8e36c596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a5aed6-176c-434f-95b8-f2eb138ed25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161ab345-a3a6-46f7-96ea-23b1e2ec6164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5785dac1-7570-4af2-a1f0-97c8dac510c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab62a696-6a19-4598-a5ba-82295d2bb483",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad71db0-0146-480a-8e09-b45b25a28201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec8a5fab-9bad-4833-9f09-915505e17cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da40d44a-7c0b-4ce7-9f28-7c023df37e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdaa30c-2751-43bd-80ac-0f9e972092ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ae143e-4b6d-4cb3-8c05-ff2844ba570c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665fa8be-8674-4787-91b8-ce85b81ddc35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd7013b-5317-4d35-8aea-afb89e5741dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508fa354-c353-4c77-ac22-73004867bac3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4db02d8-ecfd-462a-b50b-5044c5bacef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9d96a8-ebb2-4048-a308-7bcf70eb94b9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156856e4-13fc-4f7e-82a1-31a527504c45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfa2ef6-4dde-414e-8d9d-674cea51fc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32ee303-ac46-4e7c-9ad7-c18ffcc06410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093316a5-516c-4da9-ada4-87b7670aae62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66355b29-6e0a-41c2-908b-c1c8f7635609",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9bd31b-b695-42a7-bcf0-5449df07e23b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca07883d-6499-44ae-a31c-d4c136383545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730efe91-9717-4b68-8e13-21c764baeb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74065fdd-7b8b-47a4-b510-0691937569c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7d5eb7-b7fe-4d4b-959f-904f80f4b9c3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77faf8ce-3372-4812-abb1-8a5c5442b84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d05e1da-c9d2-4be3-9aaf-024e77a9df9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab74a433-0d2d-4110-acef-687de4425df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3f76a3-1d6b-40dc-98ff-87025cef74a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e13d197-fa7f-4efe-9d19-4f8644b34463",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0e51e3-ed08-4fc6-ae2a-2df0ce6314f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f13f569-ef06-48a8-a7fa-48582cc06c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1015f8-0c07-489e-9baf-36bdd3fe73db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad60573-8e2c-4505-bcf3-7c4e893a7879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c27cf2b-9833-4df9-84cf-46a35664a82e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ff6de-ba51-4b3e-8c30-af14c5f1b310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024185c8-04d2-4ae2-bb81-cf55a60ce998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bac2a5-f2f5-4ef8-9ff5-b85061b6627f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a87e58-79de-4135-9ec0-af819665ae05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79489c15-3537-4fe9-b2d3-2e5e9b00a382",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e54311-ed05-47df-bcce-69f0ec73eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af21e2ff-8e1d-48ef-bbe9-6d96eafeafd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a24db3-8cb7-4f75-aa0c-bcd9d7502cb8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9371fbe7-5cd7-4002-9633-5e3eeca548b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ea4509-1e54-4d0f-af7a-ced7da046e84",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67b1d84-76f4-4ed2-b248-ee552f5310bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f814346-3ee7-402a-a792-bbda62a8c412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a14a273-35b5-45f9-8434-2f1864043fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8777ddab-04c7-4537-8912-e17c7366e161"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91d4ba4f-cd66-4426-b9a6-c179ab396378",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ded9aa1f-fd72-4244-a952-dde00134ff8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c91d5c4-fdb8-4413-a514-72e436e98589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab12d71a-f838-4cd1-9188-653179047f9f"
                    }
                  }
                ]
              },
              {
                "id": "dac1e6ab-3fb3-40dc-b9e3-566e58ba53ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f21f7de-05d3-4f07-a45e-d267b24cbb10",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b936d392-3b86-4607-9a4b-93f71aa8e3ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1f47fc72-f6dd-47c7-9bd8-177321e0966b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206146bd-71bf-46a2-8e0a-0e7fc7fe2246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b58ade68-f159-4920-80e8-a7a58ad498c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcf45c41-db53-415d-849c-9b03bd168588",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "857f56b1-1fac-42ec-9ecc-cb7edc532658"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7d27101-093f-4ce8-9213-2ffb56ebe8aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34248479-7134-4d3c-baef-7a0702b0e07c"
                    }
                  }
                ]
              },
              {
                "id": "9444c4e4-7fc0-411d-8132-4e8778fff535",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "65ce722d-4173-4d44-a653-ac97b5f8b2ca",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd9c79b-d1a8-4994-a421-c056c9a61303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "582624be-ca6c-4340-a267-5a48c92a719c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50121f7-30aa-4dbd-824d-aef20b11f4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437adc08-2a5f-418a-81df-48436c0f1c0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8fdb3892-5d94-4b92-9c7c-2ccf8413debf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40df8a7f-5d1f-4929-ab90-10ba09071f77",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70c32bfe-4b43-4f00-84e0-da233f239d3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b792c578-5bda-4355-a22b-0c7d1121c6aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aadfc69-60aa-4266-9377-25d9224a2333",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01057eaa-a35b-49c4-af94-3bbcf3fcdb6d"
                    }
                  }
                ]
              },
              {
                "id": "48261725-06a7-4be5-a1df-0d13891ac745",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e0d56d9-e226-4a6e-8d81-9cb17b36d0d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cded7f94-cc0c-42ff-812c-d9e7ed1ddd78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6911aa7-2802-4321-b178-4dcf4886b7d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aee36b0f-23d3-4d01-b4f9-a9737ab857c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70d3b0e1-e5b5-460d-97c2-78f6324d5a4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d396fa87-5ec1-40e8-b583-edc38ba0146c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36d2544b-2e22-4c20-8e6b-e85121dc0009",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24aeeb8a-ee91-44d2-b4bc-a1b895a5d251"
            }
          }
        ]
      },
      {
        "id": "8a315b1d-e3f4-4f58-b9c0-54a13977a00d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0f2a2e1e-3367-4ac1-80f2-0fcb7cb83574",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fb6656f-0426-4f9f-84ac-e72622020902",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e279738-11cb-40a0-a641-a0620e14592e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5984fff-71f2-4a37-ae1e-631067115ca1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1860a41-b122-4d35-b4fd-8a46725a3eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656090e-ef41-46a4-9ff8-81d2e93376fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a6499af-2fcd-43e5-9623-2b915288edb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca3ba1b8-3b3b-4e36-98a7-22c3567ce888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37dc3e65-7115-4c28-92de-df7e1f67d149"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff000ec1-df93-4c04-be13-04157c3e3450",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eeb19c84-ce3a-4e87-adff-3b232669cb21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd855feb-d6b5-4916-bab0-9f2cfcec0454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "331902f5-3c75-400d-8734-66966578991b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9fc5873-c335-4b49-9460-1ee605b655a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c4b0eb6-6efb-4d66-ac93-86b46fac48ce"
            }
          }
        ]
      },
      {
        "id": "4ade87ec-9407-467f-9725-430679562a55",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f2118e2b-5245-4e29-ba1b-a73b34ade46a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50306319-6da1-48c7-869c-103ccd41eb17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ca70b60-0490-47d1-b47d-33bc9faf92da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6def9887-720d-48db-b76c-7ab5ba25d207",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e0876e7-b631-40aa-88de-2b282a3fc87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398bac84-6543-405e-bdb3-35ddc0346f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7047679c-a3b0-409c-b09f-51f3fca55a78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2f9b1ed-2481-4279-8dee-a9a36e2d7ff4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "042a6264-8f4b-46e1-9602-66e8b5dc1438"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25e9666-bfd3-4826-9a5c-98c7cc2c0aa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21951941-cd51-4326-bc4d-f6b4b6cad666"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a9624b8-a81a-4ef2-a1d3-1c7c1fb849da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a4b6915b-44ed-48e7-8a10-df5c16bcb322"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "833c87fe-059f-463c-b07e-4fd8720bab8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb213afe-a467-43c6-81f5-f5af6f5730d3"
            }
          }
        ]
      },
      {
        "id": "701de8e9-92b6-4dc9-aa70-73d1b333d1e6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5c613803-7866-4e03-9512-1a02d0d9191f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19fe689c-c98e-4147-b9aa-e9963f9f4f53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1a9cdd4-6784-46f7-89ec-6eec829b353d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ce5d08-a4bf-4e15-9401-8df75b7ea841",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eaa2f0e-31d7-4e9a-a200-050281029ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e946a48b-eedf-46e5-9573-f0ccdc61dad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59ab85f9-5a3b-4ba8-b4fe-60864e9f95aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d686530-094a-4164-bad8-3b2c1fd4af54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98cce527-0c67-4a0d-ae56-57473ec0f60b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31fcd659-d664-4d4c-9d0d-254185ebed9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13ae1d08-fb8c-4d6d-abf1-cfdf99cf4541"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7dbfe45-f3bd-403f-bca5-8ad11d346614",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6cc09731-8569-4e17-ba38-bd11946b6fac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfaea3a1-1ab1-4fbb-854b-2e612fa953e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d997b0c-06ad-4746-a464-f98c4cbdd660"
            }
          }
        ]
      },
      {
        "id": "aaf58c48-0dc7-4a99-a14f-730c88e57a28",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf43051a-c5e2-4ea3-b02f-213a84d87e20",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20ce1510-2684-4bdc-9d84-44f96b0e7610",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c46b6b56-91c4-4ec8-88b9-07cfd0f0a5d4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fb6736c-2ea5-49a0-9076-c6c5aa096ea4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd3241b5-a68d-440c-a97b-24e5d51fcfa3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.62676056338027,
      "responseMin": 11,
      "responseMax": 1862,
      "responseSd": 265.9047565681409,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691973147981,
      "completed": 1691973191544
    },
    "executions": [
      {
        "id": "5ec99bf1-ab25-49c4-95c2-bd6597472a92",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8af21345-25f8-4e8d-aba1-9352e39eafc6",
          "httpRequestId": "80eba78c-b455-4fda-9968-4db911369de7"
        },
        "item": {
          "id": "5ec99bf1-ab25-49c4-95c2-bd6597472a92",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fee8c0b6-d85d-49fa-9c5e-d59f3072c243",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "46d3b8d1-3bb9-4b1c-afa3-128bf1c8bac2",
        "cursor": {
          "ref": "be7c2ef6-b134-4499-b191-fbb95344850c",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "59761de3-6604-4ef8-966d-4ac07eed8a7d"
        },
        "item": {
          "id": "46d3b8d1-3bb9-4b1c-afa3-128bf1c8bac2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f0ba904d-4a7e-4a72-878a-0549d4397a8b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "19930a33-5d7f-451c-b13b-13b57c0cdaa8",
        "cursor": {
          "ref": "aed9a0a3-a0b8-46d6-8c1d-ad2b83f809a4",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bf216d4d-aaf6-4a94-930b-23a0d25484a2"
        },
        "item": {
          "id": "19930a33-5d7f-451c-b13b-13b57c0cdaa8",
          "name": "did_json"
        },
        "response": {
          "id": "9492f78e-403d-4cf4-b0b5-1b2c3dcd8ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ab0dad-5feb-4567-bbd1-7edd5c66285b",
        "cursor": {
          "ref": "c401359c-8e55-47a7-b699-608a3bf4b12f",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7fca71c0-efd1-4ee8-9abe-6a212dd12171"
        },
        "item": {
          "id": "44ab0dad-5feb-4567-bbd1-7edd5c66285b",
          "name": "did:invalid"
        },
        "response": {
          "id": "80ed8059-306b-4aca-acdc-e15140bf76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ab0dad-5feb-4567-bbd1-7edd5c66285b",
        "cursor": {
          "ref": "c401359c-8e55-47a7-b699-608a3bf4b12f",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7fca71c0-efd1-4ee8-9abe-6a212dd12171"
        },
        "item": {
          "id": "44ab0dad-5feb-4567-bbd1-7edd5c66285b",
          "name": "did:invalid"
        },
        "response": {
          "id": "80ed8059-306b-4aca-acdc-e15140bf76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a14267-c4b3-4562-8e34-25c830040e2c",
        "cursor": {
          "ref": "3f8bc1cf-4561-4d36-9fae-a7b03f42dcc0",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f76d7406-aa02-45be-858b-1ad6fb2726b5"
        },
        "item": {
          "id": "38a14267-c4b3-4562-8e34-25c830040e2c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ba3fa3bc-5a22-4e24-b678-f81f011e7346",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff66d98-cfee-41a9-b028-b03ba3ae07ea",
        "cursor": {
          "ref": "3e7eb2fd-1df3-4e64-929a-ffa283ccdc9d",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1944f99d-d0e5-48cb-9043-407cd460214e"
        },
        "item": {
          "id": "dff66d98-cfee-41a9-b028-b03ba3ae07ea",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "75581d4d-93cf-4f44-b7ae-2126460d0c46",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74a33e-c17e-408a-b3a6-d476b26b51a6",
        "cursor": {
          "ref": "7c72997f-3447-423e-951b-199bd4f93188",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "71503826-5719-4e60-bcba-88853d588b9a"
        },
        "item": {
          "id": "da74a33e-c17e-408a-b3a6-d476b26b51a6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5e6a6263-3232-42c4-be1a-cc79a3d946da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d9226d-0d02-4e17-88a5-11006a98b61f",
        "cursor": {
          "ref": "5d931583-8fc9-49ff-87e6-13fb453d9c49",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e6ca31cf-3f9e-4faa-bf94-856b8cb74efb"
        },
        "item": {
          "id": "09d9226d-0d02-4e17-88a5-11006a98b61f",
          "name": "identifiers"
        },
        "response": {
          "id": "a1c8bbe7-1542-4c71-a987-90bf0baba23d",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce156c09-71ad-42cc-9509-4c459bd89021",
        "cursor": {
          "ref": "794fc87e-f515-4e21-810a-615d7c3369e1",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "18ce6dd9-d4db-494f-8614-7bb138b8d546"
        },
        "item": {
          "id": "ce156c09-71ad-42cc-9509-4c459bd89021",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0f44dc44-3f63-4869-be1a-52198a87c3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ac8426-cdc2-4e6b-935b-975cf7f497df",
        "cursor": {
          "ref": "f3cddbc1-5679-496c-a5af-614f5553b9cf",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8819f01e-d577-4503-b921-7b268e085c64"
        },
        "item": {
          "id": "17ac8426-cdc2-4e6b-935b-975cf7f497df",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "697a10e0-df37-439b-ae1a-47cdf7a7a858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f57f92-66cc-40ea-9c4b-2a5201f8162c",
        "cursor": {
          "ref": "8ccf7df7-4350-49ce-8dad-b296cd7b606a",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "beb9db83-7308-4382-a4ff-65dcee37922c"
        },
        "item": {
          "id": "15f57f92-66cc-40ea-9c4b-2a5201f8162c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7256b347-9d72-467f-9f6a-d3caf5a94132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a42144-1752-41db-9741-7909b8f5cd74",
        "cursor": {
          "ref": "230128af-48e7-412f-ba31-94bb2ca046bb",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d55cd73f-35c4-4f51-973e-90992d492aa8"
        },
        "item": {
          "id": "b7a42144-1752-41db-9741-7909b8f5cd74",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b931010e-fe80-47f9-bb60-fecbb7461faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86feef7b-3d45-4c8c-8daf-3b79024fe52e",
        "cursor": {
          "ref": "970e2055-441a-4d70-9587-8810a31a781a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7266c132-9696-4d8a-8873-efcdc8ba5c2b"
        },
        "item": {
          "id": "86feef7b-3d45-4c8c-8daf-3b79024fe52e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1df413d4-1113-4a36-be50-cb1a67c6acf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3141f404-0101-45b9-b22b-b6bd38d4b840",
        "cursor": {
          "ref": "ab55aeb9-dd42-4c2a-98f1-0a0e7ea0f501",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4aa9e593-6078-490b-8a5e-2c166f88d856"
        },
        "item": {
          "id": "3141f404-0101-45b9-b22b-b6bd38d4b840",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c5605852-de8d-4114-9232-87e57dc5ac10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206d5297-40a8-4a1f-a8e5-c9d49b50cd53",
        "cursor": {
          "ref": "1825c9d3-0e5f-447c-9a94-b5b00f1e960b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "846291ab-c9ee-4a55-90c3-e6e9516e5ca4"
        },
        "item": {
          "id": "206d5297-40a8-4a1f-a8e5-c9d49b50cd53",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4c84c666-a2b9-4e42-9965-9f2e5a7a89dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9f8b30-f71e-4653-b05b-4a1d914fa811",
        "cursor": {
          "ref": "aaa72cda-1751-44a1-9162-763067bb371e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "925a25cc-d0c0-4d14-a212-731a917e3681"
        },
        "item": {
          "id": "0a9f8b30-f71e-4653-b05b-4a1d914fa811",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1c4d2df2-6c30-48d7-b2ed-6cdcd582810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea708eee-70b4-4909-8edf-03fb47582a87",
        "cursor": {
          "ref": "fd1f03fe-818e-44cb-93e6-7afb2ba4529d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cf3ff100-1485-4c45-9518-a795404d613a"
        },
        "item": {
          "id": "ea708eee-70b4-4909-8edf-03fb47582a87",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "87ee50e4-aad1-4001-ae4c-fe410eb96f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27d880a-d993-40af-a25b-5dc741f10cae",
        "cursor": {
          "ref": "1610008f-fcb4-4dc8-8ae6-a1aa8469186b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2b461234-faa2-42fd-b8ea-df02332faff8"
        },
        "item": {
          "id": "f27d880a-d993-40af-a25b-5dc741f10cae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "09836882-e879-4a6a-9b2e-ff21d9caf6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbcbf45-b8cb-4434-aba0-da5ad5cad3fe",
        "cursor": {
          "ref": "39012827-87d0-4c75-a186-0ac347b858ef",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dae5ecf2-e875-492d-a6f7-713c4c69af27"
        },
        "item": {
          "id": "cdbcbf45-b8cb-4434-aba0-da5ad5cad3fe",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d1d5a4c7-d21b-41b2-a34a-0baf668aa4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aeaa2d2-1524-440a-8a44-a2721e7ea6ca",
        "cursor": {
          "ref": "6303ba8e-ad03-4dbd-abdb-4c41c71ad290",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c8444a3d-72ce-4729-85e1-5c524eb1ece5"
        },
        "item": {
          "id": "0aeaa2d2-1524-440a-8a44-a2721e7ea6ca",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67e45a8f-f60d-43e7-9444-6047895fd7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b5944b-44bd-41cf-9249-eb96599c4c7d",
        "cursor": {
          "ref": "d546c7c3-0eec-4b02-b3c5-05fa276952ab",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ae0fa308-bc9b-4af2-8c43-0958ba0ec5f6"
        },
        "item": {
          "id": "b2b5944b-44bd-41cf-9249-eb96599c4c7d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "96a3ed28-89f3-4a89-8949-18994f90824b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cff645-13ed-4fa4-a8b4-1c7f42968ee5",
        "cursor": {
          "ref": "ef65172f-65e6-40c9-b82e-5be681c3506a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0fe23e1f-3e1f-4565-8b66-660ab2f1aa86"
        },
        "item": {
          "id": "59cff645-13ed-4fa4-a8b4-1c7f42968ee5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "af4f2aa5-9168-4211-8a10-658fc9edc96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a569e9f2-1fd4-4149-a777-9b03b15572e6",
        "cursor": {
          "ref": "fbe9dc91-0e7e-4c4f-b212-d5ba0232cd0c",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0d53fc79-01fe-4297-8c62-1731a4d414a5"
        },
        "item": {
          "id": "a569e9f2-1fd4-4149-a777-9b03b15572e6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4dec464e-bb6a-4e70-a799-79b615c910ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed22b3ed-8d62-4d47-b73e-880393bf934f",
        "cursor": {
          "ref": "c93c8881-3aba-4e2e-bf67-39d28e093857",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "663c8758-019d-4b03-b51f-244a1c05f769"
        },
        "item": {
          "id": "ed22b3ed-8d62-4d47-b73e-880393bf934f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dfa94aa9-0c4d-45a5-af51-63aede280fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1be6a2-505a-41c4-a4e5-bcd5aac4ab56",
        "cursor": {
          "ref": "cd5f0554-85b5-4bec-84df-2e6e1e6bdba7",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d867093b-79ea-4a0c-9b22-058a0de5433e"
        },
        "item": {
          "id": "5c1be6a2-505a-41c4-a4e5-bcd5aac4ab56",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c640bb9f-c528-456b-a4ad-81ab003ad010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0725ace-d956-488b-afdf-1fba1c33e3a1",
        "cursor": {
          "ref": "257b2224-4e6e-4130-9d98-b79ac9e9df6e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a1550689-1d11-493d-bf74-3bff488a96fa"
        },
        "item": {
          "id": "f0725ace-d956-488b-afdf-1fba1c33e3a1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a028dbb-3ab1-4e20-ab7a-0eda4676161e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76cb96c-b438-4844-99b7-14e6a21280d1",
        "cursor": {
          "ref": "f0e34e27-7403-4a6b-a517-c25bcc4ef843",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "33b163ae-b2a8-41f0-b21b-7ad9f302e1fc"
        },
        "item": {
          "id": "b76cb96c-b438-4844-99b7-14e6a21280d1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6c783e0a-67b9-4ad6-8783-52509540c08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73898371-baa3-45da-91a0-a8364fb48b90",
        "cursor": {
          "ref": "252d80ff-e37d-4602-862d-2e1475cafa01",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "203b53d8-732a-44cc-8d17-5be5063f7025"
        },
        "item": {
          "id": "73898371-baa3-45da-91a0-a8364fb48b90",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b83e65cd-6bfd-4792-a52d-52739e092b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4eb946e-00bc-4fa2-997e-9c265bbe6ed9",
        "cursor": {
          "ref": "c9bb744a-f326-4ce5-bcd7-c032de68ac9d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "499ff075-64a2-4c2f-b2f4-a4ab6f4cc23a"
        },
        "item": {
          "id": "d4eb946e-00bc-4fa2-997e-9c265bbe6ed9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ac9da526-0735-43a8-902e-41e0e20d0365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79fc40a-3b4f-4442-8f4e-47ebe76c5270",
        "cursor": {
          "ref": "ad19bd82-145c-47a9-b891-7060f6cd8870",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4fb124d5-16fa-4a5a-a3c9-df3460c7e0bf"
        },
        "item": {
          "id": "e79fc40a-3b4f-4442-8f4e-47ebe76c5270",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "283ff837-792d-4bb0-8903-3b28e4ff0785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127d528a-ab62-4e54-833c-124017d971d2",
        "cursor": {
          "ref": "3aac7ccd-fea1-4593-9475-994cd11c2f6b",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e1107ea6-6a05-4c1b-8379-7a97b1af21b3"
        },
        "item": {
          "id": "127d528a-ab62-4e54-833c-124017d971d2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1c1373d0-6b0f-452c-8fec-d3233c70b7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74adaff3-98e4-4387-913e-2eec255e5b2e",
        "cursor": {
          "ref": "6d015d7b-e970-496d-8fc4-9e14c7822bfd",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8847cfdb-7781-4455-86c8-dd26abe79ce7"
        },
        "item": {
          "id": "74adaff3-98e4-4387-913e-2eec255e5b2e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a8b08a72-be50-4113-ab78-2abe3d920fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90291000-2bb3-4995-ab21-9d20405c22b9",
        "cursor": {
          "ref": "b57da40a-0293-41ab-a62b-25ec7ab633f5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e19e8dd4-7574-4678-865d-7cf34c6546a6"
        },
        "item": {
          "id": "90291000-2bb3-4995-ab21-9d20405c22b9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2c6b5df1-7533-47da-bd14-d36e8ff4193b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03f252b-835d-4ca2-9a20-60f71cc8d9aa",
        "cursor": {
          "ref": "8ef2091c-3def-4067-8ba0-6e071ba99574",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "959a7f93-94f8-4222-84e0-401661e963e0"
        },
        "item": {
          "id": "f03f252b-835d-4ca2-9a20-60f71cc8d9aa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "dd29d53f-36e9-4ad2-b5be-8c25998d6546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f5f432-fa22-49f4-a7ed-79eb5f3facd1",
        "cursor": {
          "ref": "18184b89-1be1-4831-bd15-0d8869eef44e",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "78813d3d-30e0-4d13-94ee-9b63954b8227"
        },
        "item": {
          "id": "75f5f432-fa22-49f4-a7ed-79eb5f3facd1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7b36ab73-4267-417e-8e76-8b751bdec7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9ad7d0-b2ad-4b67-a497-e53d4391ffae",
        "cursor": {
          "ref": "de1320de-97ca-44c1-9ca0-08c882029316",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f664e5ee-a4fa-4d41-9121-015cb43de31a"
        },
        "item": {
          "id": "af9ad7d0-b2ad-4b67-a497-e53d4391ffae",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "60c94efb-0c0a-4cb5-afa5-8e57bc887e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c67a56-51e6-4b87-929e-20c1e10e15fb",
        "cursor": {
          "ref": "b2e328a5-8583-4135-b3e6-d0f83010ef8f",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9925d47a-de38-4589-9f5e-393225ce60bf"
        },
        "item": {
          "id": "40c67a56-51e6-4b87-929e-20c1e10e15fb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "773fe19f-8a60-48aa-9e0a-2050fdd37682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ca4f3a-2dad-4ea4-9316-2c4b72a93a07",
        "cursor": {
          "ref": "6c9a4052-b2e6-47c8-a21f-98d9d422946d",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ee0cc570-1ec2-4c33-9dda-a473bbf7a6a5"
        },
        "item": {
          "id": "31ca4f3a-2dad-4ea4-9316-2c4b72a93a07",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aa8c8c0c-fc32-42c0-95ad-1d8be4b08568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc88a56d-03b7-446b-bec2-0b730eb4b4d7",
        "cursor": {
          "ref": "36a26f2e-8550-4f14-9c98-0b7f7204f1b5",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d15e827-103d-47df-8d36-08cc28533666"
        },
        "item": {
          "id": "cc88a56d-03b7-446b-bec2-0b730eb4b4d7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4420615f-2fc7-4fc6-becb-2804116f8b85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "42ab3663-5f6c-42c2-badf-63397ba4ac41",
        "cursor": {
          "ref": "0304cee9-afeb-4c0c-8ad8-75245a077f86",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae4d2fa9-5a17-4c7a-9059-461362ccb4f9"
        },
        "item": {
          "id": "42ab3663-5f6c-42c2-badf-63397ba4ac41",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3b6efa6b-b7ad-4a15-9de9-2db72c1d186d",
          "status": "Created",
          "code": 201,
          "responseTime": 1862,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "03386e42-8a43-4826-8e26-c40b152de211",
        "cursor": {
          "ref": "fedfbafb-bf44-4857-bded-4ea10ac30830",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ec24924a-5456-4f6b-a7af-95f045e43186"
        },
        "item": {
          "id": "03386e42-8a43-4826-8e26-c40b152de211",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cb0ef486-2719-4367-82d3-d86a6652155a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e29d4855-bc50-49a1-a028-014cbfc9fba6",
        "cursor": {
          "ref": "e5df2e02-281e-4b0e-ab30-2ba06a7baaf7",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "274de36a-f50c-4898-ae72-d1ff8dc2d409"
        },
        "item": {
          "id": "e29d4855-bc50-49a1-a028-014cbfc9fba6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "16c80477-e3f4-482c-bccf-55108b153466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880c18b0-a0bb-45a9-9528-35efbd871a4b",
        "cursor": {
          "ref": "becf651a-5e7f-44ee-93fa-6faea433d361",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d89a9d4d-a8c6-4c75-b00c-8f702884b321"
        },
        "item": {
          "id": "880c18b0-a0bb-45a9-9528-35efbd871a4b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "64563dec-52c5-4851-b7c3-f7a9efb4c6d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e170630c-3a5e-4ad6-8534-80241f89c9d4",
        "cursor": {
          "ref": "5cf17845-d4be-40a0-9846-9c6acb436ab8",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6f2ea5b-6c0d-4dd3-a410-21305398b5cf"
        },
        "item": {
          "id": "e170630c-3a5e-4ad6-8534-80241f89c9d4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "79a5c89b-910f-4b02-bf1f-d043faabe6f8",
          "status": "Created",
          "code": 201,
          "responseTime": 1537,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "19800a78-e94f-4653-be83-d4e93d34902b",
        "cursor": {
          "ref": "db1fb191-d812-4515-87a5-af601eb51174",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0e9d0f68-8f03-4194-aec9-640b65ee1084"
        },
        "item": {
          "id": "19800a78-e94f-4653-be83-d4e93d34902b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7a06c48c-d0a8-447e-b045-ec43cd422899",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 119,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e39e71ca-3c6a-44bb-a36a-c85d88d681d6",
        "cursor": {
          "ref": "3ce81a3b-1944-4055-9e8f-46664362d1c5",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e6f375fe-be27-43ed-8e37-b15e61fc4bb5"
        },
        "item": {
          "id": "e39e71ca-3c6a-44bb-a36a-c85d88d681d6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b14082b-ad07-4529-9ec8-de4a70d43fa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 850,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "76e73149-d960-44a4-8d3d-f45b14c53f27",
        "cursor": {
          "ref": "71013e41-913a-42ca-9b67-68d51b92a536",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bcaff5cb-41ff-414c-88b4-25e8b513f0b0"
        },
        "item": {
          "id": "76e73149-d960-44a4-8d3d-f45b14c53f27",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "987af60b-5bc5-4616-abf5-05c50f2650f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d0692e7f-e0af-4dd9-aaa0-ea34e5afc889",
        "cursor": {
          "ref": "ed45c89c-b913-4698-9f3e-33447d79f8e4",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ce8d51e2-5eaa-4635-9483-357acaa76c92"
        },
        "item": {
          "id": "d0692e7f-e0af-4dd9-aaa0-ea34e5afc889",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "da5895c6-ed45-4ad1-8034-41a4bd90f916",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e06f1d8b-eb40-4089-963e-eb02ab068eed",
        "cursor": {
          "ref": "860608c6-f3a2-4e22-975a-191e94a770a7",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "09b6506c-92b3-42d3-ae96-096d9d2571f4"
        },
        "item": {
          "id": "e06f1d8b-eb40-4089-963e-eb02ab068eed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fc7610be-0d2f-4dea-ac5e-673a886ecea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 120,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2932ef71-a300-49e0-b360-2681644c6806",
        "cursor": {
          "ref": "31f80926-21ed-4cce-9257-7c77b56768fa",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "74b3b8ef-20ee-40a1-b93e-803b0766adbb"
        },
        "item": {
          "id": "2932ef71-a300-49e0-b360-2681644c6806",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "48c5555d-427f-4acd-b88d-78ece34c6220",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "54dc4239-8b9a-4189-87df-04ed973b85d8",
        "cursor": {
          "ref": "146a88aa-740d-42b1-b7c0-b2584e6ddd19",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4769d630-85d3-46c2-be53-db0f925bf7c6"
        },
        "item": {
          "id": "54dc4239-8b9a-4189-87df-04ed973b85d8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0a6492fe-5fbe-44a5-820f-a89f8a3b9d07",
          "status": "Created",
          "code": 201,
          "responseTime": 992,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dd6cbdc1-1472-4c9e-91c8-3e6761b5cd5e",
        "cursor": {
          "ref": "1c1c61b5-4a52-46a2-a3b6-abd43af3787b",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "87cb6cc9-76b7-4cf2-8847-972157833367"
        },
        "item": {
          "id": "dd6cbdc1-1472-4c9e-91c8-3e6761b5cd5e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cab8e955-fd52-4d1b-8a93-6e23cd5cd1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f04409-94c4-4e3c-a71a-7417242120f6",
        "cursor": {
          "ref": "73d89548-0fc1-4117-854f-c33dfa20b9f9",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5be42e2e-8f9c-445f-b3f5-fd628e2af3ee"
        },
        "item": {
          "id": "e8f04409-94c4-4e3c-a71a-7417242120f6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "48b704af-eb59-4e5c-b811-27f853064123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf84cee-8b86-478c-9e26-3c723d0213f2",
        "cursor": {
          "ref": "55a1b242-7064-49d6-bbb2-e32d7503d5e3",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "98e68fdb-c741-4a9c-bb65-90c9a8bdd766"
        },
        "item": {
          "id": "8bf84cee-8b86-478c-9e26-3c723d0213f2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "edd2ee02-5abb-4f48-8440-a59356dd719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9ab890-956b-4dd1-913f-92c79593e1ed",
        "cursor": {
          "ref": "a2999085-3b40-43c3-a0d1-ef19862d6058",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fea1a5d8-faed-4e9a-a1c5-54782443ef5f"
        },
        "item": {
          "id": "2f9ab890-956b-4dd1-913f-92c79593e1ed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fd348ec3-80d4-4aab-8884-d2b2779142a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc84d604-c4c2-43a2-abeb-8f099d71b29f",
        "cursor": {
          "ref": "c5c7f329-d276-4a53-84ca-97e755bd7bd2",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "68b4a99e-0ec4-46ad-9b80-a0f66fc1fb9e"
        },
        "item": {
          "id": "cc84d604-c4c2-43a2-abeb-8f099d71b29f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9f594360-8c9c-472c-8b1b-e9eff4f58e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa3542b-c070-4db7-9559-37bc83594647",
        "cursor": {
          "ref": "046c2bfd-c64a-4fb4-8782-96123be2ca19",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7477d041-e3f4-4218-a676-e9ef39fbd884"
        },
        "item": {
          "id": "8fa3542b-c070-4db7-9559-37bc83594647",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "82a286ce-5e11-469f-9426-9adfa5cf1c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fee64a-5f77-46d6-85a7-e8b7f9185736",
        "cursor": {
          "ref": "1e58f93f-b9f8-4e2f-968f-19fcae16b98a",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7cd889ac-011e-4dd0-816a-11c5f848d24a"
        },
        "item": {
          "id": "f5fee64a-5f77-46d6-85a7-e8b7f9185736",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "23f43320-7409-425d-a6d2-e334b1093434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e29d4b9-1648-4fad-9dcf-9c83f869f467",
        "cursor": {
          "ref": "c1ddda08-b699-43db-96bc-33be50cf54cb",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2002f8c6-3d73-45f4-a305-649fcd35b5de"
        },
        "item": {
          "id": "6e29d4b9-1648-4fad-9dcf-9c83f869f467",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3a90cdf8-54b2-4302-827d-0aa7fbe882e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bb9799-4c79-4000-8d8a-476014b080ac",
        "cursor": {
          "ref": "b5eb2a86-84e3-4b41-9057-c94306a2b8c7",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cce8d1f2-663b-4a98-a0f5-ce2c26f6df1b"
        },
        "item": {
          "id": "54bb9799-4c79-4000-8d8a-476014b080ac",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d3a091a8-b4c3-4b4b-8ad3-af1dca44fa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa8ce6d-b763-44fe-befb-ae8642ca5221",
        "cursor": {
          "ref": "14124916-da0b-416d-9880-e3bb0a7c66ca",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8d9489d3-f1af-4e23-a58d-e2ac9237146f"
        },
        "item": {
          "id": "baa8ce6d-b763-44fe-befb-ae8642ca5221",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "43008a7d-b326-4eaf-a4b6-672314690ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb9dae7-deb2-408d-9be6-d34908e672ee",
        "cursor": {
          "ref": "c0114a0d-7e1b-4af5-a21e-238debccb6c5",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9b3623c3-b167-4a0e-854d-980d50d5edc7"
        },
        "item": {
          "id": "6cb9dae7-deb2-408d-9be6-d34908e672ee",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a1077a10-64fb-496e-9d5f-0fe8a6f3188e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4661def-c439-456a-a21c-8e6897e065f7",
        "cursor": {
          "ref": "5ca0b664-3362-4553-b7bd-b66caed5719c",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fcf957cc-c553-4cbf-aacb-a44865138c05"
        },
        "item": {
          "id": "c4661def-c439-456a-a21c-8e6897e065f7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "41d1399c-082d-4a82-b836-4cef19ecc69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5548a6fb-9be4-4d70-bae8-35954ea81506",
        "cursor": {
          "ref": "9def7d0a-14a8-4976-a889-9205b2c80beb",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0b13bf57-a063-46d9-a7af-903887b6709c"
        },
        "item": {
          "id": "5548a6fb-9be4-4d70-bae8-35954ea81506",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9ef256c4-9bbf-49d8-89d1-56b33a0d02e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc204b1-491b-47a9-9b2c-0b5b6b7b5bb2",
        "cursor": {
          "ref": "c5689c39-5925-4f6b-bb15-628c240b93e9",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5591024a-951b-46d7-afa6-5e0e02897ae7"
        },
        "item": {
          "id": "dbc204b1-491b-47a9-9b2c-0b5b6b7b5bb2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fdc76755-178b-4206-9152-4b936f90a668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 801,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "194e1473-413e-4f81-9f49-9a01a96fc964",
        "cursor": {
          "ref": "d2a9c97c-a549-4eea-add3-28ed824771b1",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "84ee9823-18f5-480f-a4ec-d0816fa381af"
        },
        "item": {
          "id": "194e1473-413e-4f81-9f49-9a01a96fc964",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c68f89f2-48ce-4119-9604-b3bbffa0ba09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 851,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a56014fe-2dbc-46ff-95c2-c65c836c1aec",
        "cursor": {
          "ref": "00af366b-be0b-499c-b1a4-78bdd699a969",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "23152bd5-13de-48be-bc90-b859523e23f4"
        },
        "item": {
          "id": "a56014fe-2dbc-46ff-95c2-c65c836c1aec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0e893ef3-96c1-45f6-a97b-9836b86b1d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e6468f15-c3a9-4411-b12c-f1f36551e43a",
        "cursor": {
          "ref": "47b9b11d-5cd2-473f-ad95-0a55a57f3468",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4ad37a19-440d-44f7-a547-53dcfb60fa63"
        },
        "item": {
          "id": "e6468f15-c3a9-4411-b12c-f1f36551e43a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "86b72dc7-34e5-40eb-bca4-48f6426711ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 866,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c31f5c38-716d-4f7e-90a5-6045b5a1435e",
        "cursor": {
          "ref": "f1e89a75-6cdd-4094-85b6-642d9b22e2e3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "811a937a-22f7-4e31-bfd1-e49bc4554f2b"
        },
        "item": {
          "id": "c31f5c38-716d-4f7e-90a5-6045b5a1435e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "598aa9ce-ddb1-4f66-a541-57d4de1c069f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3ef5ae93-caa6-4ca6-921d-6754ff82d02c",
        "cursor": {
          "ref": "e1f27ca3-1636-4989-9ebb-d8cbc520d6da",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4dedbd9e-1d22-4503-95e8-0ee84338083a"
        },
        "item": {
          "id": "3ef5ae93-caa6-4ca6-921d-6754ff82d02c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "44567913-c7d9-40a9-8520-879986e606c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1cce8c-6fe1-476e-b340-882a3b504396",
        "cursor": {
          "ref": "8d76fdce-f3a1-45a5-9b7a-5fd7067b0063",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "da3e1531-7703-4391-a1bc-9581f7be332f"
        },
        "item": {
          "id": "4e1cce8c-6fe1-476e-b340-882a3b504396",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4e5a16b6-78e3-48ef-800f-7490b340ef13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6af2de7-ff7b-467f-9052-a90f5a1847d5",
        "cursor": {
          "ref": "3b8a9ca4-4ccf-45cb-9fb2-6b564c0f0bf0",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fa17cdc8-755a-45cb-9d93-17b1a8e3cf87"
        },
        "item": {
          "id": "c6af2de7-ff7b-467f-9052-a90f5a1847d5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "682c977d-db65-49e1-a29b-6376852600df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d6db3a-9ab4-42fd-b557-b8aa33e02e5a",
        "cursor": {
          "ref": "13a7a1d1-c11f-4228-b80d-57fe06e790d5",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9d5ce52d-c341-4eb0-9ea0-7e0df1a00417"
        },
        "item": {
          "id": "c4d6db3a-9ab4-42fd-b557-b8aa33e02e5a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4ab63716-99e2-4ac4-a84b-3a1f5a00f6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143831c6-a066-4d7f-8864-a315f5e79bc6",
        "cursor": {
          "ref": "8845ae01-70ee-4942-81c4-a7d97ab2ffaf",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "05b0fa5b-43ca-41b1-9b91-c98263aa25cd"
        },
        "item": {
          "id": "143831c6-a066-4d7f-8864-a315f5e79bc6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "79f6ad7f-8070-4ada-bf0b-8780ef120b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2952d50-45e9-404b-bf45-8d4fccb29edc",
        "cursor": {
          "ref": "33dff0f3-5bc9-449e-bb1e-9593a3b184f9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4ccf23d6-08d3-4d37-b612-d6ebf493a96a"
        },
        "item": {
          "id": "d2952d50-45e9-404b-bf45-8d4fccb29edc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c2e3856b-609e-49ea-8089-a1d7ab7850c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6810b72-82cb-47fe-abc2-f952156fe8c0",
        "cursor": {
          "ref": "53349c0f-6fc5-499b-9119-efbc7eabe59c",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a2692b0e-00e5-467a-b12c-20e27c533b5f"
        },
        "item": {
          "id": "f6810b72-82cb-47fe-abc2-f952156fe8c0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fbcbd5aa-16d8-4e7c-a32b-ffc95034268e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7afa50-81cd-475f-8193-1b9e8ab063bb",
        "cursor": {
          "ref": "d9d4e9f7-6c2b-437a-b7ad-292b0c4d67f2",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "14ea1ecf-4b47-4ff9-a32a-bbe04a171734"
        },
        "item": {
          "id": "cf7afa50-81cd-475f-8193-1b9e8ab063bb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4bba7d00-b2b3-4725-bb2b-bd7848b66df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ad32d0-2c27-4f4c-b2c6-8d4d4ac12bf8",
        "cursor": {
          "ref": "5b3d7d9b-5940-4d01-98c2-bb903daab397",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bf97b8cd-73e9-4e13-ba2d-8657178a9ea2"
        },
        "item": {
          "id": "44ad32d0-2c27-4f4c-b2c6-8d4d4ac12bf8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "039dcf0d-3f65-4e03-a330-2fb74d18ed78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71886f91-d00d-4fb1-9a89-83f592b59349",
        "cursor": {
          "ref": "a4485d20-c498-45ec-85dc-a4a31cb0c2ee",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f60c9707-61c1-4a27-b0fd-23be7ccafa1d"
        },
        "item": {
          "id": "71886f91-d00d-4fb1-9a89-83f592b59349",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "be692b2f-1ba7-49c3-9ee7-0b7208719573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea305588-77d0-45bd-ba79-6ccd58f785a2",
        "cursor": {
          "ref": "7526afc9-5885-4d50-9932-b355f5b73ee7",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c86ec1e0-d3c3-49b2-987c-a6d5898c19b9"
        },
        "item": {
          "id": "ea305588-77d0-45bd-ba79-6ccd58f785a2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8c15c057-1568-4d2e-917f-274f39d6382a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5894586-0d18-47d9-bc2a-2eab2b5edf13",
        "cursor": {
          "ref": "36ec8757-9e6f-4cbf-b6d7-6caf700c9fcf",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "454d36e9-947e-480d-8606-2daf278d0ee0"
        },
        "item": {
          "id": "b5894586-0d18-47d9-bc2a-2eab2b5edf13",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "42f705fc-8fb6-4900-b500-4695b9ad7ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764db7cf-5b6a-4755-84ed-44a6d3a738cc",
        "cursor": {
          "ref": "8f8b5b12-55f7-477a-9806-ec24a4cd3ae5",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b0d5321f-b4d6-4e89-a886-55d31337885e"
        },
        "item": {
          "id": "764db7cf-5b6a-4755-84ed-44a6d3a738cc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "99522990-09bc-43bc-a7ad-0a29870c5452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4700ae15-51f1-4d25-833d-ee2bb85969ec",
        "cursor": {
          "ref": "b9b9a5d4-dfbf-497f-9d03-3e0f196a271f",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aa118ca2-bed8-4094-a9b3-c5f876e7fa31"
        },
        "item": {
          "id": "4700ae15-51f1-4d25-833d-ee2bb85969ec",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7844094d-4e13-4f4e-8a29-5f084e8be75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc2c382-b019-4508-bf4a-e8c983579b16",
        "cursor": {
          "ref": "d38ace14-fd55-484c-b0a2-86ebea949979",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d4f1e47c-5f56-4047-a63e-f1f33bfa5c85"
        },
        "item": {
          "id": "1bc2c382-b019-4508-bf4a-e8c983579b16",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7b071603-cb17-49c2-93fb-7bd483cf33cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666b29a8-aa2d-4fd3-b6e1-bf95735ea866",
        "cursor": {
          "ref": "0c5168f6-ff0f-46c2-9fee-ad22dfdd8721",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "175b253d-f841-4b1e-bf8b-a502a7d6073a"
        },
        "item": {
          "id": "666b29a8-aa2d-4fd3-b6e1-bf95735ea866",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d047cd27-29c8-48e4-95e1-00f9e0ca9dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d372fb6-a9d8-4450-a495-252e77d6c712",
        "cursor": {
          "ref": "5eb34729-e50a-4f2f-812a-cd3d00d4469f",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "457341cf-a64a-4c9d-8391-e7df0025693a"
        },
        "item": {
          "id": "5d372fb6-a9d8-4450-a495-252e77d6c712",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "48c4c67f-e89b-43eb-bf78-374abb08abdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70374afa-5819-4e38-afe2-caafda0fd3f8",
        "cursor": {
          "ref": "2addb92b-0c3c-41dc-9ab5-d12fcba1af51",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7adfbbb6-cebb-4947-9c59-81b75e0edb97"
        },
        "item": {
          "id": "70374afa-5819-4e38-afe2-caafda0fd3f8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5efb6fee-9934-4490-a753-4eac8194763c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bd09b4-08c2-418c-a4b1-beda4978fc8b",
        "cursor": {
          "ref": "41e4ccb0-5aa7-462d-b7db-24e854cd5b80",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a315931-daf3-4c0f-86b4-25cd383a661f"
        },
        "item": {
          "id": "54bd09b4-08c2-418c-a4b1-beda4978fc8b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4005431f-c915-48c0-b7a6-16a1a453f3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577c2b20-1237-4cd1-93d2-2c1de960cd01",
        "cursor": {
          "ref": "505300a4-e714-4305-a599-d0c53b50b12e",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe2af94e-e6d4-4dd3-be13-636d86b13510"
        },
        "item": {
          "id": "577c2b20-1237-4cd1-93d2-2c1de960cd01",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a753c92e-7cbb-4d57-9cac-b9f5543a18fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4561cc-bc26-4255-babe-077c36846df5",
        "cursor": {
          "ref": "cc69649f-a201-4723-8f88-1f41a7b6f32f",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a0b57535-067b-452f-b823-4f523856730a"
        },
        "item": {
          "id": "af4561cc-bc26-4255-babe-077c36846df5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b836c76b-6196-4c2b-9365-762949ab6206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6611b88-dfaa-4167-b241-e428ee4159cd",
        "cursor": {
          "ref": "04221e32-4f1a-4c1f-9958-9651d98aea52",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b54c9dfb-fac6-47a0-acd7-f90daf67f6c2"
        },
        "item": {
          "id": "b6611b88-dfaa-4167-b241-e428ee4159cd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dd2ac616-1ed4-48a1-9b95-e93769e8933d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc84cb8-ca35-4508-b82e-4d8435298b5a",
        "cursor": {
          "ref": "451e1b6b-962a-46db-82d5-733ae7a1045e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4998653e-b4a2-48dd-a75f-0aaee3621a31"
        },
        "item": {
          "id": "7dc84cb8-ca35-4508-b82e-4d8435298b5a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "add46668-dd16-48fe-b6d8-0cae86aefd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae9cc66-5570-4d4e-8b47-432cbb11eb92",
        "cursor": {
          "ref": "ca065ef2-b56f-45a0-957b-be516b068809",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5d377aa7-898c-46a0-81bb-dc96feb9c742"
        },
        "item": {
          "id": "cae9cc66-5570-4d4e-8b47-432cbb11eb92",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a0250674-5ae3-4216-8fed-929d3c10b1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502dd4df-5ee7-4ce1-965c-748ddaa400c8",
        "cursor": {
          "ref": "a8b86286-6357-4906-9870-9ccc875e4b2c",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "848d3b4c-33a8-4e03-aeff-d19236a73cd2"
        },
        "item": {
          "id": "502dd4df-5ee7-4ce1-965c-748ddaa400c8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6bdb1afe-110a-4518-94b6-e6e3684c625f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c45e58-72bb-4c28-9fdb-06b4eb7b4292",
        "cursor": {
          "ref": "eb395f0f-a1db-440c-abbb-f20697b16fc3",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fcd0eda4-9900-48b1-965e-d1e48909437d"
        },
        "item": {
          "id": "e1c45e58-72bb-4c28-9fdb-06b4eb7b4292",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f22847dc-4503-410c-aeb5-6f057d2777b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8c9a99-84a7-48a7-854d-b0b0e4ed7293",
        "cursor": {
          "ref": "97a5ad6d-ee80-415b-92ea-e574abe6233b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bea6c8a5-0c65-422c-841d-117efbfdca79"
        },
        "item": {
          "id": "9b8c9a99-84a7-48a7-854d-b0b0e4ed7293",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a4bec989-b807-40ff-8370-7af3d1d516e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68a84ab-b2f2-41cc-a07d-30ffa92ebe20",
        "cursor": {
          "ref": "66d521a4-b909-433d-8dfe-86b2551961a2",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "32dca69c-cea2-4513-9b36-4fa9a2fb3807"
        },
        "item": {
          "id": "e68a84ab-b2f2-41cc-a07d-30ffa92ebe20",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fe37e2ae-af18-45a6-a1e0-4bc638f568fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb8ce5b-c045-4966-ba35-9469291b3a6c",
        "cursor": {
          "ref": "ef22a0b1-68a5-4d1b-896f-3f7fa9dcc023",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b4152942-0197-41bd-a24e-e0e51d5539cd"
        },
        "item": {
          "id": "3fb8ce5b-c045-4966-ba35-9469291b3a6c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e187b8f3-3703-4236-bad5-0de4c77cea98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa6fde1-0bf6-4b43-8d65-135c18a64fd6",
        "cursor": {
          "ref": "bb61c258-dd40-4189-b662-fa56c5cca485",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "63558e26-644a-4eeb-a25e-55fb3e7237c2"
        },
        "item": {
          "id": "eaa6fde1-0bf6-4b43-8d65-135c18a64fd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "49244671-13b4-4cb7-8cf0-17908891c0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73a2742-1428-44b7-9057-e5edc077fa66",
        "cursor": {
          "ref": "a47543cc-0dc3-47d0-a650-6a50891f1e50",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9018efca-2408-4a23-b486-225852b475ce"
        },
        "item": {
          "id": "c73a2742-1428-44b7-9057-e5edc077fa66",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cd7b4181-e39b-4ff8-8b26-ea166faac300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8db81df-99c1-413e-b0da-6810e34c5ad2",
        "cursor": {
          "ref": "a0950877-e627-42a6-9540-946fe796af28",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9067e412-72ed-44fd-b78b-33ba990ac76a"
        },
        "item": {
          "id": "a8db81df-99c1-413e-b0da-6810e34c5ad2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8691faf6-df7f-4352-9480-22d814cdc58f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65898f0-d637-4c0c-be62-3e64cd2685bd",
        "cursor": {
          "ref": "a1b0105c-11fa-4f4d-8300-7481b2d6c58c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dee73c85-86c9-4039-b8be-78426ccfed2a"
        },
        "item": {
          "id": "e65898f0-d637-4c0c-be62-3e64cd2685bd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "59f19dd7-0a83-4a04-8aae-7a2a5a204ddc",
          "status": "Created",
          "code": 201,
          "responseTime": 1564,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb11b135-d147-4d13-84e1-1acd1d97e3e4",
        "cursor": {
          "ref": "48cbb7a8-bfde-4ae7-bd91-d0230dd23326",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9d4b4b2d-b80c-4f98-b253-ffd35b7108b3"
        },
        "item": {
          "id": "eb11b135-d147-4d13-84e1-1acd1d97e3e4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b576634c-c9e4-4c37-a218-7db98482404f",
          "status": "Created",
          "code": 201,
          "responseTime": 994,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5e0723-7692-4236-b277-124c5fda821f",
        "cursor": {
          "ref": "1ba17545-aacd-4fb7-9ed9-69d9bd2feac7",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3f6b0e6a-96a9-41a4-a004-1a67f9ee26ed"
        },
        "item": {
          "id": "eb5e0723-7692-4236-b277-124c5fda821f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b76e2269-0654-4529-a0b0-9b570ff30c1e",
          "status": "Created",
          "code": 201,
          "responseTime": 1022,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d43bf6-1162-4500-be95-17a74b8f47ae",
        "cursor": {
          "ref": "b3ae0ebd-ac4d-4f4e-b323-3a4e870fa5e4",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "53e5694f-4062-4e43-8290-d5ffb289f943"
        },
        "item": {
          "id": "c4d43bf6-1162-4500-be95-17a74b8f47ae",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1ab45d4-cc0c-41d2-bdb1-2a83a14ba3d8",
          "status": "Created",
          "code": 201,
          "responseTime": 1047,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1b355-af88-4c9f-893f-b1b18ee29043",
        "cursor": {
          "ref": "2b793a0e-4744-44df-86ab-8a0b2941366a",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d49b0d5b-fd21-4ee3-a671-eb73b4ebfb72"
        },
        "item": {
          "id": "54b1b355-af88-4c9f-893f-b1b18ee29043",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7aeed460-19a2-47c4-a124-f1cfa6e03d86",
          "status": "Created",
          "code": 201,
          "responseTime": 999,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1c00dd-f4a8-4c76-bf41-b50fd91a3aa5",
        "cursor": {
          "ref": "fd2a5b94-b7d8-409a-b989-0d82a0437002",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9fd823ac-cfa6-4fb6-8b6f-fbcc2c2fa784"
        },
        "item": {
          "id": "3c1c00dd-f4a8-4c76-bf41-b50fd91a3aa5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0481a326-7d02-4a8a-9635-bc058e16bd7e",
          "status": "Created",
          "code": 201,
          "responseTime": 1014,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c17279d-c35c-4fa6-b5ad-c29a051702ad",
        "cursor": {
          "ref": "fdcea913-2bdb-49bf-9f3c-99bf32b95546",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "694c0f82-f882-4cd5-a6b1-c855f49ffb11"
        },
        "item": {
          "id": "2c17279d-c35c-4fa6-b5ad-c29a051702ad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e512ec46-02a1-44c8-a380-93bec1315499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068eb613-c9d8-444e-ad4b-573752d2b485",
        "cursor": {
          "ref": "b18d21b5-b2bb-4bcc-896b-a8185156e9f7",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c97d82c5-db4d-466e-b9ab-03fc324a68a0"
        },
        "item": {
          "id": "068eb613-c9d8-444e-ad4b-573752d2b485",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b53bfa36-338a-453b-b612-7008ff893207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36255a9-36cd-456e-8c4f-15182d7de421",
        "cursor": {
          "ref": "d654bd0c-41f4-4f30-a25e-14050569b223",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bf015adf-3ab0-45f1-b567-3a864ee5f3cb"
        },
        "item": {
          "id": "a36255a9-36cd-456e-8c4f-15182d7de421",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a79c0ef3-771a-47fb-ba33-7ba4a3a6c864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078f1063-a453-4710-bdf1-099b6e880a25",
        "cursor": {
          "ref": "49631e40-e00e-4d25-ba3c-c3b19aea9026",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c035633a-56f7-47b1-baf0-891b0498034e"
        },
        "item": {
          "id": "078f1063-a453-4710-bdf1-099b6e880a25",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a69c569c-2dab-4968-85fc-bd31ce897f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78b79b5-24ef-48f3-be61-c80779d7e885",
        "cursor": {
          "ref": "12a28a2e-0502-4055-8893-10eef53f089b",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a3942609-1ff5-4193-a718-33783825bb19"
        },
        "item": {
          "id": "f78b79b5-24ef-48f3-be61-c80779d7e885",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "185cc588-b29b-4d72-a154-379db8936a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95f2721-ddbf-422f-8b57-a8fbb0c0a6bb",
        "cursor": {
          "ref": "54c19724-0d97-4c9f-9c9b-a51e39af983a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b52c0e0d-700b-4d58-b98b-042630e088fa"
        },
        "item": {
          "id": "a95f2721-ddbf-422f-8b57-a8fbb0c0a6bb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3075ad16-9d89-4e20-a39b-15d0b6f34e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19066f8-467e-44e9-aa74-a10085ccf712",
        "cursor": {
          "ref": "40a2b104-f871-4a00-9ac4-b83b14e3b9f0",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c43e8159-0086-4922-8e80-d55fb2c6c8fb"
        },
        "item": {
          "id": "e19066f8-467e-44e9-aa74-a10085ccf712",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e8956ff3-0d8a-4d54-a193-8bf73f873699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c82458e-7d74-4cdb-981b-d41e2440dde5",
        "cursor": {
          "ref": "c543445a-b38d-4252-a681-b6b1e1f54454",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ced7ed6b-304b-404c-8b96-3c9102b47adb"
        },
        "item": {
          "id": "2c82458e-7d74-4cdb-981b-d41e2440dde5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "059e67b1-f51d-4365-bfa8-1a9175064f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3788edaf-1d94-4130-8daf-93b419f2afe7",
        "cursor": {
          "ref": "b580eb84-ee16-4167-8c53-1fc51befd850",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "97d19369-3c56-400f-8514-1a3e3c8084d8"
        },
        "item": {
          "id": "3788edaf-1d94-4130-8daf-93b419f2afe7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6f33f35b-02fd-48e6-abb0-57116f7a2b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f232e8-a4d2-4c43-8892-2b595fa229fd",
        "cursor": {
          "ref": "1bba2a7f-ab03-4d3d-bd2b-30c4491ae98f",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9ef39be8-d9ea-4a5d-92db-686136ad19c8"
        },
        "item": {
          "id": "26f232e8-a4d2-4c43-8892-2b595fa229fd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e6abb75a-caff-4378-9d7d-68783efcda6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ae679b-2dc0-4ace-b5d8-4d1913f1a103",
        "cursor": {
          "ref": "2126436b-cdad-47d3-a002-43493dad1d69",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "34ff609f-8341-4a47-a7dd-086afbed01a6"
        },
        "item": {
          "id": "58ae679b-2dc0-4ace-b5d8-4d1913f1a103",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3ef5c9fd-542f-44c8-a3c9-11d3935c3eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaddb9d2-3ef1-44b8-974b-2e844b667a18",
        "cursor": {
          "ref": "c2f0f6f9-099c-4aa8-81c5-d4a49c184d26",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2f08c2b1-d385-4d66-bb8a-a7dca1b427c9"
        },
        "item": {
          "id": "eaddb9d2-3ef1-44b8-974b-2e844b667a18",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "51e474f3-ca9d-40d6-8c98-0025c1060f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3931d28f-6764-439a-8c02-3e0321700c60",
        "cursor": {
          "ref": "806fbe07-04c7-4af3-9902-bd9e08bc8034",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "532f6b3d-f4c5-404a-9f66-fa5fb93d80ef"
        },
        "item": {
          "id": "3931d28f-6764-439a-8c02-3e0321700c60",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "33f590b1-b0c9-4b47-9a3e-7f2bf30edded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eb8bcf-bc56-46cf-949d-96e075b4d70e",
        "cursor": {
          "ref": "c23c18ff-40aa-4318-925d-5e7d3b23364a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "034c92fb-caf5-4291-a0df-c64e586db66d"
        },
        "item": {
          "id": "69eb8bcf-bc56-46cf-949d-96e075b4d70e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bf7a41c2-fc45-4f79-8a09-52ce27b7b6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefb3570-36d0-4125-9146-0d394446d9c2",
        "cursor": {
          "ref": "27ceed8f-2a4f-4ea6-9191-0f9f3e0a3622",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bd3f126f-56ad-4717-9574-64d492aafbb5"
        },
        "item": {
          "id": "fefb3570-36d0-4125-9146-0d394446d9c2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "468a3c9d-a6b1-43c7-9b70-698d6bbb6bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43449f77-9d9d-4dc1-9233-8a26ae21a1c8",
        "cursor": {
          "ref": "c9f8ddbc-a82d-4e64-ba5d-03328c190a42",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "822df6b0-fa7a-4860-b755-a4b95c07898a"
        },
        "item": {
          "id": "43449f77-9d9d-4dc1-9233-8a26ae21a1c8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f229e809-6ae5-4e8e-a1dd-05f1e402a326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a414aac-fc09-494e-b8df-45900c0bf1b9",
        "cursor": {
          "ref": "8646ae46-0d04-4fbb-bf50-656493e36c18",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bc152669-1bd4-4bc1-9591-6cbe572997b7"
        },
        "item": {
          "id": "2a414aac-fc09-494e-b8df-45900c0bf1b9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5506cdfc-0899-4caf-a4c5-3e5330a87b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510374eb-8e3e-44f7-8475-a353c35dff46",
        "cursor": {
          "ref": "79852627-a2da-4aa1-94cb-ac74cfb7cb05",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3c3d2823-cb0e-4def-a561-377abe4158df"
        },
        "item": {
          "id": "510374eb-8e3e-44f7-8475-a353c35dff46",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32e60f10-a9ad-4a9f-9a65-b30ee5203c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf28051-5fde-4299-a7c9-901156a6fa07",
        "cursor": {
          "ref": "433f4736-f685-4fa3-b89b-d84871c944f7",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f4d093c4-4539-49e2-9f9c-7097cc54020e"
        },
        "item": {
          "id": "ebf28051-5fde-4299-a7c9-901156a6fa07",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "06b2370e-e8ef-40d8-9785-cb6f2ced5148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8041bf61-8002-469b-a7bd-8c69d8f6b04e",
        "cursor": {
          "ref": "0dc294f8-d51f-453e-92a9-b0a429c15408",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8a577b66-d404-4ad0-a610-993e64471c38"
        },
        "item": {
          "id": "8041bf61-8002-469b-a7bd-8c69d8f6b04e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2f47362c-8781-439c-8358-42ac837d8708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539b809e-dd0e-4eb3-81dd-87326fa29428",
        "cursor": {
          "ref": "ee896d8c-2948-482f-9ebe-6ab57a161793",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e2b151f6-2a15-42ff-8f1c-52c7cf8bd619"
        },
        "item": {
          "id": "539b809e-dd0e-4eb3-81dd-87326fa29428",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7a329156-8728-48f3-aa39-46460ae0d890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4d0f0-f39e-4df5-b493-669f41274a9f",
        "cursor": {
          "ref": "c99607aa-8d69-4be5-ab39-c7ae365a7adc",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "36c0e251-a33b-4843-a8e5-2f386d46fff9"
        },
        "item": {
          "id": "27e4d0f0-f39e-4df5-b493-669f41274a9f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9b7d4bf1-21aa-4d79-a625-75e95e60c584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded4bca7-bf29-4972-bbd1-07d97ce145ea",
        "cursor": {
          "ref": "08f17dd2-7d49-4628-b0b2-59f6d7755286",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "23192421-f37a-4f95-ad6c-ffb25d25029d"
        },
        "item": {
          "id": "ded4bca7-bf29-4972-bbd1-07d97ce145ea",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8afbd89-95a2-4751-8d2d-9f8a31311323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86d8ccd-3329-4c87-a31e-c99856dbc149",
        "cursor": {
          "ref": "e39f1485-7929-4963-ad49-59a29bef5c05",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "49a5ddac-d23c-42c6-b406-53e9adfce7cd"
        },
        "item": {
          "id": "b86d8ccd-3329-4c87-a31e-c99856dbc149",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "65235fdc-f81e-4252-a096-e5717d6d764d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63e7a38-fe6f-4594-8e91-a9c5f9049591",
        "cursor": {
          "ref": "979f8ce5-e815-4e08-97f6-96118e0d76c8",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3c26c088-fc3c-48a1-a77c-754b1f934d91"
        },
        "item": {
          "id": "a63e7a38-fe6f-4594-8e91-a9c5f9049591",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3bf4f4b4-78fe-4b3c-954b-f68dc87f8aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746c0871-9982-42bc-9e0a-bfae5e7d5bda",
        "cursor": {
          "ref": "edff6fdc-2e33-4540-9a23-5a47e51365cb",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6773f0a5-2ad6-4380-a75f-fd8608da5d6e"
        },
        "item": {
          "id": "746c0871-9982-42bc-9e0a-bfae5e7d5bda",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "42e90590-b66f-4b67-89ee-041996bbb981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55056ef8-40cf-4f1f-95de-e2f4b501d0d2",
        "cursor": {
          "ref": "d62b18d0-a3cc-49c8-91a2-bc91465d089d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a746646a-c9ed-4578-9a0a-419df0a8da71"
        },
        "item": {
          "id": "55056ef8-40cf-4f1f-95de-e2f4b501d0d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dbaa69a0-2f2e-4765-906b-86e0bbcbc243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9dcfcf-0f0c-4d71-b811-e8f221b4d64c",
        "cursor": {
          "ref": "5b4a3619-bb26-4411-84c4-d10a658e1df8",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "574d9ea4-8321-4642-bdee-9fb4bfedd86a"
        },
        "item": {
          "id": "be9dcfcf-0f0c-4d71-b811-e8f221b4d64c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "eb8fd365-77a4-45e0-b3c2-98bc1d30bf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff35d2c4-4c74-41f5-a13a-c5b237d61ca6",
        "cursor": {
          "ref": "d418bad4-e7c7-4903-b88e-340e2c06ba2b",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d9d41987-4581-45dc-b72c-be57e8a9f38c"
        },
        "item": {
          "id": "ff35d2c4-4c74-41f5-a13a-c5b237d61ca6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad09d753-3043-4465-b142-f3cdddc080e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1128288f-8d8b-417e-9036-d099a1035d91",
        "cursor": {
          "ref": "2c011774-f31e-47da-975b-9cc26d874170",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "91a89739-1834-4893-932c-f8a2d517313c"
        },
        "item": {
          "id": "1128288f-8d8b-417e-9036-d099a1035d91",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "43cd3b22-27e7-4bd0-bb18-07374f444bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bf94a6-1504-4686-bf33-8e90ada808e5",
        "cursor": {
          "ref": "67d789a9-72af-4689-b199-082d21c2fec5",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ad68ec32-a985-4556-a0df-b07043510527"
        },
        "item": {
          "id": "49bf94a6-1504-4686-bf33-8e90ada808e5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0376f97c-74b1-47e5-a026-5554bb409b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab381d8-43bc-49c1-ab4e-331a8760f5e3",
        "cursor": {
          "ref": "fea1c0e5-ea8a-40ec-907b-e609e1ecf056",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cfb6f02a-f13f-49ea-8874-4ac542dc2423"
        },
        "item": {
          "id": "0ab381d8-43bc-49c1-ab4e-331a8760f5e3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "083dbbe5-8b78-47ed-a6c9-27375bec2509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e0bb84-0687-4246-b721-c7632bc06427",
        "cursor": {
          "ref": "2e6dae46-9c13-4e3b-8c89-1172b59362c8",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "67da26bc-0280-45a0-b5d1-34174485885d"
        },
        "item": {
          "id": "51e0bb84-0687-4246-b721-c7632bc06427",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a50ad260-b81a-4e70-ad6f-ff0c721de17e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6911fbe-a8f3-4ae9-a857-d126c28a18eb",
        "cursor": {
          "ref": "949fc774-668b-41aa-bb7f-a2f561bd4616",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f198e9a2-0738-43ab-a939-0991a0918fed"
        },
        "item": {
          "id": "b6911fbe-a8f3-4ae9-a857-d126c28a18eb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "080f2723-37f7-4441-87ef-25bc4174464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f76185-b1e5-48c4-9a4a-3cecdc4cc8aa",
        "cursor": {
          "ref": "6d55eca3-6407-4d3c-b8b9-c13d033f8d23",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0739e285-08dd-4da7-a399-a8d81230158d"
        },
        "item": {
          "id": "c9f76185-b1e5-48c4-9a4a-3cecdc4cc8aa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34cc99c8-31c3-4a63-88fb-8e026ac69151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c57cc9-f16e-4dbe-849d-c9dcb6f9e2fb",
        "cursor": {
          "ref": "d096c01d-86eb-47d2-94bc-99f0834486f3",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "491302e1-ba7d-43cd-8856-9a403ebf96f2"
        },
        "item": {
          "id": "c4c57cc9-f16e-4dbe-849d-c9dcb6f9e2fb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "966501f2-f374-44ac-92f0-dacc32103bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb1a26d-e6dd-43c9-9c4e-1a5551cad142",
        "cursor": {
          "ref": "b511c1cd-fa2c-43e6-938c-95b8ae326bcf",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0eab2d56-b540-4111-b0c8-9f0c0c1c0eaf"
        },
        "item": {
          "id": "adb1a26d-e6dd-43c9-9c4e-1a5551cad142",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d80f04b-2014-4623-bf01-7b97322fb7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8a43d3-acd4-41e3-bb16-07a56f3be453",
        "cursor": {
          "ref": "7075204a-2f6d-4230-bcb8-ba5972695375",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3502bea8-922d-4d3f-8c57-545a0300acbe"
        },
        "item": {
          "id": "bd8a43d3-acd4-41e3-bb16-07a56f3be453",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7a382bcc-7f9a-4904-aa70-b2ff8832b75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0182b23a-4583-48ef-b3f9-7125a43606a9",
        "cursor": {
          "ref": "6be55ba1-7918-45c4-b30e-d6cda090777c",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b5e4246d-70f3-4c3a-9447-314b2a2aaa8b"
        },
        "item": {
          "id": "0182b23a-4583-48ef-b3f9-7125a43606a9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "29fcb581-a968-44d5-acae-76bca79b3339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea56976-c1a9-48e0-941a-fcd6e035a9b5",
        "cursor": {
          "ref": "0cea5ad6-70b6-4d8b-b844-ab42a711a156",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a3fb8f50-ab22-420e-ba01-0ea721e9ea3b"
        },
        "item": {
          "id": "eea56976-c1a9-48e0-941a-fcd6e035a9b5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "edfb5a8c-fecc-4ad5-be48-a03b99619a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457fb00d-c0a0-4bea-a56f-85564b7ae5a6",
        "cursor": {
          "ref": "29677546-4d37-4718-a8c3-0fe0a6072f76",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "faa09305-87d3-4d05-b505-3c2451c26d99"
        },
        "item": {
          "id": "457fb00d-c0a0-4bea-a56f-85564b7ae5a6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "02b5b514-6456-4355-a51f-bd0abf2d4ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af8b67-c13b-4deb-bf2a-817e0767b87d",
        "cursor": {
          "ref": "f0874b7f-4c5a-44ba-9f39-5c8c3c1b0a9a",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b5dd0ffb-a14f-4027-873f-50fa03b3fc65"
        },
        "item": {
          "id": "55af8b67-c13b-4deb-bf2a-817e0767b87d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a0c8d37a-c0c8-469a-a62d-bd94e2447144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f22247f-6bae-4b7e-b652-285c4ebb54f1",
        "cursor": {
          "ref": "1a27eec3-118c-43ec-ba92-246c54d1c6bf",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5cb45e51-dc62-43ff-983d-188f615464bb"
        },
        "item": {
          "id": "2f22247f-6bae-4b7e-b652-285c4ebb54f1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3b4c6d07-d22c-4ece-8858-7cb8883cd6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec550a1-15da-4611-a812-786e2e12ff21",
        "cursor": {
          "ref": "4206b7dc-0ba0-4e29-9246-2118253facc5",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "450dc287-2e20-4c72-a091-5894f18257aa"
        },
        "item": {
          "id": "5ec550a1-15da-4611-a812-786e2e12ff21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ffbbc0d7-6531-43e4-8f8e-ccd358ed3b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c93a58-1b10-4351-aff0-620c8cc75a9a",
        "cursor": {
          "ref": "9eeae539-1f30-4749-9410-b464ef0965dd",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d74a1561-51af-4c94-a2aa-5f76f650fe7a"
        },
        "item": {
          "id": "e8c93a58-1b10-4351-aff0-620c8cc75a9a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a5d65633-f554-4aa4-8257-438e3e84119c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137362d4-3eca-460c-aa6d-22f57095a555",
        "cursor": {
          "ref": "26547a13-9d08-40ef-8a61-e1d786aea189",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6d4a057c-d9b2-4210-a896-f62975257873"
        },
        "item": {
          "id": "137362d4-3eca-460c-aa6d-22f57095a555",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "36227937-ca31-4e32-b140-4e595f73530b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d372eb3-a8d9-4d7d-bb47-ec9b5e8e2f77",
        "cursor": {
          "ref": "0881e553-946f-47e9-811f-162afd7fd007",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b6720725-f741-44cd-9f05-0c17c5f793d5"
        },
        "item": {
          "id": "8d372eb3-a8d9-4d7d-bb47-ec9b5e8e2f77",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "255792e5-fe9e-4f0c-9a54-28f6bfafaf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae6e651-f528-4249-b80f-0be2681d0aa6",
        "cursor": {
          "ref": "32755486-0197-4faf-bd91-d31d29c12e3a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1c6f8740-5205-4ce2-b80e-dd60d0412591"
        },
        "item": {
          "id": "aae6e651-f528-4249-b80f-0be2681d0aa6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1db11d92-0c2a-4f6b-a68d-7627cb8fd194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f84842-d557-439a-9cf0-9459cccff236",
        "cursor": {
          "ref": "c4012d81-2a7c-4adb-8e6e-6dd1416a1a7f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1d05f8bc-5e67-48e1-a8e8-8a244715c989"
        },
        "item": {
          "id": "41f84842-d557-439a-9cf0-9459cccff236",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "658b6b8e-4c0e-4f3e-914c-e05860a126c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8e6eb8-310d-456c-af37-a595b0f9c5db",
        "cursor": {
          "ref": "c0712c4d-ec01-49bb-a75c-cd3076cc8121",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7f1a0915-0b90-4424-8103-6167709ecfbd"
        },
        "item": {
          "id": "dc8e6eb8-310d-456c-af37-a595b0f9c5db",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cf27702d-81ee-4c6c-94bf-2f52ac90f86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a563515-f8ea-4e4b-aba4-14205808ebe9",
        "cursor": {
          "ref": "f5cf8c17-5c1c-45ff-907b-996f6ede51c6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3260c58d-5b74-4474-9e6d-31c7a04ca2ce"
        },
        "item": {
          "id": "5a563515-f8ea-4e4b-aba4-14205808ebe9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "67cc04cc-25c7-48ec-bdbf-441c5156af79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf1737d-2d9c-4bbe-bf50-0af81f334281",
        "cursor": {
          "ref": "3bea4e23-838b-4823-bcaa-3cbfacdb7698",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8fd3c964-7502-4e28-bab4-26b8c1aec819"
        },
        "item": {
          "id": "5bf1737d-2d9c-4bbe-bf50-0af81f334281",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "11dcc1d6-9eb2-46ea-9376-718613636b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04376517-b8b2-4055-b839-90478f7d9600",
        "cursor": {
          "ref": "14203267-c634-4fe1-ae7e-d5f6bca69875",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9b9bcb1d-74a1-459a-94e4-ad9e9afe58d6"
        },
        "item": {
          "id": "04376517-b8b2-4055-b839-90478f7d9600",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5e2ca175-851a-48c8-8309-ba9e357c0032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fc0a4e-4fc0-4918-b6a9-c5da720b046b",
        "cursor": {
          "ref": "e9c401d6-f0fc-4075-bbeb-d937bc5e217a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d9131d35-bf39-4848-8a4d-a0ac210788fc"
        },
        "item": {
          "id": "c5fc0a4e-4fc0-4918-b6a9-c5da720b046b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5d82d24d-ab39-4123-ba7e-e4077a2f9d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119a9d30-2669-40fb-a73b-b422c294b1e4",
        "cursor": {
          "ref": "093db2d6-832d-4ec3-b783-b1fb6af5846d",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "46c03b37-fd85-4cb2-9a70-cbd0cda1a292"
        },
        "item": {
          "id": "119a9d30-2669-40fb-a73b-b422c294b1e4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f5903407-7ee9-4ec0-867d-4feb78203ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd3366a-f7a2-4ca1-899f-3784fd79a17d",
        "cursor": {
          "ref": "2fbfdaf2-0085-4a26-8726-7a7b45d68c09",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "694c6186-894d-406b-84ce-8bb54cf3c436"
        },
        "item": {
          "id": "2fd3366a-f7a2-4ca1-899f-3784fd79a17d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9dc8d229-7932-4e85-b844-f2de506e658c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d19c4b8-3202-4692-96a4-3194b6fbf0c9",
        "cursor": {
          "ref": "b5e14a83-7fc5-4077-8745-3b1c518d437b",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "376f0470-5ed5-4dd6-b9e3-a311b8c095d3"
        },
        "item": {
          "id": "1d19c4b8-3202-4692-96a4-3194b6fbf0c9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "76932f0b-7800-4af4-8068-9df01387abf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f184fe-5e08-4b53-9ba0-4714c106fef3",
        "cursor": {
          "ref": "21cf0d4a-643d-4774-8637-2fa4fd5f9574",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1985744d-41e1-4c51-a95d-96cc1b660b17"
        },
        "item": {
          "id": "f4f184fe-5e08-4b53-9ba0-4714c106fef3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "94679eca-aa15-428e-8687-5eec15fb6355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2a68be-3c15-4158-83fb-e90e1ed39a90",
        "cursor": {
          "ref": "730934fc-69c3-44de-94d9-e9b2ffb6e701",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8ad65149-0f4a-43d1-bfb9-d7b63d8d3765"
        },
        "item": {
          "id": "3e2a68be-3c15-4158-83fb-e90e1ed39a90",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5db34366-7f1d-466c-8ae3-f0ef5c165528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bc2e79-a03c-443e-9a63-7ce7c230b5bb",
        "cursor": {
          "ref": "3255a575-0c12-4a39-848f-b91f2407b7d7",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2006b937-9058-4f1f-b8aa-66afdcad5662"
        },
        "item": {
          "id": "76bc2e79-a03c-443e-9a63-7ce7c230b5bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b052f620-41ac-4c12-b005-a58687cece67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3af6e0-2016-4a38-b6b4-575194dec2da",
        "cursor": {
          "ref": "f3d40aef-a4e8-4c31-b23f-f447e1dd727c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8be8358c-96d8-4a2a-986a-32874a7bbdab"
        },
        "item": {
          "id": "9c3af6e0-2016-4a38-b6b4-575194dec2da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "34999264-c1db-4c5c-809d-d26d072caeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb25682-31e6-4dce-9f20-7606cb13d5dc",
        "cursor": {
          "ref": "5d16d117-8b8b-4a47-9103-09ea45394d9b",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5a366fc7-87be-41e3-97bc-1c33405a000c"
        },
        "item": {
          "id": "6cb25682-31e6-4dce-9f20-7606cb13d5dc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1cb7fbb1-92f5-4308-b324-e221e0c966e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea1d03a-1ed0-41fe-a336-9a212238f441",
        "cursor": {
          "ref": "75ec8c54-1352-4bec-9fb0-b5107da330cb",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3673d227-1c09-49d3-98dc-76be2c5f8da7"
        },
        "item": {
          "id": "dea1d03a-1ed0-41fe-a336-9a212238f441",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7504e61c-6655-488c-8bcb-3721540d58cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bfb047-f317-4186-a903-e5986d3fa4de",
        "cursor": {
          "ref": "889841fb-0dc4-4cf3-877d-94ba3ccc7746",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3f4c1c87-3d7b-4124-9f35-baa5e119f519"
        },
        "item": {
          "id": "76bfb047-f317-4186-a903-e5986d3fa4de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3bb8372b-bc4e-40a0-b3e3-dbd036b89f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50594df3-fc50-428c-937b-2d9560809383",
        "cursor": {
          "ref": "d8328ebc-d415-4cd9-b515-1ac030de7ab7",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4b4b1314-9d64-4f7c-bd30-db7326a0b1c1"
        },
        "item": {
          "id": "50594df3-fc50-428c-937b-2d9560809383",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6e6237fc-c091-47de-889e-7d7bd9675154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63981976-3f28-4efa-88b4-2f21aff5a4b3",
        "cursor": {
          "ref": "56c6eed2-9adc-4e1c-ab71-934921d118c9",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f43486a1-c870-4c43-b2f7-e3d2bf783644"
        },
        "item": {
          "id": "63981976-3f28-4efa-88b4-2f21aff5a4b3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4d00c2dc-82b0-45ad-976e-2ddffdf7daab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdd564f-27e3-467e-a0f6-545968869c66",
        "cursor": {
          "ref": "b1767dda-3382-4bb0-93ae-5b66a264adf0",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b04363c2-06b6-4770-831a-89e84ad457e2"
        },
        "item": {
          "id": "0fdd564f-27e3-467e-a0f6-545968869c66",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6e8b2338-5e09-402a-886c-467d2f5954a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e56a39-df10-4675-b4ed-b456ab4c0f64",
        "cursor": {
          "ref": "d94b7e90-d619-4d1a-8b7f-6afb0febbc0c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f2bd7699-3b49-4601-aafb-b94e9ed73757"
        },
        "item": {
          "id": "05e56a39-df10-4675-b4ed-b456ab4c0f64",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "57bcd050-d9c6-47f9-982f-b1597e97c035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66dfa6e-4b05-434b-8908-e4deab407598",
        "cursor": {
          "ref": "59d5c4e5-0964-4131-a95f-2b2824c1f8ea",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "58bfce11-d9d3-4392-9de0-97ac0eb69c70"
        },
        "item": {
          "id": "d66dfa6e-4b05-434b-8908-e4deab407598",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ae7905a8-a33a-4491-bed6-fa5cbd9b7057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daacea45-e18c-425e-88b1-d243348126bf",
        "cursor": {
          "ref": "aaa6c652-00dc-4542-851c-6eeb09bc762f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ccb9c7c9-7400-4595-85b8-1e1133086610"
        },
        "item": {
          "id": "daacea45-e18c-425e-88b1-d243348126bf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e93964b5-c885-4c25-85e6-a841ac9b372a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e302de-9670-41b5-b104-942b9516edc9",
        "cursor": {
          "ref": "8c7ff3a8-5fbe-452f-89d4-672ecd7ef46b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aa8422a4-0089-4cf7-81ff-c533f22f9022"
        },
        "item": {
          "id": "65e302de-9670-41b5-b104-942b9516edc9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1e586b37-d8ce-49da-a5ed-f2a48281fd84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b76aa7-5573-4d1f-b060-efe7a20efc97",
        "cursor": {
          "ref": "0cd1bf47-c97b-459c-be23-aeb2bb3bf2b4",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "13e93bef-502c-4e4e-923a-a531b4de597b"
        },
        "item": {
          "id": "66b76aa7-5573-4d1f-b060-efe7a20efc97",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ddc67eb9-82e3-4ec2-8ea0-c46c5d50473a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31eea5ea-301d-47aa-a53b-e0222fd03a67",
        "cursor": {
          "ref": "7b7009f9-823b-4725-8fea-184ec35a3d71",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "95caf039-128d-4019-8cdd-6f9f0d0ef03e"
        },
        "item": {
          "id": "31eea5ea-301d-47aa-a53b-e0222fd03a67",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1dfe1782-d28b-4c65-9ad2-a9453224d6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ff0146-8c10-446b-ad03-dac169258978",
        "cursor": {
          "ref": "8865fbcf-ec6c-4380-b85f-5c3a38771f9b",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3be5486b-98d8-4ca2-a8f8-c548cbea0cd7"
        },
        "item": {
          "id": "44ff0146-8c10-446b-ad03-dac169258978",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b3d2a187-528c-4d17-b1fb-378c7a5fdcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac34120-6559-4bfd-b805-7e3282757a6b",
        "cursor": {
          "ref": "f3f85bd4-5159-4b1d-9b9c-630690450c61",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bec43a13-88a5-429b-bdc8-a3c4f0526e11"
        },
        "item": {
          "id": "5ac34120-6559-4bfd-b805-7e3282757a6b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "abe7ae6e-aa85-454a-80c1-88a4e8ea7b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3d0dbe-287f-4b74-b6cf-d779ee4b7e3e",
        "cursor": {
          "ref": "72a391de-1ab0-4706-aff3-f87966e9c4ff",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a0292a67-5241-47ff-bfb9-73382a95ed11"
        },
        "item": {
          "id": "9c3d0dbe-287f-4b74-b6cf-d779ee4b7e3e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "62dd3a4b-d145-41ba-8a26-5e690acb3f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706a4dd9-808a-49fe-b999-be50cd5c1d49",
        "cursor": {
          "ref": "e3680133-5fe0-418a-918e-0a0cfdfb5c1c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8a05baf4-3ce1-4c2a-99c8-f0db36cd57ae"
        },
        "item": {
          "id": "706a4dd9-808a-49fe-b999-be50cd5c1d49",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "04df5106-901c-41dd-b417-9b096a117a13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "839b3d4c-bdd3-4ef3-8d9a-f2fd265e1934",
        "cursor": {
          "ref": "e3feec1e-5a26-43af-a10f-0882a1761b5f",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "783667d6-7964-4c61-a7a1-d8ce5a4d1d2b"
        },
        "item": {
          "id": "839b3d4c-bdd3-4ef3-8d9a-f2fd265e1934",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "470f48ee-6330-49e4-92a6-ecaf54665794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb8a477-bf38-465c-a55d-0b15319e8e1c",
        "cursor": {
          "ref": "86ffc4a3-c48b-4192-885b-0d4cab3f3195",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2b5f4875-8ca2-4c10-9073-aac0365970f6"
        },
        "item": {
          "id": "aeb8a477-bf38-465c-a55d-0b15319e8e1c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e1136ba3-66e6-4a26-8d95-12ef9c00bfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014f3ccd-8c58-45bf-9c5f-ca03cef76add",
        "cursor": {
          "ref": "0dd6b7db-29f4-4c7e-a54b-f7aae36e6ad0",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bd5803ad-1046-43d8-9cbf-669cdcb536c9"
        },
        "item": {
          "id": "014f3ccd-8c58-45bf-9c5f-ca03cef76add",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "55e4ea16-17a3-4f86-8606-d312633fe820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc39e43-381a-4c4a-b5d3-5c1103ea8f5f",
        "cursor": {
          "ref": "f899e5f9-46f9-4706-a3f2-58e2af5f2b10",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0b4403fe-3688-4d14-a175-552820563a7d"
        },
        "item": {
          "id": "9cc39e43-381a-4c4a-b5d3-5c1103ea8f5f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4f9f45c-d57c-4af3-9948-e95aa272e4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009699c8-55de-4a74-b9df-09cf432ccaa3",
        "cursor": {
          "ref": "556b668e-03b5-4fe8-8cd2-50ef1a81a9a3",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d37d909c-1757-4dbc-b4b1-31bf06a6b9cd"
        },
        "item": {
          "id": "009699c8-55de-4a74-b9df-09cf432ccaa3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "125c1d13-1354-436e-9381-c686c009e93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed82ed9-9402-41c9-8b10-d7e5878b492d",
        "cursor": {
          "ref": "a5cf3a4a-4e03-47de-984d-82c2cb1169da",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "55abebef-5ab5-4826-8e21-4fa7dd9f6795"
        },
        "item": {
          "id": "1ed82ed9-9402-41c9-8b10-d7e5878b492d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dad4e33b-aabe-41a5-af50-59c5373d8f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a3234c-b473-4b92-bd5b-15e853b23c0c",
        "cursor": {
          "ref": "0132b4bf-1858-4df5-afb6-55961cbe119c",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "91cef350-58c7-49b6-838a-7fc91607c14d"
        },
        "item": {
          "id": "18a3234c-b473-4b92-bd5b-15e853b23c0c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "27404fef-be46-4176-b40d-43138fedd9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b82844-10f8-4127-a5ba-c25df763a449",
        "cursor": {
          "ref": "5c5a4221-0bcd-4a0e-8618-0fbf65b2fa71",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0ea0b4ce-d7c8-42db-9bad-6a26df1ba276"
        },
        "item": {
          "id": "c6b82844-10f8-4127-a5ba-c25df763a449",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "964f4602-cc7e-4c6d-93e3-8ab2626e54f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e469a045-e930-48f9-a06b-62645b3a519e",
        "cursor": {
          "ref": "8981a771-feb3-45ad-8fdc-bf58bfb87bdc",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8af7e4c3-ae29-447a-9b40-68d3a23a33bb"
        },
        "item": {
          "id": "e469a045-e930-48f9-a06b-62645b3a519e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a2dd0cf8-5241-453d-bf19-6c12faa896c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d310c228-1d9e-4af8-b03c-1c84fa52cf84",
        "cursor": {
          "ref": "1eb6ad7f-8cc8-4462-9c7b-ff79d6343aff",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9c232161-8857-4055-a50d-eff64672842a"
        },
        "item": {
          "id": "d310c228-1d9e-4af8-b03c-1c84fa52cf84",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "34bf7ea0-fe5b-4d2c-9e38-a60303a1ed37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7ebcb3-d1d1-49c9-872b-dbb269616477",
        "cursor": {
          "ref": "0336e79c-e6d6-4a8b-b0ee-df80e31aa755",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f31a5e8d-084c-41d7-85e3-250c78b28a5e"
        },
        "item": {
          "id": "7a7ebcb3-d1d1-49c9-872b-dbb269616477",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b46429d6-e66d-45d2-8996-720bdb130ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd16b2d3-ca1c-4783-9e02-d1e99f726dc5",
        "cursor": {
          "ref": "bc62c780-3782-4d69-95de-3c5809d257f2",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "33e67dd9-ed05-49ad-9b23-886619ccf16e"
        },
        "item": {
          "id": "fd16b2d3-ca1c-4783-9e02-d1e99f726dc5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e6d24fb-ec19-4aa9-b164-ede7ebdbd9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6f4f7b-2445-4909-b6e7-d9b9aecc1487",
        "cursor": {
          "ref": "d6e259e4-aa15-400c-b783-381f343ab030",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cb59371c-c8a6-4d4d-ba31-5541ce6c672a"
        },
        "item": {
          "id": "ed6f4f7b-2445-4909-b6e7-d9b9aecc1487",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "84a6b397-d9cd-4340-bfa6-d6bfae14b764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da38f49-4ca1-4635-9c7f-1d9778edf020",
        "cursor": {
          "ref": "6a8019d7-df6c-428c-a962-02f6284dabad",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "44776fd5-d32f-4c2a-adb4-203a64befc8d"
        },
        "item": {
          "id": "1da38f49-4ca1-4635-9c7f-1d9778edf020",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "44e09b03-daf4-4f68-83c1-9ed6f51aa557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7a0c65-92fd-41f0-9210-764493c9945e",
        "cursor": {
          "ref": "4174fb92-b641-40a7-b624-122efd8a4037",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f28cd7c6-a368-4e5e-8554-bf8862b46071"
        },
        "item": {
          "id": "5a7a0c65-92fd-41f0-9210-764493c9945e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d37950f-01b6-4863-9c5b-726d6d753303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1571995-d52f-4e10-b1fe-c22c5d9b8fd0",
        "cursor": {
          "ref": "ee2a759a-e3ca-4fce-8e1f-94284a45a3d6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3b8d03e2-8616-442b-a8cc-7008b42f3ad5"
        },
        "item": {
          "id": "c1571995-d52f-4e10-b1fe-c22c5d9b8fd0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3f2c8454-3761-4f70-8090-4ec7c6edbde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340a000b-5d3a-42bc-86ad-2a109877e6cd",
        "cursor": {
          "ref": "645f4314-3963-41c3-a9a2-93641fa311c4",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fdc3e704-1399-43b7-8b4e-792e10b4afcf"
        },
        "item": {
          "id": "340a000b-5d3a-42bc-86ad-2a109877e6cd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3d681f7b-0df5-4453-a2f9-75caffa2ec39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ddecd7-d37a-4dcd-9a36-75f176124c18",
        "cursor": {
          "ref": "a7b75419-c067-4933-a1e2-1cf07c3dc7af",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d18f44ad-eade-40d1-b024-635a2caa8197"
        },
        "item": {
          "id": "a5ddecd7-d37a-4dcd-9a36-75f176124c18",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "86ca347f-609a-4326-8eb1-5d6f3ff9e18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c053807-4143-47a7-ac8b-afd6ee7c234a",
        "cursor": {
          "ref": "a1ccbe3f-f80f-4d14-a6d0-ef4e159437c3",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d7181788-87fc-4b7f-9ae6-ece7622f8a8e"
        },
        "item": {
          "id": "7c053807-4143-47a7-ac8b-afd6ee7c234a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d52ab85a-247d-4da7-8f61-aff653249185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6071482-0875-4ca7-ab46-99cb046c4a01",
        "cursor": {
          "ref": "42b26e11-b09b-4e5a-b745-257ad29a86ff",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f8242b2e-0ecf-4237-9931-6b2ff7c948e2"
        },
        "item": {
          "id": "a6071482-0875-4ca7-ab46-99cb046c4a01",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ffb87be1-692b-4146-9ed4-96167ce23598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e8a991-6f4d-4937-96f3-4d3367b2e5bc",
        "cursor": {
          "ref": "7d8d5170-3e86-4e89-92d6-541631763c04",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d4c6afa3-3ccf-4f1c-b210-aa5e87e566ed"
        },
        "item": {
          "id": "24e8a991-6f4d-4937-96f3-4d3367b2e5bc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e4c38484-c9f1-4b72-b9da-3dc35d1d514d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2067908-3fc0-485f-9708-d056779d2028",
        "cursor": {
          "ref": "f6dd2677-8684-4139-95c8-ac42d4bcb979",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "21369502-c9a2-4795-a1e5-d25bf4ee0007"
        },
        "item": {
          "id": "a2067908-3fc0-485f-9708-d056779d2028",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4da81f4a-a659-484c-b284-bd539fadc303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a881ec3-c79d-419c-b52a-b26d29f8b9f0",
        "cursor": {
          "ref": "7ea72a9e-7d6b-4aff-9c15-078f9d50f301",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d15e8219-c4a7-439b-b9e6-a18b0e760bac"
        },
        "item": {
          "id": "6a881ec3-c79d-419c-b52a-b26d29f8b9f0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8504bed7-4457-4dcd-bda2-cc158fc9f4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759a6397-4aa6-4bce-8a85-3cbab292020f",
        "cursor": {
          "ref": "f279ce10-3fd4-47d8-9795-a815aeb18779",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "78334dc9-21ff-4958-abad-01882ba6529e"
        },
        "item": {
          "id": "759a6397-4aa6-4bce-8a85-3cbab292020f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0b615b13-a9dd-434e-9925-dadf865bc413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1147dd7-1aab-44a9-9e76-cb523cb5f23d",
        "cursor": {
          "ref": "b3b9ba1e-894d-4ccc-9680-560b1791d3ea",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4d45b884-462f-4561-a79c-30d5577a27a8"
        },
        "item": {
          "id": "d1147dd7-1aab-44a9-9e76-cb523cb5f23d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "43e3d53e-7f7e-4307-b13f-6f0426e7f5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae041d8-8a6e-40e3-9b6a-1c20bd997350",
        "cursor": {
          "ref": "b6d5b401-c37e-4b4c-b9b3-d65500dac0ce",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a9f7e326-0dde-4720-a920-fd16d3b1b6e8"
        },
        "item": {
          "id": "dae041d8-8a6e-40e3-9b6a-1c20bd997350",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3420e17c-be6e-4b78-910a-051987543c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e292bb-2567-48a5-afa1-bda9e672db58",
        "cursor": {
          "ref": "5c3e413b-2d63-417b-a458-1c7ad1bd9ff6",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5c28d822-6ec7-4683-bcd9-4d29863bf56b"
        },
        "item": {
          "id": "30e292bb-2567-48a5-afa1-bda9e672db58",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e1b4a0c0-8115-4974-abec-d32011e10f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b6714e-0055-4aeb-97c8-ffea8fbe27c0",
        "cursor": {
          "ref": "95a18c52-d079-4a08-bef6-ef64a3e385bb",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7ce20e9e-e138-49c2-bb18-95f692239732"
        },
        "item": {
          "id": "e5b6714e-0055-4aeb-97c8-ffea8fbe27c0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "788504cf-a28c-4338-832b-ce0aa3765827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f3f8b3-1247-4312-9e40-23113b3010e4",
        "cursor": {
          "ref": "7cdbd9dc-26fb-4fae-ae9a-a63b07483999",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6b35d413-2688-49bf-a9d0-8111ed78b9d4"
        },
        "item": {
          "id": "37f3f8b3-1247-4312-9e40-23113b3010e4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d1a103b2-268c-42b7-939f-c8483d7a5395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966fb8e9-c499-458a-996e-5fd6e4a0a0ae",
        "cursor": {
          "ref": "58ae794b-5ca6-4df1-b18f-01fc2b1419aa",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a547fac1-16b4-4077-a547-7d33e9cac9cc"
        },
        "item": {
          "id": "966fb8e9-c499-458a-996e-5fd6e4a0a0ae",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2d45c405-0ce5-4769-9c13-9d085dee2715",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b72c579c-8e89-48db-b2c6-2a16e975ac79",
        "cursor": {
          "ref": "45f8702a-1aac-4bf5-97f6-a6acb9df9e11",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "65666b65-64d8-4a8a-9df9-5279a84bd9d2"
        },
        "item": {
          "id": "b72c579c-8e89-48db-b2c6-2a16e975ac79",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cbabd10e-c8f2-430c-80a2-640888914296",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6073091a-e4b9-48d6-9717-87bcaa30ffe5",
        "cursor": {
          "ref": "efefb841-176d-47c4-967a-c3a1422a6ae4",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "28ae4b75-b675-47dc-a1b0-dd50fd26e40b"
        },
        "item": {
          "id": "6073091a-e4b9-48d6-9717-87bcaa30ffe5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "78016f68-fe8a-40eb-81d3-7b2ca00303b2",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "462e0372-1e95-4b66-bcf0-5adeeb02994c",
        "cursor": {
          "ref": "92ce721f-6c48-4eae-920f-3efddc495b9f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c1569664-fba0-4d4e-bfb2-f3797b5dbedb"
        },
        "item": {
          "id": "462e0372-1e95-4b66-bcf0-5adeeb02994c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8e920985-581e-482f-82aa-93abe970fe95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc98d470-2a56-4c16-8fd9-236d0e82a2d9",
        "cursor": {
          "ref": "eb295a1b-8a66-4893-8645-addd757abfaa",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d86facba-0956-4c21-ae46-4a87e34c7ee4"
        },
        "item": {
          "id": "dc98d470-2a56-4c16-8fd9-236d0e82a2d9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "97101bb2-a0ff-4deb-ba88-5816475fa094",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ecf1dafe-fddb-47f3-8574-9eaceb01fe1f",
        "cursor": {
          "ref": "d2015434-da3d-4be0-ab7f-d151b55d3a08",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1a8d9c3d-50b2-401d-8b16-a64529210b75"
        },
        "item": {
          "id": "ecf1dafe-fddb-47f3-8574-9eaceb01fe1f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b38b694a-060f-4da4-890e-8a3086b79e77",
          "status": "OK",
          "code": 200,
          "responseTime": 1291,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "665b3e6b-a144-4a84-9ec4-6197f3159b8d",
        "cursor": {
          "ref": "1500e16a-3b93-483b-b010-968abfeb0d24",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3d937c0f-a472-4774-b538-1c2503b5cc3b"
        },
        "item": {
          "id": "665b3e6b-a144-4a84-9ec4-6197f3159b8d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9f990f4a-11a2-4388-904c-76dda25b69ae",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d4c8d608-c00a-4dd8-89a1-301a6b4d26b8",
        "cursor": {
          "ref": "7096c92f-2967-4104-8bfe-8016f9591503",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fe9debe2-2ac3-4f8b-9b15-6bd742bc8ff1"
        },
        "item": {
          "id": "d4c8d608-c00a-4dd8-89a1-301a6b4d26b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "438f8797-f472-4df4-93f2-5ed2bcfdd47e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4c1b4eaa-6038-45eb-a6b3-63c0bf6e957b",
        "cursor": {
          "ref": "7b5020a7-9d19-4e6c-80ba-f640c785246f",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "885aa706-2c0c-4997-8b52-0d77be13bce2"
        },
        "item": {
          "id": "4c1b4eaa-6038-45eb-a6b3-63c0bf6e957b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "970aaf7e-5715-4d3a-a1e7-c72347a9d313",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "66fc9345-6507-42fe-8d66-f58cb45b4566",
        "cursor": {
          "ref": "7e5fc5d8-af9d-4b8d-8046-adf534a5ee62",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "07a6f692-a63c-4c5a-80fc-c2435acd8810"
        },
        "item": {
          "id": "66fc9345-6507-42fe-8d66-f58cb45b4566",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "181717bf-298e-471f-9343-26c72d6216b7",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "998987cd-e004-48aa-8ba3-ae32e2171764",
        "cursor": {
          "ref": "d48b032b-4c3c-4b74-9e6b-1b08ca22a050",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f1f31853-1143-46bd-948b-b57dfb834d4d"
        },
        "item": {
          "id": "998987cd-e004-48aa-8ba3-ae32e2171764",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "268ed880-95cb-434a-8cd3-57edbed776f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afade1eb-be1a-4445-b285-109b4b6e8d60",
        "cursor": {
          "ref": "095d614a-98bd-455a-b7fc-24182b537c65",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2fd293e3-2037-4946-92c6-5fcb5c54c680"
        },
        "item": {
          "id": "afade1eb-be1a-4445-b285-109b4b6e8d60",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "95275765-f8e6-4509-a173-41eeb4ce7739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25516ea3-8f8e-40b1-ab9d-49ff2f2992cf",
        "cursor": {
          "ref": "7c50368e-51f8-4ab7-93a0-119a0ffe5721",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "acf18445-b4ba-4144-93e3-b9d8bbdc7783"
        },
        "item": {
          "id": "25516ea3-8f8e-40b1-ab9d-49ff2f2992cf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "74d0eae5-27fb-4af0-9ae0-a6c4fcd4f9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae21c87f-00ec-4dcf-8a7d-1c20f90ea8d4",
        "cursor": {
          "ref": "b2e0949a-27bc-42f7-b085-a72d9b7ab1a3",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "66bf3720-3285-41aa-a057-fe74fae0fa20"
        },
        "item": {
          "id": "ae21c87f-00ec-4dcf-8a7d-1c20f90ea8d4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d7bd1eef-052e-4cb6-92dd-ddf74bb45049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0306bee-e0cb-461b-adb1-5987ace89ace",
        "cursor": {
          "ref": "50aea67d-4a0e-428d-bb8a-57d678c03351",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "91c50719-09c6-4fc0-98a6-e5a3afbe8442"
        },
        "item": {
          "id": "d0306bee-e0cb-461b-adb1-5987ace89ace",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eab8c28b-1850-4c15-92dc-6b52977ed958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a664f199-1cf1-4951-acfa-404f2056e603",
        "cursor": {
          "ref": "4d723042-2da2-4bc2-b92c-a181144dda45",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eaaa9b4f-6641-4746-825d-ea5a66c8fea9"
        },
        "item": {
          "id": "a664f199-1cf1-4951-acfa-404f2056e603",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "84709e83-064c-4444-9aef-17d58d649df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c690e623-0f8f-4032-87ec-607478a6469c",
        "cursor": {
          "ref": "1ef5bb11-1b6e-4f05-b7d9-6129cca47ae6",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4a80e703-9f54-4032-b60c-e2d867f93d7e"
        },
        "item": {
          "id": "c690e623-0f8f-4032-87ec-607478a6469c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "06c3db84-0ff4-4d92-92c4-9ca11c755cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d481a94-e8fa-4311-bbf9-fe147e9b131c",
        "cursor": {
          "ref": "cf0717d2-5b56-46a6-a206-c27ac1d30f37",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ea261896-a081-4e06-9d6f-6dbf8f5f6a26"
        },
        "item": {
          "id": "1d481a94-e8fa-4311-bbf9-fe147e9b131c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f3418c99-9179-4151-a8d1-4afcff70f528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f82d8fa-f8fc-42e6-ac63-5779cda33baa",
        "cursor": {
          "ref": "a4fc18a0-1f01-4b0d-bad7-d1a96b6f94fa",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "31318c2d-770a-4779-b717-949a5cb3581c"
        },
        "item": {
          "id": "5f82d8fa-f8fc-42e6-ac63-5779cda33baa",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ed709c4d-1594-4da9-bedd-1ae94bb1d791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00469166-f6cd-4399-bd6d-6dae4dcd76f8",
        "cursor": {
          "ref": "7ab839e3-0292-490b-b211-7652128fe5fe",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "96856da7-3e43-4fbf-9e56-9aa21191793c"
        },
        "item": {
          "id": "00469166-f6cd-4399-bd6d-6dae4dcd76f8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c3a17276-f11b-486b-8e91-92f96a611dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7e11ef-bf32-4805-88bd-c74178d51470",
        "cursor": {
          "ref": "762582fb-8b12-427c-8add-c83298141f5a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ae06590-3a3f-4564-86a2-1f2ebd042e83"
        },
        "item": {
          "id": "dc7e11ef-bf32-4805-88bd-c74178d51470",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "54301a97-bc3e-4edd-8957-ccb1366be353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac612c04-adb8-4574-a77c-87f2448a777a",
        "cursor": {
          "ref": "a838927c-4bfb-478a-9e73-49a8c7065e90",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "acd7e5b3-6966-4d34-b93c-522323eace5f"
        },
        "item": {
          "id": "ac612c04-adb8-4574-a77c-87f2448a777a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e656228e-9d7e-4e8f-9acd-b4f0fbed4469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a4f42b-74d4-443f-8b80-8d01d13f24a0",
        "cursor": {
          "ref": "a5baec88-499f-4172-9e06-cf676a323d6a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "16bf73d5-ac26-4610-9d33-f34f36470368"
        },
        "item": {
          "id": "63a4f42b-74d4-443f-8b80-8d01d13f24a0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d49d67e3-0a42-468f-adf0-0c3b7b8188b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60260f24-4570-44fd-8b2e-26c5ea03a905",
        "cursor": {
          "ref": "f374fc61-af68-40f8-9ea8-cd1530f6f5a0",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e9e77f58-25b4-42fa-b897-3a3be4008257"
        },
        "item": {
          "id": "60260f24-4570-44fd-8b2e-26c5ea03a905",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ed88de5b-19b8-4f1e-b111-f2579bbf8cdf",
          "status": "OK",
          "code": 200,
          "responseTime": 764,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "9f4e3bae-df4b-46c3-9b6d-ec386cd34e37",
        "cursor": {
          "ref": "ac553e92-bd30-49dd-821b-45ca19dbc79f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2bd3b648-1dd9-46c5-b634-d8d9c90c01ba"
        },
        "item": {
          "id": "9f4e3bae-df4b-46c3-9b6d-ec386cd34e37",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "754b3e19-c505-4ed6-b4e6-17ed65da85d4",
          "status": "OK",
          "code": 200,
          "responseTime": 754,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3f7cafe2-7fbb-42e3-a048-86c4fb1147c4",
        "cursor": {
          "ref": "191c1902-e459-472a-99b0-b6d8cdb7329a",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "890c43f1-8029-47ca-99a3-192a2b46bfcc"
        },
        "item": {
          "id": "3f7cafe2-7fbb-42e3-a048-86c4fb1147c4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "12653551-da00-42a6-ba46-5a1585506a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "7cf1196d-085d-443e-9e41-1f8fd87e8b77",
        "cursor": {
          "ref": "3c561c94-af09-49b1-91d4-4bd0f56fe80b",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "88bef931-595d-4a69-b1bd-96bd09f8e356"
        },
        "item": {
          "id": "7cf1196d-085d-443e-9e41-1f8fd87e8b77",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "33f84107-c4e5-4092-a4f9-86a77166d4de",
          "status": "OK",
          "code": 200,
          "responseTime": 799,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b774c864-910b-4455-b6af-22a5a78faea4",
        "cursor": {
          "ref": "cc13ce90-7f63-464d-8f08-dbfcae4c0c1e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1c57f396-0589-48e1-9814-a26b985c57c0"
        },
        "item": {
          "id": "b774c864-910b-4455-b6af-22a5a78faea4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b8cb7882-4af7-4970-963a-471dfc0e976f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a9459cb1-c9b1-4483-8d46-1bc7b6a220fe",
        "cursor": {
          "ref": "554b192c-29e2-4075-8cf0-4e51d2c64874",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "214dc943-b732-4a2c-bf3b-3780e574b445"
        },
        "item": {
          "id": "a9459cb1-c9b1-4483-8d46-1bc7b6a220fe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "81c8f908-a345-400c-a9e2-92b61d4b4eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9725cb27-d6cf-45fd-b138-5f4d6acfa784",
        "cursor": {
          "ref": "f529d4b5-43cd-404f-b583-4416bb17af6a",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2a6c8c50-0ab7-42ad-ba24-5aacabae14a5"
        },
        "item": {
          "id": "9725cb27-d6cf-45fd-b138-5f4d6acfa784",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "842ef1f2-6f4f-4cef-81bd-c3336622a430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c183764d-db20-4efe-ae0e-69bf50fe186b",
        "cursor": {
          "ref": "3e786082-363b-4f65-9dab-7527f5c87638",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "80b15af8-522d-4912-be1c-2412c99741d6"
        },
        "item": {
          "id": "c183764d-db20-4efe-ae0e-69bf50fe186b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1279fa50-d50f-4ed2-92be-7991907534f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6121f8-852d-480f-8959-c533921642b7",
        "cursor": {
          "ref": "98bfef25-a052-4e79-962b-303270507dda",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "756846e8-0eb3-432b-8168-a6459a79f810"
        },
        "item": {
          "id": "5d6121f8-852d-480f-8959-c533921642b7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "38cd80f9-83eb-41cc-a505-54997653f556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0f910d-f3d0-44fb-a5a6-fe04f4106e6b",
        "cursor": {
          "ref": "cbac005d-8184-46d7-a0f0-ff6b0ca8ec65",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "96f7c9ea-9ca4-43b1-a04c-4007a7c992c2"
        },
        "item": {
          "id": "1d0f910d-f3d0-44fb-a5a6-fe04f4106e6b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "550f46da-6ec7-4987-9789-b55c34378c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479a2782-eb4f-4995-8fb6-b2a1e7f1e2db",
        "cursor": {
          "ref": "99b1e2cd-9927-45a7-bba9-961fee705758",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "99d0ebb5-f75c-444c-bbd3-77cfffba5bfc"
        },
        "item": {
          "id": "479a2782-eb4f-4995-8fb6-b2a1e7f1e2db",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "732ae491-3f95-422f-9454-d0ce0e8d330e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095929df-ab9e-4919-92c2-2681500b4e18",
        "cursor": {
          "ref": "538dd09b-f2fe-4197-8745-e19cc94fffe7",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ad608ee8-8adb-465d-bf8f-9682b33903e8"
        },
        "item": {
          "id": "095929df-ab9e-4919-92c2-2681500b4e18",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "70beca2a-7428-4c52-9f4b-a5d8eb049911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c0146f-5948-462e-9a9f-6299f32439f5",
        "cursor": {
          "ref": "04be2baf-da75-49e4-8335-29e99caeb64c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "60bd7be4-418d-4e58-9550-6d1d2a5ef9b5"
        },
        "item": {
          "id": "d5c0146f-5948-462e-9a9f-6299f32439f5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "167d47a6-f26c-4c5e-a2f7-7d091020b6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4faa3a-2052-4b4f-8103-ca5c78b4bbf2",
        "cursor": {
          "ref": "162258fb-b4ec-4cf9-a7b6-4ffef8683d21",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5813f6bf-a561-4baa-9c28-dc0c611d9749"
        },
        "item": {
          "id": "3b4faa3a-2052-4b4f-8103-ca5c78b4bbf2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cff540bc-c016-42c7-a7b7-20e2c18cb064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488e301d-db72-4c6b-8b5f-0638202fac29",
        "cursor": {
          "ref": "4e187a14-2f72-4b8f-b686-cb26f7d244ce",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "05a456d4-0ebb-42a1-b200-e0a721ca7df2"
        },
        "item": {
          "id": "488e301d-db72-4c6b-8b5f-0638202fac29",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5f5e8858-1839-48fc-b53d-846b3e8018fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162bfa0b-086b-4c6c-bb33-b7ed944fe9d6",
        "cursor": {
          "ref": "83939131-beb9-4001-be45-feffe776f529",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b3f3646c-c4b1-4912-8e3e-37f0526c0643"
        },
        "item": {
          "id": "162bfa0b-086b-4c6c-bb33-b7ed944fe9d6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "973ab625-5d55-4308-b75a-8a263928700e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba28dc84-7e5d-412b-9e71-f97a3be3e18b",
        "cursor": {
          "ref": "92151c0b-cf86-4c32-83db-e2d59f6d47a0",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "bebff1ba-b0af-4efa-9339-ba41cd10c670"
        },
        "item": {
          "id": "ba28dc84-7e5d-412b-9e71-f97a3be3e18b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "67da1831-78dc-4cb9-8d76-9d38a8089776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9df038-cc9b-4a1d-8e09-68620323dd59",
        "cursor": {
          "ref": "d71e20f2-7395-44aa-b271-df1702f1fd12",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5d24c1b8-2ed6-429b-82e0-e4b0be6e0662"
        },
        "item": {
          "id": "aa9df038-cc9b-4a1d-8e09-68620323dd59",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a7d1a0d8-29b1-4558-a376-07b1aafcdf5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f01ecd-36ec-4821-b3f1-0fc4d1dd41c6",
        "cursor": {
          "ref": "4f248593-cffb-4975-a9bf-fa16afe9d1d3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ee2fa230-3e2f-4aac-8a74-8cee9f49683a"
        },
        "item": {
          "id": "c7f01ecd-36ec-4821-b3f1-0fc4d1dd41c6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "477af9f8-420e-4c48-a518-c5f98b3014aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfa495a-2f91-4444-b9d2-c845474496a9",
        "cursor": {
          "ref": "49bd6e5d-b136-49f7-b186-8574a9f386af",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6e449e53-b41a-4b81-9629-46f6e9eae85e"
        },
        "item": {
          "id": "2bfa495a-2f91-4444-b9d2-c845474496a9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e9cfd25b-78ed-4931-9e92-02f241554d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22244d35-5584-489c-9d88-61c092488aa2",
        "cursor": {
          "ref": "0cacdc35-ea8e-4ab0-bdd8-e2606f2c5cb5",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e55ac24a-36b8-45f6-a431-3e386a37634f"
        },
        "item": {
          "id": "22244d35-5584-489c-9d88-61c092488aa2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2fcd7c69-7a3f-460b-b3fe-122177ba1cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ce7f8a-69b6-41a6-8784-80fe85459e95",
        "cursor": {
          "ref": "f521dbd0-cfdf-4df6-aa47-9dca6a22bb81",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6ed90cc1-0d9b-406e-a11c-98d7924eb9c2"
        },
        "item": {
          "id": "20ce7f8a-69b6-41a6-8784-80fe85459e95",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5d173e00-608e-4cc4-a31d-ab6f118a5825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37438a7b-7528-48a4-954a-cc654ff7af34",
        "cursor": {
          "ref": "3ebc5c04-268e-467f-bfd3-32bc6f8132e7",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e7439377-f299-473e-8be8-4dcde441e52e"
        },
        "item": {
          "id": "37438a7b-7528-48a4-954a-cc654ff7af34",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dac6b7cd-b304-4e6d-b60d-f37e3e6db33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579699b9-45a0-43d5-985f-c2cedacad113",
        "cursor": {
          "ref": "f546529c-88c4-4033-b0a6-8e2c946950b2",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0bffa8f4-78b2-4f0d-b87f-6dfcde89b1f5"
        },
        "item": {
          "id": "579699b9-45a0-43d5-985f-c2cedacad113",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "561b2eb2-f751-4876-9f9c-4ae6ce889b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c6547a-66e4-4efc-bcba-b2eb99a76bc6",
        "cursor": {
          "ref": "4aeb3ea6-60f6-47a1-8317-76a019e62359",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ce4db73d-73c6-49a2-99a5-014ac4c7589f"
        },
        "item": {
          "id": "e7c6547a-66e4-4efc-bcba-b2eb99a76bc6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fac6457b-7d25-4b16-9892-c2f28c4a5c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34995a7b-e6b1-44cd-b477-514ad3f64cf9",
        "cursor": {
          "ref": "bb3140c4-1c56-4d2d-93f6-96e33f847030",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0fa088bb-071f-4fdc-9a59-5e61f87fc0f0"
        },
        "item": {
          "id": "34995a7b-e6b1-44cd-b477-514ad3f64cf9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5a97eb07-0e54-46dc-9b51-9d62cf34ee8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20b61a6-8eb1-4c9e-93a8-dce5fe22004b",
        "cursor": {
          "ref": "3eb86dd0-7536-461f-b915-1097a984845b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9ed8f76-8d8a-441b-80dc-2ed60c47c322"
        },
        "item": {
          "id": "b20b61a6-8eb1-4c9e-93a8-dce5fe22004b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8bc021b8-e402-44f2-ab75-3aeb0534cc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc9290e-a922-4e29-a7d5-023bce270a02",
        "cursor": {
          "ref": "b71299f3-edad-4b60-900d-443b1b098dcd",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "78f779f3-3aad-4a9a-9920-352adc5dc80d"
        },
        "item": {
          "id": "0fc9290e-a922-4e29-a7d5-023bce270a02",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1806efb8-466a-44c1-8c35-4b2fc39f2651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2a2161-3e4b-48fe-817b-734a5386dc9e",
        "cursor": {
          "ref": "99da4f2a-b1bd-4175-8a6e-c1165dfdfe41",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7813aea6-1e75-4074-9a9a-d9973df14910"
        },
        "item": {
          "id": "ad2a2161-3e4b-48fe-817b-734a5386dc9e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "da3d2870-77f3-4fe7-b782-a6f0ce30905b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f153273e-6778-48e9-8a42-9e71fc3f81f9",
        "cursor": {
          "ref": "32e54164-a173-4ea2-bcfe-57340b6605ed",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "02633b2c-9589-474d-a6de-d941ddfbf244"
        },
        "item": {
          "id": "f153273e-6778-48e9-8a42-9e71fc3f81f9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa33f0bc-c06c-443c-b9ea-91b9c3e69073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab62a696-6a19-4598-a5ba-82295d2bb483",
        "cursor": {
          "ref": "04ec5344-7cf4-44af-addb-7605b5070d1d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "53adb1f8-3251-492b-bd47-9cab0fff9df4"
        },
        "item": {
          "id": "ab62a696-6a19-4598-a5ba-82295d2bb483",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6de11fcd-ba87-4fd0-9279-f2cbc9ef9c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ae143e-4b6d-4cb3-8c05-ff2844ba570c",
        "cursor": {
          "ref": "e6900752-0eba-4ec5-96a6-8e2c390065d5",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8e0acbe2-9e92-41f0-b85f-f2e650d27ed9"
        },
        "item": {
          "id": "e0ae143e-4b6d-4cb3-8c05-ff2844ba570c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dcffb3d3-2826-48d0-b38b-58cd3170c17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9d96a8-ebb2-4048-a308-7bcf70eb94b9",
        "cursor": {
          "ref": "daf52887-7492-45f9-bec0-201eea251a03",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d7c626f0-a639-43b3-9723-fba13581bbcd"
        },
        "item": {
          "id": "df9d96a8-ebb2-4048-a308-7bcf70eb94b9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1d041115-d4fd-4b3b-814d-92a443118ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66355b29-6e0a-41c2-908b-c1c8f7635609",
        "cursor": {
          "ref": "af1056b4-2fe8-4a65-a4df-f36c20787615",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3044f4de-3a8a-4c49-888c-d0863f0edad3"
        },
        "item": {
          "id": "66355b29-6e0a-41c2-908b-c1c8f7635609",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "97b9bbcd-9bbb-4126-a4d6-67aeb1361f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7d5eb7-b7fe-4d4b-959f-904f80f4b9c3",
        "cursor": {
          "ref": "aa1c5857-4708-4fdd-87de-5acb88fb3545",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "62ee9554-a8c2-4766-9f9a-530c636f9764"
        },
        "item": {
          "id": "3e7d5eb7-b7fe-4d4b-959f-904f80f4b9c3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23b88f05-7976-403d-8cb2-dacbfcc7de7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e13d197-fa7f-4efe-9d19-4f8644b34463",
        "cursor": {
          "ref": "47ad17f4-f7a6-4067-87ca-4ec122d56cc3",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2efa66c5-a35a-4b92-8a69-575ad44db652"
        },
        "item": {
          "id": "7e13d197-fa7f-4efe-9d19-4f8644b34463",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7d8b1554-22fd-463f-ac16-b2e04aaabe9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c27cf2b-9833-4df9-84cf-46a35664a82e",
        "cursor": {
          "ref": "40cde3d2-1909-4423-9ed1-87f653a34cf2",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "430aebad-f809-4a22-92ff-e02e26da9e2f"
        },
        "item": {
          "id": "4c27cf2b-9833-4df9-84cf-46a35664a82e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2e1a975c-8b28-4ff5-a253-2c2e6193d315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79489c15-3537-4fe9-b2d3-2e5e9b00a382",
        "cursor": {
          "ref": "4a18efc5-ea91-4ef0-b88f-1b670abb4a90",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "921ffda0-c073-4aaa-a61a-c18a67649226"
        },
        "item": {
          "id": "79489c15-3537-4fe9-b2d3-2e5e9b00a382",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5dfe0c34-b759-4bf5-8073-0636e03facbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ea4509-1e54-4d0f-af7a-ced7da046e84",
        "cursor": {
          "ref": "3842609d-38e7-4a6d-8738-966463dc564f",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "912d96a3-8c24-4317-b063-6cc15077a56f"
        },
        "item": {
          "id": "e7ea4509-1e54-4d0f-af7a-ced7da046e84",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "eaf00b85-800b-4762-905e-ef37e2aa2d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f21f7de-05d3-4f07-a45e-d267b24cbb10",
        "cursor": {
          "ref": "80eed62d-461e-4b11-867e-c591ee0eaa5d",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d46ed40d-11c6-463c-bc88-16263a5aed50"
        },
        "item": {
          "id": "3f21f7de-05d3-4f07-a45e-d267b24cbb10",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8314d7b6-e7e8-4795-a0e9-dfc6cb881b04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ce722d-4173-4d44-a653-ac97b5f8b2ca",
        "cursor": {
          "ref": "6312a757-696b-4fc0-9c8d-2ebed1fa0872",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a1451c29-6a49-4eca-a6c0-28cba7dbe6e2"
        },
        "item": {
          "id": "65ce722d-4173-4d44-a653-ac97b5f8b2ca",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cba3eacc-90fc-46f2-87ac-df7855e7d1b0",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "40df8a7f-5d1f-4929-ab90-10ba09071f77",
        "cursor": {
          "ref": "5fdbd0ae-cbf4-4373-8c1d-5b0a662413b8",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "fd97a8a3-6274-4f20-948b-4540cd20b426"
        },
        "item": {
          "id": "40df8a7f-5d1f-4929-ab90-10ba09071f77",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3fc3ac55-0a44-4875-a467-ca2772004827",
          "status": "OK",
          "code": 200,
          "responseTime": 781,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "48261725-06a7-4be5-a1df-0d13891ac745",
        "cursor": {
          "ref": "4f7460be-004e-4db2-ac49-01ab41a9e892",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "479cdaf2-11f7-4abb-8cce-4f2cde8c9765"
        },
        "item": {
          "id": "48261725-06a7-4be5-a1df-0d13891ac745",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "56e4c50f-289b-49e5-9764-34347fced058",
          "status": "OK",
          "code": 200,
          "responseTime": 1285,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e279738-11cb-40a0-a641-a0620e14592e",
        "cursor": {
          "ref": "ff977bdf-1131-432f-9f8c-445ac7f5debd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "31a7393d-4974-47e6-87d9-453de6198697"
        },
        "item": {
          "id": "2e279738-11cb-40a0-a641-a0620e14592e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "810ead8d-3928-4c19-be6a-c45078fb9c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e279738-11cb-40a0-a641-a0620e14592e",
        "cursor": {
          "ref": "ff977bdf-1131-432f-9f8c-445ac7f5debd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "31a7393d-4974-47e6-87d9-453de6198697"
        },
        "item": {
          "id": "2e279738-11cb-40a0-a641-a0620e14592e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "810ead8d-3928-4c19-be6a-c45078fb9c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca70b60-0490-47d1-b47d-33bc9faf92da",
        "cursor": {
          "ref": "4ed7f412-d2ce-4d22-aaea-eaa84e84eeb5",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1784ea8b-cc22-4334-a318-ab3ee1c9432b"
        },
        "item": {
          "id": "7ca70b60-0490-47d1-b47d-33bc9faf92da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "917ab308-4c0e-4880-9582-5ea76e93dba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a9cdd4-6784-46f7-89ec-6eec829b353d",
        "cursor": {
          "ref": "375ab116-a639-4ec7-b5d1-bef72f0742af",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9c3bb95b-e895-4ac0-95b1-4be9c6b7b1f3"
        },
        "item": {
          "id": "b1a9cdd4-6784-46f7-89ec-6eec829b353d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "45aafeec-66d2-4fcd-b076-989a66fb02ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}