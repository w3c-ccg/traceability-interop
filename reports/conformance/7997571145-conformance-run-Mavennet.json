{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c218de2d-5901-40e2-bfe5-520b7d693f93",
        "name": "Clear Cache",
        "item": [
          {
            "id": "86921946-4ab9-46fb-bd3a-25db910b3c7c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23560f39-58e7-4ae6-902b-92c215084db8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0ae3bfbd-6fdf-4d8c-a4a8-7e556aeaa9f7"
                }
              }
            ]
          },
          {
            "id": "d3574e6c-5a91-4193-9883-8032b3ba3d93",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb6d6ca7-57d0-4671-8984-47c218ec82e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "377e82c6-f4fd-4ad5-b005-35b11f8a6538"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "85bfd1bf-be70-47a3-8a96-5df7eceef418",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "06853e20-8d20-4caa-a063-341adf017d27",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72812cad-2804-4ac3-af32-895a98ff68a9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "121e454d-c617-47ad-9107-ff2020e2fc14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0af21a42-2624-412c-8f0a-f6094ded7a5a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5afc8b2a-750c-4ef2-811a-f059a44a69bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a6ce766-dfcc-45e8-8ff0-6ba440cda368"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8225df0a-4972-49f7-adee-d4bc74f299b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c4529fe-1bd2-4476-b5cc-a7f19ff66ada"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5836d92-ea24-44f3-b46b-5a368a8d67d3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9a3b670e-8cac-4a08-b3fd-3112f3eb65dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6b9453b-c0d5-4c7d-b37c-f8d2dbaddcc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e93f3094-6d5c-4bcb-b8d1-f12791cb75f0"
            }
          }
        ]
      },
      {
        "id": "7c56e363-a175-46b9-b7f9-d00f018e8b33",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "374e6a02-3b34-45c3-8e79-129f4b1fbe99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be2ce319-645c-45ef-a5f3-1f5296f9a366",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f011a985-c64f-4459-b2f5-92c0cbbff0d1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dc2d10-a1bf-4096-969f-550d6410fc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "579fcc1f-de43-45aa-a2d6-34d53ed7c12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd4c823-4cd1-41a0-af3b-3ab2162e9935",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bf33d3-ac57-48e9-9383-f7a0d243bcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4303dd42-c853-484b-a305-8ca665855255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91bf103-714d-4b77-831d-1284c0ca026a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f7d763-c438-44de-8f3e-eed418467404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6772e8a4-f5c4-4d2f-8c41-f90ff188aa56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76c9246c-5e3a-4060-9c6f-af2d186d415c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1ed3392-859b-46ae-95e5-3c1be1bba1ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16948437-883f-41e5-8123-0f93b57718ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5404d167-e26d-4999-8199-8641d2c745de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ac0448-10fd-4ab5-a1d7-e0ce019efdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2717413e-f09a-43aa-9ce7-88c5c703a90e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9fc7ecd3-3ed0-4656-860d-9c360948ae0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03e5cb31-04c8-47ed-8713-d6663270fc20",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b5ee4b1-a2a9-4048-b6ff-04a19e76e1c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "53d77b8f-8343-476b-9cf6-80acbb4e1e58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0b23f7d-dbb7-433b-85d5-15f271b9a638",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e97d501b-b549-4794-b73b-e0d4d5bec3a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fefd813-d4cd-46e7-9bd7-40c108e5a02a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6b7511d-68a1-4165-83ff-35b9fee5eab3"
            }
          }
        ]
      },
      {
        "id": "f70e02ba-719f-4e55-af46-7d8aedc04634",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7e40e2f1-d947-4755-9e60-3835647d9e0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "125d3b6a-45cb-4e1d-8c36-6c38da842ddf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0f59343b-b4cd-48d3-a820-2cd2f865a645",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279c06fe-28c8-4303-bbef-15c54e213b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0c788d-f791-4377-ab0f-e5e29c60f396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e14149-d5ef-4023-bcdb-e6990457f185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c2105c8-d33f-461b-85db-09dc48b44509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ae1b2b-cffb-4718-acff-0333a74de2d5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45841df9-b435-4490-a01d-2ca972b23c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1eb610a-69b1-4f6b-b7ac-236bcc21b014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2adbf0a-880c-4bef-accf-d74b13006a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eb579a8-9b63-4764-8a61-9b3e0cfac1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0dd2a2-c603-4f29-b4cc-d4d10f299749",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbc1e67-e332-4889-ab0c-097be6d95da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd07f006-0d18-4ae4-9de9-366c3f80d543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b9ff63-b7dd-44a1-aa28-fca691f9945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93034749-203c-4fb6-9735-1ade5c5ca1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2c66f6-b042-440c-9d89-bac497ec4e64",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051a9659-59fd-4b95-86e8-9213712e2ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea30283-8e93-4d12-a8a2-c61a8e5128f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850b9870-c189-4041-aa18-9f627f9cab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f2869d-5107-40d0-9899-36e55b9d8108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b89027-8169-4fca-856d-ef46467d5d31",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411bd3f3-5f49-4f43-ac18-de1dace77a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5998ec79-47bf-402c-b857-6f040a508988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793ed98e-068f-4f73-8994-fd89644efa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1346d931-73f1-485e-b4cc-b34a8306e8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd38f0b-06fb-4e96-aaaf-d0c2b36e5af8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d534f6-9fac-4086-af1f-22c4773e59c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c6384b-96fb-40f7-a0db-f49793ffbf73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90041508-80a0-4b9c-b1f4-76ad10ceb8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebbe45a5-d148-44bf-b96a-30c7a39b3efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bf9517-c997-43a9-a54c-dc16c73d1dba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a262c02e-91df-4dff-900d-125ac7794e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9186111-4a6c-4993-96df-8ffe52049ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580e9b06-f6c5-4597-b58d-826cdee94d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f34e846-3b8c-4abd-8d80-49df31a63ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09040cc4-bcc0-4723-be80-10f277cd42bd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d455f29a-a6f6-44b8-9d41-50d94ef6b62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0927d42a-e23d-4788-9218-3292e5ad097a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bcf280-4ac0-42da-a7a9-a4b11224e6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9353e9b-94c1-45ae-a596-0bf978535006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63e4783-80f2-435b-bee5-a54cf72fe9a7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b252d20-20e1-4d67-a681-eecce81443dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75ad81f-c3b7-4b01-a732-e7dc2f218e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e83895-8d5c-42e4-85af-7f816460edeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f59a525-a9c1-4001-93de-cbc9caaaa653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa63c27-2fd4-4bcc-bfe1-8533254a27d5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2994b3a-1bd8-4bd1-b565-cc3df4102ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098819af-4c7e-495b-9c96-4128af2b5b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce14101-8e01-47da-a621-36d1284a58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a98c21dd-0e10-4f93-9172-0e356665dc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5237b451-b8e7-4d10-9efe-175516c86c29",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b96cc4-7471-46d5-9cf2-d4bafb2b9713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc44c3e5-cf24-4035-98aa-51e03a5bb46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dd7fda-1762-491e-896a-d95b30fae944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9147ea2-9ed1-44ec-ac65-6db03fb87d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f176f73c-86a0-4997-b233-1cad38cd6051",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0bfbc3-0256-46c3-b06b-7812c974c063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5635d4-ceaa-4a3f-8555-52bc71a2c1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edd2a43-77fd-423d-a599-775225c62fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01e42782-35f1-4667-ba8b-1914b3b9886b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c9e4df-4b82-4637-9022-52003dc35bcd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7646f8-8ccc-4396-9d81-3a119b86233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dac344-ea87-42c7-8385-97f9dd2c1652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fd6fc7-8cee-48d7-a56f-ac76f81867cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f75625b-b34b-4d4c-ad40-ff6d89dc5e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab75046-5560-4371-804c-9acbad8f74d0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427541e2-9dc0-4a09-aa60-01f509fc9bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d76bde-5b8b-42c6-a0ef-5e85bec9ec57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7319646-ea79-46b2-8324-9900e2816825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7db77439-08c9-4525-819e-1d482333d177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582767e0-1d7b-4300-b1c2-7b34e7e2b534",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5726b207-0d01-4aca-bc10-8cf15cabb964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ab3169-fd8a-43e4-9b06-438a4c361b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61247b64-a5b6-4528-8849-03a60879403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba698c82-a455-42e8-b23f-bec90d1dce29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7029cd-1540-454c-a6fd-7d94ea696c99",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1246dc-f1b6-4461-9078-a3c6d2cc61e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3309c3-3cf5-4bb4-864f-f3995a20febe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ce27a-72bd-4eba-832f-1a430738baa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca9dd998-b466-403d-943f-1fff10d54610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7475baa2-9a74-4e03-ae49-3139afe99fd3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3376e8a-a296-4086-b76e-c8e1121047f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6ccf16-2b18-4d0a-9b60-ee24879149db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413c4d10-8ac9-46e2-aa21-6cbd55a303ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b00396cb-77ae-46b6-bfea-0d2df473dd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc7da47-e529-424e-9038-1c65a48c6b9d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453b266d-ecb8-4329-a0d0-191fd98c1493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e6e5ff-ee53-4fe0-bffa-445b797db412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9725342f-6c10-4927-b2a9-2339c5804836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "da7c10ba-bba0-4204-8fd9-434dcbfb00d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b44a70e-ba48-436f-aa97-bd8e7f2ed401",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30718957-2692-4aac-8bd1-41ad7d05e209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3600637-9a5e-4d8f-b91f-d85346044740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da507fb5-4eef-4753-9389-83287d1a0c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8b5675-3fbc-44a7-b2c8-151053a1d010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d186c6-0eb3-4ac8-928d-0a020ea8d8aa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaead0e-efb3-4392-9186-f1ba5756fc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c15915e-c2eb-4bfc-a7dd-37014ca80088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56b9f47-1bb7-45bf-9232-b3bf5a8e778a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6306f798-1a16-4fee-860a-778f5e88aaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9423f9-8dcf-43a1-bba9-19789613f143",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d095114-9e12-4574-bd73-33f97b69c212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76645ecd-2860-480b-8add-cefd23f013b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d372f1c6-0889-47ec-bf85-ab17b47649d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bacd539-dfbc-484f-94a8-962731e00893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb1580c-183e-42d0-9807-29800910431f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c00592-57d2-46ea-b225-4f1bd9ef1fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ea4f40-2c04-4f2d-bffd-098cac7b1128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4e3da0-abe7-44da-a428-3cc3b0e9f21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43d068b7-98af-4ee0-b74a-f3629f042320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8044b58a-f130-4f17-b87a-752232c93678",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d696ec1-9dc6-44dc-9572-95a3cd4dbad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b371e0-b671-449f-93bc-e339767a1cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a1ff76-5be5-417d-ab42-29f59e8b0e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f3b2d8-5970-45bb-b473-d593833ecbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c5b03e-e0e0-4f1e-939b-2e239cbd8d6c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c66d84-60f8-4132-8fbf-9b431f6e0aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26aa5a55-8a68-499d-bcc3-78d62c70fbf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9297c10-f972-4094-a9f7-cb2e0e28d0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bae198c-c53c-4096-8bf4-ae6c7d9b94e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58660fd8-37c1-4ca2-9e39-4d78edeb449b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd58e46-d287-46a0-83b3-88b1b65d54ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ecb53d-d34e-4832-84dc-197ff2e9aa5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad5b11e-d2c4-45a6-862d-3939004919f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c777cf93-5dfc-4a9c-8c0d-290c07d94847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51438b5e-8900-4f01-9a9e-5fddbbfe4fd5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e577a9-b3aa-44dc-977c-159ab5742e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3324c839-8ebd-4d6a-bf83-e124173d734e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06199969-6270-43ca-9da5-f7ec033b419c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6145568-0ce0-46df-b578-4d8aae4e5dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5b55e5-a3f2-4d28-a27a-e02c9a2992b9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314f6cf8-0a34-487e-a260-02ff8fdbd6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb43e62-849f-4370-96ad-6713209c548f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c463a646-19e0-48bc-9f80-e46dc1c486a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "832f155a-efea-4b53-a2b9-6c1b9d496309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b7d451-6aa4-465f-8d12-ae64b102cd07",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c501a0-9ec1-43d4-a7bb-70352ff7030d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9e0183-e3e0-48bc-9398-570391dfbc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778b92e0-ba13-4946-9d8c-226ce444a520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8db6f75-1d24-4094-a8f8-25fcbb6ed8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448a1be7-9a0e-4259-a825-2be114cb4767",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb7612-cec1-426d-ba5e-dd52f07b591b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c6a473-658b-4700-8bab-52dda42a5c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8487deed-4ee5-4083-8f00-6fda3e852528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff209f9-5fa4-4bf6-a144-f16349699c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3072cbd1-33c4-4ea3-9970-87c7f66498ff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8abc2-91cd-4c63-b143-c98b29675faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf837a0c-e857-4635-ba03-3f5643b53bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc66091e-7c98-4ea4-8d8b-df1f959725e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e42eb350-f266-44df-b1c5-bae94b0dab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f346f3db-0009-4b4d-a192-c3cb40ffbbd7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe899e8-1f39-4e8e-b2cc-61ee888bb8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cf4579-d96f-4280-8e2d-4e17e7a25379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b7103e-689a-49ed-9ca1-49d1485ab65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dab6d97c-27bb-4a28-8868-3e8a50070052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ef1e00-98ea-4d86-8137-33113af8b0a3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab65367-3a66-46a6-bf05-0f7eea307e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61839ff2-9c41-4354-a5c8-24fa96779681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd16bd6-070b-458e-9572-95d03fc1e030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea73168-a65b-4e40-a61a-d5640f2712cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee32f5d7-4516-4c1c-bca8-ffe93b96646e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9cb303-9b5d-4667-b9c0-483b674f214f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f703c8e4-ca58-4f99-90a9-f62c9d2fe541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beff5760-73ca-49ca-b239-af4157df2844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00322374-713b-4675-9ad5-b21ad9e5b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c6014d-2655-43e1-b4d8-0840a32a3248",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce705d8-7bbb-4a8e-a67e-d0802c49c559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de33e85-2786-4253-b7b2-fb56360652a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e53a154-a5f4-47d5-ab9b-7a9159d96557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5d20ba-3d0c-44af-bbd6-0af9582a9630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70551ea6-ce96-4b70-8098-aeea518cda9e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85811d29-2a52-4525-a643-8e2f1b7bdd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f861dad1-0da7-4845-bf29-b987ea91e5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e8eac1-d6ee-4154-9624-c1e029c98862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e75c3db9-8f39-487c-94d6-659619706fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec2da83-a85f-4644-88e4-2a179c5b70fb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09faddee-4912-4963-9cf9-29acac3ea190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dda51f05-2557-42a5-b6ef-f607e43bb4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1033b411-ccd4-4ad0-8c5c-c958d82d4b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b274807-b565-488a-bd58-fe6f943a92fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2829b637-b22a-40ea-9f43-829d9f540aba",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded6b1bf-ba76-4143-a496-72e65ac76574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb063f2-6b6d-489c-b222-701aca08f428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8910da8a-469a-44ff-a94f-e7f27ad0d67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a617f3ca-e97c-4f9e-8b39-0ae227391c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91436989-3a4e-4114-8f9f-fc096033f4b5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f929dac1-eb22-40b3-9985-33ac9edf5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4d0654-1cd6-40bd-8f21-fb85e394fc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0956be4b-ebb5-4819-ac96-bf155960e82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc9dca4-e815-45f1-aa24-b11dee77278a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099554d0-d224-402c-9a9f-3096bd80c9e0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309406a-938e-4415-a3a7-d290d64b0f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c86105c-256d-40fa-adad-5dbfae8a8154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dce1b4-36b7-4113-a097-98e41e30a452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "94c91719-12c2-4c44-ab64-2972a766f6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2320f6f-0f31-4d09-8c7c-4613cbe44444",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7400375d-1d37-426e-970e-b2f6cee2f47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936ed563-f0cf-464c-a058-5ae2a7f9b905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37620417-ff69-444b-9df0-72744cba6256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fae08324-10b2-48f6-9cce-cf1096de9339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96e5535-7265-4a57-8ed2-dbab1e0ce553",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffade237-28ad-4a26-8970-1280f0744a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ada2095-12c5-4043-97d8-a89e2fe2f45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c10da1-d0dd-47cb-8d8d-699f73ff6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4a9e5a-ea44-489c-919d-a2917d827741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b51f68-e01c-45d1-8a9c-88a34f12243f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83d66e4-f917-457a-acc8-c0a201463c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b78deb-a9dd-4928-bf60-232aff6b78b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e47f4c-42d8-4850-9d30-4a17dea10d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1f39b3-0e91-4dee-a63b-0e199401712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaaf785-5e82-4854-89ef-1c9d0c7d7c11",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b2f0f5-7ad4-4c1d-9fac-35618b255d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af954ab-4401-4c5b-939d-566923c785ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47acc519-7a2e-4195-adbf-f4d999fae3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "780cc76c-d333-4a37-ad30-69a1082df99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d780f10b-7066-4f49-8314-a03ea647bc8e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d693b976-68de-41b0-aa88-dea451337ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993b7fde-1955-4e16-b368-62322f0668ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20be20-4965-435e-a786-be28b70fb74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a23fb8b-e57b-4d9e-8399-a228912273ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab44560-38aa-4919-a7ca-cc3819f659a9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43b099c-c5d2-4060-9d00-4d2d77a870bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591ca332-baa9-470e-9eea-9c091f9cba9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abe6892-b267-42dc-a4b7-66c1ae9c924e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a409488d-e956-4baa-a20f-2ae8a58cac82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7bf1c2-f66d-4cef-88da-6ee3f3e11f36",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e999f4-2ffa-4645-a9fc-86fbf3952a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61da420-cbb3-48ae-b23b-1243a4e5912b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986b10ef-a852-467d-911b-60fe1bf7a1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbfd0af-3151-454a-8bf6-0a20cb75885a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25b1afb-1f74-44b0-91f4-e45348eea39f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87211188-55b6-4cbb-9416-411b12f95413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e8739c-5238-4720-ba62-a81c9b4983f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd992af-6e53-458d-9b60-6c7f0df35805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec1fd41-a8f7-446b-80df-c0ea148b136d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3bfb96-0c67-4c78-9728-eac58362c3e1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ece159f-34f4-471a-8537-108d53140af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808ed624-5d47-4855-bebb-e365b86441bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa5db34-7475-4d53-8c50-b950c01172d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6128efb1-0b3e-4778-b291-7278cd6dab8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2c7f7f-8c8c-484c-baaf-82c6c5ecb5e6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761ca973-45a3-456f-98be-df3bcd3b4a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a9a1c7-492f-43aa-88d4-96d193338010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb18855-7d3b-4ab4-b4a9-d026b053608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf375997-6a38-45d2-865b-35d6e5fc3a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fa63fa-8e7c-485a-b56a-6e27182c07e9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a31ef4-ffdd-4079-bd98-d7e933fd899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56061f0c-9615-4008-87f8-f817b98e91e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aded25c9-c65f-4a99-9a70-d393299b82b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7db6057-4a88-4efa-8642-62aacf9d369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d307218b-8972-4941-acd1-ff9956ec870b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f678923e-9a19-4290-8c69-be146bb8805c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcec7fd-1229-4923-9c80-bf11cd648b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5e7588-f93c-4082-a7bf-5c538ad63daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cf817d-10c8-4f07-9775-cfc4fc1ee8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a798e600-05c5-4e15-b298-41b3b460d13d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c3e550-4d4b-4e58-9d3c-16877b97bf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384c150f-0d9a-4aaa-8d8d-a48f008bbefe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335ab323-8186-4c8b-aa38-b718f0ee9607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c201be-2ec8-4c58-95e7-4ff32aba8d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1523954f-3db0-43c7-ae10-de0aaff28f3c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc64efc-deb7-4380-826b-ecae7dadbd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa41da8-473f-4308-97af-0b6fc4b94361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c878af-6382-481f-b151-76c7c89ad79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae6d972-8cd0-4269-b507-f3935ff22844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ba21a7-3584-4fce-aaec-9f9e033fc496",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a148bc09-dc6e-49ea-a446-5f3f77527344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bd21dc-84b9-479b-b06d-aa88f94fb23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35537790-e8bd-4ca1-9c9a-e60a432b886b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "496af6c9-8ac2-47de-b585-3e17cd3a3530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236c680b-989c-478e-9db5-ff938e1d54a8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853e7b3e-692f-40ca-9d19-84de20069511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be9dc18-1f12-4804-90fb-03458951ea2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e675c5-6817-40b0-9401-b10b1b0e7984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06189dae-efc3-4919-8937-bacf0df1ff09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a2d3bb-04b9-4e06-99b3-b802cfb4550e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc7d5ca-d1b9-43c9-aa67-0b7afe2eb52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c67e1b-23d0-4dbd-af51-cbae43489592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237e223c-9dfc-418c-b218-646edcb8020a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8f35c4ce-4376-4bda-8385-ee4664d1969a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3628a2e5-70c6-40d5-8398-d2efaf932fd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7703ea9-af6f-45b4-b179-829733a5fe99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c5b40f-e25b-4478-a445-3d7fe0180fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c856904-7102-4522-865c-3fb4db5126c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f03f245-8928-4a8a-a0de-fd31a6af0b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5cc8a5-ccd3-4294-80e2-48599f43aa28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fffc24-06d4-402d-abc4-03002f9f853b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d60a87-799d-4736-a4bb-19d44ea5037f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5215b27-8778-438d-a4c5-666918ce1749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca838fc7-35fb-4901-a18a-d9bcb42f3f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7e445f-8196-426b-88e3-a21ad3e9e2ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f24535c-d3e4-49d8-a809-f0b1263b5ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be06002-20c9-48c2-91ac-f570ee00be9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dcd963-5f97-4d9c-8acb-c9a868b941a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "88ba1855-9a53-4fde-b155-dd389a1f0d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe53ba9-af65-46ab-aabf-184792ece24b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c2dd71-2da4-44ef-bff0-62fe575e95e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028475b6-7620-4c00-b214-1cec854eb078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53ba0ac-7f57-4465-b066-dfd7ae6cb531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "973df00a-c070-4b78-96ae-618887c512f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f55733e-3252-4f2a-83e7-51ac3b7ee6e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330e81d0-1311-4d4c-a7ae-34694fb18dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350b78b6-1558-409a-9912-5f3b207a00bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cd8216-1fe0-4ae6-b1b6-fbf2db4c1887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f47cde32-759a-4e2a-8e71-3852ef1f98c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1495f799-11d9-43ff-83b2-220de12fef4e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e70e46-194d-405c-9209-a18b965a7e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d6c243-7cfc-437c-9b7b-762b518a6281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfb077a-6065-4be1-ab57-8533fcc0c5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "65681ee3-23a2-4522-991e-fb7323490987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d224f311-6400-4df3-81ff-6c019727c6e8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8baca30-e345-4368-9f92-e39929a2a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f194cd7-40cb-47de-bef5-f059965f5400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62397659-731c-4f46-9601-44952644da4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "49d5f95f-c7b3-4463-964d-bfba065e6df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75487c67-422e-4469-93a9-524556f224c4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7dee06-4d18-4340-8d51-c517ed4583b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4813b721-f74d-4a2b-9b58-1fc40430b806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d910e9-f76d-4ae8-9c2c-2cc473f004bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59daf341-32b1-4163-9489-3707a7abda82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5626235b-dc28-439c-9bb6-61b28add89e0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eee7240-cebf-4d73-9821-6c877dc220eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61713167-17e7-4c14-a198-91eaec536a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7841a4b6-52d7-4e0a-b040-f23649b0efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4779a69-69d3-4e3c-8e3e-58cb361b6ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effcc718-bcfc-4b76-9818-2e03a9b8a54c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0abf34f-3c16-4252-b2c3-7fab7faea133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22d5bb7-3011-45d7-9d43-90caa297cddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afba56a1-e417-46fc-bf6e-73b738c00c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f3a6db-2621-4e90-9cb2-19a2600c40e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc971fc-e0b3-426a-9eb7-e35c81188c05",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f578cb-7d75-4478-99dd-740f3c608875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ed358d-394f-4c79-bf1b-b9ebee61f59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dca457-7c6c-4009-b444-a8678a716804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d25166-5b64-4771-a0ec-7797a2cc909d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7f0620-4222-45c0-aef9-e2aab05feded",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24d886e-d59e-4e45-a09c-61d0a8c274f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cca661b-452e-43c8-976f-de0d919acf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e32fb4-1dde-42e0-8915-7cb4097ac25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a524ac5c-6343-4248-8dc6-f619d8750a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d244c0-32f3-4e31-832f-3071c5876b4d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b03d572-9aa9-4e4a-9c2b-4e8f7e286566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c30b37d-9222-409e-9b52-533fcf97dba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7e0dc9-b050-4a2d-842f-0338ee3650e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c086337-8225-41d6-b696-42e46848e8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136135ad-d02e-4d61-910b-fc355bb70447",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1f471c-1e0a-4733-8dc9-4197fecc5108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5cf34b-82e8-420c-a310-fe7b09ec169f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77e9231-3aa0-4785-941d-aa2392b4cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d0e3c2-227e-4032-8455-7ae4ec856203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d05b48-701d-444d-b090-0562f6e647d1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344e1c7c-76ce-4f27-be34-23059301f4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cae3019-0664-4fde-8b59-735496837dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cabb5c-47bb-4fa7-ac5e-f98c3d60a11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0306c70-7c08-43a3-ab0a-6787164bde08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcca53c-f401-45a6-91d0-2860dbae707a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536ab585-ad96-4f6a-8ba5-e6134881c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2393b7-0a0d-4e8b-95b7-0ee9ed574071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4768d7-58a4-49e2-889e-bb35fe70b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4dc842-6d02-4c74-b9f8-fd0c6d55e261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fad2ef-15ad-43b5-983a-8aafbd7f4718",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb675a3-a69d-4ac8-91ff-39e8a8009567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b467fa6-01d6-422c-ba08-fde5ade60659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9dbeea-ee28-43e4-ba42-53e27a6d5542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7c57d5-0ff1-4cd7-955c-8d88f5f2a791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda07f48-3d3a-438f-ae90-bf19df27e59c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaa575e-4bf1-4b8a-a0d9-6ae771c68a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e7951c-77e5-4d09-a6cf-a6f1e37b0b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fe0fb9-51c6-4884-b574-f6f5e79467ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee67e633-db77-471d-8d7c-91e111cbbe05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3e74d9-0ca8-4737-8b99-b20a8129d86b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2d3b67-80e7-4861-b6a5-3315cb914671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df7393e-5d36-494a-983a-0bacfd303e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe45a8da-4d4e-4ac2-84d0-81a59519e5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf214946-97c7-47d3-b98c-2e048889c24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c51702e-a3f2-4207-91e7-df3a2dda379e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f5f86f-823f-49f2-a29e-eed95673f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95eb2f6-0806-49ce-924a-b1dd9e2d111c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67711097-c88e-4ec0-ac16-8af8dfaee12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "058ffda3-8d64-4dca-9a7a-be2cb80b14b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7e6959-fe9f-4409-9237-f19d0f0dcf0a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4122b4-12f5-40e4-90b2-b37c38ad4021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d9dd74-27b4-4092-a309-c31b0b4228cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4685bf41-767a-4468-a9d9-29d590fda183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a946aee4-7838-46f9-a9e7-80f9036bd7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55121d30-b8cd-4ef0-87f5-0da191f23613",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c96321-a94c-4d20-807c-66f7cd7307a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49978895-b4f9-405f-957c-d0d73bc75204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae9b2f7-aad2-4b59-9586-db771e235dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8308e7a0-c67b-4367-946c-dacec8065120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd11d1d-6b79-4d2e-b18b-9ac5373487a9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866dc5b9-62ba-4673-b683-246cb25ee000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7a8c15-5410-4bd7-9075-035f394338e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb43ae5-1776-40d4-9f44-40cfd66d07a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "338f0253-539f-4b56-8b70-434b4ccc2d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282410f8-a998-49da-a167-e0621420bbaa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48b5afb-9dd1-4ca6-bd76-fb4de79b1948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf90568a-e74f-439c-af0a-2df9994529fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86de841c-8ffa-41f2-b643-0ce68e637f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6b5561-211a-439f-80fc-2a99c9903e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1612aa72-0434-48a9-9076-790b647f5da0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4efd86-0084-4437-9494-08bb76b2f38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96be9c0f-222b-40b9-a5ca-2358b8e7be8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ef72e9-29f4-4f63-994a-4f606bfee1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a22c3c-9b0a-4f54-a97b-2702f1f1fc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcee2db-cc6c-4cbe-80cb-96e064118358",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1623c5f7-6ee5-476c-9d4f-a1eda843ad9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef72e17-e361-4f57-9d4c-1e7bf77c7ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de79a208-75b3-4fbe-9577-c49c75b4c4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f7fa22-8a58-459a-9d91-3f5f3e2236bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e47e97d-33d4-4019-97c7-a38a733bdda8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1950f62b-cd7f-4675-a390-a1d544992f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342a614a-cc5b-49a6-87ce-7540815392b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fbf003-88d5-47c2-9bda-70d2b67c5906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d655bd4c-b05a-4d6e-bff0-1f6c2e56de41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2683d4d-a73a-428f-bb87-a4be401c125f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389efb5a-7241-4baa-8de0-6cb0e9f9f6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cd894c-134a-48fc-801a-77c39fa53e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc29909-575f-4cc5-ab22-6ab91bc20a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66bd19f9-d31b-4664-8a94-714edd3bba63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77aa370b-e197-4831-8249-da28c465649f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38c9d6e-49ef-4984-b059-1cf17d2bf108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5650d9-6485-4932-879d-eb74d1469104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0d04d5-f0eb-4bdc-a214-31187dc11204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0614234b-3815-491e-9159-05c3057344d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6316c85c-8927-4961-9ef0-b192e997f6a7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554237ea-0b89-456f-94c6-4deb43fc35c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b862aba-7348-4f69-a625-592aae4d6941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4392eb04-7468-462a-acc8-8cf38cf62087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45980ae3-98f3-4ce7-baa7-fc23b4b2898a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aafaf21-20a4-4f69-876f-2369ea863d21",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d2cda6-8557-44c6-bffb-dfdbe9fefd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2b974e-da10-4e69-a4ec-3484396737b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54517249-33ee-4b6a-9210-03f69342c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf3d32d-5eb2-4dd9-907c-1d048119c55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255a6792-e221-4e7e-9c3a-f1e2e858e6b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fbcebe-01d5-492a-aa79-a421dab91849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b643c93a-b0d5-4ef6-bdae-2d87c8aea521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c4cb89-f1fc-432a-b565-9cc019e6680f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "870a17ac-98a9-453e-bd67-b60f72895c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08289d6-bc1d-49e8-9591-f692fd62cc65",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2459eca-3fca-42f4-93bc-0c4cef0d3e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148ac722-f670-4133-ad25-deeb86dfe516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cca1bd-3693-4265-87d8-4d9ed65f6629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e81732a-9424-476e-bb21-ae76de2bf4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d886964-7dd7-4bf7-bee0-8781b36a1bf2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d26230-c2a4-41fe-9324-1d064fd73926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c7d8f7-5f2f-4da1-8d27-5c4945707b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48fd681-5be5-4e27-b685-b989fde1a27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7361ab-36c2-40f4-8dd9-1d418bb2709a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d38fe3-807a-407a-8a74-027d1524d40d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd179053-f0b9-4193-9be5-90917ace84f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a0d158-72b3-455f-be3d-dd27f2e526d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14607f6b-0c12-4ad0-b362-74e82fd6b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd31b0a-bff8-4823-8377-5574d479ed0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5acdc2-bf97-47c7-ae72-094fa8396bb1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368397ec-57a0-40a0-9a2d-8cd87e2c2788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4983b40d-0b8a-4e51-93f8-d9b2055941ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6d6607-a714-4d71-a838-50cea143e879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5b544e-d710-41da-ba4a-d7945319eb85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0141d90b-184f-4366-abb8-03fcb0cc08d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f54b6d4-adbd-4563-b264-8ba1559c40cb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b753ab03-806f-4219-9814-b9a10b7a2209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff15e2c8-a473-4113-a50e-a04d1e0b78e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532ea267-b24d-4490-9a5b-b2bb4c4d0cab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "003829e4-99ed-41dc-932f-3fd9192daad7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cfb1419-642b-4091-983d-e3e005287b28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd71f5cb-a3c3-4524-a8bf-90415a588b6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99610ec7-162a-4aca-825a-d5f28d3a4673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db91353d-b551-4d94-9ce5-17232526f0d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9e2500b-64eb-4c22-acc8-7a01c1fae7ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7c2b0a6-e6ed-4def-be34-a9157b1824e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07469735-403a-4eb4-bfed-c2bac2de5a6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9a49b47-532b-418c-84bf-8bc09ad33239"
                }
              }
            ]
          },
          {
            "id": "22260859-9291-45d3-a096-5f41cca29cb1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "923729c4-f5ee-4e14-b4dc-fb12894bf1e7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7c79d0ca-b320-4c72-b9f2-49dd32b4eeb3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c21cf61-090d-4c5f-b504-a076193be8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dd2e734d-fdad-4d0a-84a8-5e04b0138d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de229416-73d8-444b-a047-78aed615e896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2c0193-5b49-47f4-a36c-25e49a7da2a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f1f5543-ab9e-485b-bd5c-6e0df6233c2d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7a9eca0-938b-47cb-aa0b-5116df468eac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81932c10-1c20-4a88-9f32-e1c8606e1f34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "518820af-efe7-4a0f-94b5-f075098e70fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd5ca40d-83c2-4c25-a94f-1375cc1c7e6a"
                    }
                  }
                ]
              },
              {
                "id": "384272f0-c96c-4614-bdca-cc4eae806383",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13058723-b2a8-49bd-b0f8-b961b5e655e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ee444ef-814a-4122-9a6b-9033c887d1ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92d5ce94-8fea-4c61-b006-c01f708a4082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "350c828e-d915-4998-9971-36ae9cbc3aca"
                    }
                  }
                ]
              },
              {
                "id": "709605ae-1c84-47e4-aa26-594f90942670",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42548400-ea29-4855-99bc-34ba1d6c345e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e04a9387-ccf4-45cd-94f8-255b9bfd1f22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e4afc46-424e-4689-bf42-45cadf765997",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1f7865e4-6f22-4f67-a2a7-397100483fdc"
                    }
                  }
                ]
              },
              {
                "id": "47c9cee8-d2f4-409d-8564-903bce60c68d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98ef9ec7-d79f-4f03-b1b4-38e84ef295aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d7ff2d3-9ce2-4277-be75-ff1dd7ded0f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e398fb72-3fa6-43f4-90ab-64dd54f67952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e7c15a3a-851d-463d-bfb2-cf7e24518dc4"
                    }
                  }
                ]
              },
              {
                "id": "4b40d476-7b1d-42b1-b627-545035420d53",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1aa8a6-0beb-478c-b6e3-a1d8a99acaee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a261e004-b00d-4bad-9f95-fc7338aa279f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c772c91-605d-4d67-8347-8c1d13833bef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a87eccbb-23cb-470b-9df8-58720f572b63"
                    }
                  }
                ]
              },
              {
                "id": "b7737a94-4963-4431-818c-a5333d58aa72",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1242ac84-e264-4d8b-8865-c7f8f4689289",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2df88550-93ec-4e01-a7e2-27f2f89c686b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ac1dac4-01fa-4d55-95b9-23a3b54d79e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b94cc2cf-144f-4af0-b3f0-53cd9e00219e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d36d1d14-103d-4a6c-b8ae-167b70db0e90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "346d680b-9874-49e9-976f-6b095950b160"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5eb8f313-d08b-4b38-a8a9-6420f11590c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e0ef8bf-ec42-42c5-9d6b-3526e3cf9f91"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e2f9da6-32c6-4837-ac3f-9a7962c242b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4e2815e8-abac-4389-9347-c73346519de1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d975b42d-9ff0-4142-befe-59f018ddab9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1731a40e-c7ee-470e-b6de-4ed5d6e1b237"
            }
          }
        ]
      },
      {
        "id": "28f8a9bb-2b1e-4f0b-b74c-eae216923cd3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e97868f2-e6c4-4a18-bd0e-67293b0118a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d66829e3-b1f2-457c-aeeb-a1f63588bbdb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bdba2657-36fc-41ba-9233-883b86b41d80",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c569d6a5-0c74-46f6-ab21-e733ab0b5647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d12a5dc-247b-4af6-bf90-0ef6ece76fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec00ae8-3f6b-4d88-b080-70856cade1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2cc019-20f4-4a69-b337-0652a7069d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7789fb9a-ac89-4b77-b7b7-0ad4ec16dc14",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2592b18-5a35-42fb-828b-24071ccf4660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e043fec-8ab5-48ef-878b-6037f12d51be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1294836-a54f-42d5-b203-239fc983846c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1199e542-8d38-4f70-a5b3-a1e0503c8788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ec78a6-c655-4581-99d6-5e3bcad65d52",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b8dd53-6bfb-43c9-b0d7-fd9500ffd19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db7266e-319e-4077-bf8f-f14d122b7022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039ac2ba-ef09-4ed1-ab7d-d781c9564d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1265ef1-8c66-4191-be62-950a01a28c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b670cdcb-ad2d-4c16-b4fa-deda855b952f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1242c5-d85f-4af5-875e-1265f5f5c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1666d39d-2014-4e2b-9e77-4627ceb8eb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf082ce-9e77-4a3e-8d07-9762fb9aa745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "189a0003-4d41-4ae9-a55e-d8cb5b575635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a816f744-d85c-4e23-9d99-c7d52b7283b3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c5ba5e-e53b-4e14-9dfc-1ab20a4612b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a17602-4710-4582-ad31-7cc838628f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641010ea-6767-4dbc-b2e4-32b1b43e25b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d29ac1f-3daa-4d19-80ca-5fc073141581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c8f811-188f-44e4-a33d-e81740e8f9ba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b53249-b214-44a1-83ed-5cf0585b0c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ace198-c769-40a0-8d1b-05ce49744df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3836e11e-28d7-4695-a07f-71ae5a0a9805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baaa3349-7177-4d6d-ab74-81d5e161f519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4c7745-9871-42ab-9a41-610683c0abb6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e55c46-12a3-4284-919b-6c78d7e0fd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5698f7-96ee-4dbf-81ec-b0820fb4ec27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c03f54-38b7-4cfa-8077-3b98195fafea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c08f1ac0-cf87-4f6d-a253-78167e03f694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6f9faa-08a2-4bd3-a95a-bec682b02169",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e9ee47-42d7-4d33-9219-0c3e650837c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecb71d9-bca3-4f9d-9b39-a1db907aac89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eed5881-3669-4197-b2cf-78c07e6f9ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a24cbe-7d56-487c-94a6-905cdd4f678d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef2801-3b46-483e-b772-7e68d5dd5bdc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31589c13-1237-428a-b9ff-6d51c108ab4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8086d63-55ce-4817-ad8a-3cc67b3b1e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a13c7bf-dca8-4ffb-9728-f03657eb822f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "518a96ea-086d-48c8-89d6-ed552d4cbd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981c07a5-bd96-4542-a89d-09900fcf3feb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecbfb99-230f-4b06-affb-bb245590af8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da306095-acf4-4234-9266-58f12b49d9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe3fd62-2340-43b1-ab42-7f46e7d13355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0de85733-2f7e-479e-9b41-63ba58d95917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59400fe6-98bb-4717-be4f-d16381efd17c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72141452-62d5-469a-8467-f2df81e4fd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7daa81-c7bc-40fc-81d2-fe5912d612a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f5c4f2-afaa-4cd8-8d33-360b71be152f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3233a060-0d16-43cf-ba6c-96f12980e70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a6fbcd-4783-4689-b537-f94b06be4022",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64283d9-4d70-4fbb-a4c4-09c232e2ae4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98f5bbb-7bc9-4aec-918b-c3ad26e0705f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ab3ea-086d-43c1-aa4d-c8300d0a727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b7729a-8a5e-4c0c-8482-0bbec66ea04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16c9891-9689-43e4-b752-cb3d67311504",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13dff73-7c9f-404c-8744-aa424229e1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3911a6-dde9-45bb-8c76-531698acbeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be736207-66d9-4c14-ab5f-3f3518eacc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbf87e4-b334-4f0e-beba-4f1b253a7ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203b43d4-ade3-49df-8e1f-f84e6e3e4b53",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49567699-fe16-4c4a-b943-c800a3a8272c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b0f192-37b7-4744-ad44-d0ac7b6241cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffd529b-e27d-4fd7-909b-0e923167ae80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb39114-2358-491f-9a0e-50d0c2ba4a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0491829-2ad6-4bcd-83d5-127b77307d2f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85f237e-08e4-42bd-a4bb-6d7bd8999c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c052da7-a4f4-4836-b7c4-e75fd5b1451d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caf6a6e-ed6c-4deb-8422-12d64967ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "37225fd9-7137-4725-ab67-6ac97bc0e798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a82da9-2406-4ebc-844d-fd09b9caa30e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c117131-224b-48d1-a615-caf5ca60222a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cebe889-2b26-4951-9648-0196fc53783c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3de325-2d01-4502-aec7-83813dedc88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed99362-e7c2-4b67-b59e-a21c8cb0daba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5bb8d9-66e5-4643-b73d-33f70fbcaca2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d483928f-5030-4fcc-b340-63d6fe9d0a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4495e723-0b5c-45a9-8a4a-490b3369d29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04d9ac5-7b0d-4f8f-b2b9-e682c64d0f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2991a4a4-589e-4eb3-8c44-7033e20c3c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8719a371-edfa-47c0-b1de-967261d70179",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f3d7b7-7085-4427-b3cb-8637c1e35768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78696bc4-d0b3-4efb-bcd7-51a45248998e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5a1fa1-bcb9-4937-8c13-f1d01fbf2956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c825d7f-d162-4db9-b5cf-7fa12f0292c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b929eb-9009-4e79-b91d-d530cdece472",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb798c0-c45b-498f-9a81-715fe586aa65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f3688f-25d2-40b3-bce8-827d66ebcf76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b267499a-e449-4e9d-b5fd-94d7af18b1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fd0e5e-0075-43ed-b055-7e127ac84eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf77a8e-d671-4894-b784-483717eca18e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c34b13-3a46-4567-98b7-c117ff712393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87160720-dcb7-4e95-81f1-a908abb6c0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebc5820-e909-45a4-8b3e-2f53c89c20a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4541808d-547e-4cbe-91b2-25cb1a0d3c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b08d8d-2904-41e6-af5b-de37b5109a77",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3346e57-6556-4237-994e-bd83274ab3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a76514e-0f11-4330-9261-0adc0aa7cf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5baebc-43af-4700-8d5d-a651d71fee0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4e35f7-6999-4eeb-ab31-f623d2951b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a868ce-aef9-4264-8121-dac03550a96a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da48c94-874e-4175-a394-902ecc47142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45f57fc-671b-4954-a72d-f151d66a22ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d6beef-1dfb-4821-8450-a625635089eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d579d542-f017-4244-a64c-0cfa1465a7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fa0bf7-f4d9-4b48-9f32-fc11bfd2c47a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961b0ef9-c1ed-427e-9fd6-593583500be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd72d70-530f-40c2-8d96-e1156289eb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c428d0-aee7-4723-9912-b2cca071d1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c90952-9f44-4c07-8328-ad3b74420541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee426f0-8979-4e71-92fd-877018be9db4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31a467c-089c-46a1-8653-8924ee972901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209e8141-b3df-49d0-b9d4-594867e76650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ca4f86-6864-4756-9d20-01b7db9883cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0ef0dd-97f6-4369-b1e6-90b794a3e9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b86e82-1ca3-422c-bff9-c8daf6a28793",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc04493a-292f-4945-a257-648a1f922c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5093f86a-6442-421d-b456-adbbe6174858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7cf00f-1338-4b2e-b582-d805f17f51fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46d74e9f-4eea-4e95-8442-2947b34dcd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dad7ce-c51c-4f48-9ffb-eacc8c9f1e8a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb51f8a-41da-42aa-b27e-0f09a1bec241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4556e46c-5218-4ced-975e-773718b8f32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ba9479-aba6-4e17-89f0-43e5e3bdbff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be5ca53c-774b-4181-9a14-af06542c8248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57831e8b-0fa3-4253-8c2c-b6e96710a442",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dae534-3ff7-4fdd-b8a1-15b7ffd2c117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6a4e50-3ded-4c56-8a75-14ea854274f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68e94ff-2b34-4548-8f46-d0994c8a24c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62c70098-cde0-485d-be65-8c14c53d1a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c6eb35-8457-44c5-a13d-9e9be573041a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28297f4c-2bd3-4756-9931-6106d500f564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512aca9f-b546-460d-aa95-84c9eb4e55be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14377714-aff2-4029-88a7-964ebae9fd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79701dd7-fe4e-4159-bccd-769158a91083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f095f9a-1f64-4d44-bace-458754c58090",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528a01b0-c2a3-47b5-86ec-507447eca1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae55badf-7196-40ef-8c72-15f856faf8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eba9d2-d9e4-4dd4-829f-de71644f1fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36af654c-5422-48d4-ab4d-7602c0881d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c744493-c195-48d0-a3e9-275a81d350bf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef34777f-1773-4973-9e55-9d987636b460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5d3f05-a091-43bf-b19c-f0d93dc74d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9773904d-8a3b-456a-80ad-2a79798198e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3925223c-28d8-4071-a6a9-04f797087d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697c67f2-9e57-4600-8bdf-90de25ece7d8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58133174-f9b2-4178-b11c-17f890a99e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8f226d-8040-4355-b45d-e0e69965e811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3e8fb3-9f3c-47cc-8128-9389661a12a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81081970-2a26-4357-8463-4559392dccbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2dd7f9-e0f7-4cf4-9b8d-2efa2c6431dc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4fd446-dfb1-4597-a235-a5677ce6932b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e253d06-e8ff-4b89-9a4b-9beffd53d29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7054e30b-a380-4c32-9bad-2fabcdbe953b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bceebe5-3ccb-4fbd-99d3-7039fdbe6053"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f2bd9b8-c4a8-4f57-9943-ce0511881499",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f564b15-984f-495e-b8bd-24fc713016e4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8955f861-8c29-4056-aee6-dcb9f8d7647a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "782301fa-ac35-4246-84c2-fd96e028a680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9d0bba-2a66-438c-88c1-e516bebc9b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "520696ae-342f-48f2-b69a-fd26494650e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "801cbe3b-dde4-431d-af1c-88f24bca2172",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cebff83c-dfec-46fe-a7da-2cd5a27e5c04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b2d870f-caa1-4ba9-abae-68b5c5eadb28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94377c1e-e43a-4cbf-bdae-45ff4395a4c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f70161e7-c963-4b8c-9e44-eb00bdaf1a36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "98637ab5-2cbe-438b-bd03-11740ddce674"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d8809da-83ae-4df0-966a-8d291ccd70d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e0d55ac-8ce5-4e6c-b377-b6450dd54f50"
            }
          }
        ]
      },
      {
        "id": "5b301cfa-56e9-4bdc-b4bb-abba185a0cc7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fde9d220-fd99-4bd4-9190-151d7c910102",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cb14e32-aac1-4afc-a92d-bceb4a691662",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "34537f6d-8a59-49cc-beda-586e951d65ed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc77c4-84da-437c-a3a2-b6d2f522f571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206d7040-0ee4-43f1-9816-b20e118e032c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603b63de-8505-4424-b353-05a45083ae2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3f97e8-888c-4668-8fce-b0b6f617ac67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c70f290-63f1-4a7c-8008-60e47fdd1c1d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39439b18-e5f0-4a2d-a3c5-d877c180f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85606eb8-d5bb-4e32-8f0b-5b9941d86e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb3e910-5cb4-43a2-8bdc-0d1a050872b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be475585-12c4-4287-b653-5b3426600e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb22b5b-4a32-45e1-9787-57025c556cba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16336c4-191f-4cbe-b9ee-be3c95e0e91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20649cba-ffde-476a-9edb-a38326d09761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145bd1c9-1d72-421a-97b5-59da78dda091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "949fe788-fba7-4c03-a30b-55f91fdb62cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd13d2c-3fe5-4cd7-9aac-a929e1ecd89b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be292036-d40e-43f6-af8a-4d053bbec7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281ade48-59eb-4fbc-aa27-c8fc59661c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07f8c52-57ff-4b9f-bfc0-419441be1307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1de8b4eb-f9e8-4195-ba35-cfaaba18b0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13eda922-1d37-4670-bb19-e9318990be91",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63527d6-fdf3-472b-8c54-c594265c5b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce63b830-3f58-4d6f-8639-d2512d02e745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70ea164-acca-4dd8-82a5-9ad10ac12cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88ac5ed8-c705-4744-8696-78cbcdc647bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d5e5b8-2513-4821-8a8b-b4e0ae448815",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae487991-91a9-4545-848f-4e19baff7a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689a6024-b343-4046-afb6-6522dc0cfead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50b0edf-527b-4729-9f4a-adeb28434de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "754f75ab-0ff9-41a0-875f-ff2739f9fc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ff9725-5099-470a-b414-16163914d5e5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1f4933-de99-486c-99b5-14104a1dc221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726c6f9a-3d83-45ea-96fa-142d8d8f6242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14650825-5126-4652-a285-8c6d7f3f0312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "71033ef2-8faf-4ccf-b680-4c29bc1c8a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76db399c-8ec5-4cfc-8f80-83a7f8c6a7c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf017f-6502-4f22-9c71-9f89fb7cbf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e521a896-be68-4541-88ab-4d70d20f8c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489c1feb-aa7f-4abf-8335-80b92105a116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8391c30-7aac-4ffd-a6a9-16b624b3dfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dd84a9-f13f-404e-b6a4-1f1cf57393a3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07edc1c7-e302-4313-b283-85cb0f31ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a20997a-8a31-43ce-ba99-414c6da377ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b392747-c474-473f-95d9-ba6a7bcda726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cff774-f8eb-4f02-991e-9a8626420a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338eb623-81aa-4dca-be0a-06b4acb5abf7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02d618f-0b75-4ee1-963f-ad72ef3efe2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed3a4fa-ab67-4ce3-bc7c-d33fee16b54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd112b0-d417-4c67-a31d-4e139bb758c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ffcfa6-093e-4e06-9ee8-8fd94cbd039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8f1056-a57e-4194-a490-bf55896e7085",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b59ba7-0c4d-4ec2-abe9-c85ce6ccdab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02cd9ae-9eef-42ab-bb78-e34c5af6e05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029fc339-e1f1-4284-9fa3-d0b8e238c776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd00788-c78b-4ceb-a779-edd0c0216641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d277b16b-dc9f-46f1-9bbe-59fea3bd0f74",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37412f2-148c-4036-8a8d-5e1484a884ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f1d33c-19ce-457d-aaaf-bd8a771159fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3098ea10-1121-4b05-bb50-2dd4d552f6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44d687c8-c811-42a6-9845-9fa8d6cc365c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddd0255-dba5-4b0b-9f3a-6f8e2538bd97",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26aeb6e-adf6-46e5-aed8-f4cfc08b312d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6065889e-aeca-4380-b8c9-691a3412acf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2911f2fb-46e4-4ef7-813b-0b5cbf049e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f82a7c-16ea-46af-a0f6-cb8dfbf087ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918a9839-7e11-4228-ad01-c8dd16cb6bbf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a792c2f-c520-414a-b6e0-ea6171273cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc0b44b-9960-4ae6-a727-7d174fd7281a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20871d17-d56a-4706-a020-60d088544e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d7ccc1-76d3-4827-ad14-cc6d6c102cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ed7774-b299-49a1-8896-7e9319f137ed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd382e3b-0f67-4f47-857c-9f725670b2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c966b68-5fc5-4931-bfdc-89c684b0a4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d6f7e4-d68d-44e4-9746-bbd978be6e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3d6e08-db8b-4fba-89f4-d05ced689a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fda72aa-9412-43b3-9aea-4e19b042d010",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0794d371-0c8a-4ca2-8355-902421dbc605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70cc3e4-38fa-4427-9977-c3e6d20f6db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0cdd22-b013-40ca-95ae-ba134b3e0e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a67bc8f-9222-4303-ac1f-7fac74204cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f15ec5-3f79-4d1b-a17e-e0126236029b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b330b5-df2d-4e83-a95a-203f8f133d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2c82e5-f2bf-4c68-a9bc-fef6b26be623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9381538d-9f2b-484a-9552-24d139bd719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed0bbdb2-4545-4191-bfb0-a0fcf649aa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5904d0ff-81ed-43c7-8cbb-d78956f6faee",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f40cb6-8ca8-4d15-9785-b3123f3696fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7909be66-7be7-4f8a-b073-96c46bd957c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabe4194-054b-4013-81f5-1ba07fe25bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d11f93c-79a2-45a4-9337-c952e4222a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7003c20d-45f8-4e4b-9bb1-dd54f9c57983",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bd40b3-4951-4b66-8665-890eeaed3d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66813bb6-687a-4cbe-9804-afd2964161d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a81fca-09b4-44c8-bc59-39e7934b66cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "901975ea-b887-4c36-bf28-bbfcd0f9daa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317bab5e-8e2d-453b-8971-9ff6646c414c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8b606a-9b13-4832-b307-a32f6306f5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56327ccf-bfff-4e78-8e21-5a7291518c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbb2800-c11d-4b99-a53c-827de47fd012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a39ae373-e0f4-4e16-a8ee-1adc3c75740b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d2a0a0-ccbb-472d-a3da-1fe14f38eca6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0df21f0-9988-49de-9e38-e6dfbb38d416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1ae4dd-2c1e-477b-b1c9-11f684b0a264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4395ad6a-2143-4a86-8b58-23a0f1158eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc5b3a3-741f-44a2-a752-fa8bfbddb75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daedcb32-9539-4929-9530-4cf638da8e85",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d579dd7e-457e-4fd0-915d-48bd94d4a1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7cbcf29-1d24-44c9-b6b6-57cfd8428950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f7d37b-f7f8-4131-899b-b83ae39f406c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9825007f-aa12-4ff0-bc51-8848c46e9723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ab1f7d-15dd-4c8b-a69e-31e25134f367",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a5ca4a-51e9-4e53-8982-f3256019e2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6469369d-7393-49dd-aee0-b31bc8b7518e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c4d538-9626-4f8e-ac1b-fe09e986e5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f74164eb-a387-4421-b9fe-9f96a9e25e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf089b-579e-490c-8c49-beb233ed6041",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc3ba80-8f0d-46b8-b262-ed1508014d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63863a06-2052-47c2-8c67-0d24b580a802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda135a9-7ad8-42f0-a373-06a4487ee127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b258f8f8-16a0-47ce-aa91-896a630ba024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2791951f-f0f0-4de4-9320-a72dfc13b231",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c65309-160b-45ce-a1c6-65324d49df4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de58355-2d6c-46c5-9384-146dfe9d7df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e02c09-e014-4131-b724-2e4d661d00df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a110ee1-7743-4777-b30a-6f53ede77db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b4341f-65d0-4e79-adbe-ac1e1c51aee5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ea31db-755c-4a1a-a753-2d221c2cd108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1504210-6bae-4ad0-9651-cfd4c36faf1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b9f0b7-de2b-4f7b-a048-df01a53751ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c25296-6173-460c-af3e-9d3807cce2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97d9eae-06d5-4f76-8bd9-1a83144f8c84",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a851e10f-544b-4cb0-a156-5e7619bb1cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028f71a3-838f-4e9f-a30e-fb3d55981b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4396aa2-1ec3-42e0-81c7-063556ffef6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffae475d-4a71-4f34-bc07-66cc54215f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aed4a9a-ae3e-41d0-93d4-537568b1af31",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b36d871-07b1-463c-b258-f4229c6eed6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c9c7df-b5de-4dc1-9142-3534ced36a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b016cf5-7351-4030-9939-62c31255802d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc844d0-a3c3-496c-b236-425b43f1df2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a0ccbd-7a9a-4ccb-8151-0fa7ac39f49e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b60556-1460-44a7-b665-8f9aceef1a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0db757e-ee1f-4dcb-8afa-e4e0d4922b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70af2099-e04b-45d6-9cb3-6d3804ad4e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74a8d11-d21c-406f-9bf0-cb08be0ab99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bc9336-4e2a-4242-a9d4-e109dbfdd114",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80d3386-bc44-4d1c-877a-5415dc2da744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7ddacc-d246-44eb-89ca-660edf0aaf94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f02cf5e-fcc8-476d-a9aa-efdfdaea9f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b397e0bd-37a4-4955-b253-18255785f2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21082846-03d9-4c10-b0c5-355942efa384",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975b77fc-a883-40cb-84c4-12aeb1525bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744f175a-414b-462c-801f-572ee3ea8425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd06912-d4b6-46d0-9c9b-0a21cb99bd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "704e14b2-1179-47b0-b6b0-e0e41517f462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd8705d-fbff-4eab-83d3-eeb81683f0c6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da7c3b3-7950-428b-b7b9-4e38b0ec6f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7132b241-3183-4c8d-b0d1-702c29467118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68c34fd-a25a-4c06-985d-de4a1b1a69dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b7ea72-a26f-45db-9fca-e853867df432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05611900-fd2f-44a6-9536-23f74fc06b38",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0e622d-3182-455f-b706-66be83e1410a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f23f999-20b1-452b-ab11-d97ef2341f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd3ff8d-549a-425f-8ac5-f6914b445e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8ef797-af05-4604-9250-827d9bafa9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18e0551-e44b-45f6-a82b-68d62ed09a7e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbb4a21-d70c-45b8-9bb6-d483c7517f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc985015-a57f-43a9-8845-e94a35117ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388dfd0b-69b3-44a4-8019-cbe5f10bb399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "148fe844-8fa6-44c9-b0e5-b8e7e1734855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27d14ad-58eb-4650-b2a8-0ae6ceeeb9e2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a479e3d4-82de-4beb-ba44-e6091dbc91fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644b282a-00b3-4681-bfc5-c241aec6c30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9db209-4b62-4ee3-b77f-c340fcb3f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32b749e2-b1be-4aac-a32d-135b7c7e8c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f93681-18ad-4484-b3e2-c78159799f7d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007e8ea2-7ac7-4659-9820-b169cfff7836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdc4870-9352-46a5-82d1-27aff86e2169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e5028b-0210-4690-987d-3d4aeeabed47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54931ee8-f267-4428-82a5-7bcbcc019d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eba9498-f92f-40f3-98b1-9e489301853e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5bf395-f57b-49dd-b45e-b265b40e2085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd46aa0-e411-4f45-b239-216231b79fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8f8cc2-4257-4080-8733-77c1bbaac153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec262f7-b5dd-4df0-811c-1811166c5784"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8658b31-f1b0-44ab-959e-c5b70a9572a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d103830a-7204-4ca0-bad6-9ab8bec54309",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3a8361-fa86-4d20-9448-676c929e0a5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0e7ef74e-569f-4e70-888f-1a5620f5b238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bac074-9873-47bd-8ac5-ecae31dadecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "489abdd5-28c5-43ae-acc8-a4eb0c5b87f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc2208b3-c0d0-44a8-bbeb-be8264251937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7071724f-9938-4bba-81fd-3bb0ae33ad58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af1fd32d-9a55-4ad7-a8c5-32d4ede3eff0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2940cfc8-f073-4cca-9fc3-d11b483fffb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "404ceb8f-e40d-42d5-8532-a75317261f99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aeec082f-8c61-479a-8a5b-6d72fd38a6ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e67ec579-fef5-4979-8feb-3279585ef773",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44f5510a-1160-4336-8950-a433ed8c7118"
            }
          }
        ]
      },
      {
        "id": "8c8390f8-95ae-438c-9826-027faee3c7b9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8e6eb522-3bb2-43fd-8cf2-90c18c35f5c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53602398-39dd-4ea2-ba8d-95374c731c09",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d5071edf-b79e-4fed-9d87-b53c8a359a27",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793099f8-2d08-4933-847b-05ee2144b1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e57a207-d419-4154-8164-6e334d3a26af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bc838e-3f92-40b0-bba3-c299310e16ab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a219972d-43cb-459d-9552-04e41ce64d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e833d048-3f31-4093-b324-e2a8756b4306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fecb3c-1d42-4fbc-9582-ccdf92e0baaa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325f93cf-6d2b-4186-8aad-f49a70459959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0258dc60-5f4d-49b2-963a-9239b3c259d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c48cb5d-de88-4a32-8865-5f9f7ed1ff72",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1d1df4-b918-4528-9335-aad7235cb813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6949d30-1ce3-49cf-be48-a84e6b472299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f85ca1d-c738-4eb0-b4e8-fad2f41ed0c3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4050be0-24ca-4b51-ab22-c13171c64ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81813666-5a2c-4b27-9986-0755132cd645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe0af98-e192-4bce-a0ff-ab7728ccf7c9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0c0029-6254-4f7b-b559-d6d840f1fa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6826ee0f-eaf3-44e0-b7b2-1fc7fe8ef4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4793dab-927e-409c-9ad0-69ea74d1d3ae",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a6c4d1-3bb6-48e9-8a59-3b623d85427e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a21f075-43e2-4ac3-b3ad-cb69474633d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91ad413-442d-43d3-a27d-57b5cbf3308a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3afe9b7-626f-409c-a478-2fca96f19b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fa9402-57dd-4202-a486-e3abe6575c0e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0b5d2a-be76-49b9-a5c8-677a470cc553",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9c5abf4-e9f1-41ef-9833-21f9d5a30801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba65c7d-f314-48ba-9b7a-09c3223a4c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b87667-ba13-48f2-a343-7f65f0a08721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245db969-4076-4f38-8731-529626de64be",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2428f14d-48ef-4f05-b9ed-a592e7163576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aeeb248-f2ab-4595-a3a1-72ce9de9d9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48788870-2f59-49d0-a198-ef74d7af9e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a81943-53c2-40e7-87e3-df2e62fd71c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78533dc5-e8e0-431e-89c0-ae14486e9bb5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77524c53-8539-4cf0-9472-b5e1a851cd32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad282336-8a12-4eae-90eb-72e648e748c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a64c150-28d9-476d-bf46-29990bfca3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59dfe96-390c-4939-923c-5aa2729fe2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4609b354-7762-491d-b180-6979cb60a962",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2221b1e1-a8fa-43ca-9f81-2eb52df337e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec0a66b-9c46-4ebf-9f87-7cc7d8591ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89e2b1d-4f29-43a0-96b1-43ad1341f604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed2da7a-7986-49c2-af85-83b2a3a7dc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7788c7ca-a01f-4fc3-a46e-62d39ef3281c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658fb9c2-4c06-4fb7-bcf4-9c115a6d3b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c252079a-2619-4a72-a499-da4d6a681156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f40161-d454-47f5-b62b-dfc668e98ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e2d48f-5a82-4f6b-b469-5faad8af7d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c423c9-5795-40da-a1de-b41eda1e8c65",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce321bd-d49a-442f-b135-ca4213446a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec37370-b9ca-4e20-b728-002119a8d6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eeba4b-1eae-48b2-9394-f08849559960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e1818a-f684-495c-b714-76062476cdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974e8ee0-3ff1-47d4-8e21-84b3d4f50e7c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde3df02-3f00-46b8-ac81-2b43eaaba119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee3e587-66b9-4779-8b0f-27dd9fcff801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f187af8-2986-4975-8dbe-80c0149f942c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55595f8e-daa4-4f38-8683-0c4b62ef3808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60197b35-18d8-4334-85d1-9fa33669b42f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c53b475-3843-4427-87c2-ac97e66fee47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d5f536c-a830-4be1-a093-12b8ecef2d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b945d3d2-cfff-474d-99af-ec9c95294bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e07640-2c1a-4a1a-8df5-74eeb4c84514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91e7753-e245-4a3c-bb00-d5fea96a4362",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28964d61-6eb4-49bc-90f3-492188ad8d8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59a83f3-bf83-442e-9bb3-3f054be5e385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f9e1ea-9436-4318-9042-e37b87865c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53daecc-b0e6-45c1-988b-337985b966ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45551115-fe51-4feb-99da-f9422a0852de",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c1da81-3d5b-43a8-8cf4-bea02ac10cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319f8dc5-e564-47c6-a4bc-4195f14f1324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ee7fb2-febf-4ba4-9601-f8c0462fb241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340a93fa-e679-4f24-8e82-96bf2d41980f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17084660-64a9-446f-9cab-21d5cd4d243e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056abcce-56f7-46d7-8cc6-b04e083a3b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ff842f-ecc0-456e-ab1e-379343ec7b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2624aed-f6b8-47f1-8cc7-acf89c43521c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209a46d4-fd9c-4c75-82ef-9fa8fbb047bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2f6e3e-9a82-4750-a2e4-8a902424fabd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ee5997-e6ab-4df6-a0ef-2fd6e8f04e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2988a4-8ea4-4d70-b26a-64d2c2c43236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26444fa-db8e-4fef-9a04-d4116fdbf388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b026f3-f145-4b8d-a7ce-4a1968251307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5688b950-25e5-4093-bba1-2121356b7012",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc88d4e-42fe-4e9f-97d1-575f47da8486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d4dc3f-9c79-45c3-9707-5656c83fb663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1d2385-71ec-476b-90ab-f69b908495f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044fe206-3ae9-4dd3-8c75-35f109f4986b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200ea0b0-9148-4d8f-8f32-9a91d51cac50",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bbd13b-b3da-4106-8b4d-fee3265bc165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ade50fb-a841-495e-a3da-41afdf718503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8902d11c-79bd-43b7-a787-5655e4a1fa82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28aca066-de0d-40ad-993a-76587c25d4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cae5ca-8b8c-4b0a-ad77-55a3b33cda0a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabdcdd4-18c3-44ec-aa53-49522bbf1365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85f9c28-be50-4ff8-9b02-c362f6908d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69b21c4-708d-4a3b-bf28-31abe118598f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30799d61-04a8-4c59-ad9f-9c86a6bbbc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91363d1-bbdc-40ac-bf22-a48aeed85051",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7c182c-c8ea-44be-b078-81893b827571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd40de4b-8812-4624-b916-5ffbad8e45c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a8a364-f9fe-4789-a0ba-879baf67516b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379c0647-28f2-4c7d-8b02-f833f45d02e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85abcdd6-5d82-4d6d-85d2-baaed192a0db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31efea84-1313-44ed-9748-7876fe8fffbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b28ff6f6-d4a4-4a0c-9a9c-cc1824dbd27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755ca880-4b34-487d-a589-392ff8842a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2515f4bf-fbba-4e62-9503-dbf6678a6d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce7852d-8f09-4877-b107-b66777a9adf2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1cd7f-78d5-43d5-bc33-c0d59a73bf27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f9e1a3-1dd0-4632-b56b-43e49d3058cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabe302b-afaa-4c8f-8ba0-54cecc9f8624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918a1d45-bc93-49de-92fa-9215942b16ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a339d651-adc8-48d9-b3f2-e6dd0c86cdb9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3460666-7ac0-4969-bfa8-b049624355e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7c601e-fbc9-4c2f-9e77-51b1bbad874d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25794dee-4c84-45cd-8ed8-de1b8562fc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e910a6-77d9-4bbb-95f5-10c33d34fb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df84e662-762c-46a0-9144-6d6ec579a34e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb66ec3-4d7c-46ae-8135-85ce1abab4fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2fae9c1-9421-43fb-ae94-d7cb80bf2353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f512c0-0809-4cd4-a75f-95c16f7fec0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e7f9be-f3d8-4dbb-943d-0a688de60b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3305a051-87a7-48c6-978a-504db519a828",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0064bd6c-9776-48b7-9cca-3386b345734e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87078efe-48ab-4025-9229-c7f95c17e2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005958e3-1c70-4d28-b700-710eec530f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5217efb-6543-415d-846e-1a972b465a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260d63bb-a455-4ffd-acc6-148ea9a5f20d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dc8090-604e-4da4-a913-a2a322e71dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12128b0a-b80c-4ad1-80af-f4946c11e6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f364e2-3518-41a4-a007-e639f81533f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e386b77-2892-4de0-8f1f-c13d0b64f0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8cecb7-b429-46e9-9e17-e1c476c82f97",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d119659-5eb1-4d2b-9588-7db9c7daabed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ccc7675-8986-478a-8b31-526947e6a53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cca982-2c22-4846-9053-9db7e3e99783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee390179-d51b-4ed8-8014-7068370327f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e338f974-f0c3-4368-b374-e1320bab2fe4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b76664-6725-4f3a-8538-931a64394d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4170eb3a-4837-4985-988c-2f812b93c169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "663aaf05-efb4-4592-8152-6768b3d67511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7542aad-b4da-440e-8e8b-cbdb6c115e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42352c05-9c52-4330-a2a1-bec047cad652",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0d9675-128b-43a9-bd29-43c502c5abcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f01ad3c3-aa0d-48d4-a83f-7802fb32b2f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a505e93-7e86-4381-b083-f83f7b8c72c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6823a53-99de-4025-a6c7-875f7bd01d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b293ccea-d158-4bc0-8f1b-7ab08ca9a2f5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7888ec5-e930-4b15-b6be-5aa85dcd099a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c3a996-3eda-4edd-854b-d4cf21398aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d95bfc-c103-40bb-bcc0-bbf9a82e968f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050388db-a0e5-4d08-b1bc-c10885992b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b54467-65c3-4fbd-965f-4f794216f07f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ba8e82-1130-46db-8407-e715c40990ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee786b8-be3d-475d-b6d3-d9c35c997229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcc7193-6a8b-407e-8ffd-5c53e59cfeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f543d59-d629-422e-a758-946c7e661982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903910f7-5820-4f34-99c9-819b031b8c58",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322fc17-df42-409c-9897-e344f6ef05a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9935ae-a50b-4b79-8192-d13be1c35462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a28830-d9eb-45e5-a055-3df1d4b627bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f46139-1ccc-467c-9f9f-7353ed47cd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d5a2d6-972f-43cd-9e7d-206a08b816f1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0fdb19-39de-405c-a23c-7daa59730597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7355497-5278-436f-9248-7770e0d8d4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27086590-b82b-4555-9096-81059097fc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960c71ca-70cf-4557-974d-74918cbc5f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7953350c-c5b1-4d33-8b44-ff3c3db88990",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a396eaf3-2c29-4d5c-8e42-de4ed25865b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35576607-6c97-4b6e-971e-3e5adf226d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41d6dd2-364f-4ea7-a8bb-f987a2d695b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8decb4-b4ce-478d-b209-046bbf258272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be41d86f-d22e-41d6-b822-9dc7950623f9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1319e07b-5048-4201-b8ea-c82fafde8145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daff31ef-ce30-4ebb-9629-50006169b387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c47b91-8bf1-4e3d-ae34-40f4170a02d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b074bd-b38d-4e1b-a88b-024b53d6d1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7684b93-b52d-4e6f-ba44-2b5ce20718ef",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c73cf3f-5a30-4938-a449-80563fe8bbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e253b060-d3a2-4f1e-a868-6bb6f21d2430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea02ec2-29f2-49d9-adf9-db10cb999db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315823b8-6c6c-4ac1-9e81-3d1cd28fca5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85355030-acaa-41bf-9595-a8f258c90414",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce6eeaa-d2f3-478d-92d1-fe7ed5bb75c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be685a46-8b0c-4776-9a67-af2a37f6f6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c47069-0aff-4231-99c3-33fd1508230d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97aa5691-1196-4879-97f6-f23c4885b165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa67fd3-dc0c-4252-822e-48114db5a24d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b266f8fe-ab06-432f-8d9c-19b46a134cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbe5f24-9312-41e7-a7d9-07a1cad67a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9416eb7d-5e88-4269-ac44-c3f7a1c753c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f53263-7d36-47ed-b051-62297e299673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4405aef6-cff6-49a3-95f9-3d54571794b6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04ab31a-902b-4dbb-bea2-e8fe492699fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458b285c-6c45-4cb1-9aa9-6ca17d56c8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc9955f-0d48-4c6c-bc3f-ed14a101b3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905cc7d1-5d94-4e03-a99c-7d7feee593f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f45d81b-6d54-49b7-841a-a38d0941e42d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbf92fd-fdc3-4ce8-8c7c-96afb1d2141e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75559aa6-745d-4194-8138-8cf42898f685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25536a1-b681-4bdb-aa19-4f3b283f3b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616d5bb6-30da-40c8-874e-f6d897a352f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08a25b1-3aa7-4083-9ddb-df6bd71bf2fc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c2c871-558e-47c2-a04d-087062234f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebf38f3-92cb-4383-9567-8d7f6dca564f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c58a0e-7e37-4cc2-9f9d-c9a1c4a6da3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2b67e6-2103-428a-b409-f4a2bd114de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae19a33-5b67-41a3-a1af-7db4a43c1dde",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e839166b-4490-4391-9774-b7677a81373d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51730084-13ff-4cea-9376-3d7a8cd8c8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d308095-eee8-49a6-9c04-71041f10d32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fca6c2-50d2-48fa-8d1d-4322f4637c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bc4a52-bbfe-4643-ae20-4980393dbaf8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99ebdd2-50c6-4654-83d9-643c0a875091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2facd9-1c70-4008-ab09-cf048e8833a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19cdbac-44f4-4a7b-93e6-0b9a4feda420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5baa4d44-bbb7-4f03-855b-5a024caf91ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27be9a6e-a6a4-4d52-b2fc-7879e81328f7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e1d57e-1677-4d05-a58b-5f40e2ceb39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdcc5d5-a0c3-4c06-bb18-294aef8a654f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e341ae1a-ec98-4915-9a51-b98a3ed55d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3a0697-17d1-4c9f-b849-a6c10101fe34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8143fe72-ffe2-4c62-a817-c29304a32d6a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886618dd-87f9-428e-8946-4a8180d55384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c7d42d-0af9-4fb4-aca2-a154eff06624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4837a84d-cce7-4e7a-8a8d-eca31e8acbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37730dc-a23d-4998-8106-a6678ee78673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6b8817-196b-40be-9f53-ed465070683e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bb8ff2-469d-4cd3-a553-16a193e6d883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078647f8-799e-4302-a84f-385611220597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc12874f-743a-44bd-952e-149a7180692e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0516d9f7-5c82-41d8-81b8-4db3602c6b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ca25b5-7ed1-4208-8614-f7c4221d6cad",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9105c45d-d42d-455c-b912-d4437e0d28bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96322b53-98b9-4637-8754-7586a8859591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadeeb5d-3d0d-4097-bfdb-3c41782b99cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc02f1fc-9d49-4cd0-a576-f55a3dbefd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf9a637-5687-43c0-9a1b-b8c9e5d8f345",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6051edeb-b216-4741-af7f-b50203746ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8164c34-1783-42ce-a2a8-0191f8828dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5d6e58-ff74-4aaf-b01b-73541fc8eab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559e96fd-2796-4b3e-9a5f-028edf97efcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e55c07-8c3b-45d2-a973-f761e728ced4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69376b5e-e4af-443f-b888-a063ea27a51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390846fe-4c40-4328-aea7-248bc3ac8d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1a6aa4-080d-43e3-9108-ae6ba85a5903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e3a958-f058-47b2-b07d-0e9cb7a5b3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75ca484-31d5-449e-94fc-5b9199acd9d1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4154cab6-0d9c-48d8-b50b-51e701e6941e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b783eb-a4e5-4c9c-90d3-08298f751029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fece36d-f583-4c63-8d62-74230331ca5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94531159-d188-4d73-80c0-f654d825f44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cc14b7-27e8-4c6e-a96f-097b45190441",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b449fbf0-0206-4050-adbb-fe4d4193ebce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ca94d5-bebe-426b-ab02-8e13b9764e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c852eb-96ad-4df7-bcba-0c08e0fad108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f76e899-a2e8-4e45-9599-978db517ed15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6732b0c6-7258-4968-9c3e-b8bf02a95560",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee6e097-f806-4274-87a6-67e81985e447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab38e323-521d-4714-9277-bd323737bdb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415bc7c2-30f5-45b4-851e-40364124ef00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8ece6c-a777-4e62-8bb0-9a7cfdf040a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed801b0f-a6ff-4c23-8a32-fc88f484fdfc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d350746b-98f9-40fe-b57c-5684e1090a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8797141a-4825-4c67-bc5c-444a3bb57293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e7135a-33f5-41c0-b719-4ced3b613e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d80aa48-b9e4-45c3-86e8-dc833901ec27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24345276-4aee-49dc-84a1-25d36429e8ef",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265e1cdf-e05a-48cf-9cdb-9363c1c2286c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432af0f6-ce03-4cc6-88a8-0041c4c7031f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19148ae5-91f9-4807-96da-5b00fb69e39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6612b981-d854-4a8b-9aff-e24301d65431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02693182-be9e-450a-98b3-832a9cd5f4f8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd9633e-6916-4f89-a8eb-8d224ac22184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903b783e-806f-4c86-aa74-f667d8fffd07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b9340a-8e1d-4bb0-9ca9-c04abbc23d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe72172-5c28-4e6f-9749-41d59823549c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9080219-f140-4fd8-aa89-9001823a3513",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14794d5-a074-4730-bad4-cc8bb8c000eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3d363f-a692-4639-81b3-228c11860ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c600b7a-04aa-4fbb-9fa3-0dbac70fdbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59df091f-d210-45d7-b370-a56fb6da9078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b65051-cdfd-43b7-89f6-60dd4a92b046",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bfe0a4-cc4d-4d1d-ad07-c72aecdc6ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b549084c-97b2-408b-9581-8adf1a6036a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca42937a-ed2a-4be2-afab-9397159fe6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e137034-14d6-4928-81e8-ce4807a02038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9195864a-d344-4a7c-98e0-b87f0172f0c3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d670a9e-dae4-4711-8749-b6957115e357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c443bd38-8ae5-47ae-b4da-741601f64526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d391e04-fea6-45fb-b456-b2ef0562af7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186aafff-95f6-4969-b2f5-8e403707c244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779abab0-eaae-4ac4-93ad-44233e2d7701",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedb8fa4-59cb-4788-a9a2-24ea88746821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f0c605-38ab-49e6-86f0-ef60010a57d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0e1a73-1fc8-4e8c-a98d-74fbf80cee12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e68567e-9f7a-4af1-9b65-04fe20039224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100891e0-671c-495a-8663-cb3eabfde38e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c543852-db29-4e70-98fc-0e84d4a4bf65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac466ee-2326-429d-9ff9-2d3c9f812754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f096bb-17cc-4166-9e80-ee9e83e31c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1c987e-b3d2-4e04-8b36-4fddd6ad6d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4c05c4-580a-43f7-98e7-4891adb18c03",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b21dbae-15b8-4e91-8b8d-2a183f4487b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed63225b-59a8-421b-9c39-44dcf7c6f4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4451aab7-bf5b-4d2b-81d6-3f547844ca45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b665ee-eed3-42e9-bf72-d46e6ffb4ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c5e06-e373-4257-a0f0-099a5ca10b3b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee67161-7f5a-4c97-821a-488ce1967432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec19937-8572-477d-a483-69cda0e06d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6dbc8c-7cf7-44b7-b250-27e7c1a52015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd583f09-05c3-4ddd-b94d-4cf703a0cff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd32428-5232-4221-88ee-35704d8c20f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd82eed4-370e-48a4-a8e8-bec49570e947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce97b12-a8b7-4c5f-8bbd-a9fa78e8e9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea099b31-e610-4723-8019-aa6dcf026afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec721d1-b8ab-4ace-8c72-7d161eee293f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9188794-f534-4dd7-9cbe-4958c6fa7611",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1e00f6-a02b-4bb9-83a9-d6568d4e4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb244f9c-637a-429c-8a22-b773d54d23d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49663584-19c0-48d4-9177-53cee3e91939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76a73e7-e61d-4946-9d40-df477da00fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21632892-6531-406d-8562-1e91aefdf6bf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ace39df-f757-4dcd-9cb4-cd0a51085237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003a9d34-c7e9-4395-b0c2-67b4cabf45a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7c8cfc-4052-45b1-a452-1f33b27eb687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bafdb0-dc52-4750-b2de-05a50f5e08dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777cd9ae-d09e-4e00-b253-49c8d85d6b65",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9705bc9-af35-48d9-b145-9ad3fbb55623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9abb1681-e196-48ee-8cb6-08bbecdf8a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf2705b-ab21-407c-b86a-60c5b3e83b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c515c8-a099-4010-9bf0-2fb974687ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3beb5a-bb8d-40fb-b323-48bd04e0ba50",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f82b426-77d1-4656-9c04-447166d34afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf420815-d0cf-4158-bdd2-657c02b1ea5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a33384-ba1f-4130-9351-bbf647b5083b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5112641e-c0b0-4056-8192-f7ad05158444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521c650f-c736-47d0-be75-0c19ceb2fcd3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22db162-f19e-439f-bb2a-ef4777451da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ace5d3-fa8e-4f0a-96d6-26da1b1f79c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97e0af9-96cd-4c2b-994d-471b92fda7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f7dc56-c6c3-4064-98bf-8baae2fcdbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a64f52d-9c6b-4ef6-96bf-d139a1d450ae",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39577e16-b5f5-4a51-8f34-08ad6db6906b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26f9beff-d71e-4ce1-936d-99d98dee32cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268732de-2a14-4bf4-96e1-12db0946bfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63d6f38-e981-42b0-b0c5-c781a4310678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc01db5-74ad-42d5-b2c5-7754c9f537e3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f80169a-a032-4eb7-a354-4e911c1642b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ea01f1-1a1f-410f-b652-ee23a169b8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9448a5e9-8918-44ea-8586-ba433900e343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f562cb2-df57-45df-8ace-592e036a8934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa411dd-4be2-4b8d-b8cd-3f39ae5aaa3e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52163e3d-5fff-4e0d-876a-5fb402592f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea871b7d-8c6e-4705-bfc0-a27f9417e772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589ee458-0790-4f9f-92fc-7db22b497cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416ef7a0-3625-4c74-ad66-9e7acb74b128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0621edc-d645-4844-b9ea-b35f1a5509e2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4e4dec-758c-4d7e-b1c1-3af42b4924fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5556ca7-e09f-40a3-b3a3-2f22322e4916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c42a78-6dcb-45e9-a770-42f82e2bd171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f3e0a4-465c-4b09-a2df-d6d09b979768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c034be3-829d-4854-a0a1-576aa08e646b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a72d195-b8ae-4110-8711-2969980ef5f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94502ffb-32ef-4ea4-97c6-55f5fd380524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200759ff-afbb-4ead-a38c-9be45eb36aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32854941-3e43-4513-bf08-20cfedd8646c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a0a02c-9ed3-475f-ab5d-070be97aae2f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71900a0-a328-4c16-bb98-cfd3de410273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3c6db6-1716-4ea4-84ce-fb722108fe28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7991084c-2a18-4a8b-85a6-bd72e090607b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da25e4e-495f-4822-a73a-699b9b9f5d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994ef070-68c5-4a76-a131-78e53ca77604",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12359c2c-357e-4d33-9f33-9f5b8fcaf3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fabeb54-b87e-4e07-b818-5f2ec14cac06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b96290-5775-4397-b14d-1e05656a61a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f89b6cf-b741-4eaf-9b1a-66ed4e8eae6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81294fff-203c-4d5e-99bf-fb4a585f90d4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720de846-0b5e-4546-8429-51015e1b2bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d569826c-d4d4-455b-938f-58b357b40da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1147e6e9-1384-48c2-a1ab-dd8c9dbfadcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa94dbe-fc79-40c5-b747-a81eeba6adce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ea2337-7d52-4df8-adf7-3e4fb86e6b0d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9073f6b-4531-4966-afc5-dc6c3e69ae61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31612cba-d58a-455f-b0c5-be60b7528142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71bea5d-2d6a-4306-93dd-415cd86b14b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a1b401-df23-4fd0-bf60-e9013b78293e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412f853d-fff5-483c-8e81-570a6b3602f4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81209ebc-5d72-4173-99b3-83cc156062ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca43c20-6c8d-4e78-b2ad-cf65b9c08af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a481e0c4-1676-427d-894e-9242f651b21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bb40f1-0864-4b09-b354-a0f887f6426c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1b58dd-3b40-4e4e-aa08-fa71ef032931",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6b9733-353d-4fd6-b78f-057c284745d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234d9831-4f44-40ab-8f15-721eaa71aec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2da661d-9115-4f15-bef6-06f377c920f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0eb5b7a-2506-454c-89ea-ffc80104d715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5da0e5-5968-4b16-8e7e-f8cb267ff4fd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb0e021-bcb0-4658-83dc-73c312479475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ce7798-82d9-476a-8624-640063e71397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79954c36-f841-4bac-901c-90202cc861dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea0d3e0-e0e5-4989-a190-51d5b16533c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e924cb5e-428c-4762-8dfc-6809118864b7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf26701b-4fae-430c-a7ae-202d88023f6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205f634d-cea2-477f-b51d-2aaab154fe71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58567589-30f3-4f0c-b15a-eac32b34a6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a98088-e9c7-420e-a806-2d2f01190edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a183e9f-3f04-4de3-9018-6ac7446a6920",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd47b942-1f66-4768-bb2d-9dd3711f1391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6dc34fe-60da-4e4e-a85f-8fee99c958f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083cef07-9f5f-4468-ac2c-8611e3f72215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae08d41-9669-44b2-a5de-22d85110d1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77093e87-44dc-4d39-ba81-edc59ff94166",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7eb372d-a381-48e3-a3b0-c18027d8b2d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e755798b-421e-4947-b257-7b5039064a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1148d1f6-53d5-4465-a432-1afb98020f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f068a35-9e7d-4ae6-9682-fd7d0acbf375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3897e3-8f1b-4e68-aae2-62317be552a6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35ffda0-b23c-4f33-93a2-33ae0cc7699d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa27188e-cdab-46d7-a5b8-58de2f3f5d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289b0422-a122-4dd7-8654-dc8c3e558987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f292eee-0c9d-4cff-8d8c-21dc4139efd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d61731-668c-456c-a721-fcfdc98bb5f3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df2dc95-98ac-4398-b982-9be1ce4f07ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c42140e-b3fe-4303-9818-ba32ef942edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22df8c37-c20e-43c0-99b0-9d062cc16e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3960e12-cdc8-4579-abda-58b9905e6a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408ff19c-5f64-4965-b8bc-bf4ec91dfb05",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb334f3e-d411-4289-842e-273f80de0dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e714663-e10f-4ba9-b78f-a2638638cbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957a227b-a6c2-44f4-af2e-22593693ab35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f688ddde-8912-4d50-bf07-45c137ae1faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90c9d9b-f997-409f-93bd-6d9a5902967c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9d60d7-201f-44d8-8c48-ab737a7645a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e71f9fe-95ee-46b7-8b87-3cea8a7e9d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff8d058-f098-4cbe-a18a-fa2720b9e340",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bfdba5-3225-4516-8842-6b6abf6b0e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6c3d12-7dfb-4750-b366-6f0aaf4eab58",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfad15f-838b-4373-9a01-0ed0367dd6dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df2d91be-26d6-49a5-b53a-f03e115e9640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de5ca54-446d-447c-b41f-3d76cba03320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aad908a-c792-4825-bf75-72a30bf5918f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f4e754-f9b8-47b6-bce7-5f2400ed6e05",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e896923e-ad71-43a1-ad64-9fc93ec55559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d694d385-d673-420a-8348-3242e2093eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f73a20-2309-48bb-ab68-8f6d73793697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1decaf6-2e38-4d22-a6f4-9cd65f822a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8588d0c-5693-439b-a8bf-df3a49ad479d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aae9cec-de2d-4e64-b658-bf0c6ea87d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83e90b22-2972-4af3-adb8-fd62867c7d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f8912e-1988-47db-8b28-4e4998cb015f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc761b3-3676-4104-bc6a-7a63cca3434b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82217c9-e145-42fb-b692-68a7a69fbd32",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319b2777-d88a-4f6e-a427-e475e39b2592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f0992b6-08bf-4bd5-8520-4006bc505996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e1f014-0acd-4655-bcd0-be63c95e68a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dda4ab5-62e7-4301-bda9-759b88d50dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77eae05a-3439-4999-a8e4-d978b36a99a5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ed7fe2-f612-427e-bf8a-7c50096d21cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42898d62-0b21-48c6-9a46-031c67cc7d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106cc910-1a0d-4370-b510-33caa42ba0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b58aad3-0c6e-47a5-9ac4-6ead43b24160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa99ad1-95ce-47c6-bc4d-2caecbd04bae",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e491d3-16cf-4f6e-b3dc-15626fba7ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15232e2c-6eae-4d05-b1c8-712b7975a210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39b6b36-e785-41c0-b1cc-dbfa0ea70376",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3122e7bc-bca2-450e-a8e6-a15108305d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b183c2db-bbd8-43c7-9d5d-448a793d12bb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0517a7d1-c895-4607-99e4-78c3b67b0619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d774563a-ce68-477a-95cb-3ba825095439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94550b92-df9e-4333-b44e-dcf72ad04a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1fe658-e444-4da3-ab3f-7574d8dc8766"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "403910d3-f023-4f7c-81a6-9cb6e9669b0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "350afb7b-b98e-46b7-8e43-7f21f3503ce2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aae1b5f7-3c4c-42be-bb1f-a64aceb059ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1dc9de4-8819-42e3-a683-c95fe2fc0e30"
                    }
                  }
                ]
              },
              {
                "id": "ec9ac714-e019-4340-9927-1325e1163b54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9576143-bfd2-44f7-a10a-f662b63d5f8f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1670f8b-50aa-42d1-a418-2ba8cc8ed67c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "abd33542-7c3f-4af7-a773-14bef85268c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "009a67b6-6c2f-4d16-9dfd-527d403c99d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2893971-07a6-45ca-b623-7cb0c1ea7a56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05cb067a-1a46-4006-b70f-1b397e59468a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f13baf-46b4-4bef-8626-3c99ca58e8da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eae81b37-3731-4f4f-bc8f-bbf623a5ac2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31239452-ef6d-40ee-8f46-61dfeb846cb7"
                    }
                  }
                ]
              },
              {
                "id": "d0367ced-9e0d-4518-b6e6-eeb6fd267138",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "71d5cd46-1176-4e9a-aad9-ddb01ba41e43",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7683674d-1e05-47ef-bf14-18eaf92d7eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "55afb3d2-908c-40e2-9ced-7c0e1f503d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f65a54b-8380-4e61-b245-fb6638ca02d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb504419-cb6d-49ec-bacf-7d402d3f5699"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "02b52caa-2597-4bcf-b62f-6b5df7b83c99",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1132e46-409f-4c26-bba3-4e416d9fd83a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea968f2e-0ca3-4151-9473-30dfc1b71a4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "028b604f-17a8-4db4-8562-a0e5a3027ed8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "368ce3ae-3fd1-4978-a276-4ebcee3b491c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "776881b5-f632-4a7f-84a6-f356652fb152"
                    }
                  }
                ]
              },
              {
                "id": "ec8b3e7e-e64d-4040-99ef-bc881f1b2858",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23868c08-ddc3-4cc8-933e-3bcb15f1023c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a52f8722-b56b-4e56-a9ab-0fd5eb65bb3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cc39966-1d44-416e-aea9-72adffe7924f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fba3a77a-0715-46ac-8bc8-8bd056d1e128"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e62ced3-660b-4e7e-83eb-aa40e25f2cc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e5961e6d-9a06-40a0-8935-daf2f0f68f1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91cd7794-c027-4e27-9be4-7c98e0430db0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3be34cc-d72b-46a5-8664-a95f82b8a013"
            }
          }
        ]
      },
      {
        "id": "a784290d-98f7-481b-9c26-b5c384a7352e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f65e24af-d78a-4e03-934e-29b7e4a4722c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "050f2b64-2e25-4213-86a8-114da30212e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e53e254-681e-4b80-860e-7309fa4e4b6e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b283d30-c3f2-4835-b1eb-8c0e91f57836",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "79559c10-d38e-4ad8-b901-915d4bdb00f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67dc67a-43c0-4ae0-8839-d0d44264dfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c419088-332f-4a40-8e47-e9c81dd96349"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9db729a7-af7b-4e55-ad2f-829b751c4ad3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62d61e7b-407c-46c6-8bcf-a5d4616802cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5a471a7-2220-4ed3-9f62-7e821f0c5e51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "689d79c3-b05b-485c-beb1-db7c77baeacc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c26500d-c743-46fd-bbd0-15c831410266",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0f8e089a-8edc-4799-b44e-34d7e0248109"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f8508d6-5a2e-4128-9a37-7775cfd00daa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bd11e8a-c7dd-43e1-95b1-545de5542dc7"
            }
          }
        ]
      },
      {
        "id": "f3cb7e59-388a-4cb1-942a-97054ed887b9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d9e86d90-1bbc-44d3-9d4e-3da069fbdc74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53b48541-780f-4643-bd49-1831bfd9a5db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8317d019-f43b-4e67-8e47-4771b4e55a41",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a842a39-5fb4-4d4a-a6de-7deda3955b3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b129224f-8110-4842-bf95-6fb554c626fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004004b4-de51-41df-80c5-521df86e94e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80802bc1-850e-414c-b52d-717e55beacc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "197a9947-baa0-4840-af22-ea49902f25d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "046fb487-8304-426e-997b-7e4cf0394e4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41aaa29d-f195-42a0-9d7d-ca577b889715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fc247df-1420-4d96-a7f2-a7606164cad5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34b32267-037d-4d9f-aae2-85d52535f6bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6b9051b4-cc5b-4568-a823-f4ded2065c9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa43e09e-d976-403c-a307-96cd92cc6646",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f374cf2-9df2-4ce0-8e5d-98b3e2b101a7"
            }
          }
        ]
      },
      {
        "id": "0ec050f3-1b77-4919-8513-21e5859a6683",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bbdd78dc-8a08-4a27-a439-2de1679d03d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bb2845d-6980-4594-92d0-d2bff2a7c55d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bca1bfb-1726-4723-9a91-2a3f263a5aec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139f4479-1930-4e6c-a3e6-2bb2a5d79c6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faaf5e14-3020-46e4-a6c7-f348e5411c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f272decc-4276-4aea-a579-46fd001bb4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc4d399-bd5a-4b16-9ff1-8a4f8bab1b20"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09ab23bf-8c7b-45cd-85a9-9936737efefe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1619c7f-e116-4523-a7ee-795c7a866e2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58053a90-a194-4d64-9933-0ae27013850c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcaaf506-1780-4c66-8fe9-f80499f79182"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3000d640-04c2-49c5-9e0f-68824483496a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6000fb81-6953-4bf2-81f9-b5056d490d81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "696208be-3a9d-4376-9778-a438b36d4946",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f48f8b59-57cc-4339-8c5a-f9870dbc0b2b"
            }
          }
        ]
      },
      {
        "id": "6dd47753-5f50-43e3-8bfb-bb12cc955031",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "804c98f9-23a5-420c-a42a-2d4a53d62885",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d43c01d1-fa26-4eef-a6b4-d2ebb02977d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6430d134-d11e-4c5b-936e-585e5986fdce",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de0d5b62-05a9-4c32-8ed4-c4463d301f8e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9c97496-fd60-4dbc-8189-3cf51fb542ed",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 79.1649122807018,
      "responseMin": 6,
      "responseMax": 495,
      "responseSd": 81.24887581673688,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708562027539,
      "completed": 1708562059402
    },
    "executions": [
      {
        "id": "86921946-4ab9-46fb-bd3a-25db910b3c7c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d24295db-a3de-4dcd-9e0a-8e4a18d6d7c1",
          "httpRequestId": "0f3c69f7-93a6-49bb-8434-6b2b5dcc9101"
        },
        "item": {
          "id": "86921946-4ab9-46fb-bd3a-25db910b3c7c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "54d0e809-1a9a-429c-947e-53fb42dd7190",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "d3574e6c-5a91-4193-9883-8032b3ba3d93",
        "cursor": {
          "ref": "b91caae4-8391-4f61-b1d9-a560acbc92b3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "079d05af-5044-4c31-aeba-b66dc0a4ec4e"
        },
        "item": {
          "id": "d3574e6c-5a91-4193-9883-8032b3ba3d93",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "60da1cbb-3689-46a2-866b-994b5ad0c822",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "72812cad-2804-4ac3-af32-895a98ff68a9",
        "cursor": {
          "ref": "ff26d595-bd6a-42e9-a797-02479780464c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "41b892c2-bbbc-430a-8388-ccc1325dc155"
        },
        "item": {
          "id": "72812cad-2804-4ac3-af32-895a98ff68a9",
          "name": "did_json"
        },
        "response": {
          "id": "3eae7f48-c041-408a-96b0-548596a75315",
          "status": "OK",
          "code": 200,
          "responseTime": 495,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f011a985-c64f-4459-b2f5-92c0cbbff0d1",
        "cursor": {
          "ref": "b04a4a2d-fad3-46c8-9614-b2d9b60503d0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b78e7d55-8985-4e85-908d-5e92140f29f0"
        },
        "item": {
          "id": "f011a985-c64f-4459-b2f5-92c0cbbff0d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "31af95ac-5eaa-43dc-a1f9-29ef8263daa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f011a985-c64f-4459-b2f5-92c0cbbff0d1",
        "cursor": {
          "ref": "b04a4a2d-fad3-46c8-9614-b2d9b60503d0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b78e7d55-8985-4e85-908d-5e92140f29f0"
        },
        "item": {
          "id": "f011a985-c64f-4459-b2f5-92c0cbbff0d1",
          "name": "did:invalid"
        },
        "response": {
          "id": "31af95ac-5eaa-43dc-a1f9-29ef8263daa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd4c823-4cd1-41a0-af3b-3ab2162e9935",
        "cursor": {
          "ref": "47d0609f-f634-4c88-8586-c7463356494a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f6b2339a-304f-4917-97f8-c16dddb79db5"
        },
        "item": {
          "id": "9dd4c823-4cd1-41a0-af3b-3ab2162e9935",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dd39427e-4bf0-4179-a6fe-a6411e53133e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91bf103-714d-4b77-831d-1284c0ca026a",
        "cursor": {
          "ref": "28f5368f-e3c1-4625-8d43-3df98852f748",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0d5ead81-3dba-499f-b384-821c611dcbb5"
        },
        "item": {
          "id": "f91bf103-714d-4b77-831d-1284c0ca026a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "db148c60-82c4-4d77-aca5-2b7dbff7c3e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ed3392-859b-46ae-95e5-3c1be1bba1ea",
        "cursor": {
          "ref": "e9281f10-6ff5-4cf1-bd2c-85c98b5769cc",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ada4cbf5-acc9-4f37-934e-831d7e9d88f0"
        },
        "item": {
          "id": "b1ed3392-859b-46ae-95e5-3c1be1bba1ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a89c17c4-df58-42a1-8214-7bca7f159e96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e5cb31-04c8-47ed-8713-d6663270fc20",
        "cursor": {
          "ref": "35b302ac-8540-4009-a125-e58c66192667",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9608aa4f-249f-4e0d-ad65-2df67d6b3f84"
        },
        "item": {
          "id": "03e5cb31-04c8-47ed-8713-d6663270fc20",
          "name": "identifiers"
        },
        "response": {
          "id": "67f03332-3d3a-4131-93b2-1d7ab7b81051",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f59343b-b4cd-48d3-a820-2cd2f865a645",
        "cursor": {
          "ref": "fad5c827-dbb1-4263-af94-a663dc16ba07",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c243a905-590d-432e-9bdf-02f72c4c10e8"
        },
        "item": {
          "id": "0f59343b-b4cd-48d3-a820-2cd2f865a645",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "11b44bc8-68c2-4595-b7bd-3ee581e1f014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ae1b2b-cffb-4718-acff-0333a74de2d5",
        "cursor": {
          "ref": "2db10c5e-ac6d-4daa-88ca-e524e46df04d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e6bc20f9-3077-4f0b-b775-67b41c5afa07"
        },
        "item": {
          "id": "60ae1b2b-cffb-4718-acff-0333a74de2d5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "38064e36-6b92-411c-80e7-4c02b64d55c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0dd2a2-c603-4f29-b4cc-d4d10f299749",
        "cursor": {
          "ref": "4721869d-6826-4242-900d-03621aa5ec4e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e10195bb-e442-4001-8e89-43688b37f225"
        },
        "item": {
          "id": "af0dd2a2-c603-4f29-b4cc-d4d10f299749",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5a49de79-10c3-49d0-90b1-ca432d88010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2c66f6-b042-440c-9d89-bac497ec4e64",
        "cursor": {
          "ref": "72b62ef0-26bb-400f-9053-a827bbf952c4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ddab57b7-3b9b-4306-9581-234ada262690"
        },
        "item": {
          "id": "8c2c66f6-b042-440c-9d89-bac497ec4e64",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a7134c8c-0eaa-45fc-b583-cfb8625db41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b89027-8169-4fca-856d-ef46467d5d31",
        "cursor": {
          "ref": "0aa77e45-fc4c-4a4b-b3cd-2b2ee9ff64a5",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ab68fa5b-e26d-462f-bf99-b6681fd0a1ee"
        },
        "item": {
          "id": "02b89027-8169-4fca-856d-ef46467d5d31",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "74356cd2-3e7f-44e3-ae20-6499b6317149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd38f0b-06fb-4e96-aaaf-d0c2b36e5af8",
        "cursor": {
          "ref": "a07219cd-eea7-4a10-aa53-2302152dc8df",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "734857c9-5a41-4593-82aa-265500c3966d"
        },
        "item": {
          "id": "1fd38f0b-06fb-4e96-aaaf-d0c2b36e5af8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1d4ecfc1-36f9-40fd-8d0e-e244821e0748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bf9517-c997-43a9-a54c-dc16c73d1dba",
        "cursor": {
          "ref": "6c9d17db-0b5a-465b-a34b-ae7901ce286f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d6cb4cb8-8111-4151-8e6f-87adb57210af"
        },
        "item": {
          "id": "92bf9517-c997-43a9-a54c-dc16c73d1dba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0cdada96-548e-4f6f-9fb3-51628338fad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09040cc4-bcc0-4723-be80-10f277cd42bd",
        "cursor": {
          "ref": "2056b5e9-b2b2-4d8b-9f51-2b309db68b13",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7ebd3467-ed1a-4ad5-abfc-1e74ab500fab"
        },
        "item": {
          "id": "09040cc4-bcc0-4723-be80-10f277cd42bd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1e83d49c-22b3-4380-9fa0-21b143068d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63e4783-80f2-435b-bee5-a54cf72fe9a7",
        "cursor": {
          "ref": "434b160c-3879-4782-8023-f4f9ac050766",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5b4b664d-d156-42cb-af03-be9e8c7eadc4"
        },
        "item": {
          "id": "d63e4783-80f2-435b-bee5-a54cf72fe9a7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9786ab7a-4112-46b4-8acc-1a781b5ec457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa63c27-2fd4-4bcc-bfe1-8533254a27d5",
        "cursor": {
          "ref": "9e54f130-8f2e-48a7-a7f7-2d3bf86863b4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa7d70cb-b9eb-4da6-883f-501afdf8c461"
        },
        "item": {
          "id": "0fa63c27-2fd4-4bcc-bfe1-8533254a27d5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5cb64dae-782c-4b35-bd00-bfa92fdb1a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5237b451-b8e7-4d10-9efe-175516c86c29",
        "cursor": {
          "ref": "0206ad37-7b54-40c3-b390-1c15c284dfb5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8e9a522c-a646-4d6b-aadc-bc7a0d4a4226"
        },
        "item": {
          "id": "5237b451-b8e7-4d10-9efe-175516c86c29",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "276b0b52-a78f-4745-b0aa-17f50f44a9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f176f73c-86a0-4997-b233-1cad38cd6051",
        "cursor": {
          "ref": "988c7d85-a052-469b-9170-1431ff543040",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a3e88f8f-97f6-4072-877a-d5592fdf2b22"
        },
        "item": {
          "id": "f176f73c-86a0-4997-b233-1cad38cd6051",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8f73306f-74b7-438d-acc6-ff0c8f3fba52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c9e4df-4b82-4637-9022-52003dc35bcd",
        "cursor": {
          "ref": "e3291c22-2db3-47f6-8e07-d88114ccc230",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3bbc8e20-e3e2-4117-9358-b29717f8fe3f"
        },
        "item": {
          "id": "27c9e4df-4b82-4637-9022-52003dc35bcd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d4f83890-391c-4e12-b49c-789faec3daed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab75046-5560-4371-804c-9acbad8f74d0",
        "cursor": {
          "ref": "03d125f6-a0ea-4bd4-9d67-f43668666cf4",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec54e7c6-ce41-48e9-8497-f85f95628cd0"
        },
        "item": {
          "id": "7ab75046-5560-4371-804c-9acbad8f74d0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a05d63cf-6dba-412a-89b9-d4e88a3c5e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582767e0-1d7b-4300-b1c2-7b34e7e2b534",
        "cursor": {
          "ref": "3fc40dab-a439-4b3d-8a8e-0d3621c35f54",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d3cb5270-e63f-4521-9af8-ff1c3365a57d"
        },
        "item": {
          "id": "582767e0-1d7b-4300-b1c2-7b34e7e2b534",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "525770ef-93b0-4daf-8e70-fb5737989433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7029cd-1540-454c-a6fd-7d94ea696c99",
        "cursor": {
          "ref": "f216d38c-6bb6-4cfc-92f1-1e4432d10900",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "67f0f1ed-cf21-45ad-bd4f-142981a9aa87"
        },
        "item": {
          "id": "3e7029cd-1540-454c-a6fd-7d94ea696c99",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "505fe633-9289-45af-82cd-bfc530dc3f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7475baa2-9a74-4e03-ae49-3139afe99fd3",
        "cursor": {
          "ref": "64be8a58-ed5a-4a3a-847e-3858a70e2ac2",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "be94ba3a-32e9-44f3-83bc-73d8b814d66d"
        },
        "item": {
          "id": "7475baa2-9a74-4e03-ae49-3139afe99fd3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ba020f8-d9cd-4f0c-ad42-94178b4cd713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc7da47-e529-424e-9038-1c65a48c6b9d",
        "cursor": {
          "ref": "3ff5eb07-6cae-494c-858e-3c7bb1dea792",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "178a7f77-a673-4cc8-905e-a95fdfbbed97"
        },
        "item": {
          "id": "5cc7da47-e529-424e-9038-1c65a48c6b9d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d1acef6b-41e6-46c1-982e-0e79cd5cae62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b44a70e-ba48-436f-aa97-bd8e7f2ed401",
        "cursor": {
          "ref": "eb726c9c-15a9-4e83-8edc-9effbe0aa592",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "180fb099-026b-4d3f-9c43-7f957bbefcc4"
        },
        "item": {
          "id": "7b44a70e-ba48-436f-aa97-bd8e7f2ed401",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "58778371-f69f-4d79-8947-1afe4cce7d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d186c6-0eb3-4ac8-928d-0a020ea8d8aa",
        "cursor": {
          "ref": "1c326926-5e44-43ab-abd5-908fb452e067",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c868ca5d-0ff4-4510-acc1-3a22d7aa7bb1"
        },
        "item": {
          "id": "21d186c6-0eb3-4ac8-928d-0a020ea8d8aa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c6d26343-7cd3-4f7d-b441-402dfad76eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9423f9-8dcf-43a1-bba9-19789613f143",
        "cursor": {
          "ref": "c92371d7-7a72-480f-b83e-44cfb0e0d585",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1b9d61e4-0cad-44a5-aa76-85d9f71852df"
        },
        "item": {
          "id": "6b9423f9-8dcf-43a1-bba9-19789613f143",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5a73ec03-eb05-4bbc-8991-da031fc73135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb1580c-183e-42d0-9807-29800910431f",
        "cursor": {
          "ref": "a8435888-5257-4ea4-8e59-d1ee0cfab90e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "480b31fa-404e-43c6-8471-2a600f8248b7"
        },
        "item": {
          "id": "2cb1580c-183e-42d0-9807-29800910431f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b02036cb-4923-428e-898a-78c8a9e6001e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8044b58a-f130-4f17-b87a-752232c93678",
        "cursor": {
          "ref": "3181d0cf-e2cf-4efa-b8ce-83c79ce7bac5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6959bcc8-f7be-426d-becc-17b1ad894a25"
        },
        "item": {
          "id": "8044b58a-f130-4f17-b87a-752232c93678",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a1d513ac-9720-47b9-aaf1-9cf0c75a1e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c5b03e-e0e0-4f1e-939b-2e239cbd8d6c",
        "cursor": {
          "ref": "c2df68cc-461c-4640-80ac-7b930fed71bf",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a9adcaef-feec-44c5-98a9-041cf5275f27"
        },
        "item": {
          "id": "62c5b03e-e0e0-4f1e-939b-2e239cbd8d6c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ad60391e-0ddd-483e-9df2-78da13320ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58660fd8-37c1-4ca2-9e39-4d78edeb449b",
        "cursor": {
          "ref": "851ced1e-4a3c-4fe9-bdd9-af27ee926007",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c49c9cbe-ab9c-4c79-85fb-0ab2f6be2055"
        },
        "item": {
          "id": "58660fd8-37c1-4ca2-9e39-4d78edeb449b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f7ad6122-0c6d-4ea0-a8ce-bebc5999e27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51438b5e-8900-4f01-9a9e-5fddbbfe4fd5",
        "cursor": {
          "ref": "12ab02cf-6eaa-4a43-9768-c88eafeec0fb",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0009055d-bb4b-4345-bc2e-c46210456edd"
        },
        "item": {
          "id": "51438b5e-8900-4f01-9a9e-5fddbbfe4fd5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "11530260-c8d9-4a79-918e-4014af327b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5b55e5-a3f2-4d28-a27a-e02c9a2992b9",
        "cursor": {
          "ref": "28f37f77-d602-43c5-8e73-a1414c23f5b6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6277d9d2-fde7-4b82-9a7c-7e17ba29e938"
        },
        "item": {
          "id": "cf5b55e5-a3f2-4d28-a27a-e02c9a2992b9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7b4d0758-34d4-45df-a33d-06f796d458ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b7d451-6aa4-465f-8d12-ae64b102cd07",
        "cursor": {
          "ref": "11346aea-696f-4881-9925-4acad4b33885",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0ee7160d-3544-490e-b626-ecac82586b91"
        },
        "item": {
          "id": "a6b7d451-6aa4-465f-8d12-ae64b102cd07",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d08d5e17-b85b-4999-b79f-020f0cf9460d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448a1be7-9a0e-4259-a825-2be114cb4767",
        "cursor": {
          "ref": "874b4187-b6f7-41a2-b42c-a597727d82ed",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "064d33d4-a710-4446-ba9a-538a51bdcd3e"
        },
        "item": {
          "id": "448a1be7-9a0e-4259-a825-2be114cb4767",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e305b079-5fc4-46f5-9e93-b7ead6ec7a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3072cbd1-33c4-4ea3-9970-87c7f66498ff",
        "cursor": {
          "ref": "f348e6fc-2fc0-4c8e-b40a-c1330143772a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "603d8aae-95c5-4398-8d27-973f18f8cbbe"
        },
        "item": {
          "id": "3072cbd1-33c4-4ea3-9970-87c7f66498ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7dc5f005-6ed3-474d-a50c-5e264cf22261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f346f3db-0009-4b4d-a192-c3cb40ffbbd7",
        "cursor": {
          "ref": "4f3dc885-00e4-4265-b803-5237c954dc54",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1f5e3a8a-5b6b-4b5c-83d1-c5b4f99b3405"
        },
        "item": {
          "id": "f346f3db-0009-4b4d-a192-c3cb40ffbbd7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b7575d35-7fed-4d46-b79a-7c10102c0ab4",
          "status": "Created",
          "code": 201,
          "responseTime": 472,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "81ef1e00-98ea-4d86-8137-33113af8b0a3",
        "cursor": {
          "ref": "2e47eb4b-2ebc-4a61-a93e-1d1de0b8a9a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e209e9e0-a9e9-4582-846f-893adc5e07f0"
        },
        "item": {
          "id": "81ef1e00-98ea-4d86-8137-33113af8b0a3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e5a5aec6-cb81-4d74-b392-6bcbef51460a",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ee32f5d7-4516-4c1c-bca8-ffe93b96646e",
        "cursor": {
          "ref": "91c77b02-4661-4b29-8d0a-c9b566001851",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6b58f417-7bba-4b75-9223-dd3738864fb3"
        },
        "item": {
          "id": "ee32f5d7-4516-4c1c-bca8-ffe93b96646e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "42ea58b5-f3a1-4c1d-8a54-d882ea4dd8e6",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "87c6014d-2655-43e1-b4d8-0840a32a3248",
        "cursor": {
          "ref": "bc1fb40e-f9d3-41af-a0f5-a774038cbae0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b1c78ce-5ce3-41ea-ae1d-75b7c521a02a"
        },
        "item": {
          "id": "87c6014d-2655-43e1-b4d8-0840a32a3248",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f1bb3565-1f67-4b0c-b69c-f5c9b5496892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70551ea6-ce96-4b70-8098-aeea518cda9e",
        "cursor": {
          "ref": "863b4111-04f1-4b47-8b1b-6f7e48476996",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "780d3a03-8e90-4eb9-badf-05b5e20aa1df"
        },
        "item": {
          "id": "70551ea6-ce96-4b70-8098-aeea518cda9e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "11ece237-225d-439e-82cc-7e7c5bb29a64",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7ec2da83-a85f-4644-88e4-2a179c5b70fb",
        "cursor": {
          "ref": "0585012f-9559-4c79-b431-be62dc70e988",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c43a1051-2e02-4719-a373-541f2e613822"
        },
        "item": {
          "id": "7ec2da83-a85f-4644-88e4-2a179c5b70fb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f2b23ee6-a1d0-4515-9cf6-b0c37d66582d",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2829b637-b22a-40ea-9f43-829d9f540aba",
        "cursor": {
          "ref": "2e99166d-1e6f-44a2-b113-842a6013c780",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cccd7363-5c9b-4205-825e-d514d1af8629"
        },
        "item": {
          "id": "2829b637-b22a-40ea-9f43-829d9f540aba",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ba8755a-12e7-489b-b3d3-f083d0ec835c",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "91436989-3a4e-4114-8f9f-fc096033f4b5",
        "cursor": {
          "ref": "bd80fa56-7860-4fe8-baa9-23149f3abfc4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "074e5be2-1472-43cc-935a-6958e0fb5bd6"
        },
        "item": {
          "id": "91436989-3a4e-4114-8f9f-fc096033f4b5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5caf8540-6b33-4056-aee1-ecfc478ab8ee",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "099554d0-d224-402c-9a9f-3096bd80c9e0",
        "cursor": {
          "ref": "4c5ebd74-864d-4bf9-a850-0306a76bd2c0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f0df020d-fb6d-4b5e-9ded-54b8e2861be9"
        },
        "item": {
          "id": "099554d0-d224-402c-9a9f-3096bd80c9e0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "63e1b6be-eb9d-43e2-877c-2bdee3b37b52",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e2320f6f-0f31-4d09-8c7c-4613cbe44444",
        "cursor": {
          "ref": "3bec037f-d548-48c2-a642-d26db7e0f541",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b26ec589-77c4-47bc-a891-eb149af07e14"
        },
        "item": {
          "id": "e2320f6f-0f31-4d09-8c7c-4613cbe44444",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "01fab5d1-8da5-4d55-86a2-45ee9dc59239",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a96e5535-7265-4a57-8ed2-dbab1e0ce553",
        "cursor": {
          "ref": "d3418da9-f23f-4280-8255-3b0277915cf3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f198fe9b-693a-403f-8702-1480fec187c1"
        },
        "item": {
          "id": "a96e5535-7265-4a57-8ed2-dbab1e0ce553",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8316fb18-b954-4519-8d52-c5220ac660f7",
          "status": "Created",
          "code": 201,
          "responseTime": 416,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "50b51f68-e01c-45d1-8a9c-88a34f12243f",
        "cursor": {
          "ref": "0b6ce8bf-9530-4ce4-b536-25f39f394f53",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5a14de76-ad56-43df-8025-accad6c6019f"
        },
        "item": {
          "id": "50b51f68-e01c-45d1-8a9c-88a34f12243f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d6ea454d-200c-4620-9f02-3ede24493ca8",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6eaaf785-5e82-4854-89ef-1c9d0c7d7c11",
        "cursor": {
          "ref": "24349f2e-bbaf-41b3-9585-451c8905b808",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "415d92ed-9166-4a3e-8711-a45747133c90"
        },
        "item": {
          "id": "6eaaf785-5e82-4854-89ef-1c9d0c7d7c11",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6e9ffefe-dddc-43ba-9c93-0af0b8a26abb",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d780f10b-7066-4f49-8314-a03ea647bc8e",
        "cursor": {
          "ref": "f0d21995-950c-4a74-9b34-b479e4894b12",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f26d4820-9c83-4bb5-aa6b-70fb5969bb32"
        },
        "item": {
          "id": "d780f10b-7066-4f49-8314-a03ea647bc8e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "927ab90e-3af0-49c4-923b-a5ee004c6b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab44560-38aa-4919-a7ca-cc3819f659a9",
        "cursor": {
          "ref": "de0b2574-37ed-4b04-aa7a-1555e32ab9d3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82af823c-5450-436e-b344-97e952acc217"
        },
        "item": {
          "id": "2ab44560-38aa-4919-a7ca-cc3819f659a9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a3dc844a-ac5c-4112-a220-4e1a85c77836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7bf1c2-f66d-4cef-88da-6ee3f3e11f36",
        "cursor": {
          "ref": "ce171e2b-80b8-43ab-8a2b-479f14409f19",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e0fbe06f-10c3-4d25-9d7a-2ff4073d515b"
        },
        "item": {
          "id": "4c7bf1c2-f66d-4cef-88da-6ee3f3e11f36",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5ee14736-0fc7-4e29-97b4-ee98ee49c600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25b1afb-1f74-44b0-91f4-e45348eea39f",
        "cursor": {
          "ref": "39472a52-3f9e-4805-8aa8-61868a2df421",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ad1a0a0e-c0b6-4ec1-b32d-295bd54209e6"
        },
        "item": {
          "id": "d25b1afb-1f74-44b0-91f4-e45348eea39f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a6bd62ad-6c06-4e5f-accd-f79e94002c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3bfb96-0c67-4c78-9728-eac58362c3e1",
        "cursor": {
          "ref": "db4ea5dc-0e23-44b4-a31f-5fe2b471b97b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "09938d0c-5121-445c-aa83-d6845eb747ac"
        },
        "item": {
          "id": "2f3bfb96-0c67-4c78-9728-eac58362c3e1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7d9d821c-dd32-4867-9a73-7d8ca5828875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2c7f7f-8c8c-484c-baaf-82c6c5ecb5e6",
        "cursor": {
          "ref": "09870656-9bd6-46f6-ad79-7e195d649259",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1c4e2f3e-1cd2-4580-bafb-aeae90e58be1"
        },
        "item": {
          "id": "0d2c7f7f-8c8c-484c-baaf-82c6c5ecb5e6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "50a909ac-a382-4cc6-a3b0-86b45a06022e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fa63fa-8e7c-485a-b56a-6e27182c07e9",
        "cursor": {
          "ref": "1d73cfbf-77db-4bff-a894-4d226441f506",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7181c693-20de-4e23-bfb3-f98b2875d11d"
        },
        "item": {
          "id": "44fa63fa-8e7c-485a-b56a-6e27182c07e9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "baadf3dc-b383-4a75-9b02-52ff78645f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d307218b-8972-4941-acd1-ff9956ec870b",
        "cursor": {
          "ref": "fec3196b-18f4-47c3-84c7-b4d3b7350bec",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c064efac-6376-4ee6-94ac-bdb537b053d5"
        },
        "item": {
          "id": "d307218b-8972-4941-acd1-ff9956ec870b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "463a6fa2-b221-41cb-90dc-49e7d3dc0195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a798e600-05c5-4e15-b298-41b3b460d13d",
        "cursor": {
          "ref": "2cb46d32-b092-4e18-9fd1-e6075d774b94",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a028eb02-4982-4916-9570-2b72bea80bf0"
        },
        "item": {
          "id": "a798e600-05c5-4e15-b298-41b3b460d13d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1501c95b-2c51-45e1-ac2b-f16962dfc06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1523954f-3db0-43c7-ae10-de0aaff28f3c",
        "cursor": {
          "ref": "68358b30-b667-4d16-8ec0-234d54fa8289",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7c2bde9-1a50-4ddc-abfd-9227114f7ffc"
        },
        "item": {
          "id": "1523954f-3db0-43c7-ae10-de0aaff28f3c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9d111f07-915b-46fb-9922-124e30cd493a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ba21a7-3584-4fce-aaec-9f9e033fc496",
        "cursor": {
          "ref": "ea9f64ce-222b-491d-a288-499b21abeb89",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7fb0b951-18c1-4e31-97d8-98f54b97e491"
        },
        "item": {
          "id": "f9ba21a7-3584-4fce-aaec-9f9e033fc496",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "418c3413-30fa-484d-ad8a-f67e74e95298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236c680b-989c-478e-9db5-ff938e1d54a8",
        "cursor": {
          "ref": "617e91d4-2f49-4c73-8bb4-5e00fa0e2331",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7493c371-f166-42db-812c-728b3e595ba4"
        },
        "item": {
          "id": "236c680b-989c-478e-9db5-ff938e1d54a8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4e66f5f0-1272-4dc5-8244-02524e4ddd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a2d3bb-04b9-4e06-99b3-b802cfb4550e",
        "cursor": {
          "ref": "f2b1a052-3e90-4127-bbbf-e35ef4d9bd23",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2f6c209b-aa41-45d8-9862-fdb756fadf1e"
        },
        "item": {
          "id": "f0a2d3bb-04b9-4e06-99b3-b802cfb4550e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "30d08892-db9d-4169-9491-9ceadbe323cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3628a2e5-70c6-40d5-8398-d2efaf932fd7",
        "cursor": {
          "ref": "e54d7228-3b1d-4700-b9ba-3417651defda",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9e82f3c7-3ce8-4d1a-8dfc-992ad886c9be"
        },
        "item": {
          "id": "3628a2e5-70c6-40d5-8398-d2efaf932fd7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "88e8f519-505b-49ee-96b6-ecb2d9098f28",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5f5cc8a5-ccd3-4294-80e2-48599f43aa28",
        "cursor": {
          "ref": "f25be64e-0306-4089-9d91-403f37d29c62",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "47461041-4dfa-4b1a-a970-4cbde65f0b80"
        },
        "item": {
          "id": "5f5cc8a5-ccd3-4294-80e2-48599f43aa28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8016aadf-1163-41a9-8d6a-05e1471e0b1b",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7f7e445f-8196-426b-88e3-a21ad3e9e2ef",
        "cursor": {
          "ref": "2c6a5efd-ffcf-4cbb-9f12-82d98d8b04d4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d9b92b44-28e9-4cb6-916c-c14a16ac3d37"
        },
        "item": {
          "id": "7f7e445f-8196-426b-88e3-a21ad3e9e2ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0068eb7f-24fd-4c6a-825e-086086f1ee4a",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4fe53ba9-af65-46ab-aabf-184792ece24b",
        "cursor": {
          "ref": "dba9e95c-b8a0-4109-897b-e64e48345809",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f7dacaa5-ae4f-4f31-87d6-ef263496eeb1"
        },
        "item": {
          "id": "4fe53ba9-af65-46ab-aabf-184792ece24b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "39d11d73-27dd-4c1d-a899-4c1b402a3440",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0f55733e-3252-4f2a-83e7-51ac3b7ee6e2",
        "cursor": {
          "ref": "5826a816-b60d-4ddd-81c7-45da88247456",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9a3db4a9-a2a8-445c-990a-8060dd6d8d62"
        },
        "item": {
          "id": "0f55733e-3252-4f2a-83e7-51ac3b7ee6e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "63ad65b9-e5fe-4411-9578-f2e81f7580e6",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1495f799-11d9-43ff-83b2-220de12fef4e",
        "cursor": {
          "ref": "a4113158-5425-404d-aed4-a38d4f74f76f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4a006ccd-c4fd-454d-a62b-4a2364ce94e5"
        },
        "item": {
          "id": "1495f799-11d9-43ff-83b2-220de12fef4e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e6775514-4fd9-4c8b-ad4e-6ea935fb9b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d224f311-6400-4df3-81ff-6c019727c6e8",
        "cursor": {
          "ref": "8246c1b0-35cf-431c-8462-d9032d58e39c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0b93f88c-d5a4-4b9d-9314-3298d59e2f1d"
        },
        "item": {
          "id": "d224f311-6400-4df3-81ff-6c019727c6e8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b848ab0b-e11f-4414-a113-aab4524cd843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75487c67-422e-4469-93a9-524556f224c4",
        "cursor": {
          "ref": "ae633210-efbd-417f-a4fa-4be3ff1d70ec",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1fb53373-0c53-46d4-8bdc-ecbe57db7969"
        },
        "item": {
          "id": "75487c67-422e-4469-93a9-524556f224c4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5b3cf328-36aa-4175-886b-9ea63566eee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5626235b-dc28-439c-9bb6-61b28add89e0",
        "cursor": {
          "ref": "5579f3f9-a0da-4ae3-98c2-aad3d8818b80",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "de8eefc7-af5f-4b44-b2ac-644ad313f41f"
        },
        "item": {
          "id": "5626235b-dc28-439c-9bb6-61b28add89e0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "46ec1a1c-ad6e-4e6b-88ac-dafce03838c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effcc718-bcfc-4b76-9818-2e03a9b8a54c",
        "cursor": {
          "ref": "75cfb811-2101-44af-b997-b02ddca26f07",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9524e4bf-3681-4b3b-983a-2f55a1510b12"
        },
        "item": {
          "id": "effcc718-bcfc-4b76-9818-2e03a9b8a54c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6f869f16-a83f-4aea-9f54-40e9c430ba62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc971fc-e0b3-426a-9eb7-e35c81188c05",
        "cursor": {
          "ref": "f3003265-6762-4c12-b273-f7d16ab0e3f2",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ac40e15e-8aef-495c-8cf7-3695e98aa06d"
        },
        "item": {
          "id": "dfc971fc-e0b3-426a-9eb7-e35c81188c05",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9a471312-4359-4e39-9fbb-c6e434eba531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7f0620-4222-45c0-aef9-e2aab05feded",
        "cursor": {
          "ref": "bd2207dd-b6c7-4faf-a9a9-e9bceb00f5bd",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bf14e377-258f-46c8-8893-5b525d611f2d"
        },
        "item": {
          "id": "5c7f0620-4222-45c0-aef9-e2aab05feded",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9fa2c2c9-154a-4107-8c69-5dec71db6acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d244c0-32f3-4e31-832f-3071c5876b4d",
        "cursor": {
          "ref": "3665a013-37c6-4c93-aa22-3c5b34fee8ee",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "39523e28-0151-419e-905a-54d77f5754a6"
        },
        "item": {
          "id": "33d244c0-32f3-4e31-832f-3071c5876b4d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "23d64bc9-de18-40c0-9d0b-cd2c961ef6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136135ad-d02e-4d61-910b-fc355bb70447",
        "cursor": {
          "ref": "cf6f3d8d-e25f-4846-bf17-04eccf20f416",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b00f4621-ac2f-4250-901b-2a962743c2c0"
        },
        "item": {
          "id": "136135ad-d02e-4d61-910b-fc355bb70447",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3bbeda44-17f4-4d5e-913a-2fd713df2e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d05b48-701d-444d-b090-0562f6e647d1",
        "cursor": {
          "ref": "5f89d40e-6770-4ce1-934b-632764b7b2ed",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1be9cec9-afed-45c0-827e-ec3eabdf0d2f"
        },
        "item": {
          "id": "b7d05b48-701d-444d-b090-0562f6e647d1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7c17add3-4a0d-444d-b717-1ad3f561f670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcca53c-f401-45a6-91d0-2860dbae707a",
        "cursor": {
          "ref": "0c78fa3f-8e8d-410a-9eb2-bec7711c7f32",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1b93c33e-dcca-4e8d-b44a-41fcbe3f86cd"
        },
        "item": {
          "id": "cfcca53c-f401-45a6-91d0-2860dbae707a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4e45e02c-14e6-48d8-82af-015571f6454d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fad2ef-15ad-43b5-983a-8aafbd7f4718",
        "cursor": {
          "ref": "41a7153f-28ce-4d1a-81cc-2612dc37a44b",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "40b7194a-1af3-4cd9-a9c9-56a2b214bf58"
        },
        "item": {
          "id": "98fad2ef-15ad-43b5-983a-8aafbd7f4718",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fa713633-2460-433d-8069-6d51dd61e520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda07f48-3d3a-438f-ae90-bf19df27e59c",
        "cursor": {
          "ref": "cea209e2-1291-4d6b-9ab5-7681aab014a4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8dd8fec7-4075-44c7-9349-539e4a361736"
        },
        "item": {
          "id": "bda07f48-3d3a-438f-ae90-bf19df27e59c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50a2aceb-486c-4889-9312-2d9d3440ee26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3e74d9-0ca8-4737-8b99-b20a8129d86b",
        "cursor": {
          "ref": "612d9e19-a0e3-4551-b34b-75ef62489b9f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8f05a25d-f6fb-407c-b3f4-9895e2beaf27"
        },
        "item": {
          "id": "2f3e74d9-0ca8-4737-8b99-b20a8129d86b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "211a5f9f-1591-410b-98bc-2792695e7173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c51702e-a3f2-4207-91e7-df3a2dda379e",
        "cursor": {
          "ref": "e661f172-174d-420c-a2d5-5bb584e5d2df",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1be00e62-81e0-4843-8bd6-05f28d400dbd"
        },
        "item": {
          "id": "8c51702e-a3f2-4207-91e7-df3a2dda379e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8e0cfa84-bb7d-4a3a-a5e2-28540d9e0ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7e6959-fe9f-4409-9237-f19d0f0dcf0a",
        "cursor": {
          "ref": "e98710bd-e1ac-4b27-9499-062b998bd999",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c91b40ef-616f-4332-9889-270e33188d96"
        },
        "item": {
          "id": "7c7e6959-fe9f-4409-9237-f19d0f0dcf0a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ed73b0f5-bdc2-4224-8fde-a3d6f8dd6186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55121d30-b8cd-4ef0-87f5-0da191f23613",
        "cursor": {
          "ref": "a2e2ec5d-2822-424f-b31c-d30a8da783b2",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "88be99b5-4de2-4125-8058-1d264dd1103c"
        },
        "item": {
          "id": "55121d30-b8cd-4ef0-87f5-0da191f23613",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6c3c2356-2d87-4e07-a1ad-a7ebfa7e1dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd11d1d-6b79-4d2e-b18b-9ac5373487a9",
        "cursor": {
          "ref": "4e3a92b2-4bb6-4021-b369-ad73736c6768",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d83c0557-3e10-4586-8d0c-84cc8fd8826f"
        },
        "item": {
          "id": "4bd11d1d-6b79-4d2e-b18b-9ac5373487a9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3b94d7c0-eecf-4909-8e9a-ab9bd61799a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282410f8-a998-49da-a167-e0621420bbaa",
        "cursor": {
          "ref": "25fe684d-23b1-4cf6-88f7-4fc503144143",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "95cbc085-ad0c-4028-a954-d84cf76852cc"
        },
        "item": {
          "id": "282410f8-a998-49da-a167-e0621420bbaa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "01cd8af5-df6c-479a-998d-d5056adc56ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1612aa72-0434-48a9-9076-790b647f5da0",
        "cursor": {
          "ref": "6ff6a253-4d36-4a3c-8877-1a4e3ee0bf02",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ff473cea-6b7f-4c97-987e-b8effc74923c"
        },
        "item": {
          "id": "1612aa72-0434-48a9-9076-790b647f5da0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dafabf8b-ccf9-4ac9-a756-31b1b7e48fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcee2db-cc6c-4cbe-80cb-96e064118358",
        "cursor": {
          "ref": "37ebfed6-ba43-49c3-b162-4c9c7ff374a1",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ade10709-3f46-434a-9406-aaf25226191a"
        },
        "item": {
          "id": "3fcee2db-cc6c-4cbe-80cb-96e064118358",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8c63a5e2-35da-401d-9a7b-09111efa6e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e47e97d-33d4-4019-97c7-a38a733bdda8",
        "cursor": {
          "ref": "b5efc394-b0ab-4106-a2ea-2dee6733847b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5196be05-66e3-4f14-b4de-9a94c7501c39"
        },
        "item": {
          "id": "3e47e97d-33d4-4019-97c7-a38a733bdda8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0d40ddb3-5e9f-4ccc-8c3c-bf331c1cad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2683d4d-a73a-428f-bb87-a4be401c125f",
        "cursor": {
          "ref": "69110196-eb59-4132-a5f7-a123dac400be",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "26e803d4-8b74-43bd-a32d-a37dd361a4d2"
        },
        "item": {
          "id": "a2683d4d-a73a-428f-bb87-a4be401c125f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4d7b4727-7ca4-48cd-80d8-a22d00f872b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77aa370b-e197-4831-8249-da28c465649f",
        "cursor": {
          "ref": "b60c8670-7eaa-494d-8c4b-0483f2825bdf",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "73219bac-f155-42ea-9865-cd66d56402b3"
        },
        "item": {
          "id": "77aa370b-e197-4831-8249-da28c465649f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "de70b037-394e-48ca-8e26-8e224f0ebefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6316c85c-8927-4961-9ef0-b192e997f6a7",
        "cursor": {
          "ref": "07300883-a13b-479d-9d6c-dab29a818dd5",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7a6d758a-bf80-40f3-8208-d0201255dae8"
        },
        "item": {
          "id": "6316c85c-8927-4961-9ef0-b192e997f6a7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "071f252e-1fef-40a8-8dfe-e1910a7cd96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aafaf21-20a4-4f69-876f-2369ea863d21",
        "cursor": {
          "ref": "7d61f7a8-28fa-4ba0-9515-b29cb4dbe467",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4f1c54c1-ffd0-4519-b45a-c82a39fe6cd5"
        },
        "item": {
          "id": "6aafaf21-20a4-4f69-876f-2369ea863d21",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "75548eb0-b962-4be5-be57-b82b7df04901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255a6792-e221-4e7e-9c3a-f1e2e858e6b1",
        "cursor": {
          "ref": "4f2753ca-af2c-4544-997c-dc91c8ccd5da",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bf1c88c7-0cc1-4a07-8580-2a2b91def09f"
        },
        "item": {
          "id": "255a6792-e221-4e7e-9c3a-f1e2e858e6b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "970d027e-5e12-412b-914a-d01ce1652367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08289d6-bc1d-49e8-9591-f692fd62cc65",
        "cursor": {
          "ref": "d6dd6166-502c-4ffa-af82-12f354914437",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9c49b4a0-9f6b-4a19-bef7-47695753a579"
        },
        "item": {
          "id": "e08289d6-bc1d-49e8-9591-f692fd62cc65",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3d4c31bd-f9c7-4ad5-9ae0-290a12a266b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d886964-7dd7-4bf7-bee0-8781b36a1bf2",
        "cursor": {
          "ref": "4830ba9a-e8d0-406b-a947-ac00fd945dda",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff8b35bb-1f49-4b84-ae5f-c5570b662a52"
        },
        "item": {
          "id": "0d886964-7dd7-4bf7-bee0-8781b36a1bf2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "350e8ff0-cddf-4d97-9b2b-5fcb92543fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d38fe3-807a-407a-8a74-027d1524d40d",
        "cursor": {
          "ref": "daba27cb-49bd-48db-b7e4-cc5c16ad6940",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "17ecccb1-67d3-464a-b0bf-b874fa213bd8"
        },
        "item": {
          "id": "c3d38fe3-807a-407a-8a74-027d1524d40d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4cde73db-1a03-44b4-adb1-565004966d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5acdc2-bf97-47c7-ae72-094fa8396bb1",
        "cursor": {
          "ref": "c89ef8b6-d96b-4f5f-b136-2de183db2bfd",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b1890ae2-0c8e-4dc6-aac8-5a4cf9024211"
        },
        "item": {
          "id": "8b5acdc2-bf97-47c7-ae72-094fa8396bb1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6d1efd80-963e-4a12-805a-3425bcd172a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f54b6d4-adbd-4563-b264-8ba1559c40cb",
        "cursor": {
          "ref": "d73cf397-6fc2-49ee-a5cd-b588684bb711",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cb6ce031-f347-40d9-86ae-21afe565494a"
        },
        "item": {
          "id": "6f54b6d4-adbd-4563-b264-8ba1559c40cb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e8bba7de-e134-4cbf-a94b-35e7bb88f808",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c79d0ca-b320-4c72-b9f2-49dd32b4eeb3",
        "cursor": {
          "ref": "c701bdcb-9edb-494c-92f0-9be118464494",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "89aae6a4-43a1-4561-a962-ae0376e02475"
        },
        "item": {
          "id": "7c79d0ca-b320-4c72-b9f2-49dd32b4eeb3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1af91d81-32f1-4887-b3d6-784e3e08b445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0f1f5543-ab9e-485b-bd5c-6e0df6233c2d",
        "cursor": {
          "ref": "d61fe4d3-7a93-493b-ab64-4b5942822e23",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c03c45cb-08d3-4913-8dfd-a7a83475a814"
        },
        "item": {
          "id": "0f1f5543-ab9e-485b-bd5c-6e0df6233c2d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1c4319a2-a77e-4155-a59f-eff7925ef196",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "384272f0-c96c-4614-bdca-cc4eae806383",
        "cursor": {
          "ref": "ecdf0e52-5af9-46d7-8cf8-8524190b51cc",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3e157927-6813-44af-a709-a501c1d2831e"
        },
        "item": {
          "id": "384272f0-c96c-4614-bdca-cc4eae806383",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "283e398c-aa52-4bd9-8fec-5a1942d504de",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "709605ae-1c84-47e4-aa26-594f90942670",
        "cursor": {
          "ref": "e18f8a81-cf91-4fe9-bdc0-a45a31b6d351",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2d0c1353-ed59-426e-9a4c-e8dc3b16c064"
        },
        "item": {
          "id": "709605ae-1c84-47e4-aa26-594f90942670",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "58489b36-08fa-4dd9-a01e-8ddac9f500f3",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c9cee8-d2f4-409d-8564-903bce60c68d",
        "cursor": {
          "ref": "839288f7-77b2-4423-8076-7c921dafe2e7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a8094ba6-e08f-49ad-8371-fcc60bd1ff3f"
        },
        "item": {
          "id": "47c9cee8-d2f4-409d-8564-903bce60c68d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "638977d6-5f14-4bf5-9313-5a95263ab89c",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b40d476-7b1d-42b1-b627-545035420d53",
        "cursor": {
          "ref": "d19b6658-34c4-41eb-8e28-0ee1139b7950",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cfcf40d0-62e1-40f6-bc61-886f9cb3a93d"
        },
        "item": {
          "id": "4b40d476-7b1d-42b1-b627-545035420d53",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2a87baee-3673-48cd-a4fc-7a33b7d0dd4a",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-22T00:34:03.088Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-22T00:34:03.088Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b7737a94-4963-4431-818c-a5333d58aa72",
        "cursor": {
          "ref": "decd6e8d-d8bf-49b3-99b9-df1c970a0c1f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd202ffc-482b-4a63-b516-6ba882084be4"
        },
        "item": {
          "id": "b7737a94-4963-4431-818c-a5333d58aa72",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b749f89-ef8e-4346-8dd7-5d0ac94c5f4b",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdba2657-36fc-41ba-9233-883b86b41d80",
        "cursor": {
          "ref": "d85fb0f8-1d0d-40c2-936a-30d3ffaa2e5b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7b78e6ee-305d-4698-9922-2de322353c11"
        },
        "item": {
          "id": "bdba2657-36fc-41ba-9233-883b86b41d80",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f813d834-69f9-4da1-bff0-280c609b12ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7789fb9a-ac89-4b77-b7b7-0ad4ec16dc14",
        "cursor": {
          "ref": "eb27d2e7-5210-400f-b61b-90f069ad3e19",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5fcd1164-918f-44ad-9b1e-fda47e711b04"
        },
        "item": {
          "id": "7789fb9a-ac89-4b77-b7b7-0ad4ec16dc14",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "49423f76-24cc-4a49-ab88-e3b2d0cd2182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ec78a6-c655-4581-99d6-5e3bcad65d52",
        "cursor": {
          "ref": "ab040b43-e0a4-4f79-b4ee-497a8b3d9a3c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dce226fe-d32e-439d-8d1d-37562d3dbea0"
        },
        "item": {
          "id": "31ec78a6-c655-4581-99d6-5e3bcad65d52",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "15f7f76d-daae-45c8-b3c4-5845d498b6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b670cdcb-ad2d-4c16-b4fa-deda855b952f",
        "cursor": {
          "ref": "cd996379-814c-4d03-9a24-feefdec85568",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "06effa8c-4a6a-4a8c-ab7c-f4a384ab3ec2"
        },
        "item": {
          "id": "b670cdcb-ad2d-4c16-b4fa-deda855b952f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ae8b7508-4505-418c-a24d-ed940e1a2c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a816f744-d85c-4e23-9d99-c7d52b7283b3",
        "cursor": {
          "ref": "18e75cc3-1e70-4c6e-a352-5bd9b79c5ea8",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b2d52ecf-4a69-4296-813f-574aa97f5b0b"
        },
        "item": {
          "id": "a816f744-d85c-4e23-9d99-c7d52b7283b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "386e910c-b836-453b-a8ed-2aaac9af7380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c8f811-188f-44e4-a33d-e81740e8f9ba",
        "cursor": {
          "ref": "40d903f7-6b02-496c-8409-dc9ddd1c8547",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "becc1ddf-2bca-4e4d-9b04-b95278f13adf"
        },
        "item": {
          "id": "e8c8f811-188f-44e4-a33d-e81740e8f9ba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5bdabf23-f875-4305-9bb5-16d162b9461d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4c7745-9871-42ab-9a41-610683c0abb6",
        "cursor": {
          "ref": "e15d0d1b-df9a-43b5-96fd-f1d79dd54665",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a712dce-f686-4426-85f9-e5213f4f1c1d"
        },
        "item": {
          "id": "ed4c7745-9871-42ab-9a41-610683c0abb6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a45f69a3-4585-41ee-877a-c8b5276626df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6f9faa-08a2-4bd3-a95a-bec682b02169",
        "cursor": {
          "ref": "dbc5dce3-3751-48c1-bc7c-634603ace395",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "779611cb-2336-4107-8a80-6634ad15ac18"
        },
        "item": {
          "id": "7e6f9faa-08a2-4bd3-a95a-bec682b02169",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9532ec36-eac0-427f-8cf3-a6769effdb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef2801-3b46-483e-b772-7e68d5dd5bdc",
        "cursor": {
          "ref": "75bb0c71-a347-4292-b30b-993fbd948d9a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8d2219b7-3785-4ce0-bd0d-0f2a9ab8240e"
        },
        "item": {
          "id": "eeef2801-3b46-483e-b772-7e68d5dd5bdc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "655b9a7e-65eb-486e-8cc2-9e9ccfb17083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981c07a5-bd96-4542-a89d-09900fcf3feb",
        "cursor": {
          "ref": "5ad1d1fd-bb38-408c-973f-da53e496a66d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "596fa7c0-8bad-4308-be53-6806a57c515d"
        },
        "item": {
          "id": "981c07a5-bd96-4542-a89d-09900fcf3feb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "50ab3c66-a781-4470-9715-d5bd6cdecb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59400fe6-98bb-4717-be4f-d16381efd17c",
        "cursor": {
          "ref": "e8043f66-c2e5-407e-b944-48475812b37b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "28172643-ce87-41eb-836c-d3b4255b1273"
        },
        "item": {
          "id": "59400fe6-98bb-4717-be4f-d16381efd17c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cc4ccf69-5233-4f06-812d-ce9daeaa2c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a6fbcd-4783-4689-b537-f94b06be4022",
        "cursor": {
          "ref": "8d8b5c0c-a9ea-4675-abc9-6d4c4a4e0faa",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a2678ff6-3aa6-4cc3-854a-afa19d67a917"
        },
        "item": {
          "id": "09a6fbcd-4783-4689-b537-f94b06be4022",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "59885d5c-ea6e-4a4c-9b7f-7d490412d352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16c9891-9689-43e4-b752-cb3d67311504",
        "cursor": {
          "ref": "0dc74786-a8b4-45ae-b3ff-00fffe7a277c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "384371b9-df27-423c-908e-61b2b9b051eb"
        },
        "item": {
          "id": "b16c9891-9689-43e4-b752-cb3d67311504",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b8528074-4f3e-445a-9fe2-e9b2b9047a93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "203b43d4-ade3-49df-8e1f-f84e6e3e4b53",
        "cursor": {
          "ref": "e7e301d2-f738-4806-95f0-330495c4b529",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e4c7738c-5a2d-42fc-b324-a4a0f97dd2a9"
        },
        "item": {
          "id": "203b43d4-ade3-49df-8e1f-f84e6e3e4b53",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2fa0958c-fc88-4a81-b720-75ac5ed1e660",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f0491829-2ad6-4bcd-83d5-127b77307d2f",
        "cursor": {
          "ref": "fc4146e1-1fdd-4e63-a4db-cb078edd4b75",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "baa280ad-a407-4c4f-9225-0935b2b22bb9"
        },
        "item": {
          "id": "f0491829-2ad6-4bcd-83d5-127b77307d2f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b1a3726f-4259-4879-a60b-ad157998f2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a82da9-2406-4ebc-844d-fd09b9caa30e",
        "cursor": {
          "ref": "55dcbfef-0c53-4268-94bc-c165e336c979",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0e4893c8-4e08-4f90-9df6-c8ffd3a80235"
        },
        "item": {
          "id": "24a82da9-2406-4ebc-844d-fd09b9caa30e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "00ed10c6-831a-4e42-923c-74cf9c86a515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5bb8d9-66e5-4643-b73d-33f70fbcaca2",
        "cursor": {
          "ref": "566539f1-0ab4-4e64-98e1-73f974179b32",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0f87e543-0105-466b-a8a6-3c7b98e6f305"
        },
        "item": {
          "id": "cc5bb8d9-66e5-4643-b73d-33f70fbcaca2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "298df73f-0c46-4cb8-84cf-8e93626e5bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8719a371-edfa-47c0-b1de-967261d70179",
        "cursor": {
          "ref": "3e82704e-da57-4175-bf8c-58566b2c5a7b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5787bf4a-1063-4201-bc29-b18718463b9f"
        },
        "item": {
          "id": "8719a371-edfa-47c0-b1de-967261d70179",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "38188d60-ee33-45ce-ac98-b9262b3ea24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b929eb-9009-4e79-b91d-d530cdece472",
        "cursor": {
          "ref": "5a478376-58ad-49be-af35-e79b3d01bcf2",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b791a595-394a-4b96-af6c-44342cfb593d"
        },
        "item": {
          "id": "c2b929eb-9009-4e79-b91d-d530cdece472",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3b3e7f4d-a371-40a8-a05b-b7eaf1104542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf77a8e-d671-4894-b784-483717eca18e",
        "cursor": {
          "ref": "bdcf08b8-cdf9-4edf-8c4e-36ee5e07a077",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "77ce0ecc-ca26-4f7a-ad6c-3623a3ad9efc"
        },
        "item": {
          "id": "edf77a8e-d671-4894-b784-483717eca18e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9bcfe990-b006-4d3f-9456-078a917549ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b08d8d-2904-41e6-af5b-de37b5109a77",
        "cursor": {
          "ref": "4969d123-350a-42cb-8858-839ac1ab44c8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "725a22c7-d840-4566-b5da-a5d87f48e767"
        },
        "item": {
          "id": "66b08d8d-2904-41e6-af5b-de37b5109a77",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4f67cfed-4172-495a-8487-ccf45c110297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a868ce-aef9-4264-8121-dac03550a96a",
        "cursor": {
          "ref": "17c5ab3e-a7c0-4cca-b290-8aca9760cbb5",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ad6702a4-1565-4d1c-8f24-cbaa25fb8431"
        },
        "item": {
          "id": "62a868ce-aef9-4264-8121-dac03550a96a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "86b305cd-a33a-4b50-8946-2177f6a72ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fa0bf7-f4d9-4b48-9f32-fc11bfd2c47a",
        "cursor": {
          "ref": "e570b8db-161e-4661-8bd6-ae36d27c5518",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1cc4a8f6-77ea-4319-8a24-84169cc7173a"
        },
        "item": {
          "id": "31fa0bf7-f4d9-4b48-9f32-fc11bfd2c47a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d1879e4b-5740-47db-bd21-93f4a0771c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee426f0-8979-4e71-92fd-877018be9db4",
        "cursor": {
          "ref": "3e4335d1-00f6-4568-92fd-3b38f6e9c7a8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5ff20377-8069-4b4e-8d4a-05272b29d7e4"
        },
        "item": {
          "id": "bee426f0-8979-4e71-92fd-877018be9db4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "12621360-fada-456c-82da-2264bf4541a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b86e82-1ca3-422c-bff9-c8daf6a28793",
        "cursor": {
          "ref": "ce781687-06bf-4aed-b9f6-18dc0b76afd8",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9a7974dc-579d-45a9-8668-01e9cb87c0f2"
        },
        "item": {
          "id": "17b86e82-1ca3-422c-bff9-c8daf6a28793",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7d2f87a7-a24c-46f4-965c-d432f35bc8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dad7ce-c51c-4f48-9ffb-eacc8c9f1e8a",
        "cursor": {
          "ref": "9e987d6c-049e-4b21-8aa9-d50cf6e3e0bd",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0b7c138a-4595-47a2-b8b3-861b5c964741"
        },
        "item": {
          "id": "59dad7ce-c51c-4f48-9ffb-eacc8c9f1e8a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "51846b50-f88f-4c03-bca7-db733a930f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57831e8b-0fa3-4253-8c2c-b6e96710a442",
        "cursor": {
          "ref": "0937fb53-3d74-4c5c-8319-212deb2fab8b",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "67ab222a-39f6-47ff-9f69-f10e5fac96e5"
        },
        "item": {
          "id": "57831e8b-0fa3-4253-8c2c-b6e96710a442",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ec728c62-c326-4100-93c6-22066e2fa012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c6eb35-8457-44c5-a13d-9e9be573041a",
        "cursor": {
          "ref": "c99599d4-6b61-411c-bede-22289e309dc7",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "28439173-b30b-49e3-94a8-609d0bbf2037"
        },
        "item": {
          "id": "54c6eb35-8457-44c5-a13d-9e9be573041a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7a7876f-c26e-416f-bb53-4b20548bdaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f095f9a-1f64-4d44-bace-458754c58090",
        "cursor": {
          "ref": "eb07e731-eb5c-4834-94cb-9be76744c9a2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "664028b8-818d-4c5f-afa6-ea7f341b0868"
        },
        "item": {
          "id": "4f095f9a-1f64-4d44-bace-458754c58090",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a6f8f9e2-c9ce-4ad6-ab50-4c3efcda8d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c744493-c195-48d0-a3e9-275a81d350bf",
        "cursor": {
          "ref": "a8a1accd-c341-471b-b85f-e9c83e662ad9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ae51f6b6-eafc-4b64-8860-c1ee3c0413cf"
        },
        "item": {
          "id": "3c744493-c195-48d0-a3e9-275a81d350bf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa076848-0526-4f98-81bb-8c9378fbd51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697c67f2-9e57-4600-8bdf-90de25ece7d8",
        "cursor": {
          "ref": "f379fe00-84c0-42fe-8ec9-b4538d75a886",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d76fa1dc-cada-4fc6-8bcb-7c57ff8db209"
        },
        "item": {
          "id": "697c67f2-9e57-4600-8bdf-90de25ece7d8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "31991892-c8d2-43c2-b365-5ce7dacd8f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2dd7f9-e0f7-4cf4-9b8d-2efa2c6431dc",
        "cursor": {
          "ref": "0d1035e1-0675-491e-807a-5ecb61dab533",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9415ebd8-0175-4266-a944-09ee74296359"
        },
        "item": {
          "id": "2f2dd7f9-e0f7-4cf4-9b8d-2efa2c6431dc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "44372e90-36ea-4c50-a1d2-f2cdf55e901e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8f564b15-984f-495e-b8bd-24fc713016e4",
        "cursor": {
          "ref": "88f4eb0c-b88f-4060-a97a-79c41981b2a8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f7cf628d-4292-4a14-b639-99b33ce0f597"
        },
        "item": {
          "id": "8f564b15-984f-495e-b8bd-24fc713016e4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a429f733-c970-442a-abea-d513c109e574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34537f6d-8a59-49cc-beda-586e951d65ed",
        "cursor": {
          "ref": "a60e95e3-8223-48fc-9c7a-c8929c0d15b1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cfca0910-7096-401b-b6f0-946abbbb0d21"
        },
        "item": {
          "id": "34537f6d-8a59-49cc-beda-586e951d65ed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e943e16-612d-4ff2-b02f-ca7e52587551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c70f290-63f1-4a7c-8008-60e47fdd1c1d",
        "cursor": {
          "ref": "cadc8d08-a5fa-46c8-8764-e4b9aafe1ecb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "59ec1c08-9890-4140-a1c1-7d8ac99d87fb"
        },
        "item": {
          "id": "6c70f290-63f1-4a7c-8008-60e47fdd1c1d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "160307a2-75c6-4bc7-b183-e85e77121919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb22b5b-4a32-45e1-9787-57025c556cba",
        "cursor": {
          "ref": "6da0e3f4-ffab-44f9-86f9-9039ceacb329",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7f7b82d5-3c14-4f93-bd4d-0ca93cb162ed"
        },
        "item": {
          "id": "4eb22b5b-4a32-45e1-9787-57025c556cba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bf5fefd9-fe1f-464b-9e11-21d801baa09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd13d2c-3fe5-4cd7-9aac-a929e1ecd89b",
        "cursor": {
          "ref": "d371f308-7a33-416e-b02d-5cb8b4ba03f3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4b4727ee-3cd5-4b82-8a46-13d5a57524ee"
        },
        "item": {
          "id": "6bd13d2c-3fe5-4cd7-9aac-a929e1ecd89b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f76ac01d-2e84-43e6-a8e9-a72831f399ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eda922-1d37-4670-bb19-e9318990be91",
        "cursor": {
          "ref": "6705e09b-cc02-41fa-a07f-6c2eebc42776",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4b95d374-e073-4b7c-9a11-9b16d763c03f"
        },
        "item": {
          "id": "13eda922-1d37-4670-bb19-e9318990be91",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "697cd8bd-0308-4d34-aa57-daba33344bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d5e5b8-2513-4821-8a8b-b4e0ae448815",
        "cursor": {
          "ref": "465abc40-f595-48a4-b98f-3a02f3ff081f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "06745c10-c430-4d5e-87fb-776946fd9361"
        },
        "item": {
          "id": "c1d5e5b8-2513-4821-8a8b-b4e0ae448815",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dcb146fa-7d1e-4ab3-81d2-d2f7a23cd122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ff9725-5099-470a-b414-16163914d5e5",
        "cursor": {
          "ref": "05228b91-dd06-4e7a-a555-12149000b3a4",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "14f36bf3-c0a8-43bc-8fed-eef74244445e"
        },
        "item": {
          "id": "d9ff9725-5099-470a-b414-16163914d5e5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bd9eea63-c953-4fd8-8bf5-9f778cd53df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76db399c-8ec5-4cfc-8f80-83a7f8c6a7c2",
        "cursor": {
          "ref": "c99756fc-bad0-43cf-aa23-c2892cb497db",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cd66ad04-b804-4544-8867-8413a24da889"
        },
        "item": {
          "id": "76db399c-8ec5-4cfc-8f80-83a7f8c6a7c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6c018135-a640-4bc8-90b7-f0ffbdbed6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dd84a9-f13f-404e-b6a4-1f1cf57393a3",
        "cursor": {
          "ref": "f862d68a-c5ae-49e2-bfc4-f75ab8751eb9",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e0d57e99-bf16-4ab1-82ac-f6580156bad7"
        },
        "item": {
          "id": "60dd84a9-f13f-404e-b6a4-1f1cf57393a3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "03cffebd-b5cb-47a7-849d-b1bceeac5b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338eb623-81aa-4dca-be0a-06b4acb5abf7",
        "cursor": {
          "ref": "7fda5053-c086-4465-8d39-b0e523f1e1db",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "de6daabb-60cf-43ce-a565-af396cd08b1a"
        },
        "item": {
          "id": "338eb623-81aa-4dca-be0a-06b4acb5abf7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "37523bfa-324a-4505-b78c-2130673d640d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8f1056-a57e-4194-a490-bf55896e7085",
        "cursor": {
          "ref": "531f262b-4f85-4030-ae5a-1645772221ec",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fbb726b4-6beb-4733-97a8-7c3b30351821"
        },
        "item": {
          "id": "cb8f1056-a57e-4194-a490-bf55896e7085",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c3f213e7-3396-4a0f-b037-c1ea8fcde3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d277b16b-dc9f-46f1-9bbe-59fea3bd0f74",
        "cursor": {
          "ref": "889bb21e-3837-4e5a-bc75-62cd7bff5d6b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fab4c8c2-c574-4d08-b684-37db32cb093b"
        },
        "item": {
          "id": "d277b16b-dc9f-46f1-9bbe-59fea3bd0f74",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a1f969de-d929-4a5a-833a-373a8a04bf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddd0255-dba5-4b0b-9f3a-6f8e2538bd97",
        "cursor": {
          "ref": "1768f9b1-3f65-4b86-90a0-407278ac5010",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "82bc048f-9cd0-44ec-9123-cdedfc636f01"
        },
        "item": {
          "id": "dddd0255-dba5-4b0b-9f3a-6f8e2538bd97",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "76769277-59aa-497e-87c3-caedefc0d729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918a9839-7e11-4228-ad01-c8dd16cb6bbf",
        "cursor": {
          "ref": "6eaddf73-1b81-4bca-91ce-891e5f938d6c",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ec02c11f-c214-48ba-969e-e1fb852079ff"
        },
        "item": {
          "id": "918a9839-7e11-4228-ad01-c8dd16cb6bbf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a5043600-b368-43d3-8014-f3d3abbd37b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c2ed7774-b299-49a1-8896-7e9319f137ed",
        "cursor": {
          "ref": "55f06ff3-0b80-4e17-992b-4ac1c32fd863",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "94914eaa-ba2b-49f1-bea5-efb3e9069f7d"
        },
        "item": {
          "id": "c2ed7774-b299-49a1-8896-7e9319f137ed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a3bab4c3-4037-4a8f-be77-c13f3d9d459d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fda72aa-9412-43b3-9aea-4e19b042d010",
        "cursor": {
          "ref": "1460baf6-d9be-4410-816d-33f388e4e11c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3430050e-6c7d-414a-ac86-65f7e734c5b2"
        },
        "item": {
          "id": "4fda72aa-9412-43b3-9aea-4e19b042d010",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ef14fd04-b762-4bc0-938f-a71854d76021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f15ec5-3f79-4d1b-a17e-e0126236029b",
        "cursor": {
          "ref": "0fa8d996-d07f-4bab-ae52-1ea338ee7d1d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "69d8eb6c-a308-469a-916c-5654643637d2"
        },
        "item": {
          "id": "d6f15ec5-3f79-4d1b-a17e-e0126236029b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f224fc42-3c9b-4b67-a84e-2a4a0d138b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5904d0ff-81ed-43c7-8cbb-d78956f6faee",
        "cursor": {
          "ref": "b2cc90e2-7e55-4868-bbdd-114b0a0ce5f3",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "139e5698-aa82-46e0-9e77-0936d8f694af"
        },
        "item": {
          "id": "5904d0ff-81ed-43c7-8cbb-d78956f6faee",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fa96693b-a0cf-4ca4-89fc-1f3416a686c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7003c20d-45f8-4e4b-9bb1-dd54f9c57983",
        "cursor": {
          "ref": "34f8c67d-05d8-4436-a661-8bc73a87a9e7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "75dfc8ee-880c-4500-a411-4437d012aac3"
        },
        "item": {
          "id": "7003c20d-45f8-4e4b-9bb1-dd54f9c57983",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "937ef238-b27a-40ce-a1bf-4c03f4a962fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317bab5e-8e2d-453b-8971-9ff6646c414c",
        "cursor": {
          "ref": "09073734-6c2d-4c80-acc0-0c14306e7805",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f2887dd-e0e8-48c5-87f9-4d6846a9326a"
        },
        "item": {
          "id": "317bab5e-8e2d-453b-8971-9ff6646c414c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f7051a41-6763-4bf3-8eb4-57977b59db83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d2a0a0-ccbb-472d-a3da-1fe14f38eca6",
        "cursor": {
          "ref": "5086e1ca-24ae-48be-bf6f-0b5b00c1bdf2",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0225ed99-5d75-45de-90b4-41e2518a7f52"
        },
        "item": {
          "id": "05d2a0a0-ccbb-472d-a3da-1fe14f38eca6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe47d73a-c58a-4dd1-bf26-b9e2e91ef23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daedcb32-9539-4929-9530-4cf638da8e85",
        "cursor": {
          "ref": "ea8e8c34-3c2b-4e9a-8fa2-2221b2a50640",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bf520e59-ab9a-4036-b4d8-892ad735c65e"
        },
        "item": {
          "id": "daedcb32-9539-4929-9530-4cf638da8e85",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8b3398e2-ac59-4c17-8eea-419da93e74cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ab1f7d-15dd-4c8b-a69e-31e25134f367",
        "cursor": {
          "ref": "4b61950a-28d1-43c5-840a-d2d4eb669443",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "98a96663-5669-4112-9b62-e8ab9273bf5a"
        },
        "item": {
          "id": "64ab1f7d-15dd-4c8b-a69e-31e25134f367",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "454d6d3d-f3dc-4582-997c-0638a849d204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf089b-579e-490c-8c49-beb233ed6041",
        "cursor": {
          "ref": "85c28a32-1133-49dc-8e63-1e21f2c07dd3",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "66bfa398-f7f1-4063-a963-4a08a6a5a993"
        },
        "item": {
          "id": "03bf089b-579e-490c-8c49-beb233ed6041",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "348322dd-3981-420d-8b52-47984a507221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2791951f-f0f0-4de4-9320-a72dfc13b231",
        "cursor": {
          "ref": "9f308f0f-c46a-44ad-8bed-3e7e66aab362",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4ce6985c-5d5a-44b2-8b30-d00b7dc9c102"
        },
        "item": {
          "id": "2791951f-f0f0-4de4-9320-a72dfc13b231",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ae131d20-8920-4452-96ed-4fc429b5d901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b4341f-65d0-4e79-adbe-ac1e1c51aee5",
        "cursor": {
          "ref": "f5228040-c29f-44a1-a806-841567aca08e",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "11972904-79fa-4125-b288-fba984f3b508"
        },
        "item": {
          "id": "e1b4341f-65d0-4e79-adbe-ac1e1c51aee5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6412539a-e550-4068-af81-17c6879054b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97d9eae-06d5-4f76-8bd9-1a83144f8c84",
        "cursor": {
          "ref": "7e58c900-fb7c-46bc-9d43-90a65908f5c8",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "28178e4b-5900-42b8-9967-80e07f6bca57"
        },
        "item": {
          "id": "e97d9eae-06d5-4f76-8bd9-1a83144f8c84",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e37d388a-c4d6-4343-aa7b-b08736657962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aed4a9a-ae3e-41d0-93d4-537568b1af31",
        "cursor": {
          "ref": "15d3a7ab-139b-4216-b95d-24655274d387",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "99f5b5c0-2da5-49c8-9c04-69cb62f09a32"
        },
        "item": {
          "id": "0aed4a9a-ae3e-41d0-93d4-537568b1af31",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f85d23f8-e929-43ef-ba8f-c5d629f053bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a0ccbd-7a9a-4ccb-8151-0fa7ac39f49e",
        "cursor": {
          "ref": "cc16fa4a-5c6c-4ee6-921d-6c8f1d913ea9",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "de8e4fb9-e6d7-4cb4-99d6-9839e2f48c95"
        },
        "item": {
          "id": "59a0ccbd-7a9a-4ccb-8151-0fa7ac39f49e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8788b096-aeb2-4f28-9d49-f04f1fe71541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bc9336-4e2a-4242-a9d4-e109dbfdd114",
        "cursor": {
          "ref": "8af205dc-6368-426f-ad54-7b99c8ceeed4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "21e730e9-9055-4058-95d1-bbffee3cee38"
        },
        "item": {
          "id": "63bc9336-4e2a-4242-a9d4-e109dbfdd114",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6b881c48-1031-4311-88e7-411aa28a7732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21082846-03d9-4c10-b0c5-355942efa384",
        "cursor": {
          "ref": "52ebfe8f-ebc5-4f6c-9fc3-8c0dc1e83fd5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "69ee5ac1-2ea6-4781-b306-847bf34f1f6f"
        },
        "item": {
          "id": "21082846-03d9-4c10-b0c5-355942efa384",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1375a1bc-0493-4e79-9a97-d87826bb170f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd8705d-fbff-4eab-83d3-eeb81683f0c6",
        "cursor": {
          "ref": "711cd088-3815-4277-a1a9-0450c895497d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "efa20d87-ac0e-46f2-b54a-d966fc8f05b1"
        },
        "item": {
          "id": "4cd8705d-fbff-4eab-83d3-eeb81683f0c6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3d837da7-8caf-46fa-bb98-14aae5f5ac4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05611900-fd2f-44a6-9536-23f74fc06b38",
        "cursor": {
          "ref": "484307a7-4d06-429a-ab5d-e805db2f21b6",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "09ace6b8-1506-4834-9a1d-f9fc1b05111a"
        },
        "item": {
          "id": "05611900-fd2f-44a6-9536-23f74fc06b38",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b8ab0162-d0f4-4422-b88d-7087965edf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18e0551-e44b-45f6-a82b-68d62ed09a7e",
        "cursor": {
          "ref": "7c1671ec-56fc-46a8-8b8a-86948c73afb0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a986dac7-a1bd-4c29-b974-ba283ae47ba8"
        },
        "item": {
          "id": "f18e0551-e44b-45f6-a82b-68d62ed09a7e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c3a425f0-f4e6-4a5a-966e-0a0d8b4b44fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27d14ad-58eb-4650-b2a8-0ae6ceeeb9e2",
        "cursor": {
          "ref": "b2c634c1-8656-4572-8d25-b4bca607a4f4",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4fe8fe4d-45c0-41f3-a0d8-c6a0c717210d"
        },
        "item": {
          "id": "d27d14ad-58eb-4650-b2a8-0ae6ceeeb9e2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "24a26ebc-c5a9-496e-88b1-f313dce971f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f93681-18ad-4484-b3e2-c78159799f7d",
        "cursor": {
          "ref": "eea6ae91-d339-44bd-8ccc-1dd0ebf3f639",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ad97656-f45a-4ae0-b672-775be503fe25"
        },
        "item": {
          "id": "b2f93681-18ad-4484-b3e2-c78159799f7d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "95577d9e-0234-467e-831b-c23098ad79a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eba9498-f92f-40f3-98b1-9e489301853e",
        "cursor": {
          "ref": "719c7cb3-26fc-43fd-a100-e3ff3923682a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "efd25b7d-9d76-4327-a13a-ac95cf8390f8"
        },
        "item": {
          "id": "5eba9498-f92f-40f3-98b1-9e489301853e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "769dd3d7-75a1-4d10-8e45-e1a2f2652ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d103830a-7204-4ca0-bad6-9ab8bec54309",
        "cursor": {
          "ref": "3f216e13-fe35-4d89-aff8-52286d8d1832",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "62d465d2-e202-4de7-9723-e206b34e0e4d"
        },
        "item": {
          "id": "d103830a-7204-4ca0-bad6-9ab8bec54309",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "043f6ca0-b5b5-4168-bab9-6df07f49858c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5071edf-b79e-4fed-9d87-b53c8a359a27",
        "cursor": {
          "ref": "88c7747a-31f3-47d0-9a91-751aefcdc29b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed79fc77-af04-4cec-97ed-f64eccf90b2e"
        },
        "item": {
          "id": "d5071edf-b79e-4fed-9d87-b53c8a359a27",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b0c25aaf-0e43-4a0e-8ba5-938476763dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bc838e-3f92-40b0-bba3-c299310e16ab",
        "cursor": {
          "ref": "8abb8996-4223-42d2-953b-c0d4b74703c0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4f5544f3-258d-4e0a-9cd0-a5021b036abf"
        },
        "item": {
          "id": "c9bc838e-3f92-40b0-bba3-c299310e16ab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5f1fb9db-faf0-4e5e-8263-8dc6275045d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fecb3c-1d42-4fbc-9582-ccdf92e0baaa",
        "cursor": {
          "ref": "72c74a63-4540-42bc-b7c4-dedfbe11e4bf",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b4577b36-9d88-4647-b73b-948c2edae400"
        },
        "item": {
          "id": "00fecb3c-1d42-4fbc-9582-ccdf92e0baaa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9cf24e9a-2c17-4869-bee2-c68d54bac2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c48cb5d-de88-4a32-8865-5f9f7ed1ff72",
        "cursor": {
          "ref": "fe4623c2-b461-43d0-8978-0234e2cb4db8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6f2dfb96-e6e2-40b5-a443-3f1ddf5f3b1d"
        },
        "item": {
          "id": "6c48cb5d-de88-4a32-8865-5f9f7ed1ff72",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b68ae053-60f1-4e14-a7c8-3ff88646f9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f85ca1d-c738-4eb0-b4e8-fad2f41ed0c3",
        "cursor": {
          "ref": "59e6b0e1-a032-4ce6-9be8-95df9b841f81",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "431c46fd-976d-4c48-849e-36d0e4d7acb8"
        },
        "item": {
          "id": "4f85ca1d-c738-4eb0-b4e8-fad2f41ed0c3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aebbc30a-7956-492c-b2dd-a2257f43a67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe0af98-e192-4bce-a0ff-ab7728ccf7c9",
        "cursor": {
          "ref": "74d1c4e9-f809-42dc-959c-fc20aba49280",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eb5d9f4d-ad91-4b14-ac6f-f091cfad3b95"
        },
        "item": {
          "id": "9fe0af98-e192-4bce-a0ff-ab7728ccf7c9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "367a4895-c283-47ee-9f75-aafcef4a342f",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a4793dab-927e-409c-9ad0-69ea74d1d3ae",
        "cursor": {
          "ref": "3e330870-63f0-4725-a76a-b98375610c1e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "78067a22-d044-479c-9da4-791a2e1e729b"
        },
        "item": {
          "id": "a4793dab-927e-409c-9ad0-69ea74d1d3ae",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "33567478-0c68-4d4b-8507-ef55d97e3767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fa9402-57dd-4202-a486-e3abe6575c0e",
        "cursor": {
          "ref": "b34f4feb-550b-46a5-b467-40642d305789",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8af33296-01d8-48b4-8c75-9aef2bc51ecf"
        },
        "item": {
          "id": "58fa9402-57dd-4202-a486-e3abe6575c0e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "edb34379-298c-4dc6-8e01-201b1ab6fb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245db969-4076-4f38-8731-529626de64be",
        "cursor": {
          "ref": "e1ad7c6c-0784-4345-a02f-6bd338c041a3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "320ec803-294d-4688-ace3-366e3e7aabd7"
        },
        "item": {
          "id": "245db969-4076-4f38-8731-529626de64be",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fee8f250-2a1c-4e62-ad92-40230c2facd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78533dc5-e8e0-431e-89c0-ae14486e9bb5",
        "cursor": {
          "ref": "92989ac3-46ee-47cc-a725-5c181a58a89f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b5b33d19-0178-4bbc-a762-1dd721825cf0"
        },
        "item": {
          "id": "78533dc5-e8e0-431e-89c0-ae14486e9bb5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "39aee11c-7459-4765-87f4-1d734925240f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4609b354-7762-491d-b180-6979cb60a962",
        "cursor": {
          "ref": "7ada8c85-b531-4bee-9bed-77ac52970bb7",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "14d8c0e1-5cfd-4c3e-8baa-c7b71880d603"
        },
        "item": {
          "id": "4609b354-7762-491d-b180-6979cb60a962",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b329a20a-42b8-4806-b5ef-f44a0ffb4308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7788c7ca-a01f-4fc3-a46e-62d39ef3281c",
        "cursor": {
          "ref": "962c416a-f3e1-40b0-b1b6-5091001cdd41",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3ba4f46f-011a-4f7d-a9e3-1471d490dc5f"
        },
        "item": {
          "id": "7788c7ca-a01f-4fc3-a46e-62d39ef3281c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "869318f9-39b6-4a41-9844-e3a5cdc01c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c423c9-5795-40da-a1de-b41eda1e8c65",
        "cursor": {
          "ref": "b5450199-8e83-47c5-806a-d409b3898c09",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "47c5fd7a-8eaa-450a-949d-14da06bc4c7e"
        },
        "item": {
          "id": "68c423c9-5795-40da-a1de-b41eda1e8c65",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a3455991-cfb9-4474-9904-ab581e9a84f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974e8ee0-3ff1-47d4-8e21-84b3d4f50e7c",
        "cursor": {
          "ref": "9415f4a1-b5b2-44bb-bf70-2e77ef0b0f13",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6559d911-4b51-431a-adb1-d5fbf55dcb6e"
        },
        "item": {
          "id": "974e8ee0-3ff1-47d4-8e21-84b3d4f50e7c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "785ed056-bb1b-4660-bb46-a7e3dedcf365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60197b35-18d8-4334-85d1-9fa33669b42f",
        "cursor": {
          "ref": "aa145105-de3a-4704-a4c5-30279539bdc6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e57d01c9-ef6e-4077-af44-c3098bf4c205"
        },
        "item": {
          "id": "60197b35-18d8-4334-85d1-9fa33669b42f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f60fa80e-b03e-421b-8960-99b20256e146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91e7753-e245-4a3c-bb00-d5fea96a4362",
        "cursor": {
          "ref": "b7c2c1b6-61de-4279-a859-386a11ff5cda",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f4c0697d-4e0d-417b-befe-2de9fbccbf34"
        },
        "item": {
          "id": "f91e7753-e245-4a3c-bb00-d5fea96a4362",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "492f1a1a-742f-462f-ac93-19bcd30bbcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45551115-fe51-4feb-99da-f9422a0852de",
        "cursor": {
          "ref": "f7cd3d55-b287-4abb-a440-388dcccccda4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ee68f602-7bf2-4db1-9028-5d8fcb779fa1"
        },
        "item": {
          "id": "45551115-fe51-4feb-99da-f9422a0852de",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3574530d-4467-4f74-b590-4b1405f64460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17084660-64a9-446f-9cab-21d5cd4d243e",
        "cursor": {
          "ref": "6ae5f0e4-f625-4ae6-9558-dc4dd1b79d48",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4cf12c15-633a-4946-934d-0ca44c9f03c0"
        },
        "item": {
          "id": "17084660-64a9-446f-9cab-21d5cd4d243e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ae62f9e1-5dc6-49dc-b707-9863f0f0ec2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2f6e3e-9a82-4750-a2e4-8a902424fabd",
        "cursor": {
          "ref": "b909f34b-c03b-47eb-b72d-8d40d72a87fa",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b05537f0-7da4-416b-867d-b456593f4f79"
        },
        "item": {
          "id": "2a2f6e3e-9a82-4750-a2e4-8a902424fabd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d8515844-1d86-4c6d-ae9f-47733f4c1d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5688b950-25e5-4093-bba1-2121356b7012",
        "cursor": {
          "ref": "64499793-41a9-4fc3-9d90-6f068e4a50db",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "115feffd-e627-453b-b8b6-eaafa3e0e116"
        },
        "item": {
          "id": "5688b950-25e5-4093-bba1-2121356b7012",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4fd3cad2-3a48-40d1-b9de-dc860fe61fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200ea0b0-9148-4d8f-8f32-9a91d51cac50",
        "cursor": {
          "ref": "7e076b29-f761-4194-819e-5e32da1b6ca1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7e6da42c-92ce-40d0-8fc1-6a7db64844a1"
        },
        "item": {
          "id": "200ea0b0-9148-4d8f-8f32-9a91d51cac50",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0fbbf99f-3c5c-4616-8513-6a0db6843e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cae5ca-8b8c-4b0a-ad77-55a3b33cda0a",
        "cursor": {
          "ref": "6b22b097-4ed6-4916-88d0-8e7ed61fcb32",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b9a0ca57-f3f8-4e0e-afdc-60ce21ea8cd9"
        },
        "item": {
          "id": "c9cae5ca-8b8c-4b0a-ad77-55a3b33cda0a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "de7f7b6d-30e4-46b9-9878-397831d4b13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91363d1-bbdc-40ac-bf22-a48aeed85051",
        "cursor": {
          "ref": "9787aa76-45ec-4775-aa0e-2626f0a5ed79",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "18077c9d-08c2-4821-a153-c6bd5ee1e444"
        },
        "item": {
          "id": "d91363d1-bbdc-40ac-bf22-a48aeed85051",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4d1d4749-3093-4ddf-8239-686d4b7c1613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85abcdd6-5d82-4d6d-85d2-baaed192a0db",
        "cursor": {
          "ref": "f22ad1e7-bcff-436e-b3df-27914297eb61",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b5c844e2-8736-4175-91d9-a7fec5f35452"
        },
        "item": {
          "id": "85abcdd6-5d82-4d6d-85d2-baaed192a0db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bdf392c8-4862-41b1-9904-672c037413db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce7852d-8f09-4877-b107-b66777a9adf2",
        "cursor": {
          "ref": "2009555c-1972-44e6-acd9-47a39440864b",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "846aa20a-395d-455a-b776-28a1fcc8668e"
        },
        "item": {
          "id": "8ce7852d-8f09-4877-b107-b66777a9adf2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c29742d6-0b44-47ce-a03a-86877f92e543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a339d651-adc8-48d9-b3f2-e6dd0c86cdb9",
        "cursor": {
          "ref": "c5a66f95-a34c-419f-b872-cc257f52d329",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ea0dc1c8-c8eb-4e0f-931d-5fa4ef99fb88"
        },
        "item": {
          "id": "a339d651-adc8-48d9-b3f2-e6dd0c86cdb9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a29f69ed-40b5-436d-a92d-7011d3f5b8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df84e662-762c-46a0-9144-6d6ec579a34e",
        "cursor": {
          "ref": "8109bba7-372f-4824-b1cd-c32c59a9ec38",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4e1d178c-088c-4630-a3bc-c42158d0d7e5"
        },
        "item": {
          "id": "df84e662-762c-46a0-9144-6d6ec579a34e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e3b1fe23-e1fd-4664-b378-ce609e8d2906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3305a051-87a7-48c6-978a-504db519a828",
        "cursor": {
          "ref": "6e1dd9a7-e3ce-4086-98cc-0ac5f6817b0f",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "87034b41-938a-4894-a4b1-c0b0e02e0164"
        },
        "item": {
          "id": "3305a051-87a7-48c6-978a-504db519a828",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a4e5e8ec-68a7-42e7-a0e3-c099476b25d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260d63bb-a455-4ffd-acc6-148ea9a5f20d",
        "cursor": {
          "ref": "f811ff3d-0da9-46cb-964b-efbc05ed8fff",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9d8b8972-cab0-43da-97f3-1d9425ac0810"
        },
        "item": {
          "id": "260d63bb-a455-4ffd-acc6-148ea9a5f20d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e20f9c19-7668-48f6-b025-9adcb270f0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8cecb7-b429-46e9-9e17-e1c476c82f97",
        "cursor": {
          "ref": "f7ee4314-595c-4703-95e5-2f25a91bceea",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "94698cfe-737f-4341-bf48-9b6510f2c158"
        },
        "item": {
          "id": "bc8cecb7-b429-46e9-9e17-e1c476c82f97",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "be7f9fe1-e8cf-4055-b469-de233b74dd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e338f974-f0c3-4368-b374-e1320bab2fe4",
        "cursor": {
          "ref": "cc5d0bae-0b14-48ae-a8a2-6aa7181f8388",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cb6a80d9-557d-4a58-852a-c30346c47202"
        },
        "item": {
          "id": "e338f974-f0c3-4368-b374-e1320bab2fe4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f61cfd18-5acb-46c9-b827-a36c4cfd23f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42352c05-9c52-4330-a2a1-bec047cad652",
        "cursor": {
          "ref": "f574e5c8-747e-45a4-885c-493b65cdf02d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "34481e05-a43e-4836-92f2-babdfda7335f"
        },
        "item": {
          "id": "42352c05-9c52-4330-a2a1-bec047cad652",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "15650892-edd4-431f-9320-1368a59542fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b293ccea-d158-4bc0-8f1b-7ab08ca9a2f5",
        "cursor": {
          "ref": "fdcf49e9-0991-44f3-a03a-b4375337781d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a960fac4-ca70-4e26-8502-d1461ffbd33d"
        },
        "item": {
          "id": "b293ccea-d158-4bc0-8f1b-7ab08ca9a2f5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8bb35992-6c23-4000-843b-482fc174510e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b54467-65c3-4fbd-965f-4f794216f07f",
        "cursor": {
          "ref": "5ab47cce-c1cc-4405-a71b-4a453ca0d1c2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cde7434c-ec8d-4855-9a21-1bd2fbe3a0b9"
        },
        "item": {
          "id": "c3b54467-65c3-4fbd-965f-4f794216f07f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4eece264-5522-4f5c-852e-053801292a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903910f7-5820-4f34-99c9-819b031b8c58",
        "cursor": {
          "ref": "bec9d2f5-dee2-4caf-8273-74f299fa1d99",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "23ec3f40-efc3-47ae-aa70-c53e27f028b1"
        },
        "item": {
          "id": "903910f7-5820-4f34-99c9-819b031b8c58",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "60f5c11c-2820-415d-8871-551ff747ace5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d5a2d6-972f-43cd-9e7d-206a08b816f1",
        "cursor": {
          "ref": "47133dc3-926d-4978-9575-d5184d6a4dde",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dc231e38-43bd-4451-824b-e5e3612443e6"
        },
        "item": {
          "id": "87d5a2d6-972f-43cd-9e7d-206a08b816f1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8733bfb9-87b9-4812-8138-cc6a1a03d072",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7953350c-c5b1-4d33-8b44-ff3c3db88990",
        "cursor": {
          "ref": "546c5754-ffc2-4228-8ba1-a9047b7a1e01",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5bc9fd72-63cf-41de-91cb-deb55f6931e0"
        },
        "item": {
          "id": "7953350c-c5b1-4d33-8b44-ff3c3db88990",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0fe5500b-f6c4-4aee-9c3a-e4eb6045e9d7",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "be41d86f-d22e-41d6-b822-9dc7950623f9",
        "cursor": {
          "ref": "8d8dc030-2435-465b-9240-58301f0ff4fd",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9622510c-59ab-4972-ba63-e559bb4472db"
        },
        "item": {
          "id": "be41d86f-d22e-41d6-b822-9dc7950623f9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "93dadd5a-520c-4604-ba5b-05fea49fef49",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b7684b93-b52d-4e6f-ba44-2b5ce20718ef",
        "cursor": {
          "ref": "33d132ee-5174-4946-928f-82c9f6d22a49",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d1a13cfc-51a9-4440-875c-b39231b941d7"
        },
        "item": {
          "id": "b7684b93-b52d-4e6f-ba44-2b5ce20718ef",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "53650516-d95d-47f2-9ace-4197427ac536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85355030-acaa-41bf-9595-a8f258c90414",
        "cursor": {
          "ref": "33aee42a-2f2f-4457-b6e3-06ca80135653",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "45f1d6a3-7e3a-4a52-ad98-53a740f33378"
        },
        "item": {
          "id": "85355030-acaa-41bf-9595-a8f258c90414",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "976d2028-2563-4fb8-8198-d95595492676",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5fa67fd3-dc0c-4252-822e-48114db5a24d",
        "cursor": {
          "ref": "6c0e37ec-a917-4932-8700-8177c1b05b9c",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d234c387-aead-40ad-a779-36596f31bcda"
        },
        "item": {
          "id": "5fa67fd3-dc0c-4252-822e-48114db5a24d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4fd003a2-2ce8-4b7e-af9a-8117a923eafd",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4405aef6-cff6-49a3-95f9-3d54571794b6",
        "cursor": {
          "ref": "f88e9cf3-88d1-4134-a8b2-f1725bf2de28",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "00e5ff84-83ef-4d7f-8cae-d5233834ca4f"
        },
        "item": {
          "id": "4405aef6-cff6-49a3-95f9-3d54571794b6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bf11983e-eab0-4129-80f1-e47724e425c4",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1f45d81b-6d54-49b7-841a-a38d0941e42d",
        "cursor": {
          "ref": "a56e2ed8-abb8-4871-889e-0d04be92e4c6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fa2ea0f7-0cbf-424c-b405-d74d9aa54be8"
        },
        "item": {
          "id": "1f45d81b-6d54-49b7-841a-a38d0941e42d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d592e658-5842-438c-9adb-63c1d32c2659",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b08a25b1-3aa7-4083-9ddb-df6bd71bf2fc",
        "cursor": {
          "ref": "b57e0e2b-2ccb-4bd2-93eb-ca17302042f4",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7a369c3e-f3f0-4985-8a7c-74be93c637e4"
        },
        "item": {
          "id": "b08a25b1-3aa7-4083-9ddb-df6bd71bf2fc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b6f18570-754f-4171-a2dc-c0322f892d18",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "aae19a33-5b67-41a3-a1af-7db4a43c1dde",
        "cursor": {
          "ref": "17034092-cf7b-4d3c-a749-14e23593738d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fe0fcab3-8e04-444d-a087-244f297636ad"
        },
        "item": {
          "id": "aae19a33-5b67-41a3-a1af-7db4a43c1dde",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d5609915-0a83-47d5-86ac-1a98775f28dd",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a6bc4a52-bbfe-4643-ae20-4980393dbaf8",
        "cursor": {
          "ref": "f0b98771-eca3-4db7-9937-673b63a82c6b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f681ee51-7897-40d7-91ad-c696e9481535"
        },
        "item": {
          "id": "a6bc4a52-bbfe-4643-ae20-4980393dbaf8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "66676f19-e152-457f-aa1b-2d8dc130b0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27be9a6e-a6a4-4d52-b2fc-7879e81328f7",
        "cursor": {
          "ref": "fab07ac1-c4e2-4569-af3e-74872e2330ce",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e81139b1-4a4a-46db-a89a-9e422bcc14da"
        },
        "item": {
          "id": "27be9a6e-a6a4-4d52-b2fc-7879e81328f7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d2eb4e76-e314-411e-b9c5-72cf5fb18217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8143fe72-ffe2-4c62-a817-c29304a32d6a",
        "cursor": {
          "ref": "1837a080-f2c1-4f17-b4db-477c9ef8aae5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a43a2f33-14a4-4afa-a686-66f4c91b1c50"
        },
        "item": {
          "id": "8143fe72-ffe2-4c62-a817-c29304a32d6a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "50618392-c890-4b4a-b071-af8d936006b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6b8817-196b-40be-9f53-ed465070683e",
        "cursor": {
          "ref": "f4d8f723-bff8-49bd-89eb-1c3f6e7145f0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "01293f12-594c-4297-a93f-04ab570111f4"
        },
        "item": {
          "id": "be6b8817-196b-40be-9f53-ed465070683e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "32ac7f7c-6b82-4e05-9331-88717a6183eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ca25b5-7ed1-4208-8614-f7c4221d6cad",
        "cursor": {
          "ref": "cbc30758-8866-4c92-bd9d-348fb6cd1d3d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8afe3ac9-3f90-4d50-840e-a178a648153c"
        },
        "item": {
          "id": "d5ca25b5-7ed1-4208-8614-f7c4221d6cad",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bc8bf59c-e82e-42f8-b8ce-b3d356adf0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf9a637-5687-43c0-9a1b-b8c9e5d8f345",
        "cursor": {
          "ref": "5c9c0f90-cac3-402d-87d9-26b15d38381e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1a9cd9ab-d09f-4d1a-9dfb-8b47c46d03b5"
        },
        "item": {
          "id": "7bf9a637-5687-43c0-9a1b-b8c9e5d8f345",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b663e9e8-0755-4196-8674-9447af7dd13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e55c07-8c3b-45d2-a973-f761e728ced4",
        "cursor": {
          "ref": "a89a36ca-6dc4-44fd-b071-3ac5b3e1ff9f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e0e4fce1-0beb-43af-afb3-fc9af76a9835"
        },
        "item": {
          "id": "c8e55c07-8c3b-45d2-a973-f761e728ced4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5ce450fe-dc8b-4821-9611-86daefe782cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75ca484-31d5-449e-94fc-5b9199acd9d1",
        "cursor": {
          "ref": "0f0b75e3-632c-4523-ab74-eeb1947a7e90",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b2aca2e4-9bf8-4af4-95b9-f0eaf81d4e95"
        },
        "item": {
          "id": "e75ca484-31d5-449e-94fc-5b9199acd9d1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8dcd857a-70fc-4a33-9bdf-d1d548236e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cc14b7-27e8-4c6e-a96f-097b45190441",
        "cursor": {
          "ref": "998b35ef-7f19-4699-8e54-9f25bea8c73e",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a42e858c-0b14-4b3c-b072-e4e768ac475a"
        },
        "item": {
          "id": "72cc14b7-27e8-4c6e-a96f-097b45190441",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b4d2add7-a361-41a9-b1fa-625e0ef91d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6732b0c6-7258-4968-9c3e-b8bf02a95560",
        "cursor": {
          "ref": "c5eb7fb6-36e1-42d7-962e-393c47e623de",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d4115e96-a36f-4598-9417-2641653a3ec2"
        },
        "item": {
          "id": "6732b0c6-7258-4968-9c3e-b8bf02a95560",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6f78a6fb-ea26-4a41-ac98-c08f7d59cc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed801b0f-a6ff-4c23-8a32-fc88f484fdfc",
        "cursor": {
          "ref": "6f564541-8121-4331-9cc1-3129268660e3",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6bc27eb9-d5f4-472a-bafa-be31dad20600"
        },
        "item": {
          "id": "ed801b0f-a6ff-4c23-8a32-fc88f484fdfc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e3d8520f-4480-40d8-894b-b69637c10e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24345276-4aee-49dc-84a1-25d36429e8ef",
        "cursor": {
          "ref": "9a16eb1d-bc47-46d8-b010-2ab9733934db",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2f43ffac-1117-4757-bb78-53e8ad775f97"
        },
        "item": {
          "id": "24345276-4aee-49dc-84a1-25d36429e8ef",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "edeef774-eddf-439f-ae89-42b28294b020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02693182-be9e-450a-98b3-832a9cd5f4f8",
        "cursor": {
          "ref": "dd8561ef-3af0-427b-8a5e-24237c030fac",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3b535750-ba26-42c7-87b4-1a27a14f39d2"
        },
        "item": {
          "id": "02693182-be9e-450a-98b3-832a9cd5f4f8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "004d478c-9e66-4e4a-bf63-5dae3614c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9080219-f140-4fd8-aa89-9001823a3513",
        "cursor": {
          "ref": "3a39d9a8-f225-4587-937b-732054ea1a18",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fc451b0d-aacb-414a-b173-f94459f4d35a"
        },
        "item": {
          "id": "f9080219-f140-4fd8-aa89-9001823a3513",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "88fc6dbc-1d43-4a0b-b780-3c4d2327346d",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c3b65051-cdfd-43b7-89f6-60dd4a92b046",
        "cursor": {
          "ref": "f8129b5f-55f6-4a0d-90c3-0c94d6c7e4aa",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "51921458-4b1d-4da5-8c44-3732b8b7fa09"
        },
        "item": {
          "id": "c3b65051-cdfd-43b7-89f6-60dd4a92b046",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8faa9173-7059-4e8f-bd0f-d18b01522c33",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9195864a-d344-4a7c-98e0-b87f0172f0c3",
        "cursor": {
          "ref": "8b3ed946-8176-47ba-bf57-f195179d6235",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "52bcfd26-84e9-410b-8613-ac16d5b6f1bb"
        },
        "item": {
          "id": "9195864a-d344-4a7c-98e0-b87f0172f0c3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8bdaf369-1113-49b2-8d58-74b76ace87d6",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "779abab0-eaae-4ac4-93ad-44233e2d7701",
        "cursor": {
          "ref": "cd4582cf-e137-4cfb-bfa7-1068e342867b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5b446099-f816-43b6-acd8-ea62eb496f7d"
        },
        "item": {
          "id": "779abab0-eaae-4ac4-93ad-44233e2d7701",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c9698e92-b60e-4a0a-9a9c-4d90160ce1ae",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "100891e0-671c-495a-8663-cb3eabfde38e",
        "cursor": {
          "ref": "84a9ef97-adb7-4fff-b62f-ae451db86f25",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "697e8532-754b-4e15-b094-ab2ce3aca3ce"
        },
        "item": {
          "id": "100891e0-671c-495a-8663-cb3eabfde38e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b05f9161-0f71-4df4-a837-91441aa3d1db",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cf4c05c4-580a-43f7-98e7-4891adb18c03",
        "cursor": {
          "ref": "4e338062-afcd-44e0-a1e2-96c491206081",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4a96cab1-1735-48ee-a738-8b2b94121acc"
        },
        "item": {
          "id": "cf4c05c4-580a-43f7-98e7-4891adb18c03",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "991bd4d8-1827-4384-b98b-a21909666371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363c5e06-e373-4257-a0f0-099a5ca10b3b",
        "cursor": {
          "ref": "41b90a0c-7a85-4431-b411-992054065fc5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cd4f4e3c-76f8-4467-9fdb-7ced5f7bfa8d"
        },
        "item": {
          "id": "363c5e06-e373-4257-a0f0-099a5ca10b3b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "138ae9e9-0848-4d93-81d6-bab6fd5a357f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd32428-5232-4221-88ee-35704d8c20f7",
        "cursor": {
          "ref": "77038343-877a-4926-b73b-660bb9914af4",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "19407b17-0215-4d3b-90cd-243ee5a60a70"
        },
        "item": {
          "id": "efd32428-5232-4221-88ee-35704d8c20f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6c83479c-9a23-4df4-b6a7-1565467a0fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9188794-f534-4dd7-9cbe-4958c6fa7611",
        "cursor": {
          "ref": "da2873ac-7dc0-49f5-bc6d-dba040f84081",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b31c0ab0-48a8-42d1-b592-d488c27c4644"
        },
        "item": {
          "id": "a9188794-f534-4dd7-9cbe-4958c6fa7611",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7e226549-39e5-4a84-9fbe-11b167c66263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21632892-6531-406d-8562-1e91aefdf6bf",
        "cursor": {
          "ref": "d6058301-be6f-40bd-9d93-3d062190e960",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "38c08f7a-b0b7-4ed6-89a1-83435bdb3a7e"
        },
        "item": {
          "id": "21632892-6531-406d-8562-1e91aefdf6bf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "42f2fbad-9e5b-4d91-9607-a1aeab51b4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777cd9ae-d09e-4e00-b253-49c8d85d6b65",
        "cursor": {
          "ref": "8039ad2d-2981-4f92-8e38-142efc79c820",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "43875c5d-2b6e-40a0-8e97-d87b8fe8f14a"
        },
        "item": {
          "id": "777cd9ae-d09e-4e00-b253-49c8d85d6b65",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "796e29fc-4936-4341-8309-ae977032af93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3beb5a-bb8d-40fb-b323-48bd04e0ba50",
        "cursor": {
          "ref": "06ae6cc7-216d-4dd1-adef-f13409cc6cd8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b55b893b-8bfb-480a-b84b-4d813f2e43db"
        },
        "item": {
          "id": "2f3beb5a-bb8d-40fb-b323-48bd04e0ba50",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6b793e6f-e4f9-4838-8ae5-c34fbbb1ea40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521c650f-c736-47d0-be75-0c19ceb2fcd3",
        "cursor": {
          "ref": "0a6dc907-f0d9-4c32-8d4f-4f0daae018f3",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8096d065-e0de-4f20-af34-e3fd5db8522c"
        },
        "item": {
          "id": "521c650f-c736-47d0-be75-0c19ceb2fcd3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6fcba252-740c-4d44-8b8e-419778d25ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a64f52d-9c6b-4ef6-96bf-d139a1d450ae",
        "cursor": {
          "ref": "bfc8a269-42b0-4fe5-be7c-381a95829c44",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a479a5c9-4ed9-4a6b-9f3e-c4770f848c1b"
        },
        "item": {
          "id": "1a64f52d-9c6b-4ef6-96bf-d139a1d450ae",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "063691a6-258e-4fab-bccf-04e10d2ae5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc01db5-74ad-42d5-b2c5-7754c9f537e3",
        "cursor": {
          "ref": "698291d1-a03b-4409-a4ef-a08de3403bf9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2c5542e8-9ad0-49fd-b15a-7feb84e7feba"
        },
        "item": {
          "id": "0fc01db5-74ad-42d5-b2c5-7754c9f537e3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "236eebc0-3c38-40d4-99e8-cdd7b873a15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa411dd-4be2-4b8d-b8cd-3f39ae5aaa3e",
        "cursor": {
          "ref": "e8f03433-e47d-4769-9c75-a27319997f31",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a372ef6c-867c-4fb7-a33c-035bba26aa00"
        },
        "item": {
          "id": "6aa411dd-4be2-4b8d-b8cd-3f39ae5aaa3e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8f148037-46b0-404c-a178-67d8581ffed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0621edc-d645-4844-b9ea-b35f1a5509e2",
        "cursor": {
          "ref": "f9744500-0267-4a3a-843b-15ac67a6c073",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e23a7dd2-1cb3-42d9-8d0b-df367c77edd8"
        },
        "item": {
          "id": "d0621edc-d645-4844-b9ea-b35f1a5509e2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "145b351d-ee64-4fa9-bba1-41f6c0ba25fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c034be3-829d-4854-a0a1-576aa08e646b",
        "cursor": {
          "ref": "ae9988bb-d574-4d9e-b0b7-d14792fd0a5f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "cab5e2d4-ca02-4141-af72-b427b2448c7d"
        },
        "item": {
          "id": "9c034be3-829d-4854-a0a1-576aa08e646b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5a686ce1-f940-4d41-bd84-197ebdd941e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a0a02c-9ed3-475f-ab5d-070be97aae2f",
        "cursor": {
          "ref": "757b8f68-84d5-420c-b347-7980a90cd1b0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "73a34c74-3b8c-449e-8dbb-e79dc52f80b0"
        },
        "item": {
          "id": "89a0a02c-9ed3-475f-ab5d-070be97aae2f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d2ff71cf-151d-4ecb-acee-07035083175e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994ef070-68c5-4a76-a131-78e53ca77604",
        "cursor": {
          "ref": "db9dd2fd-40ce-4a9a-a90f-a5b09af74634",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ab36d43b-5e39-4902-9c94-93f2325437b2"
        },
        "item": {
          "id": "994ef070-68c5-4a76-a131-78e53ca77604",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3d0c5144-6e4c-48a5-8be8-be260af101fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81294fff-203c-4d5e-99bf-fb4a585f90d4",
        "cursor": {
          "ref": "025a34e5-3ced-45bd-accf-5013d7492acf",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "51f01780-5f18-431c-a449-345b1d43cb5d"
        },
        "item": {
          "id": "81294fff-203c-4d5e-99bf-fb4a585f90d4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c297db5f-e07f-4335-a7c2-c2fbdc051ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ea2337-7d52-4df8-adf7-3e4fb86e6b0d",
        "cursor": {
          "ref": "440b28ba-e9df-4de2-bc92-ab63d1cb95ff",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "05d078da-595b-4752-8000-49292b3b6a06"
        },
        "item": {
          "id": "e0ea2337-7d52-4df8-adf7-3e4fb86e6b0d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ae12f5e7-e873-4f41-9af2-5d8c887fe54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412f853d-fff5-483c-8e81-570a6b3602f4",
        "cursor": {
          "ref": "9b9303aa-09b7-4a58-9824-2ebf763e3ee0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5da80e13-fd28-4544-b4eb-d7595d95befd"
        },
        "item": {
          "id": "412f853d-fff5-483c-8e81-570a6b3602f4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4e0658de-aac8-4060-94fe-e44ed9ed9ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1b58dd-3b40-4e4e-aa08-fa71ef032931",
        "cursor": {
          "ref": "2ae94863-7b7a-4cfe-bcb7-2f15b4b98e9a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "45fc1032-72fb-4c29-a974-4ceec79e9be3"
        },
        "item": {
          "id": "0a1b58dd-3b40-4e4e-aa08-fa71ef032931",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca44c762-13fd-4457-bccb-8c603a472f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5da0e5-5968-4b16-8e7e-f8cb267ff4fd",
        "cursor": {
          "ref": "e78f2154-b9a7-4d90-8c50-4583a087e8ac",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a0c8e713-5acd-4be3-b9d2-2a4151274e43"
        },
        "item": {
          "id": "1f5da0e5-5968-4b16-8e7e-f8cb267ff4fd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "07691105-7d72-418f-9191-47f39684b00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e924cb5e-428c-4762-8dfc-6809118864b7",
        "cursor": {
          "ref": "97da5a90-1b07-42d1-a7cb-708c13bcbbdc",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4d2cfb0f-d368-4b6a-9aa5-bfc7ab3eb7d0"
        },
        "item": {
          "id": "e924cb5e-428c-4762-8dfc-6809118864b7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fa94911c-4d88-42ff-84c5-4c9cf165e4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a183e9f-3f04-4de3-9018-6ac7446a6920",
        "cursor": {
          "ref": "ae85aef2-1f98-4742-91f4-2dbd4a1aa561",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "fd97c047-e0c8-4f13-95f8-c6ae3672457c"
        },
        "item": {
          "id": "2a183e9f-3f04-4de3-9018-6ac7446a6920",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f933a019-1e46-4508-8892-8c7c77b658ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77093e87-44dc-4d39-ba81-edc59ff94166",
        "cursor": {
          "ref": "c8f76075-c71c-489e-8de8-ccdc09d8ad0c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6759e781-e564-44ea-8673-1d7ea4ddbc76"
        },
        "item": {
          "id": "77093e87-44dc-4d39-ba81-edc59ff94166",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "092ff69f-e5d7-44ae-9df4-f0df4d137442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3897e3-8f1b-4e68-aae2-62317be552a6",
        "cursor": {
          "ref": "a583de15-1005-4ae1-bb12-bd52fbdddfac",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ab4fd6b3-1e71-48c5-bd24-fb7c0c99ae96"
        },
        "item": {
          "id": "bf3897e3-8f1b-4e68-aae2-62317be552a6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6ce74aa2-4730-4460-ae0f-7dd6089a9d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d61731-668c-456c-a721-fcfdc98bb5f3",
        "cursor": {
          "ref": "c1652550-5696-4870-a814-526481634de4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c94e6124-d7c4-43cb-bc74-b8f5f181193e"
        },
        "item": {
          "id": "39d61731-668c-456c-a721-fcfdc98bb5f3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "344bf4bf-a512-42ec-b0ed-edef1bc36c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408ff19c-5f64-4965-b8bc-bf4ec91dfb05",
        "cursor": {
          "ref": "d6d9374f-9485-4d22-8390-6606df979963",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b7c3549b-054c-4130-b7d0-319cb17291ff"
        },
        "item": {
          "id": "408ff19c-5f64-4965-b8bc-bf4ec91dfb05",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4e0123da-3c25-4d28-9df9-162ffb0dab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90c9d9b-f997-409f-93bd-6d9a5902967c",
        "cursor": {
          "ref": "e49880f3-0456-4ac9-9cb9-01ac07492815",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0929a0ff-8bd1-4b10-b3be-95827df9aea4"
        },
        "item": {
          "id": "a90c9d9b-f997-409f-93bd-6d9a5902967c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f3f13bcf-4b4a-4f8f-a189-16ed5a8f1f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6c3d12-7dfb-4750-b366-6f0aaf4eab58",
        "cursor": {
          "ref": "b6a401c3-7c20-4a1c-9e78-5ab092d272a7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9de87897-f8cb-4a51-9ec5-15eda1dc3b7e"
        },
        "item": {
          "id": "bf6c3d12-7dfb-4750-b366-6f0aaf4eab58",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "70d80200-bab4-4908-a8e6-c44eb8d488a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f4e754-f9b8-47b6-bce7-5f2400ed6e05",
        "cursor": {
          "ref": "6432a36f-194d-4c2c-9230-77a07ec04755",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b5710aee-4c3a-4d98-8169-1e922a776e5d"
        },
        "item": {
          "id": "d5f4e754-f9b8-47b6-bce7-5f2400ed6e05",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ac1b2475-bd80-4f9e-ab46-f5ce209a47b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8588d0c-5693-439b-a8bf-df3a49ad479d",
        "cursor": {
          "ref": "3b6bfc92-c2db-4841-9ae6-a9d1841de368",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bf268ec9-c44e-4362-9a56-7dd063f429e1"
        },
        "item": {
          "id": "e8588d0c-5693-439b-a8bf-df3a49ad479d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fd9807a0-1a8f-42d3-b688-d0f651bb2e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82217c9-e145-42fb-b692-68a7a69fbd32",
        "cursor": {
          "ref": "20d853af-df21-4aed-910b-e86542bc6f2e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2c3af4e5-b044-462f-aad6-e98873196228"
        },
        "item": {
          "id": "b82217c9-e145-42fb-b692-68a7a69fbd32",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b6069dfb-9c4d-4420-8707-63a718ef1ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77eae05a-3439-4999-a8e4-d978b36a99a5",
        "cursor": {
          "ref": "89d0de95-81c0-4247-8369-e046390ed61a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7f51e32d-6aa0-464e-93b1-e5bee9748899"
        },
        "item": {
          "id": "77eae05a-3439-4999-a8e4-d978b36a99a5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c5320707-021b-43e3-b628-d9939ed68bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa99ad1-95ce-47c6-bc4d-2caecbd04bae",
        "cursor": {
          "ref": "2555537a-16dd-4cb0-a7ff-92b4b43846b5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ae6ce709-1bf5-45ec-a0ee-91a044c16326"
        },
        "item": {
          "id": "ffa99ad1-95ce-47c6-bc4d-2caecbd04bae",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f307d0ae-c7b0-4359-a002-c8da47807a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b183c2db-bbd8-43c7-9d5d-448a793d12bb",
        "cursor": {
          "ref": "e0a65977-5f9f-40e0-9c52-7779e7f2658e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "edae5f62-07d6-485c-be44-c9fcafe50a49"
        },
        "item": {
          "id": "b183c2db-bbd8-43c7-9d5d-448a793d12bb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "04b97889-4984-41d5-b364-f6a848278ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9576143-bfd2-44f7-a10a-f662b63d5f8f",
        "cursor": {
          "ref": "f45a1e37-1bb8-433a-9c27-acc4ddeca3fa",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "99557a61-d579-4d58-8e17-5803618ee6a3"
        },
        "item": {
          "id": "d9576143-bfd2-44f7-a10a-f662b63d5f8f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6a3fca37-b376-49cb-b8eb-d9f2fb650b32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d5cd46-1176-4e9a-aad9-ddb01ba41e43",
        "cursor": {
          "ref": "029dfca4-3fa9-41cb-a9f0-c2310fa3c67b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "527e3333-b52e-4798-95cc-44b36145228e"
        },
        "item": {
          "id": "71d5cd46-1176-4e9a-aad9-ddb01ba41e43",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a5f9ca88-f04c-4baf-95d6-ef0b4b26e118",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c1132e46-409f-4c26-bba3-4e416d9fd83a",
        "cursor": {
          "ref": "89c1b60b-d0b3-47de-a47f-d62826483898",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "78d1b68c-7ae5-4a00-a08a-90d59a23505d"
        },
        "item": {
          "id": "c1132e46-409f-4c26-bba3-4e416d9fd83a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e72e6429-ec8e-4c8f-9dfd-d713cd3d0e8f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8b3e7e-e64d-4040-99ef-bc881f1b2858",
        "cursor": {
          "ref": "bf462ea1-74dc-4e60-8190-3f84ba032ec2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "377c9939-d241-46a0-a0be-e45c61d730e8"
        },
        "item": {
          "id": "ec8b3e7e-e64d-4040-99ef-bc881f1b2858",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bd516541-0fec-4692-a2ce-a22053de8a1c",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e53e254-681e-4b80-860e-7309fa4e4b6e",
        "cursor": {
          "ref": "d21e78e6-5b5b-40c8-9bd8-fcac11b3d690",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "769d2b36-2ac1-4b62-99c3-862d41e6de12"
        },
        "item": {
          "id": "8e53e254-681e-4b80-860e-7309fa4e4b6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10981d8b-bd9c-4079-84a1-d4cf3e459e7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e53e254-681e-4b80-860e-7309fa4e4b6e",
        "cursor": {
          "ref": "d21e78e6-5b5b-40c8-9bd8-fcac11b3d690",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "769d2b36-2ac1-4b62-99c3-862d41e6de12"
        },
        "item": {
          "id": "8e53e254-681e-4b80-860e-7309fa4e4b6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10981d8b-bd9c-4079-84a1-d4cf3e459e7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8317d019-f43b-4e67-8e47-4771b4e55a41",
        "cursor": {
          "ref": "3fffe502-75f8-4726-b7d6-221351153137",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d41e4637-cf9a-45b1-88e2-36cdaf321c23"
        },
        "item": {
          "id": "8317d019-f43b-4e67-8e47-4771b4e55a41",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf41ab97-786d-4d6f-8446-15feacd38821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bca1bfb-1726-4723-9a91-2a3f263a5aec",
        "cursor": {
          "ref": "c702cbf8-d88b-480f-80a1-b37e08bc04c3",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "09e8774a-7c15-4987-a554-e75db2d58045"
        },
        "item": {
          "id": "8bca1bfb-1726-4723-9a91-2a3f263a5aec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ffd7be7a-b3b2-4f19-9e70-051ccfba932a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}