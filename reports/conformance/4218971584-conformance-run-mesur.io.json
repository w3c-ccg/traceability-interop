{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "86240bfc-cd44-4c63-9e92-4e3e32aa50e1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d579c68e-1e50-455a-90a0-c06a7366bdd6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c87ffa6-5a23-452b-8919-3cce0bc7502e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5cb141c5-5483-4e46-a81a-91b08ee81b65"
                }
              }
            ]
          },
          {
            "id": "eed61c0c-bc09-4832-a1a9-bf5f2039ce20",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9068b2e-d2d3-4812-a962-758d99df2ba3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f4e5182e-601d-4048-8509-61075236c6fc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "151a4015-3018-498f-95e4-a0c25b77a341",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "85eebfd3-a443-461a-b25b-fc3405f92f9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b30774e0-9548-41c4-9c1f-0b8a149bc21b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7839e0d-dddd-474e-84a8-9ae11dae84f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78a12ce2-26be-408f-ab25-e0d011574b06"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f5b93ca-f43f-454c-a4d0-d6c15f06c15c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f46989b-ad89-45de-b47d-f93d6d99e9ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6efbfc6d-671f-42c7-971e-c0376142bf81",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31cf2bbe-0834-413c-a7d3-929f7257e640"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efd10e3c-9f37-4873-a069-557b41b3a59f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b1358d6d-763e-4d66-9702-14fd9e99dfd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec3f0936-da1b-4bec-bee2-28da60b06875",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b1ca45d-e89f-4eda-af4e-adbbd29f7bb2"
            }
          }
        ]
      },
      {
        "id": "945e73ad-5f6a-4230-a1fa-25559f5ddf16",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cf87a240-445b-4b04-be4e-a6dd244327da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "59acf17b-ab69-4743-9629-977fda2066c5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0d665c0-8b10-4fb9-b880-8d2a645c20cb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b86b8e-37a4-42bd-b230-464c8d1614d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de74c69d-52ff-42e2-b905-e04b65d51c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceac47a3-a7e5-4d3f-ba31-f43745a58496",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1b14a2-5104-496a-af9c-d686a051960e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50fee0fe-339d-4e3d-8d69-d8f15cd6583d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e24d225-8b93-418b-9186-e4f0598e1aa1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63e0f8f-2bea-47be-9927-f53355288591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4a35540-95a2-4432-9aed-d3876b09dd5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecbb5f1b-33ca-40cd-9de3-62d740758f82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6be65464-4a13-4d15-91d0-11863c826910",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b2d70c-3e73-4f85-b709-3e9fe453ecde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4b1b976-03bc-43a2-bab9-8738efdeca0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0189133-f9b9-4cef-9cc2-e43b07d91617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9743e293-2fc5-4434-af0e-2ba72dca7b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaaa49d-0457-4cee-9ae4-bb0971cfc395",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae577ad2-8a42-4485-9d57-7a23cd7bca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d077bff-5219-4402-b156-00bc7e14a6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48d7e56-f438-4e5c-8ccd-033db6a11f39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "097d7394-d569-4c34-9cd3-aaf5ccd14323"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9cbf5a17-3c06-4806-bf67-141c97c04893",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28f22ce2-f2f0-4017-92f8-acb73ed262fc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65f30871-458f-4c22-a693-044d0ebb6dab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9aebc050-323b-4807-bdd5-a09c8554c3a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6538ecdc-fb41-4e58-aed2-89b0b7c479da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2c1b1839-4357-4f05-b9c1-5cce1639e8bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6c6fedc-d56f-4395-8b07-719fb45535e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a899472a-6be4-45ff-8200-1abab33f31fe"
            }
          }
        ]
      },
      {
        "id": "e1b5291b-7327-4e0e-8c8e-2f4d2a950ef3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "75546401-64aa-4184-8991-601101963754",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6e37ed0-84c1-45fa-a5ee-56c55b610a08",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9af782a2-5335-4c5d-8c8a-7288fd8a1d69",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f431945-3dd2-43d9-a96f-9b01882c4023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c139bb79-5c9c-4bbd-b400-70ee3c5278a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f46341-d955-40b5-a5d8-66563a4509f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24c5b7e6-07a8-4514-a051-2636624efd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f0e0de-c2a6-4f7c-947b-6cda39a1e949",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85cceda-27ba-4e86-bf44-344ffac633ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5316b1-7ac8-44f8-8563-b838ec570a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab51e212-80fa-4ee0-865c-dd7e24f5d5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc41868d-a623-478b-bd1d-91421bbf0d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab4ac8f-c691-4eeb-8410-b1fe4c8b8964",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646a04e0-7b98-4eac-af4f-27a302b55733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697b3ea4-51cf-4a79-8079-b35a2f9119c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fd72e7-ffaa-4c87-b482-cd5f937a385f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfa1d1a8-f139-423c-b1ce-7d708e746b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b791364-1cd0-4ca1-aa92-56cf6fe01bb0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ef03c1-58c9-497c-93b7-c1bd8c4caf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62572dd-cb6d-4fc7-97d5-0a0977e99e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f16bac2-b90f-456c-b31e-1afc1ba2f201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a6fb673-a2aa-462a-9606-57cd516786d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003eec52-6485-4688-8f54-106d2df1234f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330211ad-4f0f-467d-a1fc-4c35dc248ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052bf60f-d19c-47e1-9ea1-f0ae7abaa942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4527b7-20c5-4ce3-a12e-5a6ab9ce9fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f99c4194-060a-4cd2-8e8e-78dbcdb7faf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1243168f-5b0d-499b-a6d3-f22f64e6dec4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af3a90b-9036-483c-8f69-0db5b41590d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c5ec24-6d57-4c75-a35d-0bbe48db1c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95640032-1760-428a-9890-5e38c7c8eae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdb31849-f511-46d4-9017-4501f1ff48f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014dbc4e-0f09-475d-94c6-ce52275e4ad7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cd5e17-6730-42d6-9576-733a88d7d6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f910b61-92dc-4a9c-a39c-bb7e97f83898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772cfef2-ead3-495c-97eb-392e8fd6a36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c39c2e4d-4813-4beb-a285-46aef1afaa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87976f2e-8abe-4e9d-9d87-f3dccc1de414",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654e4e3c-ff30-4421-b946-5b5bbe0144ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576ec491-d120-459b-b5ac-de1e4d3e2210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f07dc1-0440-495c-bb46-fd90243fa0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ede95398-f60f-43ef-9801-37a557b7c75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c16d804-a67e-48af-b8e3-6e24401f5d8d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a4588d-8446-4ab1-82b2-bd76357b174c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a313d2-a847-46d8-aeec-140c05dedfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf103c3-1e43-4450-9229-0095fc792ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49b51d85-c4e2-4be7-91b1-0cb52bfac236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69919dc9-7b7f-4d63-bcf2-6b621a7dde82",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b467538-df11-41e8-b3e4-798e9aaee32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785e9ae4-68f5-4441-95fa-4bfd8d566d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30babc30-d593-4f9e-bd55-70737c12c93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f89aaf10-9e5c-4b74-8665-ddae4adcf5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969124da-237d-43e9-8862-401c0e149183",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77da83c2-b36a-4563-8617-52555c494345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a1172e-d31f-4cc6-947f-0544ba54d606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d2b093-0d3f-405a-9aaf-e81b27ffb3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c1ca123-7189-4d47-8ad2-9d101e5538a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f052fb-4857-47c9-a917-8ec4b7f6e4e5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d915acf-7783-403a-8c3e-266a9805dd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226cc2e1-06ec-4e06-9afd-7189b98a5099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dafc245-e407-4eb7-b755-0b2678dc406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6913b36-0df1-48aa-80c4-4d1c0782db0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054b7617-1403-4c02-8f6f-c2c5b1b90fe8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b28f10-c58c-4f9f-bcce-bffbb95966f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9ed2e2-e4c4-4591-8954-1834804ff9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d82f9a-a8f1-4f46-909f-1a3c74c72bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2df863d6-1114-45e2-bac2-121832196a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cff5da-b69e-4841-a75a-097766ea3f49",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc2231c-92e7-4714-b38b-85787c30a958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fdff70-f12e-43c4-abec-c4fc1c4b13a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4f32be-d572-4b49-9018-b55faa3a6b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03dca519-455a-4e8e-b20c-58cfd377d060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef26720-237b-40e6-8a27-4f4c5b9ad002",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b10b56-9fec-4045-b537-8744496ae2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a7da18-6588-477f-9757-13d23ca6fe1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea50b91-cda1-439e-b9dd-0b57ca2770c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f306c00-d1e4-4771-b284-5886f9c6df28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068f26c9-ff14-49df-a438-5e3f3e5dc814",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe66436e-0582-44ec-ba64-38a0c3748c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250fd667-70e5-451e-ac30-f8962e1e3dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaaa511-c93e-4f5a-a22f-9432f9c586d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "deb9cc4b-262f-471f-89b0-8cf3f27fa62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078a2fcb-1a7a-4420-b6fa-11db1200e972",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e02995-6c63-493d-9248-606d18601415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cb659b-a731-4e59-b000-b4d4230fb660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e0cb03-4144-487c-bb3b-c08c1f6e0d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b620af2b-1161-48ae-9d78-1e58a5ebfe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e34ad53-b559-4d60-b281-12d29f12c48e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149ff428-7e2f-44db-906a-6b61beb86fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ba5ae7-6751-4193-b924-b926cc05a72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7778f41c-33b6-4e53-a725-2ecffa2e11db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b011d8c-d3fb-4f8b-af3e-2a171f7211ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8ea5fe-7e4e-4a9e-9ac2-0f033a95947e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70dc35a-12da-43b4-af45-80e9a81f13d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8759cd9c-d369-456e-b1ed-0bdfb77d9177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1da598d-7061-4ce7-8d34-5d565b3c3187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd3b853-a55a-4006-bde4-992c585f1d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8938deea-4007-49c6-bbdf-383cdba13ecf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfc8651-b1ff-47d8-bded-a533fffe07ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a116b6-9617-4022-8986-00160b9d660b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68132bbc-a1ac-4b39-9b54-cd1cda39e5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2bbca0-2e5b-4dee-b7a7-66ef9cec1344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b33f859-48f8-455e-ad37-485cef1349d8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da766148-6470-491f-a09f-c2314dd29813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0dea8e5-c2ed-4924-a849-f63fd3a684b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1525a27e-09ee-49ab-a775-dd071fb1e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54d7f6bc-14ac-44ac-a61f-10fa1d0b407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99481e7-702b-4865-90b2-e6ed9dc97bdf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5c0b92-7730-4ab4-ae25-9f4bd0bea409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b22ac83-626f-4862-a74a-11cd0bdcdf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8519ef-da7b-454b-ba3c-c6e235dcd157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb952e65-308a-465b-8352-441776561a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e4f31-40fc-415b-9593-1901d2090e1a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be3cfdd-1453-433d-8d59-40151f6bb08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92cc24a-038a-4830-8c25-b313bb6ede8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9969cfc4-bc64-4b1d-9ec8-9b10051a2687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "804397bd-d86d-47ee-a42d-40e4501881fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7efd75c-9e8c-4008-b8a0-2c6578c53041",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012823d5-bd2f-4d79-a9f3-de2a8fc8e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0d33a8-717d-4aa3-9758-a487a225e2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee25cef9-4359-48a0-8d25-d97dd26ebea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8702b210-b28c-4589-86c6-0f76e2d7af63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c02db9-69c9-476d-af0e-a2bba957f3ae",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d656159-ddec-45ec-85a4-4a497f16666b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23b1904-fe1a-42e3-9607-a7fde7f00e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156fa36d-ce8d-4e8c-b5ac-d859e4c5923c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52bf4677-5c1d-43b3-a72d-ef73d4045d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e971fe6-eccf-485c-80f0-44fa60b7b05f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e360c90a-2786-423a-a9e1-6b3010db2890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded485d7-4dbf-4add-9781-1e95551fae78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2f9a38-b07d-4719-87e6-71a0eb72c5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7ca7d4-d354-4fc0-8022-a288b8c8047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4739b7dc-33ec-4279-bd33-d8158db707d7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc917f20-a2e3-470d-83cd-c7296d710ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bbe4bb-0661-45d0-a741-a03385fcdd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5132052e-169d-4e92-bcd4-f38f867102a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2d4eb7-8375-4e9d-a1ab-45caa7e7ea3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575e2998-268d-4316-907f-c954390c74b2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00af4db6-71b3-4a2d-93af-1050a1d72073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219214c7-ef74-44c0-80f5-5b4546d4fb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc78b6b-c6c3-4b78-a799-a4db96ec46ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6d1663-aac7-45d3-b6b6-b201e628651f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e12396-6027-4360-bd77-d9be0acab165",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b317cd6-56d8-4131-8426-63532ef27b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bdef71-3552-4828-8a92-d0758dc14ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4316223-fc41-468d-b201-ea8ce2a8e91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7153f235-4373-4707-a3bb-a470f242c540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cc9185-4d7b-4939-9f6d-2f1e1f7de74e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d915d6-32d8-43c7-919a-eef3b6be1067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d7eb05-d97c-4bbb-9646-7b13c894c855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61d7ceb-6989-4451-a383-b80f7bdef81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b36aed7c-e6a2-45e8-addb-e9589d6f9fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c66a199-525f-4f3f-aaf2-b1659f4d6838",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ea80df-8957-4966-9036-76cd5b583e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763aed0a-f790-4fa1-8660-1886d5c7c2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4198ae8-acee-4595-8364-a32d18bcdaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aebb6dc-4380-4ba9-926f-29e2ab0e5917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ca1315-a643-42f4-9fc8-3af2d2b38fee",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2285ba21-bb0a-4bad-b162-928581a6bf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31dc9c73-6db4-4795-9e0a-448b4f802710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34df6dd-f9b1-4158-808a-78dc610f2cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba4a8a7-3ac0-419c-b25c-38c664cb48e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e228424e-10aa-4651-88bd-b104d2630a30",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8b3865-1ce9-427a-98d4-69bed96c93f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660e99fc-6d06-4dcf-85ab-4456d7c7d1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e4909e-276c-4472-89cf-00a3bfd8a778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "158a1239-7f0c-4fb7-bc7a-ce07655d287e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2ed09a-a04b-4833-b0b8-a569cac3f823",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbde689c-2921-4a90-a75d-8c5df6d09b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a20d60-caaf-4c01-b12f-c5fb59a9ab1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df581c5-dc5e-417a-ba05-900f3220d8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fed3604-d411-44e6-b922-808d5287e278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03292b0a-6d82-4edb-b488-823c6498b732",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5497c28a-7e78-4938-abe0-479d4389f36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5356f8-ad31-4e5e-81be-40a5a3b1509d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8b6686-7592-421b-97b0-fa5149eff334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0358632b-bd1b-43be-a818-066608312fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b470f65-b5bc-490d-9c2b-158d2e8d587f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a69bbb-2c3a-436f-b4cd-152ea8c1d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6deb0e4d-adab-431c-be74-0842be18a3c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a33629-7c15-4321-a02f-53f18eee23db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf092fbe-dc3e-44d7-8806-1c3bfe06f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3b765d-2eb0-47c5-a6e6-b12247e9e908",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab40aca0-e7f3-4933-9073-0adef9ca33a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6597646e-5fca-4316-8385-c0d9eb4f004f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3faf1d-5c9f-49b2-8889-d350be89afa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69fdec63-ab31-418d-a006-aa5a58549f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f849339-618c-4d90-aac6-06dba62149ad",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ec9d7e-b174-48f9-b0dc-de05fad49765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379c6f53-79ab-4221-afc2-9c464450703e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab24a46-5ac0-4a3d-b129-2a3a5ecaea32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c19f1c63-e502-4159-8463-a588d5bb805f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe0fc10-81a0-40cf-92cc-2db5c90395ca",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179a38b5-7372-4643-b725-0a3c54de026a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e368990-e313-42d3-b44f-562a1dd26494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0540b51d-7071-40d2-9578-a89d0a5edbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d15d4455-1ed4-4a13-8f26-d0e811f0eb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d570e0-27a8-400b-ab24-7c913d15fe46",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794c299a-9c69-4796-a320-72ac80f13a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ff4859-33b7-45d6-beff-d2db2a09b31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d889811-677a-4cce-8eee-9498258757f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "18ce80eb-5084-4f1e-b8d9-c5bb34226287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa891f2-228b-4d94-8751-67e072303aeb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f79bc-6ebe-4eae-a282-732b785cf81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e02a418-995b-4afa-8466-2751da31f05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23564c6d-d865-42b4-b8fc-c83244b8d7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ededd7a4-02c6-4be0-82e1-05056655fb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3103aa-eeb6-4ad1-9ca6-46589fc9fe39",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a0f671-e518-4204-a4c4-8d3bad7f2df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088866d3-a305-4bcd-9a02-2ead758fbcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79907fb7-6c60-4302-8552-fad3553d7acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf6147d-db5c-422e-a4b5-2d9ceee094ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5b49c7-91be-452b-843a-e54ea355e994",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1192d28-0c24-4a0e-a5d4-7cfbc764369f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4ad807-10f9-49ac-b92e-5e17a64b6a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d53c45e-09db-46ef-b2be-de8df5113f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee51c80-4f30-4a51-a94a-d33ff2c13254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efea4415-ed61-43ce-8ceb-401e5f2e088c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae72d20-5de5-4606-9b2b-54792e7c3927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0862811-8e44-4cb2-bcef-1956696b41c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217bfe44-6e24-4822-8032-f94d96015b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e55ac392-4371-45a0-a632-2eb891250bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c38ed8-37f0-412b-a483-ef7e3962ad5c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a3c934-650e-4ff2-846d-986d61518f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da68ab41-55af-4abf-8f21-aa876595a10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea657143-269a-447c-a7ad-0d0d10729f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb31e64c-74ab-4267-a4f8-542bcf72b78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9806eb68-e2a6-41de-8109-cea74b50945a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef914a24-72b8-461e-8ff8-4a5d6adf8bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa65a3a6-532b-41a6-863e-e01c57985982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd31438-f8b0-4fc1-b3aa-53df220eafda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "731709cb-85af-4739-8b47-0a3b16da85cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c25c6d4-8fd1-4728-9935-97ef014d0ffd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309a4f56-b1d0-4660-beff-8f1229bc306b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d900405-06d1-4752-82c5-35584aaab77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65b4192-211c-452e-bf6d-cf0f0e26beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62db039f-430a-42ec-ba04-d9cb2d0ebd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f96ba46-562c-494a-82ac-eb556ee17337",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd69cd6-879f-4426-9d78-a0e843daa59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50af6f54-2c47-413b-bbf8-c52bf3d26382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2b0807-dc0b-4fca-89cb-c19a57796512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e85cd1-800d-42a7-93c8-45254793baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39889248-6154-498c-8d1b-983bff176568",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc2265b-9b94-4dc0-8eb6-44e9fd140630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e35dc5b-6320-4a13-aded-5c7d19024602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430b12fd-303d-4f48-aa2c-8893e584d970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3a501d-36f0-4c5b-9bc6-27bc292ce6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df97295-ffae-4be0-9ce7-a1386298d8fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e68426-5424-4e12-9d60-f28fab6d6392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669c9ee3-5587-4604-b899-e48786a2b422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7920a89a-39c6-4d09-a0e4-906f1a7238be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e755b43d-999a-4c95-9511-1e7fdc3b015b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9731de2-74db-4836-a227-492e173fbf73",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8daba6-e69c-4662-8223-b99f435d5ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7840b9-1f43-4ead-92ce-ac4d34b50f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d7e1b0-bcff-400c-abfa-7161cb14fc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0402daa6-db3c-444f-8a7d-3d4b8a673593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7a9bd8-ea71-4e94-b6c3-e86c0acd7a21",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724445a2-8bb1-4326-97c5-97cd691a5b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdb0e03-fb9b-45fe-854a-ea3c2f17fc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a6f28e-3313-413f-9815-c71ee54c3f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d9b92e-856c-49cc-9ec8-978c5ca51519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bac72f3-7795-4a1c-aeb3-b213346c90a4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b40c6d-4508-4b12-82a1-296faa3d951d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d194ec-78f8-470e-ac0b-7ca1f6f08007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a96937-b1c7-472e-be5a-dcd5a5904607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd55485-5890-4e01-9f1a-a32c4e9cf24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64331b3-41c2-4f8b-9f8a-9845e0023929",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a90d4f-872a-4b8d-a207-f6150fe1c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5ebab4-bfe5-410d-b855-8f8f4332a69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a26ee3-f7b6-462e-91aa-83dc3f35741d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcc4fef-d4e2-4145-9808-e595bd81476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165f276f-3b68-4e7f-9176-79de72a27cde",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c423a44c-ac14-4947-b522-7e08faf573dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dd0304-98db-4979-9ce4-50590c0d5320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a817cb78-da7f-4f0a-9785-3bc8cf7e1969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "451332aa-0ba6-4d44-8762-40dea7394617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaf49a7-c4a8-4e8d-9488-8595a2784a2d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a414b587-4056-447e-9b97-6caa948a6c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c39443-cf4a-47fe-8733-08f4378ef339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380adae5-fb30-49de-a93b-213eaa32f90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "be398acf-3af7-4e34-b4ba-6c7060e40f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cf440f-8e1a-4812-9566-387b9ef198fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d38cd-c429-4798-85f9-38e72dccc422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40b01dc-4fd5-4ace-90a3-642986b19ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0508ac27-552f-49cd-a64f-f26984ef2624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5bf0a7-fc0d-4311-9f48-01a958a4a529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e70ac89-adcf-407c-99c7-9b3101f86286",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742a7e21-c6a9-42ac-951c-892a61c13f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debed1a9-c12b-484a-8d39-ac71ea6ce309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6608df-768f-4d31-9775-e436dd64d0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db47712d-3c7a-4c44-85d3-9e36ec86bf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf153ad-7dbb-4472-97b0-a28f4490e9cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1612d8c5-a417-4456-9ad3-f466eb748169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b4816c-24ec-43cc-a428-2398e47e590b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198fb360-84c1-46fc-88e3-9d8a770c2516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbc4055-1d62-434a-84b8-d20072c9ebe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d3d8b4-f9d2-46b0-bb93-f11d4fc60685",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca60b61-6074-4e15-b989-b0abb42ff1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebec3650-1cf9-47dc-af7d-a95ff78d20f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5554d7-c4ee-4d37-bcfb-0c1d25997acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b268d2a6-d464-495d-a423-78ff38474cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3335809-a28f-4ac5-b250-849dfeacf1f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3904fc26-a963-42f5-a037-5bbb4f004b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac89cd87-eca9-41c9-9a3e-13c50f0e3d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d2cf94-5c24-4eed-a0bd-45419f0a7336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9d1e8a-756c-44e5-92d4-477bcac7059e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20d7b44-ac2d-4bfb-897f-ae7ddd5212a8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef8b7fd-cc93-4138-a74e-e22b8d57a5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e637f6d6-4347-4584-8776-e24c471baa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30480510-12a5-452d-9470-921701492ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcb38d4-e5c6-448f-9254-c64e4b19eeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abdeeb0-f538-445e-8bf0-aac19857f215",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a163ee0-8741-4201-b7de-5d64cd5ea83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015999ab-66ad-4f7d-adc4-2a669adc54a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81689e91-a5a1-4355-b748-b7174fc988c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d81c27c3-c214-43f5-875f-30af6e8e789c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc5a9ea-a681-4de3-8269-6714a69b8532",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5140774-94c1-4323-828c-1f6fa8c56049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526f9906-9ed1-437f-bc96-cdb07ed73588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e2c855-d5af-4879-aee2-feb4ca30dcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab64a8b-f864-4d5d-9b9c-f79e30e82899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e7c6db-a59f-41ce-b2eb-f2d4d714ce35",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4029ca5-817d-4c40-8b89-56ec72ae0e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aebfb4e-f101-4529-875b-4ba40a79b297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7731c008-e6b8-4b6e-9eaf-c73ff0ee4b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57b83ab2-8456-49d7-803b-86995f8d9192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2990ecd-52dd-45f5-b7e0-532dcf141055",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f264df-cae0-4865-92a3-13c52f3af271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d1b849-6ee5-4541-bd17-ab4c6ed3a8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d452e30-451f-4aa3-8cda-07c403924130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb47de6f-7203-4019-97dc-a503ff7cb04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00501735-1b26-4a98-861a-b77113bfdcbf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54103c43-9901-439d-9fee-efd85669100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660f155d-b0a8-425a-ad12-48e1b23ea5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290a8206-45cc-40b2-a912-dd2f6812c14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "848b03aa-df51-4b2c-97da-b20bbdd392e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb37f583-b9c6-4d84-a43a-88893751bf30",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c959c38c-bbf8-4e55-8ba0-b16a0d2e84c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3872a54c-669d-4225-bc39-bdc5f92afb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17acc6fa-75b8-44ab-9d27-fbb1d0ccc68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bd1645-cedc-4f96-84d4-5343ee4fb493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76566ef2-b3c5-430e-9c57-91007fff2a55",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686b8cc9-5bff-400e-9855-ae35b945dcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0af529-fd41-40db-b619-b435b213d614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efea677f-44a1-4d7d-803d-9f4e12f41fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "290a2b1e-5e92-4c96-8cc1-9f0c68118e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7c6ba9-5c5f-4eaf-a9c5-4fec0e12738a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ad14c1-57e8-420c-b28b-59e4bacb9333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1112cca0-72a5-4451-8d08-f025a2cbb59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62abc88-ea9d-42cd-9134-c0238d99ad23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a99e82-d789-4aab-9fdb-c33f38132a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b20e387-0bc7-4c07-a966-d5a93f42c36c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb492a4-2999-44d2-95c7-45e41ee567e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6a3bf0-0372-463b-96cf-38f62f7e9737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cd763f-1788-42c6-9136-dcf2f64ad8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e97280-8282-4118-8cc4-754c25302623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecef1299-5c4c-469b-985a-789952fb3a3a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4f1b30-4586-4b41-a3e4-39fd0991866a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a32db3d-36a3-4f12-8c53-3851d53161db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98772094-deeb-4b4a-aa07-dce8818aa78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a8e04f-7fda-476d-98f6-8488d157b5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8841488-9bef-41d6-b09f-387c31edce0b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b138fbf-cd77-4366-9907-d6fe571e015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04318bf-1467-4c15-bf73-68510e299695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d31f17-072f-4f9a-9587-0aeb48ee2e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62b08bfa-1af7-475a-a3ed-31f5fad71dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b4e8e7-971d-425f-891b-cf02ca13ba0d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaefa64-0483-4af4-9397-7cb93b0478bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31c07ca-9228-443e-b802-93ba34dab4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c8ba0c-514d-490c-a528-fc87b421593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9e26f7-3817-4734-84f7-d110aa75cd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479c66e5-3f60-4110-afa7-44aefc818ade",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1b8d9a-5a0e-4a1d-86de-d355dc7efe6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ea577d-6190-46c2-8e3a-5436fca2f2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a21b8e-e043-4efb-9828-286be7d0b8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5fa003-a95a-485b-bd11-e03fc329370a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e12c592-eee0-4c4a-854d-fe5d63d66abb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ff1877-fc8f-4616-8f79-df3936099bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d058d04-4052-4035-8ed5-6bd436754622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189e652b-f120-4561-aee6-c982e2c59ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "024c45ca-64ad-49ae-a987-71de1c7f5102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39f1259-eb92-46ad-b36d-180eba1066f6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcd3488-a898-4ef0-947e-9b133b96a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb93a38-2fa0-4404-bc2f-5111d6c03832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ea89ae-57d4-4e1b-b4f8-b77a95009e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "834fbd11-3120-4f83-be29-4adb030dabab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2220615b-cd4c-4033-b929-a30d9352240f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17f7a09-f190-4b4b-9a6a-6e395698ef69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c083bc-a063-483f-ae05-5a4cf29c8269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb327d14-f6fb-4090-8144-42bca7ccce5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf61a25-dde1-4c84-ae0f-937722a68917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ef5521-8bb0-454e-a5f2-859a55f9759d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f982b1-70c4-47cf-86fa-12aad79e8ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c97316-da98-4899-96ba-34f448fd7e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03194dc3-9040-4847-99da-9d9b5606923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3587922b-b358-41d5-9517-789a69288b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ce4b13-eef7-4dd6-8bae-bd6d470f6c31",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62679adb-f51b-4a3f-921e-dc475a862dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e9b8e4-d251-4b4a-b5f9-3c6ccd2af5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c096de-4f4c-44b6-a354-b10367bb19fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd62aff5-fe38-466c-b93c-a20c33a2fcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bb1eac-cba0-448b-9fba-39784fb4e3df",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809e042-e922-4403-bc75-54dbb83485cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d691b3-d3af-462d-8133-000e102fb847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c8e499-a6d2-40ce-b1e1-9a2f3e0bb602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e43872aa-3803-4bcc-a9ea-fde664fe8fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff5ed05-3556-4d8c-8c24-5e7639fe63bc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f146359a-2bd1-41a8-a497-4bdc1075e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b61a8f-d555-4036-a008-f70d8cafb48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6f4908-3387-4ef3-ad59-b74e6690a98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b487be5-599c-4813-820b-c00db217f53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bfe69c-e53f-4f76-8846-1e2875acbc38",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5dd7c3-1620-43b1-aaa6-c86390526308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1573c5-b36d-488d-9196-bff59f860703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8a727f-cb73-49fe-bd12-8325b35f8786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc24667-eb1c-4a8b-8587-be04652dc848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923a5923-d9e1-4f33-bcbd-7f86e50bceaa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaab241-1e98-4609-9040-499ac2908288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2629ddf-55bf-45fb-9e84-0e7777665cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2fc11e-7d6b-476f-8d50-5e449d7ee5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a0dd43-299f-444b-8c34-91269cd12c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abefc0bb-24d9-4757-976d-e92cacddc18d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55284a7d-74bd-4a74-a7da-9fe0f92b240f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50733b6c-59b9-44e0-b8bb-6977cd2269e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc7c6e8-4c0c-4bc4-902a-ddabbf2764b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd16f795-f7b3-4367-b546-879586a90360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa4abc1-3619-4c53-9e13-e9d629a2e973",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bed28e3-9ef9-4340-ac35-8bd102c51550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f286b29b-be45-4366-8fbd-bed10c644d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a1fa87-e60a-40b8-81e1-5065412e3359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edbd8e0a-80f7-44d7-9cb4-ca6c7fe20d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a448a54-7857-4878-8563-9bb270614ca6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a737b5-f8fb-422b-a070-946017ff244f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221db842-bb35-44eb-ae17-f04a871f9f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f57e576-b137-4e0e-b655-0effd08b9519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9794e97c-ce55-44e6-b260-67776d2514be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7730c4be-9d86-48cf-a1a0-aa9761095aff",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72230ea3-4f70-4527-84cc-c93c94cc2766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f7d51f-29cf-4dd5-9240-537327b2a520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be603a91-b9c7-4163-a805-1f95efba36f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa4f4ce-de52-49e3-acbc-d93c4dd1adac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d77655-7ac5-4f89-957c-0de3741632b4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fa349c-c712-4be5-8e51-b0450ac29ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9094c079-d4f1-4878-8edd-3ba9369b6557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77146f2d-f17a-4cd7-9000-448ad6bac2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "757f9093-9a1b-4ea9-a50b-da70b87d15de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c248a8-cf04-4763-b88e-67b377c2a248",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b7a34c-7103-49ea-9eb9-92d3ab50757b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eae55e9-94e2-4910-a72c-a2e8bd8d4062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cf9c27-ce05-40f5-9b69-b85d37e2d9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "853536bf-772a-4777-815b-081a5e9c507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1dc5fe-8c13-4725-8482-c52b8895de28",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9839e2-7881-4b7d-93ae-d36103b5a850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3dbb3d-43c8-4821-9e57-d0b6c4b1dbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e670c9-6b07-458f-9bfc-cd5ced078fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7656fdd7-8e62-4ae9-a73b-714f6be0631d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab5e1c4-2fee-4568-abca-8897c8f869ac",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0840af-0c86-49a4-aa2c-61942fb13f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0fa4f6bf-c6e0-4bf9-8bd9-b5bbe25e3ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3946b0e6-0bff-48c0-9a5d-35a9217e50eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1c9779-4246-4a3b-8eba-f2b9fb80aec5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84e2114c-4184-42eb-8ca3-7960de273225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d09feb3-5852-467a-89c7-bf97fd5e2ac9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bfadad-4b4e-44ae-968d-83ba08e5a1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6525741-70b5-41be-aadf-0c90ec19548d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c4d03a-c318-4773-a009-eb9eac6b2d77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fd5f1b90-ac37-4366-81cb-cb8a430e007f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842abc06-f709-4b71-ac31-40dc3c48384b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeafbe5-c793-4b49-b0ca-f28117606a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a6b54b3-d499-4b8e-ab6e-e168c3a91d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd0c7d8-555f-4df4-abd3-c7818c3ec4b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "665c2308-00e2-40c1-8685-4cf59bc85b9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfa2a555-f840-43b3-b935-f8179fd49d93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "096573cf-aacf-40b8-be33-496e8323eff7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c797d63-6074-41fe-ab1f-feb69732866c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25e650b7-3515-4c09-9f5f-17c5c33b1ec2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "652ba7fa-89eb-4227-9dfd-52cccf3a1ae0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c43f8c1-5b5a-4981-9741-23d32ace7534"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1e91e40-3fa8-45d7-8314-48a8fd115ecd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6168a0e2-2095-4c61-a16e-af9612f9ade7"
                }
              }
            ]
          },
          {
            "id": "c75c1935-48f7-4de4-b66e-7a1e1422277e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b512878b-5748-4d42-ae25-61b0b88200fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52f7dc51-ab72-4fc7-8593-4c4e9a4a7cd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd4f84f4-ea20-4772-acec-590b83104383"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c62b6837-0a78-4179-b2d7-e8e992e273fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bce9c311-b250-4066-a333-5e1275fe4fd7"
                    }
                  }
                ]
              },
              {
                "id": "80a34056-6a8d-4e47-a6b6-2cb552f4ccfb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbd02691-11a6-4960-bde2-b1eef13e2dfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5be06c3a-625f-438b-97f9-0263fcd5dab2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "031dd16d-2386-48fe-a026-955bd041ed2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1228cc8-431d-4ecc-b0ef-e3099becd57d"
                    }
                  }
                ]
              },
              {
                "id": "d9b1b761-0d42-4173-8b67-3374f5ae24ae",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b03e1e9-7132-4d88-bed2-a2d42368810c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fde872c-ddc8-434a-ac60-d3bce427755e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "443b37b0-af90-4359-8ba2-854b0313cc33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7b6453a8-20ac-48c6-8d1f-7e7f9c992e98"
                    }
                  }
                ]
              },
              {
                "id": "a0452aa8-9d1e-46e1-a61e-62f809bf1899",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c440183-6c37-4699-9d0b-d3071cbae9fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c55f33e-3dc4-40ad-8b37-d1e1b6505e98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c821a84e-beeb-4d8f-b44e-606ab0363893",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d4462f8e-6951-4940-8120-d688fc36da9e"
                    }
                  }
                ]
              },
              {
                "id": "6c42b54e-5d4e-4d06-9be9-0c89731c96e4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bffd3dd-d9f5-4bcc-89a6-f36728b61876",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d11e4405-b23a-4b54-862e-30088e9c6996"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b2a32b2-bd36-4db0-abd8-be6b4b92a9a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bafd81bd-0372-4d17-a60e-681020deb9d6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12ce2086-5b7b-48e8-8cf2-1e2ae6085676",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8f34795-31aa-4e4f-904a-022d851a4949"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c4a46e4-8860-4a2f-8f6d-c650eb505b54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50d3232c-9ca7-458b-8a49-a145858e25cc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30fc8a74-465f-4a3c-9b5c-b8418be22bae",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "735cfc68-3ae0-4bc8-9675-42ca7058fb6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87d8105a-ae82-4edb-b1d9-83b011169800",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd04a7cf-2f33-4b7a-aca4-fa9c25b0b453"
            }
          }
        ]
      },
      {
        "id": "adebbd93-1e20-42cb-b6d6-d8faa0377941",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fadfab59-739e-4e71-a652-781080b51218",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8eef5f92-43ed-4851-86d0-a6c97623412c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54303686-f7e2-49b1-95d5-74e46f2df91c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cb0eab-3f4e-4a2c-8d59-c85ba3168f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de097fb2-d63e-4ada-93e6-d2c480e530ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd791001-f5e5-435e-91d7-a031e24d3ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa57cf2a-e8c5-42e6-a9dc-0522403c44b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705b9caa-5d57-4e03-8cf5-e6a3d48da669",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a484277-d0df-461e-99ab-c2f1b97e6d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edd53d8-5a5b-4b2a-90d9-c078ee22271f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc5a826-34b0-4038-b09e-3291429ceeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3010e54d-ac75-4509-92c1-2ae7ece5a7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e4e756-d380-4102-87f5-47c5cae5907a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2fa490-6888-4a29-851b-502de136bbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036be4bf-ff6a-4a35-ac57-11141abc3c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f72a02-54eb-4112-80eb-5406bab9ebf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c9145e-4715-424f-8706-8fe74888782d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9293f299-5188-439c-aaa6-11382537be99",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3ee448-c8d6-42e9-8ee6-c6f908305e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb0f7dc-b476-4bdb-93fd-7ce0eba61b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caad6d7-ab96-4a32-9908-0d3f23c645ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d135942-f988-49ce-8e8a-5f867a958b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a054da-c903-4b68-bbc1-0db0093130e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdda5b1-c6e3-42b7-acc7-506e27ba1bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f09530a-e981-41d0-8243-5c4ddee8805e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4349b94-1711-4591-ab6c-db9ec35ff49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5cf4b0-0c17-4b57-926f-a96642242817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9631634-4e64-4a8f-a534-c29982fc6b2c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310d8bdb-fbc5-4f63-8142-ab4419111f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fcef16-8466-4660-8f2f-476f1797ab82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13b33e1-3f2e-4940-86d7-ef45c82850d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac69b1dd-8f6b-4fca-9c6c-817c41cf6328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e83c9b-c5a8-4ea4-82bd-4103d36b073a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b68eea-26bd-4065-a5cc-3d5fa2916c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35aa481-412a-43a8-9706-18a1df2717e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa0e01e-f00d-4c2a-948c-4505145ca6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eca70ff1-6ddc-40f6-9e78-ea0d47f93ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a74fe55-6a04-468c-be44-0631c4acc84d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849bc7f8-4d67-4e9a-8df2-19c7f5c66c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61200d00-00d2-4e28-b256-01de9ef9cc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c89fbd-c0e1-415f-9120-2686ed8c6ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94cbfed8-c66e-4645-a736-6d635f266ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ad9b45-7e0d-4879-8f81-60b0634d2459",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa505c4f-858e-4169-8e74-fda30d3f518a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b76cedf-4045-43b2-954b-687f07765f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f767ea1f-3a7c-4140-8275-bb7969ccc129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58068d39-4bb0-4d15-9ae2-0dad67ba0b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988fa08a-f683-4682-aed5-be77922d0f65",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894deac3-f875-4b18-af5b-1c59fdd68774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd44130e-5dae-481a-a3c1-392dfe6e3aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e97563-d976-49e1-bd54-c565969c5f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5767d60b-61bd-4418-b158-017170366362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bb1e1b-4be3-4e3f-89fa-5c7399b4283b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25296c0a-f7f0-45e7-931f-e8c36c259ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2daf25-aad3-4742-9891-915974b72316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4576583b-c0aa-423f-b692-2d44b59debf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "05ddf8b1-17e4-4a91-b34a-33f4108838af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a30377-d337-4983-b12b-ad608ee87fcc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2033b6d5-e15d-4994-a9a9-93c6ba6e68d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd798c50-8e2c-4242-bafd-e7c6e92c8068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23622fb8-242c-472c-b472-a5e3955a77c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eae604d-4cba-4a36-9f6e-39fadf60a4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b450170a-f152-42cc-9f88-44c24cbf6aa9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7679ea52-31aa-4f7c-aa42-d0f35d191d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24dd748-e634-4b43-833a-419551974892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002de3dc-4c29-40c7-b188-bba935351e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee3995e-2c16-4b17-af36-677554eba040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe50464-9370-4de1-acf1-e76744e68d46",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6375e8b6-bb0f-44f8-a6a7-98dad1629635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05bf8e1-b9cf-4659-bf58-09df28eb917f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529245d7-e462-475d-9caf-daf74dc3798e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5678b7a-ae56-415b-b358-c546a631ab40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be32805c-37d8-46da-a7dc-83e641ac23a1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53b9f0d-cd25-4ef7-b0e1-5a820a79b8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf071b7e-f349-48e8-b85d-da3095ee26d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaeaa40a-0195-4587-8d6d-318655c0e28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f510757-4516-4537-8a65-727002766909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3336f5d-2ae3-4e4b-8c5a-59f7d12015f5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ea1fda-0025-4718-8b77-700561c44362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8455e050-0fe3-486f-baaf-574341ef38ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7685757-5118-44f5-a576-fdd599892dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61c29f4-d3d7-4e0a-a78d-57e4ca102466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c359d21-b210-4621-92a1-378875a2459e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81399bee-bba7-4355-a451-43c49dce802a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7cb4b1-3f52-4f86-bbdf-7d304f695778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b278e5ae-98ec-4499-b165-1f15947d0f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbf6ad8-2e16-4296-87ad-dc698b2f34ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d163ba-f884-42d7-9aff-1cf0ae784fc6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87c578c-4cac-4d55-9e98-ad8c4b05b729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55644061-76c1-4534-a21e-d9b09e5b3845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e316ad8-69e8-427e-abde-a18c35d645cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d3f931-cd56-4f40-a2bb-7b517559a5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881b49f5-2391-45f2-beb4-59adb7e7b083",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ff97e4-0766-4bf2-8e13-dc798a70b871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049af567-3e9b-4b43-aeed-11aef3f62389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db186894-98e0-4cb4-8691-2b3f858d641a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d02cb63-1b9a-4a8f-9294-e0039df12163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b320e4-e1d7-4f3d-a8ab-9cc3f2d44b2f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9333be3a-6ebd-4513-a7e3-76c171ee7eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbdaafc5-7366-46d5-a0cf-36b939e84337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba7343c-0aed-4d86-be15-937ffe47bbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4ef48d-f92e-47ea-b8db-9d94e87d57fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e8db79-fc97-4e75-be04-53828ee125e7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1a6d0a-7ec8-4494-a06a-4620f4dcb871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490c52e4-41db-4a4b-ade1-4023d63eaed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259c7dbd-b2b0-4171-b970-95b5c77ad00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51f1cce-1e0a-48cc-b284-6eb5d1d25808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3ae4d9-9117-43d5-97d7-2a30393ae538",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a218baeb-2adf-418d-8ac6-cd880df1fc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506f595a-aa1e-4517-b4b4-76d194278b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cedb7ff-bc25-416c-9afc-f3041413bef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4218349-4c06-424a-bf7e-3a36e1c494c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481004d9-9b55-4aed-9132-a080eaf8baaf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442d5ade-36f8-4c66-a432-3663cf14be4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8c7cb4-6139-4262-b715-d6ca1c5d7e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0129e6f-51b5-4ef6-83af-8eed764bf857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba260f6d-01b4-4ae1-8f76-4f0d1114c336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02c3b17-d2af-4552-a262-e28371729ed7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dac5b0-2135-4225-8fba-0f3fcb7c1eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4978b1f8-d015-416c-9f23-44b592b27ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f788e2c3-9c22-4633-a415-68f565846940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f91e5d3-f4fe-4a3d-9525-570625f6ce6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa20c07b-5925-4021-8515-6b3b88581f95",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91530d5-090e-4e66-861e-46718077ef26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b264ba-059f-4d5b-ae59-a82bb6306f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2173de3-5734-40e3-806b-6566568e74ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1eb4727-3763-4e2e-bc98-41936cc885a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c069990a-a780-427f-a601-c99ee8cc5d87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd6c825-59ce-4baa-8c7f-77bde82a7cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de079b78-5c1a-478c-b385-ce8902dab40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f37b273-2920-4b13-ad22-7400dc9655cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71dc24d7-b72f-41c5-b71e-0488c9a1a204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63096a8a-c317-4b7a-9a6b-3428d87b2210",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3506e6de-7c9e-4330-bf46-f21fa9fa8efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a794a52c-4168-43ff-9b02-ad4ab1d541f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a0ce5e-bb57-4c43-ad68-9ee28c734a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96688f92-529a-4aa5-b196-e6ab6a20f179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5b491d-e5e0-42dc-8c61-e2c00467c734",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b275a4-d342-40e0-ba8c-9938f7807280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a214a3-e2a8-4a52-85a6-36b39e9a7563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6234ba0-d6fd-47f8-ad55-8b8ac12da694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "635a7cd2-9d67-4970-9072-d3e606db5b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e72c31-1d5b-4bc0-95d8-da18f435d7a6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f8977d-66aa-49f1-96c1-9965ea31d65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e88805-2b0c-41e5-a466-1738c5c31f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e5b4d3-b31d-4895-bafb-7d75d7f8efed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9836d1d-eac4-4bc1-ae34-89b9018990df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535d8ad6-da43-4a5b-b9e3-bdf192997d61",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e113552-3666-4f40-9417-d49ae24a7a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84942baa-e40b-4596-b395-39b8bb7ec6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b6b957-a040-460c-9cd5-af3481cae6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "342be9be-c625-443c-b666-1904c3d2e0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1370e3-8efe-495f-ae66-a2d357fd1a0c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb3f7f0-054f-48a0-8fa3-06a0fbe89e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1496dc-044f-432c-bfc9-2e1ada647386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a394136d-8949-488f-a817-aebcffff584a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c9947a-30ec-4977-8bc8-c5bfa5e8abf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97bfa2a-fb8d-460a-838f-c37fdfbf239d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da7c052-582d-4416-9402-f33f31c375ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643d045b-9040-4516-8d9b-cfaacc48dcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567c359d-4542-42b4-95be-55d459b12af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42d7f3b4-43ba-4bcf-af59-d08521efef81"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6e1be122-8aee-4de9-aa2d-53c30f3f9677",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3e62bdc-304e-4648-8301-8a862f6e76b8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55679d85-5163-48fa-a762-d2112178565b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33223e2-6eb4-4971-a669-ab0f4de2ca55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1aae6d-7219-49e5-b0eb-b98a2f10804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "717070bb-d995-48ff-8aad-6712cf2c9315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c4f2e1-d49b-4a57-b32b-610c99eef3cf",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46ff861-c79d-47ba-96d2-eba83426430b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "40d76d78-8ad1-42cc-b4d6-3c06812fe871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8315e7a-e64d-43b9-b818-e5db35c15b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67172b34-f1c3-46cd-907c-11bdacff368b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0fcd92f-5fb7-446e-a385-e31ac8123993",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf9e57d5-67af-4433-8a1e-85a91fe96780"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "debed9ed-09bb-4d9f-a6c2-aba5f488f7a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "037a6d99-bbff-42bf-a61e-beb06b0ae87b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1492e0b-b862-4c36-8678-90f4e88510fd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad2f3c90-bbcf-4a51-aa62-825690156d99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3509407f-e97f-4008-8115-59d167b894de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cd7fab6-8613-4fce-86a6-ca7526a79273"
            }
          }
        ]
      },
      {
        "id": "688a8ddd-c202-4a26-b1f0-2ce965820111",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bceee01c-a234-4bbf-9062-9030aec6ab38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8494bad-7d28-4bfb-a01f-1c3020352927",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e3aa8e8-ee7f-4426-8786-b91321d668d3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf278b-e818-43dd-8450-b104c2476a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e6125c-9f1f-47df-8f73-a635fe4d32aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226c9d76-5bff-4813-9565-5259c8e0eef6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524e017f-a8cb-4eda-a6de-5fee5a09c501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1b4e57-67f6-4a9d-9f3e-039d8c3bcdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074ac463-7b2c-48a9-81df-213e566770ae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001bdabc-2c42-40cd-874c-0020a853f63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66468fb2-d743-4ea4-a06e-a7fb7f7ac6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be18902b-2c10-49b6-9776-511c3be5476c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa85dbc4-aa88-4469-88c5-a9e13601ced3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8685384-613b-47b9-8ab5-423b6ee873f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e34332-25e1-4995-8272-3b15f46be868",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d315bd-ce90-4057-88f1-6310ca2d4c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1baec9-1a55-4354-869b-a5a403daaa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2eef23-52ca-4538-a9fa-2b6560228e42",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e051ace-bdca-43eb-b70e-a044d88baf6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169e8789-bb63-4678-bd40-5bec2b599db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cacbd69-c80f-48bc-bf7f-ca529c6eab50",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef5b937-258c-4569-8d6b-24c3c2bce037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fde16b-1253-49c8-a23c-75a5b2901237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1debf8-d103-45c2-858b-5f1a5a574658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb9d345-7d85-409b-9d2c-d3cb8c1b3182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477a4cd5-1e0c-4e85-8fc0-a2393f963098",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a3dc7e-dab2-4be1-8750-b172a7215ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af01670-2645-4057-92ef-cab759036841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bb027c-e185-4df3-bcc9-741b21dc87ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0c83c6-62c7-418c-913d-4d0710891ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ff5c63-b2ca-463b-bdb3-00cec710dbd7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11542b0-6355-4865-82ea-c8db54addea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6740f032-42c2-456d-96ff-1e3819f13535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c59ae8-3ce9-4172-a7aa-df0479f52e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9ad9c8-7eb2-4763-b7c9-aca0371bcd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be51402-f97d-4186-a7b8-61a3139739b4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b6d682-7a75-4c1c-8293-29248059a08f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b578945-0fec-40e5-8d55-4bb42b2e5e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e06e77e-698f-4e07-a89a-49afefef3ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27299ab2-0d0a-452b-98b9-53e9715fc5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c924f34-c658-4515-88cb-999127548be9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1703db-9501-4b48-8687-e2324f6187ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcfc2c2-9bb3-4fbf-b323-dcb852ec0e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6460fc-3ee3-4848-8a00-0f5e61e6b395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea246be4-25c7-4314-9753-66035601d2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fe72c2-063d-49ea-a4c0-32f9ffc24796",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ba9192-a976-43ec-bce9-2cff41749165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac4ae11-b6ce-4709-b292-6239137a5b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860db0f5-40f4-4766-9026-ad6b0684cbe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55977bd3-b0c4-467c-8fe7-23e344b836e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fec4e7-71f1-41b6-a483-c70ed390691e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997de8ed-6e25-43d0-8ef3-499465fe5bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "933591db-941c-4cdd-aa16-badeeacbaeb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03099c88-cd5d-4edf-8f00-7d65dc3a347f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351fbe52-cd71-4ce6-b48f-d021999c6a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9e3127-ed37-4200-8481-57ab60fc2ff3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fb4e8f-4fd2-4f26-a633-41b52a11eb8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73ad781e-bcd8-4710-9664-6c9329f370ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ac26c2-63dc-4c3f-ae87-5f460df7c4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed79994-829b-4a36-a044-b0f73827027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fabb04-5299-40ee-b8ad-1dcb010f2a78",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd77b342-9d9d-497a-933f-270c902095a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "317e160c-a71a-4896-b4d0-ee9d349d5d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b290e563-e464-4ac1-94a3-818eefd71bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66999e5-9b22-4f2c-a28d-0309029be2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d19963b-ce93-4a4c-b2d6-9ba6dd3125ea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc3c0e7-613e-4339-85f5-637ce0e81510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f8cdb6e-fad1-4e65-9ce1-4e99666738be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d56ee68-4841-4547-9cf2-4c88a7480c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cd50a8-d631-42bd-bccc-3258e3f8b3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600ae1ab-a121-4661-9d4d-6c986bfbc6ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc97c0d9-0112-4d5b-ad78-bc107467b495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb788f1-2163-4817-9baf-61bccb64c50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1215dc2-856d-4f03-8855-ee35babe276b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095df606-96b0-42dc-be04-ac72c18b477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc35913-4315-4506-84ae-d80af57c9b76",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50580c4-3ae0-472f-8ad3-9a5bbbf8cd34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0682cf80-b4a0-4e37-8f25-d44a4f661870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e66318-2ec7-4944-b6a2-ec8634c40ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066a93b5-b893-4059-b317-822146b75653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1e348c-de29-42d6-be64-747f456eb42d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da49a3f3-5d0e-4de6-aa7b-9e673a219510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e924fb72-7766-487b-b38e-2365a474fd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242e4517-b704-48eb-8b16-4cf44aede223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bac3f7-6e7a-4582-af41-f195f981a1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75541ba-a994-4b3e-8642-715591ecf6fd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9adf3b0-c03c-4e57-9337-d805dd98f510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4d9b5e-2bcb-4096-95c8-ab773f057fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42360772-f99a-4070-8d8e-40fdbd478654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b828d5eb-ad95-4e4f-8d2c-fa4c89a5a693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293ed6cd-da6a-446f-8ced-8aabce456884",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df17530-a806-4cc8-ac83-234e6a5c1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04f99b1-daa7-481d-b2cf-e1e259703cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d062b2-3d32-409b-9381-c71c1a7303f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dda0f7f-db81-4fea-a766-c54983ce69d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b22d1a-8aef-41ef-91b2-c4830b428a0a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391a29a0-44ae-4dd4-8ab9-20c64f7ea5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62bb476-00e0-4c33-8364-5a329b33aaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff98fc13-1917-4554-ba6e-3504b489c21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c99943c-cacb-4f6e-918c-600fd4b46027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2939cb-8e5b-49e8-a503-c9ab229d6b8d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c31327a-7599-4371-baed-62ae57cda757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9926de61-c68b-4054-9366-f9ce04dc4b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92bf73a-7d41-4a45-9952-741e7e824ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e15e24-342f-41bc-89d9-51009bbf868b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13aa844d-5884-43dc-82d5-cd12b1ed51e3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2b5b49-cf36-4790-9df3-a4f0769aa1c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa45ed0c-11c2-4bfa-bb30-6d2fec76062c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc15b88-d599-4ea4-8c9d-770eb3f3404c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935c36a0-4cd1-4253-a863-ebeb5ade979a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693052a9-f191-4ee3-9d24-be8f40d91fba",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdba2197-9ef6-4db3-ab58-f885c6c3ef19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb7f708-2b3f-4998-8ebf-a3b8fb16137e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aeb7b1a-63e2-49a5-ba6e-dd70c4a7fd1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aecc9713-0509-4779-998d-6810c38dba2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9af0fa2-b8b2-4a1a-9d7d-2797970a79c4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96b5a38-9a1c-4a41-ac53-b864cc523c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4f264a-7e9e-4813-aa19-98efd0934bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f8f019-02c3-4804-8adf-075432c99a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef335a88-1150-4065-9e93-7d46a7e09a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6915f120-f8b5-42fe-a052-7caea9c048dd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe453481-4d26-486a-8c90-fea32873dbaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "059019dd-6f68-4c38-aa87-65393fad3788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3be8b08-8b62-4b61-9348-e913efb212e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721fea63-2c41-422d-96fd-a79446fe9154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da009b-95ed-46c1-82ce-efe2ba665685",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3562d900-6843-4220-9789-5af32b3c6064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68834da-1458-4bbd-8b2f-3d7b0165970e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d61361-e226-4f45-a4df-348b82355797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bea94d-9ea8-460b-b124-adf9b0301e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc938e92-d986-40e9-8848-143a7791a5cd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c71aba-4c4c-43fb-8218-ec49ab2b6643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005a0dad-efa5-4c2f-925c-21ce82a0b574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d501a3a1-b7fc-4f8c-9e28-03ecad57bb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad53a99-458f-4085-87e8-cfc818726c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4361e66-9315-45f9-8227-19bdc8a19b1e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1688c49-03ec-408c-8ad4-b351909946e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16052b53-4fc2-4723-80d5-1ace2a63ac98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1360c771-f157-4872-a991-56c56c66f847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295b48c1-314b-4864-8866-dbdb73a7c4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083d8afb-eece-47b7-b53c-1a7bae069f58",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4b2cbf-e62c-43e8-83ef-7569751f1455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8369f47b-c8bc-4837-8baa-ea866325a716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671966d7-a1ad-43b0-abb2-cd8d43f6628b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5573db-c5ec-4a56-8961-5b7d495f7a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67125e9b-72dc-4abd-9218-f285b377206e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb68967e-e514-4e92-89b2-f4d15f617401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41a6e57a-d150-4f0b-843c-6c0844bc1378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196d2b40-0313-40e0-854d-5c5aa1217643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c106b353-64ad-4661-9e75-293acfc5fa2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e1e105-c96e-4ae2-8460-6899363593a6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea36a85-2aef-4aea-ba50-fd6657e7f2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b693a8-3289-4447-9412-8873d008085e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7377e0a2-e81a-4aac-945a-01635cb0dcfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8f7269-ff96-477e-9088-8f742ce18584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062c2190-c16c-43b2-8f70-6954b5d126af",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627c2310-7acc-49bf-805a-e4050016fc36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "788f9a52-5707-43ea-9e65-ebf04935b697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "827193a3-90a8-4008-93b0-1952fbf7f399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fc5c01-612e-47f4-9eed-98b449a66b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301129e5-188a-4d1c-a517-f7550fa97f8d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b067c259-e3f8-4d60-8950-9a33713e099c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aeddd5-add6-48ef-9780-929260fadfc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff24d72a-03a5-464b-8d55-cf9b6d3fcc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e99f14f-a243-49d2-ba78-dd591c7c1030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58c88b0-00c3-43ae-bbd6-1249d0fbdf05",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290b6564-9e69-4d51-8541-6a190a72e35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfc024c-be04-4a99-bab8-c62a534a7010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c967e2-1ddf-4aad-8c48-0b9402c99c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93dc3451-3179-4d30-bdd2-e22c9caf6b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa066c61-aaa2-4891-b829-490b3585d3d9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2656995d-7769-4aaf-ad03-936ea3c9deab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d28f58-7999-4a7e-8db2-631c9cb62f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bc2e4e-db74-4597-9aa2-d27b2576bc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ade3327-0370-4c14-9374-d210b5f85686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7dd6ed-783c-47aa-8623-860b400b15b5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101d7e6c-b73e-4b18-916e-62f9b93fd883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55ba975-3bfe-4408-8c84-461495412171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a125450d-93d8-442f-aaa9-7db02b80a1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef05f40a-1af3-4135-a55e-b9a1bda762d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073ad61b-556f-4680-aef4-b53f78450d01",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed0efbd-dd45-4398-87ec-b2ca9d2ce2f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfd6698-bf31-43ab-a623-c8a25684fd45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c85f61a-b223-4d20-892e-1a66e63f5c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e30b9fb-9cf1-447f-9ad8-631cde5b3ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab474f0-eb14-42fa-86d9-1032391e8e3f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928d44b4-4ab9-4c85-8da2-3be8b150463f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f331cce9-5905-456b-b457-617074f67c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dc0462-a7e6-483e-9155-c80fb1aee4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258ca776-55d9-4e74-a108-5d771798f97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7372af31-4196-4f13-bffe-e2f7aafd0159",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb096e6-cc29-42c6-8542-16489ea0a6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac4539b-f916-4568-97d4-c51947c7b381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78e2275-bb31-4e46-94ec-2ed33573c737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca17c323-5285-428c-899b-7907e05f501b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6e9ccc-cc14-4edd-97b6-8526fca9e0e8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0044f26-fb5d-4575-80c1-9e213ecb6ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb86f7d-bcac-4287-9c04-6b9321cecf38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d653ca-6a72-450d-8cb0-0013ee5f04f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf829fac-0775-4f40-99b5-b87776a1079c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8ee999-095d-41a9-a921-ec9370c0d1b2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8871750-fe88-4f0c-b837-c06a30dafaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d2922b-bab4-4bb9-afa4-19e762fd1fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4706c861-7957-488c-8ea1-4f053a51f76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c22bac-e959-49ee-9a99-2020aca2c74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb4deae-a8de-428c-9997-45d4f62ad67e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a4b123-da76-4145-94b8-6bb954edc58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6216410-2c2d-4fbe-9f90-0defc5d22add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68634e7-7432-4993-948f-91d7ff37b7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526c6845-b471-46e2-a2e0-1acec76eae3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328d43e3-d14f-40d5-a4d0-7681e967074e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8417b496-4360-4980-bba8-c349d894c919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346e8e10-a5bd-4bb1-a151-601224a38094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea94434-3fae-422f-917b-f451e1cdc5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63ac4e8-8f07-42e3-b933-af28564f89d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0107e0d0-f16f-48b2-8d62-698eaaf955ee",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404c3cec-e076-4924-96e9-e4d53a3cb2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a9528a-3146-4a8d-ad65-3555bca196bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f099944d-84bd-4a0c-af59-df9af8d187fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f93b10-863c-434e-acc5-e2db573229f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe76ccf8-714c-4235-a149-9ceace3c5172",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed9e14f-75da-41fe-a37d-07f604e27f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1261c762-099d-442a-bbe5-e355135f0dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7321f514-eb68-4866-aa92-c7c7b58359cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a495abb9-56d4-4d0a-a5af-dd71a132126d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9e04f4-2ac5-4493-95be-b6fa7316ee25",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a64040-8352-4e3e-95ef-dc95cb2a2dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c253a6-ad7e-4619-9213-56ec0562e5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb18fdb-521d-4a15-9a42-ba32fa2ea01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26353752-238b-444b-8089-8a9afeb6fdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcb9594-7acf-4e2a-93d9-875d3a20c9ff",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5c652f-9eb4-4159-b2e3-d739ecb64734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ede540-c8fa-4898-a0c1-b87e0b632532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a347178-0b64-43c7-b7e1-538c22bfc74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fd4104-0a47-464d-81da-bef24a755ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed052d8d-3517-40d9-971f-364f1b0b515d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d5dcaa-5ca9-45be-bb41-ef04c504fd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491650df-e5f2-440f-82d4-15fc1e89f510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e9671-1f46-46b3-a015-51ab8643db06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f98627-ecba-48e4-b258-25372f80f5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336e9d94-e691-4f6e-917e-774b347af33e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c83005-c1d0-4734-8a9e-78f9db4cdc8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ef1828-70b5-4850-81b2-d34daa6e971b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2337dab-9a11-4492-8810-217d545c0206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c26ca3-2289-4d3f-b0c6-4e89df746b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d43d1f1-4662-4385-a6ac-71ec019a936c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d96995-5c28-461b-ba48-f76565867e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce304d18-54d3-4515-bc40-9d21e5349a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5803fb3e-f17a-4258-807c-9366f82c41d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39132376-fa8c-49d5-9a65-fdf4fd63034a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1030f3ae-709b-417e-9471-4854659da7d8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64630d2-f541-45ed-b728-4f5451207202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df59763a-64f9-4941-8706-7046df9b260b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a0733-ae7e-45e9-aa4b-ee24b16f9b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1c45e7-bf12-4b23-8524-1b918fdba98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8ad967-60f4-458b-aa4e-694b79c73a3b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e655a0cc-99f4-4aa6-bedb-f95db47919ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87baf46d-cecb-459d-b7ec-d97060376f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10546c5b-4b7b-4575-8ba0-8021b21c5eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23275d20-2067-4454-8615-785987782bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e675f80-63d8-4e81-9aa7-c1fb77b6c6c5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62709381-3752-4141-8d71-9c867e0c88fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e765cc82-1fbe-4d45-9b1d-ccb0128360f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad55950-120b-4a29-abca-153d142364f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb02a42-e98f-4d74-b38d-949efeb01f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f85143d-8930-46f9-8619-7021ab24efde",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da4799e-3a8b-407e-bfa9-d74cb9b61216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81f3244-b798-4491-b9c4-f5ed7950adb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb63dfd-d653-41fb-b5bf-efb328547e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247216d9-2e7e-4f40-b834-e15a49e3078e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b47ac3f-af1d-4c4d-92c0-1259ba4d036e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3c04ae-e71a-46a6-8476-328624b7901f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a2fb37-c01e-4554-95a3-4afeb32c2828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec12b827-31a0-42b8-8128-5f8866641250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60cd320-0255-4e20-b69a-788873c4d32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ff33e5-f5f8-446a-9f29-3d587862f259",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5f4959-179e-45fd-acff-19969e637db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a341720c-94e9-435f-8f41-9efad50d6b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb931bf4-12bc-44a1-84c8-3fcb7772c148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682a78b8-ddea-4bc5-aec9-c739283c2808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f6a7a5-a9a2-4562-836e-7334aee4fd57",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e52f553-f728-4a19-827e-af5f14958794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2584fadd-e121-497c-87eb-f6cceafc8180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd74fac8-9052-4f34-aa15-44c86443fa7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2651dcbf-e8d4-4271-b471-f693e23f4db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59c5044-7c5c-4e8d-a6ad-347c86a904c6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a78c436-ae1e-4e75-bbb0-3c5bb952950a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdcd2fc-4415-4fba-8697-f84d0bf5001c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff3b504-273e-4423-b2c5-3469f979b98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76d4d34-7ae7-4c2a-b92a-df75b61ee5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d59da5-491b-485d-94c7-d67b32043bea",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcd0015-1350-4927-9b12-7da532373af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5792051-184a-4a5e-9004-29df680362fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a432d78-9d81-4df3-ac4b-70781dff00df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964e60e5-a38f-4f08-9d11-4f57ccc5c4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e926c9f-a5f4-4719-b237-3f0fe8c249cb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0d4f3d-e8dc-4799-887f-c2fd407c78e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65498a45-7126-4f74-8056-0a01dd0b9c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba312e10-494a-4252-8931-2b40def1615e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0f81b3-b7e3-4cf5-a6b3-d78e589594f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275f405a-9d5f-45dd-9924-598a88092a5e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f58e4c-01b6-4f0c-a659-4e4680ecfdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ff6f65-9846-4ce5-8bad-d0f5b0cd39ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0ae8ac-2c7b-445b-a251-d12a1b2b23f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286f5908-1f49-449a-9b1b-318e9898a822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8462d35-b003-44db-a0dd-b83932d74b99",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba917ab-62e4-4580-8ca4-068789477b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c9f0f7d-accb-47e7-b1a1-1124353cae84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc378abe-f92f-4f98-ae7d-8c9142c20190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c5f5b9-b529-4b5d-bc4f-2e0a13755a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5886ce-a875-43cc-ad25-1bcf4e31f980",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722ad346-f658-4005-8079-c988e34698e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9819527-7115-4f91-b846-25360a8dcf56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc390beb-5950-4ab4-8a87-1044981b26b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a397bc-c874-49c6-9ed7-861c05b383a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe451047-ceaa-447b-bea7-3935af644cb8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f77ebe9-079a-4967-a579-6f7331422ab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11995405-3834-4257-b5a0-c1d6c6a5304b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fd2273-a36c-406a-93b2-75f2ce9dd17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75164940-2d26-4c86-9f46-f8bdff9bcbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1926981-75ea-481f-9454-c99f45a2bd55",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f284169-9855-4643-bbe2-ac40fcd39460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22472513-5274-4f81-97df-d3b2319aff44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11f2283-12e5-4315-90d4-1e6c87055803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e06749-697b-47aa-afda-42e870595b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf25ae0e-566e-4025-9f8b-0248f62817ae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf41f27b-e44f-42f9-8157-bc97ab3baf68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6417bab-23a7-415d-adf5-1c232f66e341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398e86d8-39ff-40f8-8cbe-b34bff040d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49f0727-b7db-4a9d-8066-6012533fd9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43618cce-84bd-4442-ab1d-f21da63f7a2a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69eee684-332e-4ab4-ab16-94246e24c032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08701108-8dbc-4d10-8226-e065fd0e24b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9cb8ea-a865-495d-91f6-01461b11e3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7e213c-c538-43f7-acdd-e3ee8af1b0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d572fb0a-fdc1-4fae-81ac-ca38d8ad3a01",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c4c0f5-f78f-4b01-9afc-514a2ff6076d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac031820-8abc-4056-821f-b911422c992e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fae01cd-89e4-447d-823a-ce2ed9f43017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a98780-9147-4500-a5b0-a6cd5df4345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29a66df-c5c9-4538-b88f-5d26cac0e456",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926e03ba-047a-4118-8d85-e1ce64f2406b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf15b14-9bb6-4788-a0cc-8906b20c2f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c3e7f9-e7fa-4176-b4d9-d079d35a7894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1945b7d-864e-41f8-9bcc-68208ad93b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d4429e-1165-4ac4-b363-bc101854b943",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc38482a-7270-4365-9a8a-1d9d2927bec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d655dd54-be1b-4516-9d81-a1a2c1201ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c44b928-f9f6-4eb8-a5ec-872886ceb1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fc0d1d-0d1e-4bd3-9a3d-e44fe12893d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffde3209-6dc6-464e-9075-757064af4f45",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c797586c-f923-42fd-bbd1-8aa8f44a6a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a92b80-e6be-4a3c-8640-d67fd1393e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce9cd41-93ff-462b-8bc4-40783894e15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57ea774-c8e0-4a17-90a0-976c71b6c8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef51459b-9b87-4b69-b23a-5673b51eb791",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea65fdf-48da-4847-88b4-a460a1c957a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61e508a-9051-44e1-b7c8-d118230592b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2c9ad3-4018-4468-ba9b-a308bf39b86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c73873-8544-424a-883a-689b2a3ac9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339598b9-835c-40df-9312-d7e76567d585",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6384407f-d706-4209-b1b2-5efe32f2250a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56a49af-0c94-4d9c-bf3d-f4c9c0c66f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854bd8b1-e81c-4670-a928-134362f5c96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc23bfa8-2f91-4611-82d8-e269067d671a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cda22e5-85ba-44bd-8fe7-474d2c8583fa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494a1b7c-0b93-4af5-9105-907546ceb35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb59ac6e-78d3-43dc-a5fa-a8a36dfb125c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a4d87-68be-41d4-8b8b-97442a872959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42add998-4d36-4a61-a5da-c62a52a37063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dafb9d-265b-4b16-856c-69aa0c3cb079",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5576776b-98f7-45ba-bef0-29255793c8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683bd102-37ab-47e2-8ac0-1603897fb53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384eb5ab-da15-447b-b1f8-59d7ebf41f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988859bc-8ce3-4879-9f08-1ffcd3798b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed41785-1dae-441c-871a-c10eb9adecfc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4710f19-d3ff-46dd-a79d-c1be649de2ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b36866e9-710a-432a-97c3-bfb3d4fa66e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbbd91b-ed6a-4c6d-9927-2d1abf041ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97595dd8-5378-4716-b488-257cbc293fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76acb9b0-2099-4149-bd5d-6d17c9f58eef",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4148f6c-d938-4d04-b0b3-b822ad52352b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d4efc43-9ed5-4443-856f-17feaadceee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec2784b-bb28-4a9a-9352-4ba6ff455876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6257de94-7043-45de-865d-d13e6e085eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9d9345-95ea-4c0d-859d-ebf07fee7ffd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f96f7d-64d7-4c09-a8cb-8a463da6e57d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6614dba7-819c-413d-aa95-55db3363d473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a1cc97-6566-407c-a89f-41aca0094c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6814b1bc-aa58-4ed6-9fe6-78d1c55e300d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5201d4-dc8d-4d7d-9d63-f32fd4012838",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273baafe-6722-40db-bbb3-4fbb2c9c4b0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b8e81d-6a54-4bf6-af3e-be2d11d8b781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d1efcc-069e-4a2f-8033-7944668cbee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfee7e52-ce40-4279-a261-c67c8c74e5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34384af3-1500-4147-b752-41c642f27d95",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c705095-7cce-4184-a47c-da695bfc7954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae089ce9-da65-4765-92bb-fd75a3b2d1a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd7b7d2-78f3-4e99-a4eb-da4b84d828e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0713126-56f5-418f-9557-53da747707c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc77f3cb-99ba-4dd2-ac75-628522f36ab0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2e782b-e8a3-43d8-8a93-7552149786fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6844e9bd-6348-46d1-b83a-510966657025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6ffad2-3949-42b9-8622-c5dbe472b420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c68499-780b-4124-8e66-d7f076a51849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aeb5ed-e59a-4e82-ac12-d3c0701f8c12",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f273545d-29e2-42df-8228-1e05e33787a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c884b5-e92c-4cd8-9d4d-07fccb935f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a66813-fd79-4f32-9c82-1af51a7d57b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6c0f1d-59eb-4113-b8e8-e07826c05c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96120664-a34f-4177-afb1-1252242e7ab0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b9c708-f69b-46aa-8788-e5b4e209a996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99cb8e86-5f29-47e2-8432-04a0a6d0d63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d02496-e77f-46a6-9a54-1f8e57df8abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e1cc84-7ba8-4d9d-83a0-34c964248ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4599a801-208c-46ec-8af3-1957a186205f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6955b0e-bb85-4923-ab03-abf06528ba63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e142a9-95f0-4a0d-be28-313ead825c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dddbd05-9bae-4f67-8534-2cae983172d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492f798b-e5ba-470f-a9f6-4ca08c62db2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a4ddd6-4d64-48d2-8f8d-623288c09102",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dc3924-f240-410e-b9f9-23f38fdffd17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5934e21-554e-49e5-a105-8a7ade80265a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc111921-8547-4fb5-a609-37887f3d924d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b073fb-fea1-4bb5-bbf0-0cf4fd8c974a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8319b47-3331-4c53-b614-ffcba3b0c21d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35487e4b-a6d3-4d37-ae49-72eb881a4346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1e4a03-a37c-4979-8919-6b9f67cfc505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147f2f8c-9db9-4a14-9fed-5a9262c130fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57841ce6-75bb-47b1-b770-3f0f96902691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7072200-76c3-4acb-9e51-0cd918fbe258",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9c9d53-fbe6-449a-b288-54b8ad4d98ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26363d29-15f5-4bc2-b68a-1757761000a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fca9e3c-b855-4441-b327-70cfb5f80d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c849782a-7cb5-4377-bc8c-3501aef7de84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a82e1d-69ac-4e83-94e8-2065a55177da",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e0c019-4c55-4a6b-9dc6-243a0f6dd530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2ec35a-3fa4-44ff-8be6-a7af4136b21e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4ffebc-8060-4268-8855-128fd1b332e1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472b6c05-973c-4e64-a993-5d4650131cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a45dbd9-7241-4046-a1ee-df3695bc0ddd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f219454-b68f-4e73-8b87-aefa176be7a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ec7b5da-878c-4c90-ac14-5762db2b045e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bbc664-d139-4b40-a6aa-85d2e4012a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefac9ef-4721-4671-bd32-3094a875ccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4661fe12-cbc0-418f-87a7-ba66299c91ec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0418cfe-835c-4b4a-8f06-283358bed1a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c9decb7-4a19-4508-a399-c24daaa5c4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51227694-41ab-4c60-bbef-1ce761ab6f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d7cd0c-a707-4584-8e5c-20068b938900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c889ef-3d1e-4492-ab95-98f4bd6cf22b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab03bdc-6299-4c5b-a7bf-181a3c458c72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3a5f45-1cb7-4d9a-8e4e-d821942815c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3769f765-0171-4718-bf14-c250d0a3a937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8193a735-f3a8-48cb-b3e6-dcb32075c92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c63d2c-2fe7-474d-9566-8b1cae3d137e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cbab36-b512-439a-9001-a2b3ece7dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eef6ad23-79d7-41ba-8a2f-cf6233459cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff3a0d5-e99c-48d9-81a4-2f54a8755a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5d27f2-7811-4cf2-bf57-11d1f48bc809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd72c19d-830a-4204-b6e7-882608e2a175",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1da02ef-c11b-49c7-8c81-818f3d62c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "282ce119-fe8e-4711-af4f-3b19a0d0cc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83fffcb-745a-47cb-b4da-0c807fa8cc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37850740-4dcf-488d-a940-7344478d75fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8170495-1080-4efa-9372-0d47d43f30b1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cea4b90-801a-4db6-948b-c47ca18ca5f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068bda87-77f5-4666-a52d-3f5df807642a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f4a3c4-fc01-4487-bc51-c6de6d795cb6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4c006a-a549-42d8-824e-47fc32565b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef608a13-bf40-43ea-b54d-c7b8eaf21c6a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993572d2-3516-4cfd-872b-55d5303f2a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f38456-fb84-4695-a3c9-b761949ab77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15a960e-6a95-48c3-91bb-2d5a4b6e6087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf11ff3-478e-486f-9a3f-7a865c3560fe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae310d89-82b8-4a0f-82c2-7c02283866e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5127c051-a127-4932-9c00-2cc6e4136b2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0c2429e-8712-4699-bf85-c9180e38fe51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03d01a02-2af7-4a4a-9f09-c63b2974982d"
                    }
                  }
                ]
              },
              {
                "id": "d97c5e9e-309d-461b-ab91-c71f5bc92bbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "083bdcec-bc78-47d4-a3f2-a32b3c425680",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e378ee3d-74cf-4057-bf1d-abb57a4ab7b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1062a4f-f688-494a-bcdf-9b67feb0ddf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071c5938-d5d0-4369-ab48-a252c5a98626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d600720-464f-498c-8df9-0c923ee33a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7c3500-4251-4ba3-a3c6-8c4f55fb7e28",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9db1371-5a9e-4d28-b7d1-779709ec8678",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c28203c9-8d3f-4680-8bde-16f61a8fd65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59936275-ffc2-45f9-8d0c-0c42f1ad3f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ada045ef-c317-4165-88cf-264079e3ceea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8977584b-1150-43f0-8aa3-f25f3f31a18d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24fa158e-83ba-4d43-a4f8-14cb4e597c9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad6c5791-b1e1-4677-8696-bee69d3ebf1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0a31abd-025f-46cd-b0cb-e0ffa86968e9"
                    }
                  }
                ]
              },
              {
                "id": "2c887457-a067-4849-88b2-84a845124897",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7a3b5e13-5301-44c1-aed4-4c66b30c82be",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c85117-4427-4191-b97f-9a5a54a37d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "03763d69-53f1-40f4-a325-414527527789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d438722-942c-446c-880c-6c936a9be45c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f11997b-5200-43a2-9638-066bdb15cf99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "24b1a423-cd58-4155-996d-8687667371d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0733c676-3186-4739-8048-0c5dabcd7960",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76d5eb9b-c07f-41a8-80dc-9f89646c08de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5c5f012-5059-4262-a13a-6eeaf38da3e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "623cf604-511e-4fc2-8752-ce0f2b84f6cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "826e1bbd-49e0-409f-8a33-32a7a2129535"
                    }
                  }
                ]
              },
              {
                "id": "4362c943-9ee2-48d6-b974-cd8e015a9f87",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d66d434-e05a-4521-b4c9-bf7836c21702",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a9034dcb-d90b-4eab-bd59-58e6eb76ef7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27474552-ee5e-447b-9b33-107e6948ba61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "492534a7-663c-4e41-b67e-7fe379b6757d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "816964ed-b956-46f8-957e-adb7fa93050a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5730889f-03bb-48a7-8ba6-36dda1df4604"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9df157f4-6557-40d3-bf65-39249323afa6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6714d3a-31bd-4ec1-8be8-ff03b941049c"
            }
          }
        ]
      },
      {
        "id": "fd02e17d-63fb-4a08-b3b4-9801c58bb337",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0f7aedd8-d51f-4f8d-93ee-21dd440d29f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ba1774e-a758-4d50-9af4-28fcb81de302",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad35bac-61fb-419d-8ad0-9cf5035c7416",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "acdab114-2118-448a-9dfe-fc2da67c9602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08557e25-d54d-4ac2-9eac-c9f015e84838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8da7d18-c318-41ea-84e9-0ec8e39d6ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f4ef0d-36d3-424d-9ae6-79559671b142",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6adac1e-b530-43c7-b999-6e651c90ebb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "67df410b-3df4-4bcc-a759-9b5976e38d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36806bd5-a805-41a6-b85e-9a1263698887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8543cfb-7d64-4d87-96e0-51639fd49d73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e9164ac-9614-45d4-ad57-73dccbe5898c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13cb3785-f13f-4f08-b04d-23ff40039f95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d17cfad0-d5b8-46dc-82b6-d667d7e170cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "404da507-080b-46b0-bae3-435c0c047ad5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01aaa09a-0b96-4436-a940-c7de6bd48528",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "522ce80a-1c65-4495-91be-77515a0bd59a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e996bfe-537f-48a5-b7f0-9da7a25287d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbbc3985-c711-43f7-8bd9-d39d530a9991"
            }
          }
        ]
      },
      {
        "id": "b1ef8c1c-3e04-465f-b1e0-42f51cdcddef",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "70a2917d-9ffb-4686-8cb7-196de3edce38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "735daed7-735b-4ae5-abf4-2807bfc6c4ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c530867-db0c-4a40-b6ac-b53531032b4d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37cfd30-1e7a-4b4d-bee3-a2c0c0f66be7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d09a0d56-3333-4217-993f-5abeb25e743d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7d8c30-36da-4df1-a3c7-eafe74c0f351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e35f8e66-de23-4dec-91c2-fb9a3664fde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed11f056-b6a4-460f-99b7-1cc937557b7d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3567578-72dc-4114-9f8d-f4b82fc4657e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "827d336d-b2f1-4cbe-a3bd-b55743de46e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75b8b0e-27d0-4aa1-bf70-fe06ad128039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51b7bcb0-bd86-49b3-bf60-a6f05475ba08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74edca15-a778-45dd-8d25-f3975e10593e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9d4b404-d715-44a6-a5b3-58880e04c9e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a10980d5-5236-42b0-8f58-03d0ac02daf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "526504ef-4787-4b04-a7cf-a878e062e974"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57f9e85f-ac73-4c08-9285-4f6f9345a415",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0723b70b-148a-4366-b492-2a126876f7fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e5582a5-35e7-4497-824f-6ed7e756a86e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "575782a4-5374-47a6-90ff-cad7ac460f1b"
            }
          }
        ]
      },
      {
        "id": "0757f8ff-c809-41d0-88c5-675a6f82535b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "00daa61f-7286-48c3-b053-e5305e09a1c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b58ced8-5eaa-4ad7-a116-73ed338859e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48dee311-0ba8-4f17-83d7-50963c235b41",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00c98bc-ddc9-4351-983f-233e129dbaec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe796c27-cfd5-405f-8f42-ee2be0183eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0724d683-9431-48a5-b801-ab1f7423aae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92a5e169-a754-498b-9bae-2438ffcfcd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851b70cf-a5be-470c-980e-a7ece1b5fe56",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b30b5e5-8cb2-4775-9651-8946bfd07d2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4b6cdf43-0970-4ad5-a2fc-4af60e3cdf07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2f2c29-8421-4a38-abea-72109f1f333b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fd6d023-841a-4f3e-bd5e-4a80b559e792"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0439c8cc-7638-41fc-bd79-31c19aaa9a46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46c44976-a789-43ab-b9e0-097075b14f28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eacab176-b0ad-4505-b12a-98cea3c6a607",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4582684-3e3b-4b81-a65d-5545066441a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b050d50-3686-4a37-baa0-707fe2ccc538",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "731a4b79-dead-4e04-b635-4e875548107c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30fa251d-3635-4a35-ba01-7052f013ffa3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac62d844-8d24-4775-ae1e-0ca6057a05af"
            }
          }
        ]
      },
      {
        "id": "d487d0e1-eb6b-4186-9f57-f1fc1ca50cd9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2879e5ac-506d-4bc8-b860-9f06ad62fe8c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c2ef24a-f26e-46d7-840b-2d48fb7c839d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "baea23dd-7742-43c0-8de0-27557473d5a5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b17fec9-2142-4052-a235-67347f219b7b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee4795c8-6f1e-47b2-ae58-337bbaf5f93e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 17.942084942084943,
      "responseMin": 3,
      "responseMax": 1261,
      "responseSd": 89.0619525660695,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676853784454,
      "completed": 1676853799585
    },
    "executions": [
      {
        "id": "d579c68e-1e50-455a-90a0-c06a7366bdd6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8a007b7b-2698-46a2-b9d3-f10bb66be386",
          "httpRequestId": "07fee034-4d3b-4b1f-b966-54c5b515a103"
        },
        "item": {
          "id": "d579c68e-1e50-455a-90a0-c06a7366bdd6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6339d291-8943-4792-90a0-57d8c2ee3ec2",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "eed61c0c-bc09-4832-a1a9-bf5f2039ce20",
        "cursor": {
          "ref": "f0587501-6b6e-41a0-a9d4-92a131de92c9",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bbf7ccf2-b097-4f0c-a24b-746cb6db8310"
        },
        "item": {
          "id": "eed61c0c-bc09-4832-a1a9-bf5f2039ce20",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "38774842-912a-4c36-8496-e984542350f3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b30774e0-9548-41c4-9c1f-0b8a149bc21b",
        "cursor": {
          "ref": "87c718a4-4a98-4bf1-a057-6fdced7d0532",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "12265979-fc07-4a48-8ede-a553488231f5"
        },
        "item": {
          "id": "b30774e0-9548-41c4-9c1f-0b8a149bc21b",
          "name": "did_json"
        },
        "response": {
          "id": "730b08da-2c34-4c9b-8991-cc76ce87b9ad",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d665c0-8b10-4fb9-b880-8d2a645c20cb",
        "cursor": {
          "ref": "4dad3a1f-b89a-4078-af6d-cf36830e6615",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "013b50c7-16c4-475b-8567-804e4dfab1db"
        },
        "item": {
          "id": "b0d665c0-8b10-4fb9-b880-8d2a645c20cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "e99dfab9-249f-4bc7-8882-9d8cbe3da77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b0d665c0-8b10-4fb9-b880-8d2a645c20cb",
        "cursor": {
          "ref": "4dad3a1f-b89a-4078-af6d-cf36830e6615",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "013b50c7-16c4-475b-8567-804e4dfab1db"
        },
        "item": {
          "id": "b0d665c0-8b10-4fb9-b880-8d2a645c20cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "e99dfab9-249f-4bc7-8882-9d8cbe3da77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ceac47a3-a7e5-4d3f-ba31-f43745a58496",
        "cursor": {
          "ref": "f47836f3-a171-4fb8-b4b3-106e65860c75",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8e91a531-65a0-434d-b217-1f573cced97b"
        },
        "item": {
          "id": "ceac47a3-a7e5-4d3f-ba31-f43745a58496",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cb0574ed-324b-4117-9a4e-8c6829251b35",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e24d225-8b93-418b-9186-e4f0598e1aa1",
        "cursor": {
          "ref": "76a9456d-ea8a-4c48-8f8d-19a9425cb67a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "793c2906-ee40-4964-ada4-f2725eb01b18"
        },
        "item": {
          "id": "9e24d225-8b93-418b-9186-e4f0598e1aa1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "85a4dcbc-a9eb-4b2e-8176-70d8281db9c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be65464-4a13-4d15-91d0-11863c826910",
        "cursor": {
          "ref": "f605248c-b709-4b3f-b850-47a968a72cd7",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5f7bfd47-a10e-45d3-b530-eeb97019f1db"
        },
        "item": {
          "id": "6be65464-4a13-4d15-91d0-11863c826910",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7e236a95-4d6b-4e43-aeba-60b5a33b0552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaaa49d-0457-4cee-9ae4-bb0971cfc395",
        "cursor": {
          "ref": "82cc28db-746e-4d13-9831-99cb94395ea5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "728b9c41-1454-4831-9495-c508b1b07e8c"
        },
        "item": {
          "id": "fcaaa49d-0457-4cee-9ae4-bb0971cfc395",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "90b4ba40-6eb9-42a0-bed8-8aca1e8e9ac0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaaa49d-0457-4cee-9ae4-bb0971cfc395",
        "cursor": {
          "ref": "82cc28db-746e-4d13-9831-99cb94395ea5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "728b9c41-1454-4831-9495-c508b1b07e8c"
        },
        "item": {
          "id": "fcaaa49d-0457-4cee-9ae4-bb0971cfc395",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "90b4ba40-6eb9-42a0-bed8-8aca1e8e9ac0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f22ce2-f2f0-4017-92f8-acb73ed262fc",
        "cursor": {
          "ref": "af429347-a242-4a52-afdb-6ddae1b4436b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "895caefa-e539-468d-bbc9-3ca59f6032b3"
        },
        "item": {
          "id": "28f22ce2-f2f0-4017-92f8-acb73ed262fc",
          "name": "identifiers"
        },
        "response": {
          "id": "d1eb8cd2-ae42-4241-9437-3381e8a8db96",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af782a2-5335-4c5d-8c8a-7288fd8a1d69",
        "cursor": {
          "ref": "40669f11-b2b8-41f8-ab7b-5d6589f2c47e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec3abd6f-afe4-4354-be80-9a2158058ebf"
        },
        "item": {
          "id": "9af782a2-5335-4c5d-8c8a-7288fd8a1d69",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "96b5be79-801a-4c9c-9d76-f540c067c0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af782a2-5335-4c5d-8c8a-7288fd8a1d69",
        "cursor": {
          "ref": "40669f11-b2b8-41f8-ab7b-5d6589f2c47e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec3abd6f-afe4-4354-be80-9a2158058ebf"
        },
        "item": {
          "id": "9af782a2-5335-4c5d-8c8a-7288fd8a1d69",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "96b5be79-801a-4c9c-9d76-f540c067c0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f0e0de-c2a6-4f7c-947b-6cda39a1e949",
        "cursor": {
          "ref": "7fb2ad47-2b10-45d0-93ab-03685cd5d8f4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ae25c1d1-84d8-4090-8c30-d8b67e8650e5"
        },
        "item": {
          "id": "45f0e0de-c2a6-4f7c-947b-6cda39a1e949",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b832b4cd-54db-4d12-80e8-a6889170bf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab4ac8f-c691-4eeb-8410-b1fe4c8b8964",
        "cursor": {
          "ref": "113e6d55-e413-4137-adc8-d012c1586feb",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a5bcf080-0480-429a-94ee-9c1b5d127d50"
        },
        "item": {
          "id": "6ab4ac8f-c691-4eeb-8410-b1fe4c8b8964",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a4c6b6bb-5fe0-4cd5-b264-d07f01dbb95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b791364-1cd0-4ca1-aa92-56cf6fe01bb0",
        "cursor": {
          "ref": "7a461898-9112-4820-a664-867b04eea980",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2488f4ee-158c-46e8-81f1-3aeb6b10ddf9"
        },
        "item": {
          "id": "3b791364-1cd0-4ca1-aa92-56cf6fe01bb0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "631500db-76ac-47d5-b56a-07c48cfe33a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003eec52-6485-4688-8f54-106d2df1234f",
        "cursor": {
          "ref": "f5813ea0-0cdd-4a98-8807-9a1d3c00a9dd",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "98a52871-963a-4992-a713-5847afb4f370"
        },
        "item": {
          "id": "003eec52-6485-4688-8f54-106d2df1234f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "af0d8b4b-f5d1-4d47-af75-281350c7dc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1243168f-5b0d-499b-a6d3-f22f64e6dec4",
        "cursor": {
          "ref": "608ea223-102f-432f-8f11-89cfc06c9382",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4bbb2631-fbe0-477e-8c41-b240c7324ce2"
        },
        "item": {
          "id": "1243168f-5b0d-499b-a6d3-f22f64e6dec4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2dc31914-8071-41f0-b3da-59609719ec8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014dbc4e-0f09-475d-94c6-ce52275e4ad7",
        "cursor": {
          "ref": "8f41eb5f-0b38-4f57-b060-68bc6d0c3479",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5d4c50a9-a50f-488d-8920-0754d662af33"
        },
        "item": {
          "id": "014dbc4e-0f09-475d-94c6-ce52275e4ad7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "329e3ac3-be4e-448d-931b-d46b8169fe2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87976f2e-8abe-4e9d-9d87-f3dccc1de414",
        "cursor": {
          "ref": "b151e93c-783d-4918-9d0f-503a4c53cbcb",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6bc13bfb-e5f4-4f05-9538-84b6264b1992"
        },
        "item": {
          "id": "87976f2e-8abe-4e9d-9d87-f3dccc1de414",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "975d15f6-f7f9-4527-9dfb-a0b06bd28c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c16d804-a67e-48af-b8e3-6e24401f5d8d",
        "cursor": {
          "ref": "3f2fcbf7-4192-4420-98d2-042ed9eac46b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1ef68cdb-7975-4d0c-ac33-e1cfe2474336"
        },
        "item": {
          "id": "0c16d804-a67e-48af-b8e3-6e24401f5d8d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "99c3daaf-4c09-4b27-aae5-9b4ba2b44616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69919dc9-7b7f-4d63-bcf2-6b621a7dde82",
        "cursor": {
          "ref": "2ba5820a-7f00-4a3e-b644-5507cf90246b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3cb3c3d2-c64e-4d0a-89b7-cf0005bef718"
        },
        "item": {
          "id": "69919dc9-7b7f-4d63-bcf2-6b621a7dde82",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4ca7cc21-9998-453a-9ffe-1d5b0eed7c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969124da-237d-43e9-8862-401c0e149183",
        "cursor": {
          "ref": "d6dd1024-112d-4c83-a11e-aff6b4cad2f7",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c5349fbf-58c2-450d-ae9b-fdd096e49af7"
        },
        "item": {
          "id": "969124da-237d-43e9-8862-401c0e149183",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7d6a3378-8ab2-4367-8fce-b1e6ab0f0536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f052fb-4857-47c9-a917-8ec4b7f6e4e5",
        "cursor": {
          "ref": "17399a82-344c-459a-b509-948dcaf7607f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34fb3572-f023-4fd9-ba44-1bb12122b544"
        },
        "item": {
          "id": "65f052fb-4857-47c9-a917-8ec4b7f6e4e5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5db3470b-d9f2-4f7c-a1cc-f897de66bad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054b7617-1403-4c02-8f6f-c2c5b1b90fe8",
        "cursor": {
          "ref": "dee07c87-e12f-4604-a9f0-75462df6934c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a365ea74-6c55-4f07-8bce-214738d70d82"
        },
        "item": {
          "id": "054b7617-1403-4c02-8f6f-c2c5b1b90fe8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "541039d3-7e8c-463a-bd70-6e43ce36e397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cff5da-b69e-4841-a75a-097766ea3f49",
        "cursor": {
          "ref": "b7047f5e-cc7e-4675-9a75-7c7ca936e40b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0543b2dd-42db-4bcb-a6b9-98cc781fe323"
        },
        "item": {
          "id": "61cff5da-b69e-4841-a75a-097766ea3f49",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a03d9ed-2dc4-4a63-93f5-b45b6f249ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef26720-237b-40e6-8a27-4f4c5b9ad002",
        "cursor": {
          "ref": "ee50d986-9a25-427a-aa8b-8002aea6ea6f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e1f3c475-7433-4a67-b7bd-ada0f7a0d671"
        },
        "item": {
          "id": "fef26720-237b-40e6-8a27-4f4c5b9ad002",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a98b2a78-8f97-4b82-9456-05e521b21aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068f26c9-ff14-49df-a438-5e3f3e5dc814",
        "cursor": {
          "ref": "100658b0-d5a7-48ba-95b5-8f1abaac36db",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d6dd2dac-3ab3-4669-8756-0b28da446a79"
        },
        "item": {
          "id": "068f26c9-ff14-49df-a438-5e3f3e5dc814",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "93684c04-ce0a-4824-bd3e-68ec9cf75fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078a2fcb-1a7a-4420-b6fa-11db1200e972",
        "cursor": {
          "ref": "4c1a6754-8eeb-42c9-b0e1-0be4c943bbdd",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5bd46b90-a6a9-4743-8699-2d2c1e179b4a"
        },
        "item": {
          "id": "078a2fcb-1a7a-4420-b6fa-11db1200e972",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c9d1dfba-9e1f-42df-8ece-db74dce9b5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e34ad53-b559-4d60-b281-12d29f12c48e",
        "cursor": {
          "ref": "8f2eec80-8d8a-4df3-b02b-478531ecd623",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8942a575-5a70-41a4-b3bb-48245c097a38"
        },
        "item": {
          "id": "4e34ad53-b559-4d60-b281-12d29f12c48e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d4e7e629-0da1-43e7-8412-c0194ac6e40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8ea5fe-7e4e-4a9e-9ac2-0f033a95947e",
        "cursor": {
          "ref": "e9f88e00-af78-4066-87a9-57e9351e5ed7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9ab6fb65-c1f1-4b3e-9565-13ffc3494920"
        },
        "item": {
          "id": "4e8ea5fe-7e4e-4a9e-9ac2-0f033a95947e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9e3b839c-9637-49c1-a94e-d55a87572372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8938deea-4007-49c6-bbdf-383cdba13ecf",
        "cursor": {
          "ref": "c8acd8cd-8848-4f60-8368-dcfc23404dd5",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4812dea0-39f3-44dc-a73a-252b4379af05"
        },
        "item": {
          "id": "8938deea-4007-49c6-bbdf-383cdba13ecf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "49fc3e35-5bc6-42d5-9269-6106d2056d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b33f859-48f8-455e-ad37-485cef1349d8",
        "cursor": {
          "ref": "6dbdba99-5d48-4419-9b46-d2f8d6840ac7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "950fafe8-dc94-45ff-90b3-893884a8254b"
        },
        "item": {
          "id": "3b33f859-48f8-455e-ad37-485cef1349d8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "38b8f5e6-939b-4b83-941c-674b483c5786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99481e7-702b-4865-90b2-e6ed9dc97bdf",
        "cursor": {
          "ref": "3005e639-4688-4451-8ed7-54b48c2e831f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f2e043d3-384c-4ea6-bdff-8617c2f5ff1a"
        },
        "item": {
          "id": "d99481e7-702b-4865-90b2-e6ed9dc97bdf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "944a7a55-9c88-4c13-b3f2-d5d7166787d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7e4f31-40fc-415b-9593-1901d2090e1a",
        "cursor": {
          "ref": "7d25a4c7-2e72-494e-b88a-a1e3b8ed08ad",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5502aea6-dba7-4c01-889e-956d30e99023"
        },
        "item": {
          "id": "0f7e4f31-40fc-415b-9593-1901d2090e1a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "026bddae-21b4-4f84-b788-c01d0bfc33d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7efd75c-9e8c-4008-b8a0-2c6578c53041",
        "cursor": {
          "ref": "8657508e-cee2-406e-b6fb-3dcce525b35f",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3f2b8759-6084-445a-8855-c508813d3b6f"
        },
        "item": {
          "id": "c7efd75c-9e8c-4008-b8a0-2c6578c53041",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f03d8b09-06eb-4236-80d4-2dca8260f7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c02db9-69c9-476d-af0e-a2bba957f3ae",
        "cursor": {
          "ref": "c6e09bb9-206b-4989-8769-a522c65446f7",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "63ab891a-d8ee-479b-ae77-6184ceb58e83"
        },
        "item": {
          "id": "42c02db9-69c9-476d-af0e-a2bba957f3ae",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91bc6a51-4e25-4d8a-8fea-7684f8ecf4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e971fe6-eccf-485c-80f0-44fa60b7b05f",
        "cursor": {
          "ref": "34b0636b-005a-4a1c-b6e9-8ed6d903ba78",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7200db6f-8a3b-4a01-b2b6-88ef2541f4bd"
        },
        "item": {
          "id": "5e971fe6-eccf-485c-80f0-44fa60b7b05f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d045df73-6f88-4318-90e7-37764a6dfd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4739b7dc-33ec-4279-bd33-d8158db707d7",
        "cursor": {
          "ref": "be716fed-614f-4ed8-92eb-f0a358c06b3f",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7650d2f8-aea1-4bac-b1f9-fa620a0a1e18"
        },
        "item": {
          "id": "4739b7dc-33ec-4279-bd33-d8158db707d7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7aaa04a8-1be7-469f-a498-7510576bb2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575e2998-268d-4316-907f-c954390c74b2",
        "cursor": {
          "ref": "5bb2142a-76f5-4be6-bbd7-b97b5117947a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8d159e8-54b3-4263-84b0-e67b05d7976e"
        },
        "item": {
          "id": "575e2998-268d-4316-907f-c954390c74b2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "67576ebe-b976-4b75-8892-e6f5b10524b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e12396-6027-4360-bd77-d9be0acab165",
        "cursor": {
          "ref": "3f3b05b4-8c4a-4026-b59a-a646890026ce",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "612ebec4-11be-4a4e-aef7-495ef5ec068e"
        },
        "item": {
          "id": "c0e12396-6027-4360-bd77-d9be0acab165",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8581cafa-f838-4957-8b04-5ce178061050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cc9185-4d7b-4939-9f6d-2f1e1f7de74e",
        "cursor": {
          "ref": "c96c812f-1a60-46b5-8700-54386269d24e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3d38bf67-dd87-4a41-bb02-c69015ad9963"
        },
        "item": {
          "id": "24cc9185-4d7b-4939-9f6d-2f1e1f7de74e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3ab82aed-37a3-462f-8336-023a9d5a1129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c66a199-525f-4f3f-aaf2-b1659f4d6838",
        "cursor": {
          "ref": "0570ebde-da65-410f-bed9-861eceac7146",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4baeb053-3857-454e-9653-0493b7d01f32"
        },
        "item": {
          "id": "6c66a199-525f-4f3f-aaf2-b1659f4d6838",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "36924c61-dfc5-42a1-be25-54f18eaa77d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ca1315-a643-42f4-9fc8-3af2d2b38fee",
        "cursor": {
          "ref": "fa8096fe-d23f-4643-8f53-8311141d8956",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f7d8179-d086-49e3-ba30-84e36d092423"
        },
        "item": {
          "id": "48ca1315-a643-42f4-9fc8-3af2d2b38fee",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f9c9247f-b375-48db-9b0b-8ab5eef2483a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e228424e-10aa-4651-88bd-b104d2630a30",
        "cursor": {
          "ref": "f2b8ec1c-a4e5-4f5c-92da-22544193a635",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "773c6a35-d97d-4486-ac02-7e5bc42dc65d"
        },
        "item": {
          "id": "e228424e-10aa-4651-88bd-b104d2630a30",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "20673d9d-e995-466c-bd35-96c8244bf24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2ed09a-a04b-4833-b0b8-a569cac3f823",
        "cursor": {
          "ref": "08bb2f49-781b-4f51-b481-72a93eacf2f4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bcd5dfde-07e3-4b0b-8cc2-12a7c896a21c"
        },
        "item": {
          "id": "0d2ed09a-a04b-4833-b0b8-a569cac3f823",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4f0db8df-dda8-4ac7-8247-418f661c6842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03292b0a-6d82-4edb-b488-823c6498b732",
        "cursor": {
          "ref": "c154f070-2a75-4b51-9a25-18b7d2008025",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "800ad77b-0ccb-455e-80fd-7fd78bf01eab"
        },
        "item": {
          "id": "03292b0a-6d82-4edb-b488-823c6498b732",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b5972095-152c-4414-a2c9-3f0ee75a8a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b470f65-b5bc-490d-9c2b-158d2e8d587f",
        "cursor": {
          "ref": "4f139fce-ddbb-4958-a846-8f893752a9fb",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4ccdfb7f-db7c-483d-b022-92f542c3ed83"
        },
        "item": {
          "id": "6b470f65-b5bc-490d-9c2b-158d2e8d587f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "50d58e81-2c81-442d-b570-c6370ade482c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0d3b765d-2eb0-47c5-a6e6-b12247e9e908",
        "cursor": {
          "ref": "08636347-d511-4e23-8a0b-727cfa69d851",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5d468c72-df95-49ad-82e9-329e4f42fd95"
        },
        "item": {
          "id": "0d3b765d-2eb0-47c5-a6e6-b12247e9e908",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fb78fb44-1407-4838-a8c3-bf6e283daa51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f849339-618c-4d90-aac6-06dba62149ad",
        "cursor": {
          "ref": "ab55d63c-3755-4fd3-9c82-2a446c9248a0",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a762c665-b899-4666-bdc9-1158727dc009"
        },
        "item": {
          "id": "2f849339-618c-4d90-aac6-06dba62149ad",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72ee4204-603e-4966-aae6-b963118fadbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe0fc10-81a0-40cf-92cc-2db5c90395ca",
        "cursor": {
          "ref": "4daf8b44-d687-4824-b00b-7c79a068878c",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d9f373f0-39fd-4ae5-9623-e0d3f45fcb7c"
        },
        "item": {
          "id": "efe0fc10-81a0-40cf-92cc-2db5c90395ca",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e3762bec-5b2d-4231-8035-b3a431fb0528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d570e0-27a8-400b-ab24-7c913d15fe46",
        "cursor": {
          "ref": "7d93c170-5e38-49ed-8b88-71894150f682",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "544cc776-3754-47b5-aeca-48d0213885b4"
        },
        "item": {
          "id": "14d570e0-27a8-400b-ab24-7c913d15fe46",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b0fb6a39-9429-407a-9b1e-3e5551bf9521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa891f2-228b-4d94-8751-67e072303aeb",
        "cursor": {
          "ref": "1f0c9d53-71a8-41cf-93dd-3e41cd65efdb",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c2fb0334-90e1-4167-9de3-74661cc6c40e"
        },
        "item": {
          "id": "4fa891f2-228b-4d94-8751-67e072303aeb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "231bcfeb-6064-4814-bb9c-3ca9b61381bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3103aa-eeb6-4ad1-9ca6-46589fc9fe39",
        "cursor": {
          "ref": "229dacf9-aebf-45ae-8df1-70cdf2001c77",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "afecfa04-4faf-4b4a-bab3-0b7176191015"
        },
        "item": {
          "id": "1b3103aa-eeb6-4ad1-9ca6-46589fc9fe39",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "be92050c-c288-4c6a-bc82-ab62e66635b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5b49c7-91be-452b-843a-e54ea355e994",
        "cursor": {
          "ref": "fb2a8b7f-25f7-4e3b-b664-ca68dd9b53c8",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6830a52f-4f68-4beb-8518-12aba809d473"
        },
        "item": {
          "id": "3c5b49c7-91be-452b-843a-e54ea355e994",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d4358cb4-59e7-48aa-9da9-fc99c25a6c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "efea4415-ed61-43ce-8ceb-401e5f2e088c",
        "cursor": {
          "ref": "a7348fdf-dd1d-4228-828f-4aacd1bf779b",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fe4a0f4b-c920-4e4f-9b8e-8756e45d25e4"
        },
        "item": {
          "id": "efea4415-ed61-43ce-8ceb-401e5f2e088c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "046502f8-fa75-451f-bcb6-c88051646ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c38ed8-37f0-412b-a483-ef7e3962ad5c",
        "cursor": {
          "ref": "6303ed04-257e-4eab-b94d-2bec46bf22af",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d8784ed-d0f1-428a-8e13-8d0b1fe07ee4"
        },
        "item": {
          "id": "d8c38ed8-37f0-412b-a483-ef7e3962ad5c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d0ed76ac-8f5a-4b8b-adde-235149225914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9806eb68-e2a6-41de-8109-cea74b50945a",
        "cursor": {
          "ref": "f99ba48f-0d81-48e2-aceb-7dc6d437fb2b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d57920d5-82f6-49eb-9d61-d9780131f1b9"
        },
        "item": {
          "id": "9806eb68-e2a6-41de-8109-cea74b50945a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "748769ff-370f-4412-9334-f97798ed990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c25c6d4-8fd1-4728-9935-97ef014d0ffd",
        "cursor": {
          "ref": "4231cead-bf69-4f21-9c1b-a7fc4f431fdb",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3580449b-3e3b-4880-8ac3-3c35bfc06215"
        },
        "item": {
          "id": "5c25c6d4-8fd1-4728-9935-97ef014d0ffd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c252b716-fd37-4a03-8540-b0baa1b08a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f96ba46-562c-494a-82ac-eb556ee17337",
        "cursor": {
          "ref": "3cd339c2-ead9-437c-bd6f-3b6b46a6f426",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bb80ca29-54ff-4f9d-a077-dd2531c6ee48"
        },
        "item": {
          "id": "7f96ba46-562c-494a-82ac-eb556ee17337",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dbefc0a4-00c7-47da-8d25-41ac2adf5e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39889248-6154-498c-8d1b-983bff176568",
        "cursor": {
          "ref": "de71c3ee-0337-4f14-9739-588097fd009e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aae28450-0769-4c59-abe8-fab26dd922ee"
        },
        "item": {
          "id": "39889248-6154-498c-8d1b-983bff176568",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7e74670b-1f7b-4c9e-aa1c-0f1ba428f141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df97295-ffae-4be0-9ce7-a1386298d8fa",
        "cursor": {
          "ref": "b403bdfe-0db6-489c-a373-1d3515a7044b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1dd3eb4e-091a-4793-a6c4-14140094264b"
        },
        "item": {
          "id": "7df97295-ffae-4be0-9ce7-a1386298d8fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9957454-a6c3-46f1-b3ba-0f9501e899aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9731de2-74db-4836-a227-492e173fbf73",
        "cursor": {
          "ref": "8583a2b6-9b0f-4085-90c9-898afff3a00a",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9833c883-68c8-45f1-bce5-b4281afe42d5"
        },
        "item": {
          "id": "f9731de2-74db-4836-a227-492e173fbf73",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bc7b5e50-3eb9-4e0e-9ba7-555cb5713927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7a9bd8-ea71-4e94-b6c3-e86c0acd7a21",
        "cursor": {
          "ref": "21c85d40-7580-4862-9584-213c88cf17d1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1892a709-8ab0-4557-ae99-bbe6f6e9f6ed"
        },
        "item": {
          "id": "7e7a9bd8-ea71-4e94-b6c3-e86c0acd7a21",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "49b6ff24-6a51-452a-8de1-b8f4c31ba325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bac72f3-7795-4a1c-aeb3-b213346c90a4",
        "cursor": {
          "ref": "a1498d34-8fa6-423c-8cd3-2aee0c0a68ac",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bdb7053b-7126-43a3-9462-c27dbcabafb5"
        },
        "item": {
          "id": "3bac72f3-7795-4a1c-aeb3-b213346c90a4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0133b2a7-d4f9-4c15-9663-cceb18e30a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64331b3-41c2-4f8b-9f8a-9845e0023929",
        "cursor": {
          "ref": "188b9a25-5e29-4077-b640-84865ffe87a3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "002a1320-a42a-43f1-b3ea-65482491cf09"
        },
        "item": {
          "id": "a64331b3-41c2-4f8b-9f8a-9845e0023929",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b6a81f2f-10b1-4e5a-b1e1-5dd80e44f968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165f276f-3b68-4e7f-9176-79de72a27cde",
        "cursor": {
          "ref": "762cd080-0995-4e9c-a5c9-9079fccc4fc4",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "099a2769-0cf3-4f81-b83b-707f4ea39b96"
        },
        "item": {
          "id": "165f276f-3b68-4e7f-9176-79de72a27cde",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b49a6244-06ac-4ce0-8194-5c125370efd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaf49a7-c4a8-4e8d-9488-8595a2784a2d",
        "cursor": {
          "ref": "4351e402-ebae-4b51-9794-0bfc524248e1",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cebeca49-f597-4c40-b684-f70339be4f4b"
        },
        "item": {
          "id": "4eaf49a7-c4a8-4e8d-9488-8595a2784a2d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3b416ed9-f864-41f0-9662-34930e704526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cf440f-8e1a-4812-9566-387b9ef198fb",
        "cursor": {
          "ref": "bf6a030c-c27f-4229-974f-f6945eef0d8e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1eac1338-dcd1-48e6-8587-8bd70980934c"
        },
        "item": {
          "id": "b1cf440f-8e1a-4812-9566-387b9ef198fb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d62dd59c-8210-4c62-b617-1543d6f47897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e70ac89-adcf-407c-99c7-9b3101f86286",
        "cursor": {
          "ref": "d0b4997e-8a44-43a3-a7cf-751fec77cc64",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "98884d7a-5719-428a-9b36-4c6a34f0bce4"
        },
        "item": {
          "id": "3e70ac89-adcf-407c-99c7-9b3101f86286",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0e3721a1-4139-42eb-bceb-f400c7760ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf153ad-7dbb-4472-97b0-a28f4490e9cf",
        "cursor": {
          "ref": "43d70037-56a8-4007-86fa-1c98063abf85",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "21274328-cd08-4edc-a3d9-916b79a83175"
        },
        "item": {
          "id": "4bf153ad-7dbb-4472-97b0-a28f4490e9cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b4474b48-3ffb-4edd-b10f-ed849e62a398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d3d8b4-f9d2-46b0-bb93-f11d4fc60685",
        "cursor": {
          "ref": "bc078383-a9b6-4462-991a-d1f134806ccf",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f306fb4-82e0-421b-8a82-2e4b6862e288"
        },
        "item": {
          "id": "d0d3d8b4-f9d2-46b0-bb93-f11d4fc60685",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6bde4fd9-2108-4af2-9856-cb7b29b444ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3335809-a28f-4ac5-b250-849dfeacf1f7",
        "cursor": {
          "ref": "671bd71b-040d-448f-baf3-5484e95e57a4",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e26eb52e-a97e-4275-9ca4-9646009b3669"
        },
        "item": {
          "id": "a3335809-a28f-4ac5-b250-849dfeacf1f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5d39bac3-9cab-44e1-a138-b687d688c4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20d7b44-ac2d-4bfb-897f-ae7ddd5212a8",
        "cursor": {
          "ref": "e537cd06-01c5-49ea-8646-e3fc78334cd8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7de0c4ea-ea4d-4b84-8b53-f744ba39baa6"
        },
        "item": {
          "id": "c20d7b44-ac2d-4bfb-897f-ae7ddd5212a8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "389b219b-0c39-49d5-90ad-9e893ac57dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abdeeb0-f538-445e-8bf0-aac19857f215",
        "cursor": {
          "ref": "85c61c52-d4da-4c88-8990-b711f152c1f5",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9df63f06-7884-4b6e-80e1-b6da73772fc7"
        },
        "item": {
          "id": "8abdeeb0-f538-445e-8bf0-aac19857f215",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "32412db4-c15c-4bfa-9702-724260fe6bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc5a9ea-a681-4de3-8269-6714a69b8532",
        "cursor": {
          "ref": "98bf2d66-9196-4c45-8c3b-7162eb7082f1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0af279ee-3e8c-4999-b71e-4e6e96cfb52b"
        },
        "item": {
          "id": "1cc5a9ea-a681-4de3-8269-6714a69b8532",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "94d3d25c-c17e-44e7-8c94-fa6a45b559ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e7c6db-a59f-41ce-b2eb-f2d4d714ce35",
        "cursor": {
          "ref": "d83e8a30-986f-4896-b53c-f899b00ad9bc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fc38cb25-4db9-4f90-a24a-e5ee2d756608"
        },
        "item": {
          "id": "85e7c6db-a59f-41ce-b2eb-f2d4d714ce35",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a832a7ad-2da8-4eaf-a7a2-8ebac8ef4195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2990ecd-52dd-45f5-b7e0-532dcf141055",
        "cursor": {
          "ref": "2af118a3-c118-4d6b-9e6c-ba0edcd6e8f5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d2ac1b8f-b85e-44b5-9146-2048dca491d9"
        },
        "item": {
          "id": "e2990ecd-52dd-45f5-b7e0-532dcf141055",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "aaad7084-0de3-4f37-8cbf-709bbea312ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00501735-1b26-4a98-861a-b77113bfdcbf",
        "cursor": {
          "ref": "e3abd1ba-4a2f-4673-bcc1-c92a5420e100",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "20eb88e1-e836-4fd3-b625-70f2386df9c7"
        },
        "item": {
          "id": "00501735-1b26-4a98-861a-b77113bfdcbf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b83590a0-d2eb-4cc9-9f3a-d444427a867b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb37f583-b9c6-4d84-a43a-88893751bf30",
        "cursor": {
          "ref": "0f1ea05f-7405-4aea-a844-2433870e2b8f",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4a38613a-71c6-4b2e-b95e-04e3e77dc620"
        },
        "item": {
          "id": "eb37f583-b9c6-4d84-a43a-88893751bf30",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5a5b176b-b0a9-4153-84d5-c97eb5306809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76566ef2-b3c5-430e-9c57-91007fff2a55",
        "cursor": {
          "ref": "ebca5b8a-81e2-4184-b033-ca07b4d1a59d",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8a957f84-4e85-4bcf-9aa6-89163a8a9a84"
        },
        "item": {
          "id": "76566ef2-b3c5-430e-9c57-91007fff2a55",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d5a4df9b-0e37-4ca6-8f59-c74e846b7b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7c6ba9-5c5f-4eaf-a9c5-4fec0e12738a",
        "cursor": {
          "ref": "68a8a27c-7596-4f1e-a3f3-fde18a0e1524",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2ead3cbd-ee2f-496d-a03d-40ad34b155ce"
        },
        "item": {
          "id": "5d7c6ba9-5c5f-4eaf-a9c5-4fec0e12738a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d6a9820b-28cf-47d2-87e3-0a35317d985a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b20e387-0bc7-4c07-a966-d5a93f42c36c",
        "cursor": {
          "ref": "e80ca564-8d9b-496f-a8ca-b71ba1b5d12c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be688eef-d01e-45db-af55-d6c3598c8ebe"
        },
        "item": {
          "id": "3b20e387-0bc7-4c07-a966-d5a93f42c36c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "61bbc5d1-5243-423c-83d0-16dea083f8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecef1299-5c4c-469b-985a-789952fb3a3a",
        "cursor": {
          "ref": "1de85b9b-d360-4eba-a362-628d706db691",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c3cfc930-241b-42a3-a748-5fd47a5edecd"
        },
        "item": {
          "id": "ecef1299-5c4c-469b-985a-789952fb3a3a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0911bf8b-a957-43b8-9a4f-fafae41aed4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8841488-9bef-41d6-b09f-387c31edce0b",
        "cursor": {
          "ref": "f6299e9e-8c32-476f-a588-97519bf6e580",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1f508db6-2a8d-4000-af53-bc65e415fcfb"
        },
        "item": {
          "id": "b8841488-9bef-41d6-b09f-387c31edce0b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "507b15c3-01bb-42cb-b9a4-682e470016f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b4e8e7-971d-425f-891b-cf02ca13ba0d",
        "cursor": {
          "ref": "ef03e944-5101-4cea-98f3-24772894ac26",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8f6803d2-23ed-44b6-882d-2562594997d0"
        },
        "item": {
          "id": "10b4e8e7-971d-425f-891b-cf02ca13ba0d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7d8409c0-b0a6-4f41-9e14-05bc1f4d67e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479c66e5-3f60-4110-afa7-44aefc818ade",
        "cursor": {
          "ref": "6ab14899-f100-46cb-8323-a077cf864fba",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c297af0c-a6a2-4165-9c67-0d080fd61fb8"
        },
        "item": {
          "id": "479c66e5-3f60-4110-afa7-44aefc818ade",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "02cc9e29-5765-4e4c-b22e-918d1f5f3ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e12c592-eee0-4c4a-854d-fe5d63d66abb",
        "cursor": {
          "ref": "291f2573-e137-4560-9b67-7a72584a3831",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5888aaec-016c-4ff0-a890-f1adc7fcbb7e"
        },
        "item": {
          "id": "1e12c592-eee0-4c4a-854d-fe5d63d66abb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "17f94bd8-c153-4861-bfc2-9cd355306b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39f1259-eb92-46ad-b36d-180eba1066f6",
        "cursor": {
          "ref": "1ac47da1-b177-45f2-ae25-a5d077492a20",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e79bbb09-0f2c-43cd-affb-0f05d3d58f4a"
        },
        "item": {
          "id": "c39f1259-eb92-46ad-b36d-180eba1066f6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cda8548a-11e6-427b-87ea-d907ef15f344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2220615b-cd4c-4033-b929-a30d9352240f",
        "cursor": {
          "ref": "140985cb-6ac8-4ee1-8f5d-a15caac84d59",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b111d9c3-3820-4dc5-a8fd-c4b73210eb1f"
        },
        "item": {
          "id": "2220615b-cd4c-4033-b929-a30d9352240f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2891a84c-2039-4730-8882-305fe3c62750",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "85ef5521-8bb0-454e-a5f2-859a55f9759d",
        "cursor": {
          "ref": "b7068727-fe98-42b3-a01c-5f3f8d30ce0d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8d852c84-8d27-4452-90de-e0169ab0b5fb"
        },
        "item": {
          "id": "85ef5521-8bb0-454e-a5f2-859a55f9759d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5a6e9bea-88ba-4d54-8ced-21ca12e123b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ce4b13-eef7-4dd6-8bae-bd6d470f6c31",
        "cursor": {
          "ref": "833ec3a3-28a1-463b-99ce-bc474e65e001",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b762cf31-ed6d-44b7-82bb-b574c5de2c3b"
        },
        "item": {
          "id": "b9ce4b13-eef7-4dd6-8bae-bd6d470f6c31",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "04306e9b-9743-4cac-aef2-9b0cf0dc0c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bb1eac-cba0-448b-9fba-39784fb4e3df",
        "cursor": {
          "ref": "bc6a842d-262d-4c9b-9462-af81f6a5c873",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "14e58db8-c9eb-4411-817d-3fa3fb80fd9f"
        },
        "item": {
          "id": "87bb1eac-cba0-448b-9fba-39784fb4e3df",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "423f399a-6af7-4fbe-95b0-b637101b9b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff5ed05-3556-4d8c-8c24-5e7639fe63bc",
        "cursor": {
          "ref": "bd954e3c-8c2e-4bf0-bc23-a7f5910c2d5e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ac1af110-c54b-4539-9620-6bfbeeddf844"
        },
        "item": {
          "id": "6ff5ed05-3556-4d8c-8c24-5e7639fe63bc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "daf936ed-01d4-4280-a8fb-84a70583e745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bfe69c-e53f-4f76-8846-1e2875acbc38",
        "cursor": {
          "ref": "7f68e8c2-4091-4e62-854a-5826195676ea",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0843c61b-33a6-4b12-9d3e-98d34aff0783"
        },
        "item": {
          "id": "b9bfe69c-e53f-4f76-8846-1e2875acbc38",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8482fa43-63c3-42c7-ac49-a81ea9ddd407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923a5923-d9e1-4f33-bcbd-7f86e50bceaa",
        "cursor": {
          "ref": "54578bae-0994-46fd-83b4-95f80e5c0b07",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b8248218-c5ca-436c-864e-732a44cc3c92"
        },
        "item": {
          "id": "923a5923-d9e1-4f33-bcbd-7f86e50bceaa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b9c23740-9c23-4188-82f1-3e97545e2dd0",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "abefc0bb-24d9-4757-976d-e92cacddc18d",
        "cursor": {
          "ref": "fbb169f0-1a35-4b1e-ab4b-129bdef633b6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "be9be5b9-f589-403f-8c4f-6c3401365e6e"
        },
        "item": {
          "id": "abefc0bb-24d9-4757-976d-e92cacddc18d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "313d58b8-a8fc-4acd-acef-88e74735797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa4abc1-3619-4c53-9e13-e9d629a2e973",
        "cursor": {
          "ref": "64d42521-2960-4bac-8b03-d86077576ce3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "547f6451-7082-427a-9e70-8bcdddde5794"
        },
        "item": {
          "id": "0aa4abc1-3619-4c53-9e13-e9d629a2e973",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e1d5085a-29a4-431d-a393-29ed9acfa32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a448a54-7857-4878-8563-9bb270614ca6",
        "cursor": {
          "ref": "7a127db2-f531-4eba-a3fa-f2f3c4f3d4b0",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "107b56dc-cd8c-490e-a65b-e47507b70867"
        },
        "item": {
          "id": "1a448a54-7857-4878-8563-9bb270614ca6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "59053320-a747-43b0-8c28-ed6ce198a730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7730c4be-9d86-48cf-a1a0-aa9761095aff",
        "cursor": {
          "ref": "8c87a305-e8b2-4296-a9db-9cc0134fc5c7",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "34ac3221-6653-4791-a2db-70986b7e195f"
        },
        "item": {
          "id": "7730c4be-9d86-48cf-a1a0-aa9761095aff",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "93b631ad-5826-42e3-8a1e-79b7041a8275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d77655-7ac5-4f89-957c-0de3741632b4",
        "cursor": {
          "ref": "6bfec5fb-b9d7-4551-b3e8-572ac106baab",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "53133e97-99b6-4c2c-a34b-3cdf310c66d7"
        },
        "item": {
          "id": "b3d77655-7ac5-4f89-957c-0de3741632b4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "128b8f6d-8938-46db-90b0-c2013f1ebf19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c248a8-cf04-4763-b88e-67b377c2a248",
        "cursor": {
          "ref": "d5b12db8-4a35-4643-95a1-e3b241a9950e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ef23e6dc-9a60-4c7a-a965-85808b650027"
        },
        "item": {
          "id": "e3c248a8-cf04-4763-b88e-67b377c2a248",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d7c92e29-aed4-46ae-aa79-0ecd2f9d666a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1dc5fe-8c13-4725-8482-c52b8895de28",
        "cursor": {
          "ref": "6c7e0eb0-a3ff-454f-951b-a6e7b433c65f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2633a988-124b-45a2-9d47-259786f2b4d1"
        },
        "item": {
          "id": "9d1dc5fe-8c13-4725-8482-c52b8895de28",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "88ed2bda-b96b-420e-adff-761f1f8284f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab5e1c4-2fee-4568-abca-8897c8f869ac",
        "cursor": {
          "ref": "b3795d13-ab3e-40b2-8cfc-7adf23fee9b4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ad095e3f-4c33-430a-95e8-6823e65d8121"
        },
        "item": {
          "id": "2ab5e1c4-2fee-4568-abca-8897c8f869ac",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3774e142-eb9b-4bbf-b5d9-70d67b03d8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d09feb3-5852-467a-89c7-bf97fd5e2ac9",
        "cursor": {
          "ref": "930fab1d-3685-4727-a6b6-32fff2cc5c83",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1120ed9b-d733-498f-93fd-b2120bfbe861"
        },
        "item": {
          "id": "4d09feb3-5852-467a-89c7-bf97fd5e2ac9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "af5dda05-1523-4d1e-bdf5-591426159bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "842abc06-f709-4b71-ac31-40dc3c48384b",
        "cursor": {
          "ref": "a8ac9025-cf9b-4274-93f7-94ffc4965dbb",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0d21696e-c577-4bba-b05b-261a1119b019"
        },
        "item": {
          "id": "842abc06-f709-4b71-ac31-40dc3c48384b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3c2de888-a3eb-4dff-9d91-fe77d104214b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b512878b-5748-4d42-ae25-61b0b88200fb",
        "cursor": {
          "ref": "3211f57c-4b2c-4716-bda5-ec341e1e4f46",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cb699c0a-b074-48bc-80a5-dff0e5c48457"
        },
        "item": {
          "id": "b512878b-5748-4d42-ae25-61b0b88200fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "06e8463c-850b-430f-b4bb-5152da1f819c",
          "status": "Created",
          "code": 201,
          "responseTime": 25,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a34056-6a8d-4e47-a6b6-2cb552f4ccfb",
        "cursor": {
          "ref": "d7747099-9f11-4959-a7b2-a47df35246dc",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a04073bb-357c-4e74-94f1-1c702712d0be"
        },
        "item": {
          "id": "80a34056-6a8d-4e47-a6b6-2cb552f4ccfb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f1a00800-4136-4131-b493-2ac55c757326",
          "status": "Created",
          "code": 201,
          "responseTime": 1261,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b1b761-0d42-4173-8b67-3374f5ae24ae",
        "cursor": {
          "ref": "c05e54c9-442d-4481-9ded-d76515c7c224",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e20acd1e-e94d-4380-b496-a4e663c64d2a"
        },
        "item": {
          "id": "d9b1b761-0d42-4173-8b67-3374f5ae24ae",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "90447215-f736-4167-add3-1d91e1b8a2a2",
          "status": "Created",
          "code": 201,
          "responseTime": 24,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0452aa8-9d1e-46e1-a61e-62f809bf1899",
        "cursor": {
          "ref": "24b65e22-857b-46c5-96fa-c21fc9bee132",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "86c3108a-b326-4ff5-802e-552f80314678"
        },
        "item": {
          "id": "a0452aa8-9d1e-46e1-a61e-62f809bf1899",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8574ac19-cfdb-4c37-8b31-9f3defe5fd72",
          "status": "Created",
          "code": 201,
          "responseTime": 26,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c42b54e-5d4e-4d06-9be9-0c89731c96e4",
        "cursor": {
          "ref": "de7376d2-d7ea-4e5f-ab69-473e56c80215",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5b1e18c3-9565-4c1c-b35f-0118e71e4895"
        },
        "item": {
          "id": "6c42b54e-5d4e-4d06-9be9-0c89731c96e4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f16bc4dc-347d-406a-8ba7-dc293080ae0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "54303686-f7e2-49b1-95d5-74e46f2df91c",
        "cursor": {
          "ref": "66b45fe7-923d-41ee-8cd8-b5015bbe6d7b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "985ac21d-f88d-40b7-9645-695a552e6470"
        },
        "item": {
          "id": "54303686-f7e2-49b1-95d5-74e46f2df91c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c15d695b-d206-4ebd-8f78-249da55b2ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54303686-f7e2-49b1-95d5-74e46f2df91c",
        "cursor": {
          "ref": "66b45fe7-923d-41ee-8cd8-b5015bbe6d7b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "985ac21d-f88d-40b7-9645-695a552e6470"
        },
        "item": {
          "id": "54303686-f7e2-49b1-95d5-74e46f2df91c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c15d695b-d206-4ebd-8f78-249da55b2ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705b9caa-5d57-4e03-8cf5-e6a3d48da669",
        "cursor": {
          "ref": "c5252468-acc5-4ff9-b39a-7f25441ae2aa",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0c9888df-c44d-4bae-9ea9-fd60123c28b3"
        },
        "item": {
          "id": "705b9caa-5d57-4e03-8cf5-e6a3d48da669",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0acab669-ee74-43ce-ae8a-5bf9dbc73be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e4e756-d380-4102-87f5-47c5cae5907a",
        "cursor": {
          "ref": "4df01ac1-78f3-4031-b96a-ad6925fa8ae5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8c1235b2-6ce7-4de0-a9fa-f62939abbe7d"
        },
        "item": {
          "id": "08e4e756-d380-4102-87f5-47c5cae5907a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "372bc872-c062-49a6-8b99-7e1933409a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9293f299-5188-439c-aaa6-11382537be99",
        "cursor": {
          "ref": "4ba8e0bb-b959-4fe8-835d-3915c494d733",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac215d72-1d33-4488-a2cc-924489ed62cf"
        },
        "item": {
          "id": "9293f299-5188-439c-aaa6-11382537be99",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "391d4b5c-2e53-4b17-bb16-537c7fc3e3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a054da-c903-4b68-bbc1-0db0093130e8",
        "cursor": {
          "ref": "8ce35dd0-bf30-4252-8b1b-1d3c4d524fcc",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e60f1055-815d-406e-a0e1-893f30226b02"
        },
        "item": {
          "id": "c2a054da-c903-4b68-bbc1-0db0093130e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "665374cb-afb1-4719-a3b9-5bfbaba8ff4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9631634-4e64-4a8f-a534-c29982fc6b2c",
        "cursor": {
          "ref": "560a3a00-2072-4d12-ba70-777db907d48f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b16f89f-737e-4ee4-900b-e98e06e0aa1b"
        },
        "item": {
          "id": "a9631634-4e64-4a8f-a534-c29982fc6b2c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "165140a7-5005-4ad4-853b-0869ff42419a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e83c9b-c5a8-4ea4-82bd-4103d36b073a",
        "cursor": {
          "ref": "ec5fa198-aa37-4ea1-bdc8-9c0bd9437d48",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2da53f1a-fdab-4350-a463-c80dec34aca1"
        },
        "item": {
          "id": "e4e83c9b-c5a8-4ea4-82bd-4103d36b073a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a36826fb-6ba4-4cbc-aa17-5763a4aba81e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "2a74fe55-6a04-468c-be44-0631c4acc84d",
        "cursor": {
          "ref": "f6a0574c-d745-453c-8e30-84370a4fa3a0",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5b57c9f6-b7cf-46c0-a1c0-567b522bc23f"
        },
        "item": {
          "id": "2a74fe55-6a04-468c-be44-0631c4acc84d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e7ea792e-e7a0-4052-ab11-d4a4a67eba77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ad9b45-7e0d-4879-8f81-60b0634d2459",
        "cursor": {
          "ref": "c25ee2e8-4eaf-4714-affc-7ba65bd000de",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "27e40c62-866c-4aab-acd2-c4c2fb925d7f"
        },
        "item": {
          "id": "07ad9b45-7e0d-4879-8f81-60b0634d2459",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "637f4823-64af-4c53-87be-af90287ee882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988fa08a-f683-4682-aed5-be77922d0f65",
        "cursor": {
          "ref": "c6fc96e6-667d-4d62-a5f3-66bb4d773596",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "87ec331c-6210-4f9e-badf-fdbf0ee74a0e"
        },
        "item": {
          "id": "988fa08a-f683-4682-aed5-be77922d0f65",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aecbe7ed-36ba-4334-a34e-88f2dcf0b096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bb1e1b-4be3-4e3f-89fa-5c7399b4283b",
        "cursor": {
          "ref": "99db40f9-d718-4bee-801b-be20e8b9efde",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "876e4368-5e0b-40ac-a318-30bcb02e8bb4"
        },
        "item": {
          "id": "b9bb1e1b-4be3-4e3f-89fa-5c7399b4283b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b62603e9-a121-4659-926f-71b75674d08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a30377-d337-4983-b12b-ad608ee87fcc",
        "cursor": {
          "ref": "4ed1a9d1-d42e-430e-9b89-9ff829b90027",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ffec66cf-b8b1-4860-91bc-30fed36b8f6f"
        },
        "item": {
          "id": "96a30377-d337-4983-b12b-ad608ee87fcc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eddcafb3-ab76-4f40-8f5d-46d20f4d5077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b450170a-f152-42cc-9f88-44c24cbf6aa9",
        "cursor": {
          "ref": "cf144acd-5a8f-4a99-a9d8-eee0706f5d56",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cda0c562-b291-4279-b0a7-b428bc80cd1e"
        },
        "item": {
          "id": "b450170a-f152-42cc-9f88-44c24cbf6aa9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "feb0f3a9-262e-4f7b-a27c-d3641dc2f674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe50464-9370-4de1-acf1-e76744e68d46",
        "cursor": {
          "ref": "3476ae19-7513-47f2-ad89-60b963112852",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "15584aac-9626-4445-b3b0-be531e879406"
        },
        "item": {
          "id": "fbe50464-9370-4de1-acf1-e76744e68d46",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "744ca1ba-1858-41ea-9837-2a62a502a732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be32805c-37d8-46da-a7dc-83e641ac23a1",
        "cursor": {
          "ref": "c7ad486e-7937-4802-ae6e-5e768019c3a3",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "39f93eb8-5da7-4791-9dba-274793230cde"
        },
        "item": {
          "id": "be32805c-37d8-46da-a7dc-83e641ac23a1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a4ea2db0-1439-48fa-ad52-a673e96c468f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3336f5d-2ae3-4e4b-8c5a-59f7d12015f5",
        "cursor": {
          "ref": "3a63b16b-a1e1-445d-b3d6-2b5d8a5dfbc8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9f5010a2-ddf3-4d34-ac2e-56e605a16a2c"
        },
        "item": {
          "id": "d3336f5d-2ae3-4e4b-8c5a-59f7d12015f5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "87b9cf7f-85cb-41f5-8af9-358acdf2935d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c359d21-b210-4621-92a1-378875a2459e",
        "cursor": {
          "ref": "145d0d43-1bde-4aaf-b4f9-439ee61d9a9e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "834f75d6-27c8-474c-869a-e1d898be2cdd"
        },
        "item": {
          "id": "2c359d21-b210-4621-92a1-378875a2459e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "518e4185-8919-4c74-9ba0-9b6565b292cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d163ba-f884-42d7-9aff-1cf0ae784fc6",
        "cursor": {
          "ref": "e1c1da75-0f74-49c8-8b0b-3d2a7cc37e6d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c729112f-029b-42ce-8621-4a67316396f6"
        },
        "item": {
          "id": "38d163ba-f884-42d7-9aff-1cf0ae784fc6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9b7e0638-e935-4c02-8041-270bc33ab047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881b49f5-2391-45f2-beb4-59adb7e7b083",
        "cursor": {
          "ref": "1e802568-381a-4372-bdb6-dd82ce5dc72c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0ba4e0d0-cff6-4edb-ae70-6fad1a7ef06b"
        },
        "item": {
          "id": "881b49f5-2391-45f2-beb4-59adb7e7b083",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "12c14c7c-5916-4f1d-a2b0-9e49b419e92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b320e4-e1d7-4f3d-a8ab-9cc3f2d44b2f",
        "cursor": {
          "ref": "b89516bc-886d-49d6-9aff-b4bc42b6b344",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "34dd047d-8366-481c-9bb8-2749c668a4f0"
        },
        "item": {
          "id": "31b320e4-e1d7-4f3d-a8ab-9cc3f2d44b2f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1103b73e-9b78-4349-9b50-0b55bfbcb920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e8db79-fc97-4e75-be04-53828ee125e7",
        "cursor": {
          "ref": "86230720-06d7-4410-87ef-79aa30330db2",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c2504546-abcd-4610-be6d-c7db418477c8"
        },
        "item": {
          "id": "18e8db79-fc97-4e75-be04-53828ee125e7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "db7c2d76-8446-4589-9ac5-c57286bdb4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3ae4d9-9117-43d5-97d7-2a30393ae538",
        "cursor": {
          "ref": "2f84e05f-c5c0-4144-9dbd-a77c030b5214",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "14233d57-f729-433a-ad62-7419b020d08e"
        },
        "item": {
          "id": "9a3ae4d9-9117-43d5-97d7-2a30393ae538",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b4ba845d-79e5-4883-9f66-8ea8aafea19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481004d9-9b55-4aed-9132-a080eaf8baaf",
        "cursor": {
          "ref": "bee2c06b-44bf-46b7-a0b5-7e43f76e6f5f",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6b653786-2f89-4aba-a795-45f08cffff5e"
        },
        "item": {
          "id": "481004d9-9b55-4aed-9132-a080eaf8baaf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90763a58-d156-45b8-8605-1f05c65c65c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02c3b17-d2af-4552-a262-e28371729ed7",
        "cursor": {
          "ref": "7edf9479-e464-4687-ab61-740319a7ce30",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0cd8b512-a157-42f8-a0e2-3adcdbc66323"
        },
        "item": {
          "id": "f02c3b17-d2af-4552-a262-e28371729ed7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "59452f17-4ad1-4dc9-b203-6cf3037f4d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa20c07b-5925-4021-8515-6b3b88581f95",
        "cursor": {
          "ref": "02f8ca1d-17da-47a3-b789-c7443e790555",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a7cefa2a-21e5-4621-b848-0c2640b6e872"
        },
        "item": {
          "id": "aa20c07b-5925-4021-8515-6b3b88581f95",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "966d4cf7-a525-4e05-a8f8-49cbfe5cad04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c069990a-a780-427f-a601-c99ee8cc5d87",
        "cursor": {
          "ref": "7005c5cb-d002-422d-b55b-f556d64015c9",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "de1f3bca-af7e-450e-83bd-8dee3568e85f"
        },
        "item": {
          "id": "c069990a-a780-427f-a601-c99ee8cc5d87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f12c0e9e-dcc2-42e6-baf2-7b683188f391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63096a8a-c317-4b7a-9a6b-3428d87b2210",
        "cursor": {
          "ref": "c1fb8ebe-b580-4e00-b02d-4e0d6ee790b4",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a9715ca0-2158-41d2-b08c-2f06a8f0583f"
        },
        "item": {
          "id": "63096a8a-c317-4b7a-9a6b-3428d87b2210",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e9431bbd-2800-44a1-9765-2494cb4cc625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5b491d-e5e0-42dc-8c61-e2c00467c734",
        "cursor": {
          "ref": "2fb49f05-d4ae-4d1f-ad18-8d2ee57eb3e6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "df582b1d-ee8c-4a65-a6b6-add707f21439"
        },
        "item": {
          "id": "9d5b491d-e5e0-42dc-8c61-e2c00467c734",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "22b844c3-3108-4c8d-9cc1-2552d62293c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e72c31-1d5b-4bc0-95d8-da18f435d7a6",
        "cursor": {
          "ref": "439c1a61-cede-4e33-b528-4d8f73e3488d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "071f2f8d-bb55-4308-bf71-0b0d886ea84c"
        },
        "item": {
          "id": "22e72c31-1d5b-4bc0-95d8-da18f435d7a6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "662ab7dc-ac6a-4abd-aca7-61b36153cc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535d8ad6-da43-4a5b-b9e3-bdf192997d61",
        "cursor": {
          "ref": "7c750ef3-2620-412f-9578-0f641c006149",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0649a7e7-5cf1-4bdd-9118-8908441933cb"
        },
        "item": {
          "id": "535d8ad6-da43-4a5b-b9e3-bdf192997d61",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6fbfeccf-9417-4123-b15d-0fb9a87bbe42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1370e3-8efe-495f-ae66-a2d357fd1a0c",
        "cursor": {
          "ref": "66ae7ad5-4b02-4f27-8596-19a277e75bfb",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b532a92d-0154-4502-baac-1c0198992f5f"
        },
        "item": {
          "id": "2b1370e3-8efe-495f-ae66-a2d357fd1a0c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d20203ad-0d51-48d4-8120-71c7c830d398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97bfa2a-fb8d-460a-838f-c37fdfbf239d",
        "cursor": {
          "ref": "8446f9f3-7924-4d34-bc98-2033f45000ee",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a9b88741-5eb7-4059-9c34-87e4fd61f915"
        },
        "item": {
          "id": "d97bfa2a-fb8d-460a-838f-c37fdfbf239d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f2f04aab-6204-45e0-9def-582e65fcb7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e62bdc-304e-4648-8301-8a862f6e76b8",
        "cursor": {
          "ref": "80c43c2c-e377-4866-9d60-a4ac724cf9b2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dd5f4726-7620-41a7-85ee-aa02ffc7de5d"
        },
        "item": {
          "id": "d3e62bdc-304e-4648-8301-8a862f6e76b8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "34293667-c513-4060-b656-fc217620a54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b1c4f2e1-d49b-4a57-b32b-610c99eef3cf",
        "cursor": {
          "ref": "d21022e3-506e-401e-a9c1-06dc72e0946f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "04b55d6a-c7fe-4b7d-8b1b-08ff83fcc621"
        },
        "item": {
          "id": "b1c4f2e1-d49b-4a57-b32b-610c99eef3cf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b0f08254-95d0-4757-93d4-656a8a6f891c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4e3aa8e8-ee7f-4426-8786-b91321d668d3",
        "cursor": {
          "ref": "857ff9f0-aa00-48f8-8c11-afbce4e21cf2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6c48f83a-3051-49f0-a05d-b8b5ba59ce06"
        },
        "item": {
          "id": "4e3aa8e8-ee7f-4426-8786-b91321d668d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08dd4d1e-c241-48cb-8411-d38bd3484496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3aa8e8-ee7f-4426-8786-b91321d668d3",
        "cursor": {
          "ref": "857ff9f0-aa00-48f8-8c11-afbce4e21cf2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6c48f83a-3051-49f0-a05d-b8b5ba59ce06"
        },
        "item": {
          "id": "4e3aa8e8-ee7f-4426-8786-b91321d668d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08dd4d1e-c241-48cb-8411-d38bd3484496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226c9d76-5bff-4813-9565-5259c8e0eef6",
        "cursor": {
          "ref": "4948ae26-a62d-451f-aa85-0151783a53d5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "490f7b10-739a-446a-8038-befcc6154a1b"
        },
        "item": {
          "id": "226c9d76-5bff-4813-9565-5259c8e0eef6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "18cd900e-a019-4956-8b0f-c94a799892bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074ac463-7b2c-48a9-81df-213e566770ae",
        "cursor": {
          "ref": "48a846c8-7d5f-416b-89a0-9cfc192743ea",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f4118e12-1274-4b43-ac1f-52e13fdfc041"
        },
        "item": {
          "id": "074ac463-7b2c-48a9-81df-213e566770ae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7c6590f1-548e-4751-be60-d9b651e8c220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be18902b-2c10-49b6-9776-511c3be5476c",
        "cursor": {
          "ref": "59f0550e-d731-47af-9015-5230a1ff5280",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c308603d-0c28-416b-a7de-57c2fcb657ed"
        },
        "item": {
          "id": "be18902b-2c10-49b6-9776-511c3be5476c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "180d4f1c-6757-4d1e-abd4-03d621845c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e34332-25e1-4995-8272-3b15f46be868",
        "cursor": {
          "ref": "42812666-c22d-4173-a682-06fe11836035",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6cad52b1-e72a-4421-b0ae-3b9cb8e24ec3"
        },
        "item": {
          "id": "08e34332-25e1-4995-8272-3b15f46be868",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "75691ca4-81d3-493d-807e-0d64064aa150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2eef23-52ca-4538-a9fa-2b6560228e42",
        "cursor": {
          "ref": "c528ff3c-2ac7-4e53-b739-6a67c0ca6121",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d6f3c9d3-32e6-49c3-a5b8-0f3fd2126f3e"
        },
        "item": {
          "id": "1f2eef23-52ca-4538-a9fa-2b6560228e42",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bb9b92d5-e1a3-41a6-9107-c3d6634312c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cacbd69-c80f-48bc-bf7f-ca529c6eab50",
        "cursor": {
          "ref": "b6b167a2-7e66-413b-8e69-382ec3acc5a9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4818d855-45ee-4820-9a79-746bea48f890"
        },
        "item": {
          "id": "2cacbd69-c80f-48bc-bf7f-ca529c6eab50",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2e437bf7-b8ea-4ac0-b668-5c81bec003ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477a4cd5-1e0c-4e85-8fc0-a2393f963098",
        "cursor": {
          "ref": "ecdc9c73-45cd-473f-903f-dff3d35b5cb9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "205f9116-c026-4eff-afc4-ec5ed7b435cd"
        },
        "item": {
          "id": "477a4cd5-1e0c-4e85-8fc0-a2393f963098",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "62435320-760f-4fb1-beea-fdca976e7d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ff5c63-b2ca-463b-bdb3-00cec710dbd7",
        "cursor": {
          "ref": "f549e06e-1da5-41e9-b242-718afbaaaa4e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6bc26dcd-96c8-45fe-a993-d88b3ce26bc0"
        },
        "item": {
          "id": "39ff5c63-b2ca-463b-bdb3-00cec710dbd7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ec82c2f-a4c2-4e8c-b7de-b00c5839b4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be51402-f97d-4186-a7b8-61a3139739b4",
        "cursor": {
          "ref": "a13bfc7f-393b-4f5c-88fc-6aaae6a7849b",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "79b6e797-4fc6-4c8e-ba72-30e10917a7f4"
        },
        "item": {
          "id": "1be51402-f97d-4186-a7b8-61a3139739b4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cbb19d64-ae58-4adc-84da-6e1ca54d3a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c924f34-c658-4515-88cb-999127548be9",
        "cursor": {
          "ref": "75373e29-5a96-475a-b0fc-9c3d69951333",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cf46fb99-e1ab-417f-9182-060e4a7e9ec9"
        },
        "item": {
          "id": "6c924f34-c658-4515-88cb-999127548be9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "117428d4-0e2e-494d-af24-ffcecfa85944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fe72c2-063d-49ea-a4c0-32f9ffc24796",
        "cursor": {
          "ref": "86f9e47a-5085-4cc8-8baa-c6af1af648e5",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cba97870-691e-4d45-98c9-483f1ec44cc8"
        },
        "item": {
          "id": "88fe72c2-063d-49ea-a4c0-32f9ffc24796",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bd015467-b2bb-4a70-9229-c8a5208619f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fec4e7-71f1-41b6-a483-c70ed390691e",
        "cursor": {
          "ref": "766e2956-277c-43fc-ac9f-f57f5393732a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4c77dd4b-cefb-4dd1-929f-543dd8dcaded"
        },
        "item": {
          "id": "40fec4e7-71f1-41b6-a483-c70ed390691e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ff8030f8-fffd-44b0-9325-2f717611ee59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9e3127-ed37-4200-8481-57ab60fc2ff3",
        "cursor": {
          "ref": "2dca7f88-f4ef-4e55-8633-ef000e7cf874",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d1a7aa9d-2137-4b3c-9d62-f259d48dd74d"
        },
        "item": {
          "id": "5f9e3127-ed37-4200-8481-57ab60fc2ff3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0f768d6e-8d21-408a-9ce6-aaf387c7437b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fabb04-5299-40ee-b8ad-1dcb010f2a78",
        "cursor": {
          "ref": "c03adc83-e1c4-4279-bdca-b07faf670f16",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "efa2e596-ccae-4e9d-bc38-0eab71c56f51"
        },
        "item": {
          "id": "c1fabb04-5299-40ee-b8ad-1dcb010f2a78",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ef6341ea-2c97-45d2-8246-528cf51e84cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d19963b-ce93-4a4c-b2d6-9ba6dd3125ea",
        "cursor": {
          "ref": "66b60493-d3d7-426c-b509-89995418368c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8f4729db-5f99-41cd-b9e9-8b82ba55d33d"
        },
        "item": {
          "id": "1d19963b-ce93-4a4c-b2d6-9ba6dd3125ea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bf6a8fb0-3d14-46c4-bb73-9c0451714616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600ae1ab-a121-4661-9d4d-6c986bfbc6ab",
        "cursor": {
          "ref": "ecc94fd9-0f07-4c97-87c7-ccb6cc5e7eab",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "70eda259-cf37-4754-9ef9-388ff5e0b1be"
        },
        "item": {
          "id": "600ae1ab-a121-4661-9d4d-6c986bfbc6ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d4febe62-898d-49d3-8632-6f6ed50ab0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc35913-4315-4506-84ae-d80af57c9b76",
        "cursor": {
          "ref": "aafdad95-5748-4af0-9ecf-5685945064dd",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a6d685e9-6456-4ec8-9d3f-f110420657c0"
        },
        "item": {
          "id": "4bc35913-4315-4506-84ae-d80af57c9b76",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dd1a345a-c77c-4432-9b27-22510c88b5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1e348c-de29-42d6-be64-747f456eb42d",
        "cursor": {
          "ref": "cba72a96-5536-433b-9df9-335a662078b7",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1e537db1-79aa-4c5c-9e06-c126d0af346f"
        },
        "item": {
          "id": "8d1e348c-de29-42d6-be64-747f456eb42d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "18edf444-5182-4f13-a1cc-59fd7386e363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75541ba-a994-4b3e-8642-715591ecf6fd",
        "cursor": {
          "ref": "fcd4347a-facb-48d3-8d79-be0e65793df6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df8bf427-e2bd-4bed-bd61-a905cf175022"
        },
        "item": {
          "id": "b75541ba-a994-4b3e-8642-715591ecf6fd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6acd16ec-2516-4031-a685-93b80e81e885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293ed6cd-da6a-446f-8ced-8aabce456884",
        "cursor": {
          "ref": "b694779c-0bf1-42c2-a7ac-48fe987d55c1",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8c33be2e-7a22-4868-90ad-21cd805a8735"
        },
        "item": {
          "id": "293ed6cd-da6a-446f-8ced-8aabce456884",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ecbb2a8e-d700-429d-aa69-76b879b24faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b22d1a-8aef-41ef-91b2-c4830b428a0a",
        "cursor": {
          "ref": "c70b25b4-1992-4578-b182-e2020d746ba8",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "61f8f35b-3cf0-4192-b456-ca55299150c3"
        },
        "item": {
          "id": "a2b22d1a-8aef-41ef-91b2-c4830b428a0a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "019c7238-c542-4a54-af6b-ca7c3b7a4988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2939cb-8e5b-49e8-a503-c9ab229d6b8d",
        "cursor": {
          "ref": "9f520bf4-de90-487a-9760-513210ae6189",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fb96e6e1-1117-4eaf-ade7-8abdf4991115"
        },
        "item": {
          "id": "9b2939cb-8e5b-49e8-a503-c9ab229d6b8d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e44e2121-6eb7-492e-912e-3c712ad79b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13aa844d-5884-43dc-82d5-cd12b1ed51e3",
        "cursor": {
          "ref": "80596300-95fc-4dc4-806c-321669e6d8e7",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fdc129c5-6d6b-43f2-b046-f80e21156d8b"
        },
        "item": {
          "id": "13aa844d-5884-43dc-82d5-cd12b1ed51e3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5177551a-9675-456d-9256-e53083f67ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693052a9-f191-4ee3-9d24-be8f40d91fba",
        "cursor": {
          "ref": "493814c1-9b49-4de5-b3ec-60c73b4b4128",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6ce367e3-b9c5-4267-82c7-2f4baa69ce9b"
        },
        "item": {
          "id": "693052a9-f191-4ee3-9d24-be8f40d91fba",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a39604f6-eadf-4ff0-94da-1a3bdc758046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9af0fa2-b8b2-4a1a-9d7d-2797970a79c4",
        "cursor": {
          "ref": "ce5d5163-fc86-4752-95a6-9a08e4449903",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ebc836cd-fcf7-4595-b693-0ea229cba1f9"
        },
        "item": {
          "id": "d9af0fa2-b8b2-4a1a-9d7d-2797970a79c4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0a6e036c-28fd-43de-a909-637e77af5e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6915f120-f8b5-42fe-a052-7caea9c048dd",
        "cursor": {
          "ref": "2ba4eb06-cf5a-4beb-bbca-a01bc0b530f2",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "015ae390-4419-4db5-a38b-d3d2b436798d"
        },
        "item": {
          "id": "6915f120-f8b5-42fe-a052-7caea9c048dd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "eaf4af67-86c2-4c52-9cad-28d6aa5237cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83da009b-95ed-46c1-82ce-efe2ba665685",
        "cursor": {
          "ref": "3887f3fe-24cc-4de6-b608-297028dd3007",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7e5848f5-326b-4780-94b7-ac4607d16caf"
        },
        "item": {
          "id": "83da009b-95ed-46c1-82ce-efe2ba665685",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "45aa2d82-c85f-4487-b95a-bc1ed4394862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc938e92-d986-40e9-8848-143a7791a5cd",
        "cursor": {
          "ref": "3956dd1c-e6ff-4c3a-a040-f39302fdb995",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b8b5c4e-247f-4aba-9d3b-5b02d694d285"
        },
        "item": {
          "id": "bc938e92-d986-40e9-8848-143a7791a5cd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "933d4a00-e284-40a8-bb11-acd391a62c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4361e66-9315-45f9-8227-19bdc8a19b1e",
        "cursor": {
          "ref": "aa88f6f0-f114-4671-8c59-f45e484af655",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4c38921c-75b8-43a2-9a5a-b6bde0ece926"
        },
        "item": {
          "id": "f4361e66-9315-45f9-8227-19bdc8a19b1e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7dfdedb1-9d53-4dc6-bf9e-f8be5e94a999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083d8afb-eece-47b7-b53c-1a7bae069f58",
        "cursor": {
          "ref": "a1949812-a2af-4846-adf9-a3d6cc9ca635",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6291c2d1-abdb-4057-ac39-4b001a0f75bc"
        },
        "item": {
          "id": "083d8afb-eece-47b7-b53c-1a7bae069f58",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e00a3e85-8a6a-42ae-a1d8-77a448b4e1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67125e9b-72dc-4abd-9218-f285b377206e",
        "cursor": {
          "ref": "6e074835-daa9-43a6-a174-e53665e66fdf",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4dd6827c-ded3-42c9-981e-fe4572eb7a54"
        },
        "item": {
          "id": "67125e9b-72dc-4abd-9218-f285b377206e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d594cec2-ead8-4501-b576-ba96e51dcbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e1e105-c96e-4ae2-8460-6899363593a6",
        "cursor": {
          "ref": "c5d3c0e5-3cd0-4c8b-94d7-6db8300b5bc6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "23867d65-b823-487b-a0ab-521d6acd10fd"
        },
        "item": {
          "id": "10e1e105-c96e-4ae2-8460-6899363593a6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3fd4a459-3775-48bd-aa57-fe8823151861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062c2190-c16c-43b2-8f70-6954b5d126af",
        "cursor": {
          "ref": "685a1124-88bc-44ad-91e3-0092251cdd56",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0b7817ba-186e-4ea9-971c-b7df27206074"
        },
        "item": {
          "id": "062c2190-c16c-43b2-8f70-6954b5d126af",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2b2aee6f-84b1-4d9d-8cc6-cd1b1d8602fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301129e5-188a-4d1c-a517-f7550fa97f8d",
        "cursor": {
          "ref": "6c6dfacd-d454-4b28-9a23-20dd8191d57e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5e268920-e2c8-4e33-97b5-8f31435acc44"
        },
        "item": {
          "id": "301129e5-188a-4d1c-a517-f7550fa97f8d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8fcde0cb-31e6-4dd5-99e8-3e4c0e54b71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58c88b0-00c3-43ae-bbd6-1249d0fbdf05",
        "cursor": {
          "ref": "3f1ac87d-d901-4362-bca9-6e49d98c93b0",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "faeaa502-8e93-4398-81ef-5f3659c6744e"
        },
        "item": {
          "id": "c58c88b0-00c3-43ae-bbd6-1249d0fbdf05",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "961d8992-03d1-42d3-9865-587beea0482d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa066c61-aaa2-4891-b829-490b3585d3d9",
        "cursor": {
          "ref": "dc2afbf1-c81f-4cb5-8bcd-cca31bce65de",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8f8d925b-57d4-4a2a-a4fb-92669dad02f3"
        },
        "item": {
          "id": "fa066c61-aaa2-4891-b829-490b3585d3d9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b61ce341-9279-4e85-b9f9-cc72eb903d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7dd6ed-783c-47aa-8623-860b400b15b5",
        "cursor": {
          "ref": "1fd5039c-5a61-464c-9b06-d01288536d24",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "91a2e80e-bf17-4954-a49c-34c3c666ba1d"
        },
        "item": {
          "id": "5c7dd6ed-783c-47aa-8623-860b400b15b5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e0a35efa-7b17-4608-acfc-e050f0eab103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073ad61b-556f-4680-aef4-b53f78450d01",
        "cursor": {
          "ref": "c15cc41e-040f-4474-aa67-871e7aa339a8",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "07493ba8-e9f2-4715-8e8e-0a579367455c"
        },
        "item": {
          "id": "073ad61b-556f-4680-aef4-b53f78450d01",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a817c54c-5bcd-4550-81f0-1e783b01fbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab474f0-eb14-42fa-86d9-1032391e8e3f",
        "cursor": {
          "ref": "b9758700-2ca0-4353-9839-631d646ca683",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "36fff2c8-baa1-4f00-a1bc-5101388e5742"
        },
        "item": {
          "id": "5ab474f0-eb14-42fa-86d9-1032391e8e3f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5cbca5fb-a6eb-4060-a0e3-ec1981513281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7372af31-4196-4f13-bffe-e2f7aafd0159",
        "cursor": {
          "ref": "3829253e-516c-4be7-9d6a-bce1084038be",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba44aaad-893d-46b5-b9a2-b1e2a3e50360"
        },
        "item": {
          "id": "7372af31-4196-4f13-bffe-e2f7aafd0159",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "37c52007-4f62-4178-a44b-a2e7dc0a063c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6e9ccc-cc14-4edd-97b6-8526fca9e0e8",
        "cursor": {
          "ref": "928a47b9-0202-434e-ae18-f4170b0cfe1e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "068631f1-fec3-47f1-a193-49a351f573a0"
        },
        "item": {
          "id": "df6e9ccc-cc14-4edd-97b6-8526fca9e0e8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6c87f568-f4ec-4b13-9f31-d2030605c053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8ee999-095d-41a9-a921-ec9370c0d1b2",
        "cursor": {
          "ref": "52dbcb94-2a1d-4a2d-912b-d6f4f9760605",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "effbb902-7e3e-4928-b6bc-55cc613aeac5"
        },
        "item": {
          "id": "8f8ee999-095d-41a9-a921-ec9370c0d1b2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9adeac2a-5b13-45fc-a4e3-c8bbe016428d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb4deae-a8de-428c-9997-45d4f62ad67e",
        "cursor": {
          "ref": "6eb2102b-e49c-4a41-ba89-201b6a1ab950",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cf1bfef0-b0bd-4fd2-bb93-fc5d462d84e2"
        },
        "item": {
          "id": "feb4deae-a8de-428c-9997-45d4f62ad67e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a81dd662-5411-4648-b502-8fc88559b958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328d43e3-d14f-40d5-a4d0-7681e967074e",
        "cursor": {
          "ref": "b0e7091d-439e-4ea7-ac56-0c6094d07b0c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "baba751f-4509-459c-a50e-94250a689765"
        },
        "item": {
          "id": "328d43e3-d14f-40d5-a4d0-7681e967074e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0a961701-f1b3-4c53-9ea9-6ac8e2578cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0107e0d0-f16f-48b2-8d62-698eaaf955ee",
        "cursor": {
          "ref": "7c6ee054-81ad-472e-8a7b-b1987aa9db5c",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9e3e05cb-0842-4692-8e8c-d14b1a54f919"
        },
        "item": {
          "id": "0107e0d0-f16f-48b2-8d62-698eaaf955ee",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2b7158cb-7809-4964-a507-70aa66d01a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe76ccf8-714c-4235-a149-9ceace3c5172",
        "cursor": {
          "ref": "63b7b928-84f1-41d8-b9d7-7c453a39c2c0",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4417474b-0445-4736-b641-bbde7032ccc4"
        },
        "item": {
          "id": "fe76ccf8-714c-4235-a149-9ceace3c5172",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "72e94822-68c8-42a6-9e20-6845c4283cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9e04f4-2ac5-4493-95be-b6fa7316ee25",
        "cursor": {
          "ref": "6a8bd37b-cf7c-443b-a113-2122707f27de",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ca678b8a-6bb8-44a9-9f52-333de1f3e11f"
        },
        "item": {
          "id": "ee9e04f4-2ac5-4493-95be-b6fa7316ee25",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "14a1ee7f-f56b-4420-8e93-29cf5a691e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcb9594-7acf-4e2a-93d9-875d3a20c9ff",
        "cursor": {
          "ref": "79c5cb87-3dbf-4dbb-a906-08f988f35084",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4a63b570-55aa-4425-b6c9-9422febad53e"
        },
        "item": {
          "id": "4fcb9594-7acf-4e2a-93d9-875d3a20c9ff",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c52a8a65-fcc4-4c38-a27a-eca41fcda9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed052d8d-3517-40d9-971f-364f1b0b515d",
        "cursor": {
          "ref": "f62fa905-4ad7-419b-bbc2-41f9cd7d0a9e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3acb52ed-f5c8-4ba9-af0a-20fe8bc8569b"
        },
        "item": {
          "id": "ed052d8d-3517-40d9-971f-364f1b0b515d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "709b6f10-ce00-480c-9cd2-91725339fd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336e9d94-e691-4f6e-917e-774b347af33e",
        "cursor": {
          "ref": "002d3445-c555-4c0c-889e-1f28952da0fe",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "eef2a1b1-7392-4c01-89fd-949b15db19fe"
        },
        "item": {
          "id": "336e9d94-e691-4f6e-917e-774b347af33e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9c042e39-3634-48aa-bd38-c4e5fed51609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d43d1f1-4662-4385-a6ac-71ec019a936c",
        "cursor": {
          "ref": "ef8e197c-7d93-4d91-8f35-43720cb2f19a",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "52245114-f022-4b34-bb7c-7cd99ebce7ce"
        },
        "item": {
          "id": "9d43d1f1-4662-4385-a6ac-71ec019a936c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "14b9e6a6-3445-4c76-95f0-f476da110093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1030f3ae-709b-417e-9471-4854659da7d8",
        "cursor": {
          "ref": "ef247e36-5686-4aa4-a039-a310edace9c3",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4f2937ca-1010-4d08-9cf3-87fe88c01289"
        },
        "item": {
          "id": "1030f3ae-709b-417e-9471-4854659da7d8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ba6a35c1-420b-4d1c-8386-3ae13142eab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8ad967-60f4-458b-aa4e-694b79c73a3b",
        "cursor": {
          "ref": "162e1410-bb7f-458c-af3e-af1ea5c1af28",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5ef99e2c-b599-4487-b42f-bb05894370c4"
        },
        "item": {
          "id": "ca8ad967-60f4-458b-aa4e-694b79c73a3b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef14544e-fe25-4541-bed0-537f346a146a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e675f80-63d8-4e81-9aa7-c1fb77b6c6c5",
        "cursor": {
          "ref": "51d1f5b1-1e05-4371-95c9-e127f6b43468",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c0b1010d-8e15-4549-8ef2-e404cd0f2cfb"
        },
        "item": {
          "id": "4e675f80-63d8-4e81-9aa7-c1fb77b6c6c5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fe29dd86-c0eb-4592-95b4-33bf85faf9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f85143d-8930-46f9-8619-7021ab24efde",
        "cursor": {
          "ref": "8b061842-0c46-4096-a784-53a02d2d4028",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ec163ff-f5a2-4077-bd9a-699604acba54"
        },
        "item": {
          "id": "6f85143d-8930-46f9-8619-7021ab24efde",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6cb72372-ef29-4fd4-b405-fa6788eac69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b47ac3f-af1d-4c4d-92c0-1259ba4d036e",
        "cursor": {
          "ref": "49d16b4e-e040-4e59-966a-f09441b0256e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4a87eb31-2234-4f74-a0be-a3d5481aa008"
        },
        "item": {
          "id": "9b47ac3f-af1d-4c4d-92c0-1259ba4d036e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "521992f4-3332-42fc-9854-bffe9eb1b516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ff33e5-f5f8-446a-9f29-3d587862f259",
        "cursor": {
          "ref": "5a286ca7-27c5-4331-af02-c8774cb75c91",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "de455190-1b38-4fe9-9633-173eb5f217bf"
        },
        "item": {
          "id": "11ff33e5-f5f8-446a-9f29-3d587862f259",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d52fd918-fc96-4ea2-bad6-6caa376e776d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f6a7a5-a9a2-4562-836e-7334aee4fd57",
        "cursor": {
          "ref": "a8462a34-7977-42de-9474-817e2b5ae4a5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bb0d80d2-fa9b-4fb8-8396-c1825fa76a6b"
        },
        "item": {
          "id": "86f6a7a5-a9a2-4562-836e-7334aee4fd57",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "42e36f06-c6aa-422c-812f-ab4c4fb49ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59c5044-7c5c-4e8d-a6ad-347c86a904c6",
        "cursor": {
          "ref": "bfe9f65e-86a7-432f-b9d2-e0a4d3cbc17e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "845595a6-0100-4695-962c-07b74d8b6274"
        },
        "item": {
          "id": "c59c5044-7c5c-4e8d-a6ad-347c86a904c6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6abf3f18-2275-436d-a663-3ff32594cfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d59da5-491b-485d-94c7-d67b32043bea",
        "cursor": {
          "ref": "b45724fe-2552-45b0-9abc-2a853c1a641c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "58eba036-761c-465c-9065-56d1fe0e7744"
        },
        "item": {
          "id": "d3d59da5-491b-485d-94c7-d67b32043bea",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "11eb8104-eadf-45f7-9991-18b0a604d146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e926c9f-a5f4-4719-b237-3f0fe8c249cb",
        "cursor": {
          "ref": "491b8475-8013-490e-a542-1e316d6473ff",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0bbf5618-3543-480d-955d-3f56fcc055ed"
        },
        "item": {
          "id": "3e926c9f-a5f4-4719-b237-3f0fe8c249cb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "310a6c34-63cc-4ff6-9518-58fbb1949d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275f405a-9d5f-45dd-9924-598a88092a5e",
        "cursor": {
          "ref": "59b189e2-5d1f-4cfc-9515-5ea9fbabcfa3",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5ce03dad-c6bc-4541-abb2-c14cb83dfa48"
        },
        "item": {
          "id": "275f405a-9d5f-45dd-9924-598a88092a5e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "42342939-5901-4870-bf89-4ca7b58b7dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8462d35-b003-44db-a0dd-b83932d74b99",
        "cursor": {
          "ref": "cb910ca7-f6f0-4a96-8878-1e5425bcb05e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bfa47142-d5b1-4cb5-9323-f6327551d1ee"
        },
        "item": {
          "id": "b8462d35-b003-44db-a0dd-b83932d74b99",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1c9d1e48-532d-4594-841e-b6e71b277c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5886ce-a875-43cc-ad25-1bcf4e31f980",
        "cursor": {
          "ref": "7a490579-f90a-407b-906f-98bdbf6e3345",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4dc23ba9-0ffe-4b77-bedd-7092b033705d"
        },
        "item": {
          "id": "8c5886ce-a875-43cc-ad25-1bcf4e31f980",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1f784a97-d7bc-4ad3-a96d-d5b7a56e7811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe451047-ceaa-447b-bea7-3935af644cb8",
        "cursor": {
          "ref": "865a66b3-1d38-402a-972d-f9a520af59bd",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "270f7629-b72a-42da-af47-229784208d96"
        },
        "item": {
          "id": "fe451047-ceaa-447b-bea7-3935af644cb8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3f655920-8129-4931-8f77-bf53379bf6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1926981-75ea-481f-9454-c99f45a2bd55",
        "cursor": {
          "ref": "2fb34cdb-8375-452b-9861-a0e78a8a9f8a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "79776f12-724c-44a0-b0fb-b259ecdf6cbc"
        },
        "item": {
          "id": "d1926981-75ea-481f-9454-c99f45a2bd55",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5eb48a20-ad18-4000-817c-09bd1e25a8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf25ae0e-566e-4025-9f8b-0248f62817ae",
        "cursor": {
          "ref": "ac1d14b4-195e-4ad7-b676-736304a88f44",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b40fcd51-d6c9-42f9-b355-dc189384c034"
        },
        "item": {
          "id": "bf25ae0e-566e-4025-9f8b-0248f62817ae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2a84d39d-ba7f-457a-b513-341480d88b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43618cce-84bd-4442-ab1d-f21da63f7a2a",
        "cursor": {
          "ref": "2b2916de-6e9e-4a8d-8676-ffe3dd71fdd7",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "06c8dd43-4d49-4fd3-b2bb-4d57cf988c65"
        },
        "item": {
          "id": "43618cce-84bd-4442-ab1d-f21da63f7a2a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d6f51704-bfdb-4ee7-84a2-df6e2f75635e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d572fb0a-fdc1-4fae-81ac-ca38d8ad3a01",
        "cursor": {
          "ref": "c35d4437-5729-46f1-b885-62ad43b572b9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5600d3bb-845b-43f1-a299-ded94f748b1b"
        },
        "item": {
          "id": "d572fb0a-fdc1-4fae-81ac-ca38d8ad3a01",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0cecf773-94b7-4985-970b-d6d542c7ed32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29a66df-c5c9-4538-b88f-5d26cac0e456",
        "cursor": {
          "ref": "ec580e33-653e-4cd0-b16f-e920d8bfb0ba",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0a02be7a-6843-4518-90b7-8e9ab1e6be36"
        },
        "item": {
          "id": "c29a66df-c5c9-4538-b88f-5d26cac0e456",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "96d73ab4-c2cc-4ca1-ba97-840a98cbb746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d4429e-1165-4ac4-b363-bc101854b943",
        "cursor": {
          "ref": "7bb4dbf6-0c2b-419d-9f1a-34dd94d7dd6c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b9ec38ad-a426-4eee-8f0e-112532e57320"
        },
        "item": {
          "id": "26d4429e-1165-4ac4-b363-bc101854b943",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7af9945d-eeaf-499d-b6ed-5914ce59ea2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffde3209-6dc6-464e-9075-757064af4f45",
        "cursor": {
          "ref": "7554b126-4eaa-49ac-874e-56d981d7d929",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a91b2104-feb6-4cce-8ef7-4a5f01ea4d2c"
        },
        "item": {
          "id": "ffde3209-6dc6-464e-9075-757064af4f45",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1744577b-760c-4d1e-a26b-5e2674de19be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef51459b-9b87-4b69-b23a-5673b51eb791",
        "cursor": {
          "ref": "7eb56261-8ec8-44ff-807c-56ef86681e19",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b2b2d5ca-2218-4763-9c89-905779df029b"
        },
        "item": {
          "id": "ef51459b-9b87-4b69-b23a-5673b51eb791",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e26eab7b-c8ff-4bca-a2ea-011c323b7f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339598b9-835c-40df-9312-d7e76567d585",
        "cursor": {
          "ref": "3ed084b1-4808-4f20-a25b-f2bf2e6d6b94",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1dfc5d4c-0382-4cb3-892c-05c42beacab0"
        },
        "item": {
          "id": "339598b9-835c-40df-9312-d7e76567d585",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9788cffe-a959-4e77-8909-8c967d2fbd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cda22e5-85ba-44bd-8fe7-474d2c8583fa",
        "cursor": {
          "ref": "0e85987b-3866-4790-a61c-0154e6406ce7",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "46c9bad9-d5b3-47ec-a3a8-f251c97a5964"
        },
        "item": {
          "id": "5cda22e5-85ba-44bd-8fe7-474d2c8583fa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5b1c37fc-78ac-4748-a2a9-ad16199f7865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dafb9d-265b-4b16-856c-69aa0c3cb079",
        "cursor": {
          "ref": "32bac04f-0895-49c1-9c92-7d73c1cb6981",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "60640bfb-829f-4f91-a61c-15c0f1c8a0e9"
        },
        "item": {
          "id": "03dafb9d-265b-4b16-856c-69aa0c3cb079",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c04487de-d20d-4c91-91fc-e90b1e4a8557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed41785-1dae-441c-871a-c10eb9adecfc",
        "cursor": {
          "ref": "02431102-899a-4b99-9760-176652b7fbbc",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bb81cfed-4670-4c58-bd00-5837ea236343"
        },
        "item": {
          "id": "0ed41785-1dae-441c-871a-c10eb9adecfc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bec784bf-1aaf-4ed1-9d4b-27b1e6e83312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76acb9b0-2099-4149-bd5d-6d17c9f58eef",
        "cursor": {
          "ref": "7f8b460a-e669-4ab1-a52f-239e0114c547",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb56f3c5-14f3-47ca-a047-4ed724d9b356"
        },
        "item": {
          "id": "76acb9b0-2099-4149-bd5d-6d17c9f58eef",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0f37160e-0643-4480-8b2a-860f22fd2af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9d9345-95ea-4c0d-859d-ebf07fee7ffd",
        "cursor": {
          "ref": "13cc179e-3c86-4f97-8058-95836f60b226",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d64ee3ed-b51a-4a00-ace4-c1f73ea5a9ac"
        },
        "item": {
          "id": "2f9d9345-95ea-4c0d-859d-ebf07fee7ffd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1c34b375-14f8-4645-83a0-3ebc08239bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5201d4-dc8d-4d7d-9d63-f32fd4012838",
        "cursor": {
          "ref": "60539f86-b7f7-42af-8b2b-1d02a137fe86",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8e023a29-adf7-4880-9ac8-e604c216f324"
        },
        "item": {
          "id": "ee5201d4-dc8d-4d7d-9d63-f32fd4012838",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ee894fb0-a575-4be1-b443-c20f4bee9814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34384af3-1500-4147-b752-41c642f27d95",
        "cursor": {
          "ref": "d2999b80-b2fd-4283-a8f3-46974aa17a79",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "66657104-8a0c-4557-b443-eaef648b1be8"
        },
        "item": {
          "id": "34384af3-1500-4147-b752-41c642f27d95",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "180bb619-e449-48c8-a671-1bffd4b7fd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc77f3cb-99ba-4dd2-ac75-628522f36ab0",
        "cursor": {
          "ref": "ff1c8e8c-9c55-4678-a7aa-07a04b4eff71",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "de0de150-c00d-4c07-a1a4-457175fdeb13"
        },
        "item": {
          "id": "cc77f3cb-99ba-4dd2-ac75-628522f36ab0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "43283de2-f2c8-4626-814d-a16920bf1a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aeb5ed-e59a-4e82-ac12-d3c0701f8c12",
        "cursor": {
          "ref": "69acbd3a-a2fc-428c-bae5-782e501bcd36",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d62fcc00-92ca-4ca4-95d9-bfb0f5d10766"
        },
        "item": {
          "id": "85aeb5ed-e59a-4e82-ac12-d3c0701f8c12",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b6319e0a-7f19-4a1c-9924-7325554dfac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96120664-a34f-4177-afb1-1252242e7ab0",
        "cursor": {
          "ref": "bfc71d77-aa1c-46af-88e2-18e2a2155d8f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9b2a17fc-8a99-4599-8bb5-566cf951da40"
        },
        "item": {
          "id": "96120664-a34f-4177-afb1-1252242e7ab0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "05a21956-8060-46bb-8ad6-45939785b7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4599a801-208c-46ec-8af3-1957a186205f",
        "cursor": {
          "ref": "42dc0319-a1ba-46e8-a3f4-906d5f6faf15",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "feba52f3-7f57-4c8f-8de8-2dfd1a07e1d2"
        },
        "item": {
          "id": "4599a801-208c-46ec-8af3-1957a186205f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0b9cef91-0391-4bbf-adbb-a1caa2313bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a4ddd6-4d64-48d2-8f8d-623288c09102",
        "cursor": {
          "ref": "8a2a76ac-69a5-4d0b-8501-8ab193362d1d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2e8aa981-e33a-4132-82eb-732576a733ad"
        },
        "item": {
          "id": "07a4ddd6-4d64-48d2-8f8d-623288c09102",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f00ee54d-8b37-4df3-b588-a58389177525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8319b47-3331-4c53-b614-ffcba3b0c21d",
        "cursor": {
          "ref": "b4ffa56a-c0cc-4bfd-aa10-6a147ef36df5",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ba7af2c1-61ed-479e-a1a3-eacc5f9a5563"
        },
        "item": {
          "id": "b8319b47-3331-4c53-b614-ffcba3b0c21d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9b746edb-932f-4a90-aeae-93b44e455b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7072200-76c3-4acb-9e51-0cd918fbe258",
        "cursor": {
          "ref": "d5ce5397-7c27-4e3a-bbb8-165a54021620",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "af9b8acd-343c-415b-b08b-a9df4aefbe00"
        },
        "item": {
          "id": "c7072200-76c3-4acb-9e51-0cd918fbe258",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "035158d4-c939-4767-9a45-7760742dab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a82e1d-69ac-4e83-94e8-2065a55177da",
        "cursor": {
          "ref": "bf976e98-04d7-45ca-aaa0-ee18c9c244ef",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "811fef90-9fc9-4689-837f-96c26190ffd9"
        },
        "item": {
          "id": "a3a82e1d-69ac-4e83-94e8-2065a55177da",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4fe76423-acb0-41c8-b256-a7820ef7f02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a45dbd9-7241-4046-a1ee-df3695bc0ddd",
        "cursor": {
          "ref": "08ab63b2-cb5c-426e-817a-5f15b0c2c7d0",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6030ef5a-198b-435a-9ccd-f577026253be"
        },
        "item": {
          "id": "0a45dbd9-7241-4046-a1ee-df3695bc0ddd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1dd56444-50b9-478a-bd44-1659f355a695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4661fe12-cbc0-418f-87a7-ba66299c91ec",
        "cursor": {
          "ref": "f4510d4a-3b1b-4e34-9106-266a6e863510",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0a9524e4-df03-4f4e-a15f-8492bf9667e6"
        },
        "item": {
          "id": "4661fe12-cbc0-418f-87a7-ba66299c91ec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7f00d997-a7e2-49c9-a7bf-6284c7c343ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c889ef-3d1e-4492-ab95-98f4bd6cf22b",
        "cursor": {
          "ref": "ecc3e664-d067-442a-b167-3d773753e5ce",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b889407b-99f4-4300-9551-102bb20bdc8e"
        },
        "item": {
          "id": "d7c889ef-3d1e-4492-ab95-98f4bd6cf22b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5dadd5ed-771e-424e-aba4-667de3e80fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c63d2c-2fe7-474d-9566-8b1cae3d137e",
        "cursor": {
          "ref": "f257dd32-55ad-4b4b-935c-b72f8b108247",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "099bb0d9-f5b3-48ff-b4d8-a51ec39c7c23"
        },
        "item": {
          "id": "b7c63d2c-2fe7-474d-9566-8b1cae3d137e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "070131e4-6f9b-412d-8331-16a289471ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd72c19d-830a-4204-b6e7-882608e2a175",
        "cursor": {
          "ref": "a2f0ad57-da76-42da-9cd6-64e11e7b65ac",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b6646b22-2ef9-4535-9704-49d2ce276b29"
        },
        "item": {
          "id": "bd72c19d-830a-4204-b6e7-882608e2a175",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "60e8218c-5485-4db5-b440-dc72e0a04ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8170495-1080-4efa-9372-0d47d43f30b1",
        "cursor": {
          "ref": "95d5b6c6-eee0-47ea-b6e7-0a1da72dd9f2",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fdf8c21d-a471-4f7b-81bc-69bccdb6ca3e"
        },
        "item": {
          "id": "c8170495-1080-4efa-9372-0d47d43f30b1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "37535b73-f3c8-4294-b92a-7836b3aeaf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef608a13-bf40-43ea-b54d-c7b8eaf21c6a",
        "cursor": {
          "ref": "a5d5c1e6-81b7-4e42-abbc-ef93cfe3b2e2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f01666e4-940d-4cbd-a8e2-0ac1d0e59f6a"
        },
        "item": {
          "id": "ef608a13-bf40-43ea-b54d-c7b8eaf21c6a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cc703a39-f172-4fe6-9daa-f1f78481293e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083bdcec-bc78-47d4-a3f2-a32b3c425680",
        "cursor": {
          "ref": "2dd8e245-5a63-4c6a-84cf-df22cdac7eae",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dd67642d-1780-4446-afe7-8999b4b138c4"
        },
        "item": {
          "id": "083bdcec-bc78-47d4-a3f2-a32b3c425680",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "79916185-53ce-42da-9ae1-b132d27dd86c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7c3500-4251-4ba3-a3c6-8c4f55fb7e28",
        "cursor": {
          "ref": "1a5b6359-5b70-411b-a5db-9c4143bd0748",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "466e2f5f-61a8-4cdf-aba4-a8d486987a47"
        },
        "item": {
          "id": "ec7c3500-4251-4ba3-a3c6-8c4f55fb7e28",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b563c92f-d35a-476f-a1e8-c1b4d3a02e19",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3b5e13-5301-44c1-aed4-4c66b30c82be",
        "cursor": {
          "ref": "63eef307-c46d-41ba-aecf-070c2c4c21cf",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "46005207-ab4e-406d-9530-765e2874e4c6"
        },
        "item": {
          "id": "7a3b5e13-5301-44c1-aed4-4c66b30c82be",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9ba15bd4-80f6-42a7-be24-9ee0b572d865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "0733c676-3186-4739-8048-0c5dabcd7960",
        "cursor": {
          "ref": "d16c4cf2-1170-452d-92df-251a5244f1e2",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2c3caf03-b409-4ddb-9754-36d16ae5a644"
        },
        "item": {
          "id": "0733c676-3186-4739-8048-0c5dabcd7960",
          "name": "credentials_verify"
        },
        "response": {
          "id": "51688468-3d91-445f-9f6a-d7aa97aed630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "4362c943-9ee2-48d6-b974-cd8e015a9f87",
        "cursor": {
          "ref": "7c7ae40f-e8fd-452e-9f9a-0e8b9c7549ac",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "248e8b63-8952-413e-a5a6-b637caab4a0b"
        },
        "item": {
          "id": "4362c943-9ee2-48d6-b974-cd8e015a9f87",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "035e34e7-5612-4ef7-b491-7b9396a040bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
        "cursor": {
          "ref": "8ddff3df-0109-4dd3-a0f2-51cba63756e5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a84c7874-97fe-4d14-b3d3-c9401ec95173"
        },
        "item": {
          "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f72a858-067c-49e0-ba7d-0ffcb4e243da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
        "cursor": {
          "ref": "8ddff3df-0109-4dd3-a0f2-51cba63756e5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a84c7874-97fe-4d14-b3d3-c9401ec95173"
        },
        "item": {
          "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f72a858-067c-49e0-ba7d-0ffcb4e243da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
        "cursor": {
          "ref": "8ddff3df-0109-4dd3-a0f2-51cba63756e5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a84c7874-97fe-4d14-b3d3-c9401ec95173"
        },
        "item": {
          "id": "7f99c19f-46e0-4dd4-8c82-3b802abfd2ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8f72a858-067c-49e0-ba7d-0ffcb4e243da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4ef0d-36d3-424d-9ae6-79559671b142",
        "cursor": {
          "ref": "d432cf9e-3300-4f09-8a55-154da9e993c8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "40886adc-abd9-4375-a65f-141521d5bcf9"
        },
        "item": {
          "id": "d9f4ef0d-36d3-424d-9ae6-79559671b142",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ecfac6eb-ef58-4a4a-bad3-63b9a31f79f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c530867-db0c-4a40-b6ac-b53531032b4d",
        "cursor": {
          "ref": "20dc5a4c-4f75-4452-b9a2-201b4bbbd0a9",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dfb8828b-cef7-4c2c-9143-7ff0a78ba4fe"
        },
        "item": {
          "id": "2c530867-db0c-4a40-b6ac-b53531032b4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "488f8cc6-07d4-4dd3-9ad2-63f90de171d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2c530867-db0c-4a40-b6ac-b53531032b4d",
        "cursor": {
          "ref": "20dc5a4c-4f75-4452-b9a2-201b4bbbd0a9",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dfb8828b-cef7-4c2c-9143-7ff0a78ba4fe"
        },
        "item": {
          "id": "2c530867-db0c-4a40-b6ac-b53531032b4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "488f8cc6-07d4-4dd3-9ad2-63f90de171d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ed11f056-b6a4-460f-99b7-1cc937557b7d",
        "cursor": {
          "ref": "c1a990cc-1338-4503-ba32-4b20a466465b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0047d03a-d5b4-45c1-bc46-c22483d3af7e"
        },
        "item": {
          "id": "ed11f056-b6a4-460f-99b7-1cc937557b7d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e66b354b-f2d5-483f-8315-f41b31d049b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "48dee311-0ba8-4f17-83d7-50963c235b41",
        "cursor": {
          "ref": "a5424c0d-4031-430e-851e-70377f986a96",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4d1907bc-0fb8-4ee1-9eca-f3e194c46992"
        },
        "item": {
          "id": "48dee311-0ba8-4f17-83d7-50963c235b41",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e38a2d0a-770c-4807-a987-48a78d0f75e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "48dee311-0ba8-4f17-83d7-50963c235b41",
        "cursor": {
          "ref": "a5424c0d-4031-430e-851e-70377f986a96",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4d1907bc-0fb8-4ee1-9eca-f3e194c46992"
        },
        "item": {
          "id": "48dee311-0ba8-4f17-83d7-50963c235b41",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e38a2d0a-770c-4807-a987-48a78d0f75e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "851b70cf-a5be-470c-980e-a7ece1b5fe56",
        "cursor": {
          "ref": "5cd915f6-69fc-47b5-b77e-4fa617a29ac0",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3f2f9824-8f9d-4aef-8e76-7186d37323fb"
        },
        "item": {
          "id": "851b70cf-a5be-470c-980e-a7ece1b5fe56",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "52f1cd78-9e40-4a09-948e-e5edf101af09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}