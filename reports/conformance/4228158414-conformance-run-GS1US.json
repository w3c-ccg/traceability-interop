{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6b3eb82e-5ab4-406a-8d93-01bd2b5ec34c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3764e406-13ed-4fac-a98b-749a6909027a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdaf9603-9a24-45e1-b64d-cc0490aa7a19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "711b08cd-5d2b-49d5-9182-3ba3670b4fb1"
                }
              }
            ]
          },
          {
            "id": "a658c554-8701-48a5-b63a-4e1e67f753d1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dbaa847b-c3a1-43c6-9360-ec6fecdbc9de",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "169f7d3c-9219-4181-a7e5-e69c769c866c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57e2daf6-25ea-4caa-ba7f-29f87e25f788",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "361e083f-af15-4b21-821a-816235c661ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef459982-35cb-4674-97f6-00613e1794a1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c88642e-5b1f-4ff0-80d0-70b53c180eb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e04dfed7-4f9a-4d42-a4bc-7729cc06ea70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b1923c8-4e35-42f4-8da2-2821d6019b40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5d42c91-6eca-4e7c-98ac-eb347a9b7d72"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6edb27f-42ff-404e-9181-115a6eb33542",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0e00f82-f054-473e-bbdc-de1029bdd72e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b09dee68-07fc-482b-b165-bb9ad626bdc0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "22d8ff91-7a94-4a5d-a682-290c61577cd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31b5fdd9-0f68-420c-8692-248312ffd62e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd28555a-bdbb-409e-a444-9349adb979c2"
            }
          }
        ]
      },
      {
        "id": "1835cdc3-afd4-4981-9557-5fbf16491640",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d0d841d4-ae89-4ecf-988c-e4f8333d387d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "438a1cc1-ef2e-4623-8745-3dfc194054c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1ea045a-e7a6-43be-97e3-4c89346067ee",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bd0c72-325f-4c46-afc6-b33f3bef748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b7d9e04-3974-42c9-a786-9493c2719ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc59ae7-20dc-4c81-9cc8-1b021565575d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64480ead-6d07-47f3-a4d4-bffe251f967c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c943536-5b7e-435e-8420-59b1c173abb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703d365f-9031-47a4-8059-9218abc470c2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b081f6f-8f5e-456a-ad60-1fa15639c1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8aaebb2-c2d5-4ae2-80e8-b44100e51902"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f140ce77-fc1c-4567-a563-f308ad05f035",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fd6eeb6-b3ec-412f-b825-f5b941fa795c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c0404e-2d1c-4a8e-9d28-810360c58a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c99bd7f3-407b-4076-89db-b6b5e5380f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349b97b5-00fd-4a17-a0fd-a78e38ac3484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c2d825-f3bd-491f-bb78-4affb35e6893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f786727a-aa52-42b8-9bba-c0e8c293464b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136814dd-7db0-4d9c-9e2c-8784f778295e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2156955-9d2b-462b-aa7a-b1a8459dd7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4808306f-0965-4ada-9a0b-8fae2d69cb38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "721a8f29-837e-47ed-8be5-58a85d69583a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7ea36f1c-ba8e-46f5-bf17-a3296c1bc0c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f513409-fdda-4eb5-8120-66d0c1e952e7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7905e99-611b-457a-879c-6d2da7c6cf97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9dc4a462-c324-4998-9fe0-f7ab4b8a6318"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb053c01-b329-4d6d-9389-24f14fbdf38a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9ba62a38-bcc1-4248-b2b3-02ac78ddf9c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8e8085a-1bca-4936-beed-cd0a005871f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98c14932-b1f2-4ff1-a118-97d0098f61bd"
            }
          }
        ]
      },
      {
        "id": "8a838083-8f5a-49af-b38b-d82de9f7fb84",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "aad831df-6773-4eff-9210-f34ad7338a98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcccaf2f-ae70-4c56-9f09-09364b28d1c5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2a022afe-faf2-409e-8b1e-256990c5fd6a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512f1b15-ff18-4d84-abbf-8e3c700b906e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4f67ea-17e4-4a47-a80b-9522f4f4aaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196ce062-8dd8-4112-b3fc-ce9f3095faed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c2279f5-2e81-49f2-b127-b8a63af6bb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98119c31-7053-4e77-a75f-1de8d9abb318",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e808c9e-2dc6-4d37-b7ca-e904132a6fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b54abb-aa94-4acf-8b6f-3a0a7fdb8f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c55fb4-f768-4cbd-976f-71347d068a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2b06d31-0b67-495a-ab40-43efafd9e602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764e8e64-6e6c-49a0-9dfc-2f268e7095a7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14624ac-580a-43e5-8b4c-91b703f3865f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b819d5d-824c-4ca9-9c98-131b1bcc9aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fd038a-510e-4d25-aff7-a3da4116eef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e84c0bf0-f2d5-4eaf-8587-fc0024d20f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621036cf-f2d0-4fef-9545-1f51cb431f3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65c905e-56b4-4b9f-9737-208085f16374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6a6e0b-7cf4-43fd-bf5e-1e59edd9b8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d1d2a1-bdd5-4080-96f4-5f6212c30832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f74883ac-be9c-4ea2-a6a7-aff97bca9fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f18df4-2255-4487-8cb8-4b7f47d0025d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc5630f-453f-4fd0-9e86-07771cb79743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8879588b-f622-48c7-8427-f45068e71e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4667de1-2f2c-4b90-86f7-ec44890ceaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f027656-067c-4d65-bd8f-5ffbd2049194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d40f2f-e737-4819-8a09-d963ecc222d2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b58666b-48b4-480d-8e90-6e16c2d5e01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a55757-e8dc-4488-a9b6-4082c4473838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2cdbb3-08c3-43a7-b5c6-dd32055c25ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28c4f92a-f8b5-40f5-ad76-a856bf77317e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e316c60-4896-4cd5-a0a0-2a76f185acac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e04b706-a281-4198-92bc-db7f82057dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d162a35d-f673-442a-a083-187c02ad4329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bfa29b-15d3-4a2e-8e4d-3e57966853e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "866ad2b4-507f-45ca-9b20-d34fb6fd25c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264f368d-6477-4b0b-a9ed-29a11f31b44d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8469bd-b65f-4155-8903-c8602cbfb75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c051a63-e7f7-494a-b48c-8ea547ff3257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dc4347-e8f3-4e52-8cb0-91984cee8023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "337ef7e8-97e0-4513-b3a2-cdd57d719702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4624a9c-9300-4376-89d3-a8eec7a69728",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd10ce8b-1010-473c-ba68-f5f26a334934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6231d7b5-09f7-4c7d-94d1-f4a96e719cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ae803d-f47e-4005-9124-225baae68aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fae5535-97d3-489e-a127-a01f2c3b902c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f148b972-978d-48c2-a8de-f903399e5b7f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad03599-1caa-4ee7-b450-ced1e4c4fdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327e91e6-b9c1-4f3d-8226-5f98142f48d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094bc82c-b404-44a8-88dd-2c580b342572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bf4b6e4-8aed-4d40-a9be-72e14fcd03fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a3dbb6-f744-4b41-87d2-a0cff09971b1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ea5b21-6bf8-4d60-9cbe-a7360b9329c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a936ea-9215-4c99-99bd-325d194a7981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce72e26-d155-42ce-9a46-ae90b6a7b47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caeea873-2a9c-46b8-8097-8af7b90cf091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6fcb19-de5c-4789-88b7-06b83badaa4c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c913413f-0693-4bf0-89af-f8ddab48c360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc71337-09cb-430c-832f-6dd3f907115b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54a1614-91b8-4309-9696-9f72c49ce24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebdd0f7d-cf1d-4c47-b369-7215abdc70a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439cd47e-2db1-445d-99bd-ada04f8daaa1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90de9b9a-8629-4254-b5f0-a257d4c54d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d007c730-c7a3-448c-8fd3-27c50f66a989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec19b281-144b-405e-b630-e357ccdca49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e7594f6-9751-4099-8fe4-56c924be866f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea44aed-45ae-42b9-b23c-bb7b616e37eb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db34d9c9-2318-4208-a6d1-0915def2a826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc4fa82-7925-499e-85c7-091eace3ab0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c413c5-aec3-4616-9342-4b8199e5c726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d63d2b4c-6231-4ae6-8ffb-c0cf214c0554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4062f0-19be-4b43-9583-e128a35c573d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92034a0d-4cd0-48ca-8c29-eba8e6f53447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d14b6e2-57d0-41ce-b7f3-58f1c6496b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e590c8fc-85c9-4337-9d33-09ad6c90004e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3533779a-5189-470c-9538-66eb17607836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeba906-25fb-493c-a417-d50483887f7e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c367386-ce47-400a-9a1e-b522ecfc977a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb23bbb-8462-4509-9a92-f8454ba46511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1513533c-da52-4098-b50d-d8e6dc9d7b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be962c6a-df1b-4524-81b6-fd0a1a5ca2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eda9451-7145-4563-8820-0408124740bd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac8c6e3-0b53-41b2-8375-1220e33b51c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9a49fc-810a-4c36-b715-7c89c699924c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f75946c-e060-481b-aad9-d8e14123f1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93256d6b-65e0-4697-b052-94e4c4ae9964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c099db-3a12-41d1-a489-c62b6654c8dd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c687ea-69c3-4bbe-acb5-f90c8954f4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e632ac5-497b-4601-ad88-be88d8de7554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c5ee29-a35e-43c7-b29b-571349089e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2027da7f-def2-4b72-95a9-31e1c790388c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16d86d3-845c-4673-9a32-70912e3303e7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc32ba6-1e4f-47a8-a69f-adee20dcc5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c068ca1b-4fbd-44b3-bfaf-658b6a96a75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea9daea-c6ce-41cd-adc3-66707637de29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0422c491-7f33-4330-b31b-064101ec8cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12498c3-0a3a-4f2b-9fb7-c6f0de343c0a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2697870-1d82-4a20-b4ce-70a9a17ddb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22569ec2-2d3b-486c-8fe4-b114e8a96583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48dbad4-1dbe-4fd7-bda1-f6ef22940311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a381e1-c3c6-4cd3-bf75-7e6b763737df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2045f4-2b72-489c-b3f0-668cf652c7bd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4940f188-4bd3-4c54-858a-39506c85492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de411db4-df1a-4cb9-ba43-485051470720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e1eaa1-061b-48ce-a922-05e58b0fc1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c26a0dc-463a-4c12-a7f5-e17115901135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8584620e-cb3a-479e-8537-6bdcfa28cf30",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e52f8fe-6de0-4a7d-ba83-b4cd4e28a461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbdaba6-8aa0-4cbb-af80-05bb59844eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b38019d-3dba-4608-b8b6-d72736944b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5058d09-30ca-4468-aa52-3340e0f47056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cb1269-5729-42cd-b096-9ef4a71cafbb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de67672b-95a4-43e5-90f2-8157265641da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ebee1d-c44b-4d09-a6e5-409a8a04e2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9e23d4-5950-447f-ad39-bfd766c87489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d99d7884-ae28-4292-a7c3-cc5d918a4e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086dd76d-215a-44a6-a45c-0fcce2b3185e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ae4996-2467-4d35-bea4-e5a355e7af7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62137b61-da69-4cc2-95f6-27503427976b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0766c9d-c5c4-4112-9ea7-e5d159a3a3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f21f12e0-9c20-4d52-9ccd-c0459f93acf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de907da4-b3f7-47b8-a331-a7405e7fb847",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7ff73e-e12a-49aa-ab2a-19286d533c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de51cdf3-22e0-4e94-bb23-315f70deb66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fa7b66-e6f8-4a0b-95ec-7f630bc931cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6444cf-65c3-4c34-97ff-0353a67f20a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c138a7-d759-4ce8-bb51-a5ddfdc1c251",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e723a802-8524-4e0c-8a6f-fb40db75f5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab0dff1-cab8-4aff-a29d-bc28df674c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804c295a-e3e0-4105-b2c1-c2ab88744429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6575c1-cc15-40ca-8864-5177bdba73ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ee0b66-26c5-4f3d-901c-75bcb2986657",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0408b56-f613-4576-b54c-523d40da6dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63636000-ad01-4718-a8fd-63d5fa1358f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b779d276-04d5-4cb7-9df7-36016eea3ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9df2a7e-50f1-46a5-986f-ce2d865d04c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10257bf4-25d7-43e0-928d-6ef63bc3b525",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5452e8-19e1-411c-bcd1-a676a69dcf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75c7bd1-2542-4988-8266-b12d212eb78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438a7ec0-a614-462a-a49e-df4043f3ba3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54820b7-8d26-4ad5-ad50-6c88ddc5746a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae717a45-629d-419d-bdea-012374c9f655",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f09fe7-1ea1-4153-a8dc-cedccf10a32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca2233b-de86-491a-a1e5-2678cadb571c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb51bec-eb5d-42ef-8b50-60ababde1d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd4f26c-7065-42a0-8087-5ac0075241cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5106e5-0b22-4c74-bbf9-f46274fc5265",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94324088-24ca-44f8-9ce8-5b0745ebec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6810d35f-0010-4b5d-9458-cf1451b255e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca6ef77-9682-40e6-a674-6182c6111007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "baee88dd-669b-4f93-a595-a7d72087cd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695dcd65-a3fc-4161-8595-5b8100be238e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d9d364-452a-45f1-a164-32211e47db30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb82835-a59d-4cd3-b0d7-8a000aef317f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a290d39-c13f-483a-9bf1-1b436cb87fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0eba3c-cbe3-4121-8a02-61ce6c762e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24c5b9e-757d-4ce9-9b3b-5f8794af3476",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb8f3e0-5a93-444e-9666-ecc140e8746e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f540192-2b3a-4e56-8bdf-15ce03028a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2893e7b9-f6fa-4c22-a5ea-063391ca73db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "199ba670-505b-4fac-ac49-3b1eb77ff65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72667b09-799d-4cdb-bf1a-c61096996fb5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d42789f-39a1-4f65-831e-ce6c3352bc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3967d4d9-5780-425f-8e7b-63aa38b093b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf8bbfa-7780-469b-a7d2-7421f6c0c8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6324db60-3978-4f99-8da0-74defd9c6414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e15a836-1f70-4ed2-8f91-bd54fa75fe63",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc854a52-f295-4e50-91d4-e3a73c57696a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ba2af5-6c9d-4949-ac7d-065694150c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfd324a-d899-4520-ba81-d7081a2d1689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9426d2eb-07d8-4830-baac-ef62cb6d5bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4253689d-201f-4b06-8939-2c59c18ca580",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06479dfd-5036-4e60-a60d-84ae8c7def5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76e5aa7-b98e-4811-851b-b360dd429e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdaf567-62fe-4ae4-9919-e99c354c7a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "489067d3-28f8-40d0-aa19-b695425b3ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14e6004-700a-43ab-aa45-1b7a22e28cff",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b80c50-4e4a-4f87-877c-e9f601cdee82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f61ed3b2-c7e1-410f-8fc7-2e9e0de1789c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65953a2d-c5dc-4eba-b08d-4776f79b963d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fed2efd0-e7d1-40ec-ba84-1d33b453b17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87eb40c7-a615-4661-99b3-3955e4d4aa02",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30784947-37b7-47d3-bfdc-1c70409e2048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da321f46-bdf2-4700-8e79-b2379ce12f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21be4aec-dd3a-48f9-ab8b-8a17534a68fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77bb1b19-08ef-4e8c-8ee5-1166cf399910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28755ff6-fefe-47ba-846f-e8b75d0a7091",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d242095-7793-46ce-83ca-444d2c7ca87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847d776d-60ff-4e2a-9705-c478de0b660f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ce34e6-d3d0-48b6-a84e-dd97ea7a2ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f43dbbd7-27cf-4a2f-84a7-e934e32b3afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1af038-7408-48b0-a65e-475d1271e0e4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d1bd96-26e4-459c-bf12-20e9d7b49adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce72f1f6-2b06-4378-8bc2-f40be3e21c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa8f67e-482a-4610-bdb7-111883ac6729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1412d0b6-e70b-4aea-8fdb-cb89706647a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87551f7-ac15-4a68-b8fc-fb59d59f9e55",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cdadfb-15c8-419b-8c23-34bf31442ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f208d6d9-55f3-4b39-8c9d-0a318b5a55b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3495f3-2be8-46d9-b61a-cfeb09e78328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "53df823c-ea72-4fd4-8918-cce3d0a3a378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfe105b-e19f-4e27-bd58-dac76f85a8d6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d055b10d-f050-4b7e-b8c5-15f25d97e9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040ff03d-d0ea-417e-a2ee-536cc1c62bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a342b2-4e1e-422a-9b78-62c6b88a6fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6cb8c9-a0b0-4c50-b10e-9609d5c544da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fc4ab0-8edb-49e5-a0ec-4332b9461b5f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8fb600-44e6-4e11-8ea8-d13b7bf13a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1903f1-f2d2-4de6-b0ff-9e707f28144a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f676c9f4-c9a8-44c9-aabf-9e28c74ea7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "18f903a7-b923-4f70-ae04-0de726373474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcbd22f-0e39-4673-a856-ccef85698210",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccaff3fd-2319-4d21-a08d-414cad0e51a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618a41ba-384a-459b-b6c2-aa356a92f6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43657aa4-63fc-4778-a592-82252722c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "67821818-8675-4261-86f0-945568c13b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eead044-eebe-49bb-b74e-823104260ee7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fa0662-eab5-4fb2-a1fa-cee3b2b42260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db65f390-7050-4d45-a897-8a9639323524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709857fe-6fea-4b54-9097-b3aac97ea6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6e594b-bbf8-4fbd-a2cf-99267399556d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ad3ec9-31fc-41f0-ab9f-bd3e0ba33714",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7368831-c366-49d2-a83b-c48fc3807b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954d12c1-85a8-4811-ab74-dc373dbb41fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec258532-f187-40e8-b705-cc3b02d46ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea76ade4-8395-4254-96b5-086d22576bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9c674a-396b-4bbf-9f22-18a56d9011c2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165f8c17-d1b7-4d0d-b0fd-46910fe97157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e69bd8-7228-46df-941d-890c3708434d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9edd86d-3bee-4a10-a045-df510421d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14a5331b-6729-4f68-bbaf-411f423ed9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4b76f1-a374-4f6e-8d35-c0be8775fbc3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec5e93e-56db-43fa-8319-178180e5e3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927490f4-3323-49eb-8526-4a8df9ff216a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cebf5d2-6478-4f3c-b397-d62a995d937c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75c9f992-1bbd-4fb6-bb16-2659afcaace2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5b10e6-95f4-4aba-ac1d-a6787b3c63a7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9bed82-55a1-4d2b-b1b8-cf072968351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872a8716-7312-4842-90c2-e723cf306d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7efeb6-7abf-4d54-862e-642de92817ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0122a93d-64c4-47be-8563-2266db197374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52bbac5-08ef-4cfd-861f-fab86bd23fa6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130801bb-e6f1-4f4b-8af4-5cb7228b9d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5272104-40ac-4add-93fc-fc6adfc4b6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d83f82-2579-4ef0-aed6-747244fc7556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0334d3a2-0938-43d8-8863-2bf311071fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17791cf-ebc9-4578-8b64-19fdb54070c7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de360110-c71f-464d-b314-4ec68d5ef6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ed83bb-904b-43ff-93c1-a8adcb73d562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e903529-609b-4ef0-8d80-df1820d4a790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1291a1e3-9626-4e0b-8ca6-bc050cd81325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dba7d4-4c36-4cce-9801-a31dca09cba0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d45e1a-45ea-488c-86d4-34561b4d84fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4053e349-1660-4529-83e8-2dba6ae9e96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6490f8e8-66bf-4cfe-aedc-4ec882a6901e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57dbf0da-fca4-4784-994d-4d4c7290558f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da67d511-a7d0-44e4-be35-9913215e6c30",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd445fe-89ff-441d-bc83-622bbce2fc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffc6964-069b-44d6-8898-12f4cc490d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975853fe-faaa-41db-9184-c5609ddc6ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78cacc92-0531-4f82-b860-b3c3946490e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f148ea-5dfb-4343-a88e-ed15e2e40726",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf283d5-48da-46e2-bd7b-155b6e8b0038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ed42ad-774f-400c-85c7-f4ce36a9f6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5adca1-44f6-4ad8-b66c-3992b1a07b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f843ed61-b3aa-4b4e-8131-2f0aece8edbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f3479b-ec41-4b46-a3ae-92e0130a731c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63b5e99-268f-4a0d-a3cc-bebf5f41c44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf08952-69be-4f4f-b7ae-87e2815a9f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3965e68b-1c5c-4d14-ba76-b8b56dca9e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "210ff3bb-4b0e-4a79-bcbe-64c5b104987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be332362-6ce1-44fd-9605-33f61c0eae8b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138a575e-00d1-4401-b1e3-dfbd14c86c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87aee158-73f4-4d46-ba4c-7ae6967f0e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeac2f1-7a10-42ea-a6df-33f1a5ee4989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4c2788-daa1-4223-8a3c-a37b6d35bfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9398bb3-ce7c-4a10-9ca6-396bacdcae9e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8837a50-f203-4735-b535-72d1203ff2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853e7fe4-a874-4c04-9339-ad9d3afa2079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f206be1-ca90-41ed-8475-24698623289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "16da0ef4-23e8-4633-84b9-3c2639694bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca292d1-c3ab-430c-b9ed-75cb3d4b8d15",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a30c83b-3b43-4dcf-8680-c65c1fdf9fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a441d0-a2af-4007-ab25-e12f1a6528ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98e777b-4fcf-40c0-ab15-765ed6537873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "48742567-4d02-4470-bf1b-fbe199f18641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9a8b92-8a27-4f0e-b340-dc829df182f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2520a79b-cd95-4bac-b19d-1e38db009342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857ab2bc-4d76-4a6a-b608-3b2633a3e71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6800514-8c01-47e7-826b-d3f97da41218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "10353745-5344-44d1-8f59-3a3986fc1b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0e9405-fb10-4df5-a6df-7be5d0631c5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bab93cc-d746-42c6-8eb4-7d76e8afa56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bcf9de-7a79-409c-8bb6-1f4f8bbac46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32faf82-4d5d-44e1-886e-066516981ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d78d625a-9768-4538-9096-4fe18668621c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e111cf57-de16-4a66-866a-ef7c790971c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5665aae-3c13-4345-b7c6-e24536bd02ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffb5452-5f58-42db-af4a-ca0e793c197d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c936d6d-2060-458d-9e8a-8cab64409580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc302878-248b-4cbc-a59f-7f5fde23f14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73056e7-cad3-40cc-b21e-25fd5ffa8a9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fd953c-1e29-4a35-b0cb-41f1bb9f63e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6b88f3-d916-4a51-93b2-51108d373e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9642c4a-2c94-4a87-94e1-fab0eedbcabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "964c2f16-1bba-4c6f-91c3-f30af36a0557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9462e350-339f-40ca-b67b-fdfdde287d4a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9059c5-0eb7-4ee6-934e-2e6d8cab8af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffa236e-a07e-4717-8c32-ceee4251aedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46207f3-54a9-4893-9c76-baf01127aea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b27b2c5b-ab76-4978-a2c1-3b8dcf930028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f531cef-3a8a-4794-97f4-733319c8351b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6f434c-c0ec-442c-b817-690684da56dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b82a1b-a26d-4793-9301-e5ba5807d999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee02811-cfa9-4ac4-962d-00acd56fa0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1ae1f6-03e2-43b6-b623-0509bad43775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566e9d39-a85b-4aec-9c6a-6e6d064d9f9c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed4b9b6-4e27-4866-9de0-df74adc9bf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0f2f66-c714-4238-a9ed-ebc6883bf1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51a2d68-5f5e-4676-815a-e7f5f002a5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9ac000-0db8-4892-aaea-1f26d8f1ffa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acd9394-1567-4877-8355-12df78662675",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ebbb17-23e0-4b46-a98f-5eb5df48b851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72adbf6b-d51e-45e9-8024-db8128b233a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0464b0-7c59-4ed6-8a66-317ba22168c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08fb48ad-6108-4991-9511-2582b1003d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7277fec-b62d-49dc-a0a6-b015ba482d26",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488e5cf1-5f18-42c0-9eff-611c344f0de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3cffa1-7319-4633-9cd2-bdcd6a04ab29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb117864-f0f5-4dac-9c04-e8727faca39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d83d4160-9264-4834-a798-8bc6be6cecd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bbeebc-b5f4-4dd2-8952-462272c56c6e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395209a7-d029-460a-8959-71c70ea9e12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c1bb65-2b9d-473f-ba1a-4256c74fcc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cad512e-159f-4824-ad11-57eaf0dbec10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5509de8-b6ce-474e-8c88-db7cff7ff604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8aa06b9-9cc6-47bf-982e-ac170e863f96",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "effafef2-beab-4d19-af68-ace755fa382b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275d85ef-f342-45bf-80e5-34b2954bb74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc40e92-2ae2-4af6-be1a-485a952875e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8565dad-ef50-4391-8564-9554d2b286c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fb4686-b7a6-4812-a1cb-83c9fd24c435",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6331897b-a5ca-4258-acee-fc4fc937e73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1350355-2bf6-4122-9ad8-c3031944afce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7edf92-4e57-4740-b45b-c2aa34442388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59f4003-648c-4408-a74f-e311e31e30bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bae4463-34f2-403b-8812-b8406708de48",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86941f07-4879-48e5-9f04-f23ab90b3e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dbed79-299e-431c-bfa1-070c920ceab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d3e80d-6441-4f56-8e80-7139799c012c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da53f4c-6261-447b-a7cf-d9ba2b00bbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c7300e-3406-4857-83e0-ceb5bf3f72ac",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a259bafc-6507-47d2-a758-23a3375ae752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef63982c-8739-4769-a776-7da8e30bb981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ea36a2-7b8a-48c9-9086-d59acdd9a3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7f64ef-b6eb-42ff-a14a-f73127a4d689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a7be54-d4fc-4d44-a9d1-831bdd1a6eb6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b91f2c-fcbc-4017-b8e4-f2b9f6491f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7183ee58-0005-475a-b07f-a82b510f84d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f4100d-603b-4d6f-8a4c-84936889e595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba030b89-8dff-482a-8f18-6d1b5426134c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936b95d2-6170-4e0d-bcff-400d7083812e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7522b502-0dce-40ca-a5d7-160add725aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1803a5-2c43-4de5-8e92-1bc7264b14c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd75527d-1df2-446a-bc7f-e58ad4ec3fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0a8d48-a304-4bb4-aa34-3f91d8b2b205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2575a7-7627-4ab3-8d8d-408e3fa8dbd2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1295d1-aa40-417c-b999-49bea4dce0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276a032e-3f1c-47b5-85e0-f82cb32f1086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d368b08-48e8-4475-926c-5ea1e49cbcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76e23d96-e475-446e-9133-3c872afb3ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fa7b07-cc90-43bc-8d20-b9adedcd37e2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72840ef-8278-4266-8e87-7d2fdd913f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ce3929-14be-440f-9367-f50444cfecd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f50f62e-bf14-4b30-8ef9-7b492fa1394c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace14a37-d4da-46c9-ad0e-8aa2b6b3fc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520a41b1-5eaf-403f-8dcd-faab34d25510",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8172e904-c73e-40e8-ba10-dc24668a71fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b18bc5-c45a-412b-8edc-d1744cde4a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4c3384-fb47-42db-9181-6281a395cae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17893172-a83d-4111-8ab8-e17148a8222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3b078e-9a7f-46f2-b782-49f4b4e1ce23",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d22072b-b471-4050-b821-52a5e07e76ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735f9905-7fd0-4e35-be56-b18eb79f29ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb06a71f-19ba-4255-a561-2232c40fcc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e52f5c-d797-4cf0-b42d-7319ba6a7ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a1ffec-b951-4036-a8aa-058ef559a771",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb051836-5310-4601-a3c1-9e835ee3e6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e417fb7b-c336-4e08-883a-4ea097423f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6345d5c-8bae-4531-8214-7aa99d04f691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "860aa74f-2670-4d0a-9a8e-4d5876e29a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85463c32-1821-405a-b477-325b1b8fc409",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc75e00-78cc-43e6-9036-bb0df254e493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcad7c8-eb5a-43f8-94c2-ac362b7e2370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b6dff6-7271-4045-a495-88ff674449ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e13c385-7034-4893-8850-05ede94be1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dec0ae-b74b-4747-9da7-018f89794ccb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36040780-c58c-448a-9f35-7fd6e584df74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a32655-183f-4438-99f4-0a022d420498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddff626-e540-40a5-bf77-5a4d74158a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "604fa2e5-c0c4-44c8-8d03-33f48e0f6c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b5b298-e6f2-43a3-b6bb-271466aa1ea3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b4db51-bbd4-4fa0-8cdc-09613631bd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7023d24d-3c03-4ea7-8c0b-af3cf7b9b79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55a9e79-adea-41ae-af8c-16b9c13f49b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc9b01d-9ff4-4650-a4e9-497f1d603115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5d7a12-0ee6-49af-b838-9945f33f3edd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778749fd-e777-4728-95af-b2b11a1e430b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd04c17-1c5a-4861-a9a6-da681b589d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78877065-0817-43e1-b0a1-311755b91850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ec288e-f22c-4d5f-9bcd-06d7778bfc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e405274f-aedc-4a45-b894-2a3042f485e1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2967458c-34e9-43d3-b04e-21b0c3b7704f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b72fb6-cc74-4d91-b146-a1102826995d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9acadd-c1ee-4077-a9ef-01a5e8ad1691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a72e57-206c-453a-84c7-5dc1443cf33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3a3b72-6315-44c3-8ef7-64cf002c4c4e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04515895-2741-4819-b26f-d3b20fa7a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a3e07d-def6-4109-8957-09a1292b9a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c60864-b62f-4258-9fcd-e4098a4d236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "393ab855-984f-451b-8fd8-b89e8ac75469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316b737a-7507-4351-9b34-1dda5eb81501",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2642c686-5063-4b52-bb86-b5b5504f64bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac32c4d-baee-4576-9178-bcfaf5b66065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5168a46f-e73d-499c-9c84-83d8d8c08f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe21efbc-6544-45be-8342-1facd1fbe2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be18689b-61dd-4155-9b16-fb12019cdc9a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec841f25-870a-4002-bc99-806dfd0bb659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151c3256-aead-473b-b8da-183ff1d1e0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4c924d-a8c9-44f7-a612-2f8154950152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1af0a026-1533-4d2e-95c2-39bcf8a75eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634545ba-2d7e-4a8d-8444-f781ad32d95d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3031114e-fa1d-4717-b401-2d3d58e1edd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b95f14-d31c-4809-9c92-bdb5cbe9154a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca88a1fc-de8f-4be7-aa28-29948111ed55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb6d960-ebf8-4691-bb03-bc7b3f2bbc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28310630-64c4-4b16-8c7d-f48135d18ef8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8cb62d-6104-4c78-be02-02f62a47461a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d68d93-21d9-42a8-b137-468a12f7aeba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530cde0f-889d-4b4a-9da7-4f98cd57a64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b370bd48-e5c5-4a34-ac27-0e05651d8352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa6912c-fb1b-415c-ba6f-b5301d50f43d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6b685c-3730-46ec-bdd0-a2896ad16904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8005f1c1-6975-4737-a013-0866a1511747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e25ffdb-e8f7-4e8f-89bb-65bce9ced33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69ff81b-a9cb-419a-8a26-a8f6d208b124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7998079b-283f-42ae-a975-a3895e1e47f6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7629d4b-81d9-4956-8472-17df0727ee1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a0f264-eb0f-4c7c-ac75-aa66df442e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151e9b6a-358f-4396-82a9-c993b13ff1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b407316-70b3-45a7-843c-cb044fba0c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3f14d8-19f9-4b7a-9e93-ea83726027b3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340074c8-51e5-4d55-8473-4d0de9404460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2490920-193d-4303-b680-cb3758b2a0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69498ae-052a-41a3-809c-4809da6985e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c661a12-4eda-478a-9e6e-7adddbea82bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7058805-ab31-4f9c-8428-892d489a3deb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0349b6a-32f0-437f-87e0-3fbd9928753b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57249448-053d-4aeb-abf7-d8567a193571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7f372b-f056-4dab-92a5-dfb0d8cc5d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ce6b6c-abf2-41ae-b0e0-6e49f83a8d6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62577247-6819-42e2-8b61-b50d8470d353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "378af8c8-de3c-41e2-a001-a3242c95f0cc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad88001-d680-45de-83e4-bea17defc370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94729d92-2d44-452e-bf3c-26927aa4f651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d61ab4-42f2-45ab-8557-78a7d0df48fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5ec16b98-f6e8-4e67-9da5-8cba67b7d5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75901d16-3839-4776-9752-e740a3bb4069",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700decf3-a330-4092-b60a-1f5873d7a610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3113304-7309-44bf-82f9-b4b86b2e6951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6eed05-7e2d-44a5-9e0b-bddf75df6e09",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ce0ec400-6ed0-4863-84a1-373694067802"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e9312da-71c4-442a-ac92-6b67ffe01d79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25ad5023-14cd-454b-8ba4-2a5dc4425068"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "030c83ce-8c4a-42ef-adeb-eaf4ce39f5c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c7971d2-d4f4-4b6e-b23f-c0f3bdbd64b4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7aa6f4ef-abbb-48b1-a132-0c3b5d37c23e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "595dce32-5902-4ce6-9871-5f679cce997e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d37f8e85-c2af-4cb0-a396-9c15f750c4c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c42da15-87d6-4a5b-b25c-687fffa05be1"
                }
              }
            ]
          },
          {
            "id": "95ddd46c-cefd-408f-832e-79346afefbe6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "27fa38ea-e31a-4634-9f39-df5355d83deb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10350fad-0431-4794-a7de-7a6a822e6934",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7af2b811-7010-4e31-8e13-fd7ca1903f94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c82a2676-dafa-48fb-8c07-f49bee92629c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0244422c-22ca-4882-a1bc-ad5a6bdcdb82"
                    }
                  }
                ]
              },
              {
                "id": "d2bc6df4-0f4c-4759-9908-ff0826a8897f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97adf435-e78c-4cd9-83cc-a2fa974dec0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18b06215-9a68-4bb4-a1a6-290bc14db140"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "125a6d97-998c-4ae0-af25-793124235e79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c81eca8a-9e9a-4122-b2ba-42a2a2995912"
                    }
                  }
                ]
              },
              {
                "id": "72786329-c8b5-4f47-aece-879f2c209ab5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac0e1a6-3442-4bc7-9d66-4e2c5c0d582d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f218aa5-19f0-4f5d-807b-1dfc8852e6c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c38074b-13f1-4cca-93ea-7028716521c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "72a1a195-7a4b-4ce7-b9fe-295b1b88b865"
                    }
                  }
                ]
              },
              {
                "id": "6a16606d-f617-439c-a172-1952af10f037",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a53da91-9794-4ff3-903d-a534db85819d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68ad7077-7d7e-4590-af73-cef3e9f6b762"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d87f2b13-10b9-4c3e-acaa-f6814445d112",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4e13d0eb-571e-4d8d-93f3-1aff7c20e379"
                    }
                  }
                ]
              },
              {
                "id": "9e4f58a3-6c90-4cb5-97da-c4c5ecb46314",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3dd5211-06b1-4ed7-a0a2-63bf469013f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5de213d9-8208-482c-b7a0-9715e3f3edf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01c1d2f6-d732-4837-b3c5-e02f145923d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e6420b8-669e-44d1-accf-bc7bf83e69c8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27fa5806-27f7-4990-80c4-a239ae9448df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d99e3dde-083c-4029-acac-2f6a09a3ce22"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e31ad9f9-994b-464f-83ea-c40258dad693",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5a5e648-3579-4945-9e25-4c60dd7dc737"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84051eae-bf2e-4274-810c-272221a57601",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ea129644-7f45-4d37-b64a-e01087edbd5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7613198-ecf2-485e-ad02-aa777a1ff15f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9094aa3d-b718-4a14-9c3f-0550d4934b7e"
            }
          }
        ]
      },
      {
        "id": "9e7df6b7-5e5f-49bc-8bfc-bbe41b0f6cbc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8762de12-c534-4630-805b-1074176efd7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa8d2132-0a21-4479-9a7f-eaae2ef2d482",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6a30fdce-5627-42b2-a6df-9f48d456989a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d4b027-1977-4ec4-a3d5-0f03f97a5b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c6f715-755b-46d2-a51f-c5fa42b2f3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c70ad28-7df3-41e9-9b90-7c76de443443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b15c92-c533-4e21-8a25-4f8a60d865d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e53211-5518-49f8-92cb-9f8863ffc38f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a82c6a4-469f-421c-9833-1814d8df9a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ee93da-7335-4118-878c-cd36fa30c305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026f2a6f-0c1d-4830-b324-7562476ea8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aed12011-5639-4763-a3f1-5829e0a284fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551197e3-bf21-48f3-bb90-1fa3cafdf923",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b273bf-7165-473f-9f18-3f6e5693d264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1698b896-dea1-4c81-9add-d1d707bf21b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf7af64-e6a1-4532-8b0b-6e36f83d77b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fcd385-38d0-457e-ab4e-ee12c998f984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5688bf-06ab-45ff-9ff0-1bc8839034cf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0e80c0-948a-42c4-8fd1-709c7536bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e215d9-e2b1-451b-8de9-a8d44c7cc0fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1869d9-b6b7-4566-bba0-62ce2d796bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dec2a8-6761-4515-af42-49bdd0b1943d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc45f2d4-f0c8-49e6-a9db-ea438fdc3d9c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51966c2-5566-404b-8678-719152312ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab62a3a7-7700-4ffc-86ea-ce8058198586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae882256-33a4-4a96-aa1f-253757dd8345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdb007e-4e4b-44fa-8617-5dac9d38b04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6d7491-5d91-454c-81ba-f17acb650bf9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bfe731-813c-4cf1-8796-a9d378527cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecbfc7c-d0a6-4e08-88e3-a025eb49946f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00393342-4f2c-4ff1-90a5-7e90e3500664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3f573c-0146-443a-8340-2a0520b62575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263f4c23-82bd-49c5-9ac7-24bab99824e9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a21095-1ad6-4ade-826b-9556021c73e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a09a338-634d-4a89-85a7-5164101a1c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67ed21c-9500-4ad7-93e8-e71d4bd0748d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce77c24-148e-46a3-a0e3-0ec8ca658b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4026c0-5e39-497e-ab9a-5d51bc38a93f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adba87f1-6486-4bee-ae55-11d67d5b17f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075f678c-bd58-4dc4-89c6-700e421f3da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130e3c99-cbe1-4925-ae52-3f6ddab12671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4a11d0-1b32-40bc-8d13-0a92b9fc7ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f298a627-62a5-4d97-b82f-05a14596acf8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeafdb47-8c56-4e81-9563-dc3a49a479b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3f37df-a755-405a-8017-371fa848e515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b101fdc-bf68-4947-b92c-f2baac83b5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d68af1a-2ac7-4ec4-a099-8b7f437c1bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86b7dd3-e077-4318-8705-d1b07a7e5602",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585d813a-6206-42cb-a2b2-9655000788b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671e57f6-62dd-4a04-8c87-af1b53750959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7229d290-1136-43d7-a5df-c5eba5cec5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b26b0290-6b6c-4ed2-adcc-8b1301acf971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae9a12e-3c6a-4317-b8de-6094b26af11d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce2c354-25c2-452d-aa7a-09445816db0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b3f15f-1afe-43de-ad4c-8d3203549d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576e7e94-3bcd-42a1-b75d-336cbba761ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "09dd069f-03a1-4a45-9333-b0d260a7c175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07151820-bf34-457f-8a01-5edbb45c6a22",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990a1b4f-5f71-4af1-876e-f995aa575fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021c1ec7-6dd0-471c-9a3d-b3dbeba20da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a37022-6fc4-400d-aa23-f65dd02dd225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de84d46c-a302-4331-b9a3-ffbe3785f6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ba2aa3-8a60-4de7-a477-7f74c83f948b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6930f09-95b8-49bf-8738-514a01479f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f2cd44-b282-4411-930a-d83381742f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4041e06-2640-4ab8-a304-e24e8cb5019c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f85040c-8dab-4bbc-b4cb-20d8dd40b26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe80ce-0731-462e-82fb-7bd9a9a3af24",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3077781-024e-411d-a738-c77db5ddc6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c966390-9a7a-45fb-8a3a-2b1b6bc6dd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08812c09-a898-43a9-ac93-c98207455251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "02f293cb-46cc-4dbc-a7d0-7fc64b661c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622e4aa9-eab1-4193-bd12-9ff3f3934f03",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640fd7c1-395a-4f6b-b018-0d86f7561d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f382bd-18b8-49c8-b5d3-11b5f6d1bb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262a5870-49aa-4516-91e3-b50e62ab7985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f724acbd-19f3-4127-b9cb-7366bae306c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72e94c5-05a9-48ec-95a8-3113f25d7dd9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435b414c-c5d6-4dfc-af21-f135c19767f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bf2cac-c0cd-430c-88ec-59336ed3e26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca46591-b0d1-40ee-9048-54c04fc2bedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1648c892-8a14-4f60-a95c-d65c70ef3189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25af914b-4a04-4ea7-b263-6806ff362327",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82eeb204-0772-490b-9b31-3e1ae49504a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d9e11f-a7ae-418c-a62e-52f496865fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18bb6b2-462e-4644-904d-e2bbc970a5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c706a07b-820e-4069-843c-fb41e76ebb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da30b4d2-2832-4a18-9fa3-45c2bee3df72",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f026b99e-2640-4896-a9a6-bdd48a4551ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c025ce14-4bbf-4733-844c-0478e2d1bc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca48fda-6322-4ea1-9592-618025df79ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a14d873-652f-40aa-b9d2-380e99ced03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549dc919-7aee-4a0e-b5ad-d7a996b8fa4b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dc5cae-af8d-4737-9042-47a05e692b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3a4a35-9044-43a5-b894-041e55cfee32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d915bb-a6df-484a-a9c4-de935d565a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef39d18e-7e30-4dfa-9208-735945360d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4e92b3-6b52-4c01-80df-aad39576c2ab",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09671fe7-53fc-4b99-83a6-9631d3e9c4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ccaf1d-69ba-436e-9ac1-1378693c2c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e67b4c-a949-4073-8322-2ed057766f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37646b6-558b-45cb-87e7-f7f2097f2b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabdb73a-6e11-442b-9e89-b9a289f50f04",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064b60f4-ad38-49da-b9fe-8fc95412d744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f79e2d-d922-4547-8866-8b92fa51fb63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e024b99-eeed-443e-89e3-7bf95e0aaab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c0466f-03d0-4004-84f1-b65ba0577e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51933d97-79d4-45fa-9681-f0f28fec4d65",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78677811-eca2-4ecf-b7ff-8b3b8002c48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791260d5-b0ed-4282-883d-2e29aa1a3768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45551a24-7173-408d-bbce-11df62fdf1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35af68d-deb3-4f94-b752-315efc367545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bda7b1-e246-4f2d-9a28-05314827b7cf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64b9363-8fdf-4802-8927-dd8c4bd07408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5722255b-de99-489b-9b89-34afefc11bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914779f3-6df1-4d64-be53-1b2469ebf746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9107d2-ab85-40b2-8f36-c82410b09f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23672e2-8bc1-4d82-8c78-c919452c53d0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef50007-7770-462e-97ab-6ef72ef1ccb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ba7182-accc-4b03-8fb3-91407adfdea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eaf862-6b2b-4d0f-8f9c-440c78988602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2516eb99-9947-4ecb-a75a-28f3ef7d04c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4da8e2-347b-4dbd-ba90-ae60bd37bb81",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e26657-a2ee-451e-a9b6-f35f47ade9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adbdf01-f884-484b-aaee-02e84a12bf76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe3de90-3efc-4bc4-9193-acd291dd084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ecd838-614a-48bb-af7e-c6a3934fbc15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7c90d0-5290-4203-9376-c172bc0e98a7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2aeebc1-81fc-4458-8ccc-620a029207f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e34b45-4cdf-486a-8beb-274e4524083e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac587478-30b5-455f-9697-ebf26967313f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42f85b7f-481e-4476-a9fa-80a5f6047792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7c3510-df3d-4fc0-a1d0-d070d8eda56f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6b00ec-a916-4949-9d62-68741b27dbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecc0157-2cd9-4dbf-818c-1ec422135983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb0d377-6dbc-479b-b736-e740de37337a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8123a92-d654-46e5-993e-67f7c2f809da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3c69c1-f830-4e15-97ad-a18b625afa58",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e4632b-1a66-4496-8c23-c52c794278ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc2313e-2b05-4307-bbf6-15978d9354b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a331937e-084d-4c50-8eca-7f1939cf0aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9441b1-096b-4ab5-8b29-c162b5b6a1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add354e0-eced-4633-bd6c-9356c07274a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afab0fb-5e81-4109-924f-15cacde67551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c771992-ea54-4deb-8616-61a0e7f223c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537e7c1f-fd3d-425a-ac98-d20bd1724ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcd6105-845b-40e2-862d-b00119d4838e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55271fb5-abe1-49d4-ad96-397dcd5a0300",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818bb6a3-5913-4a83-ba17-db863adb37c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eec3027-2d84-48b6-b988-c0f855375e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4582fab-da34-4e03-a95e-497e6e970b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9005dc61-29d5-48d2-9d73-1ad5666be2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb8028a-9d5e-46fb-ba17-7d8063a3d32f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1aa9ec-ef90-44c5-b6cd-91ffffe48dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad076b8-c36e-4515-8af1-ff00fae79526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ec647f-0920-4992-b53a-b078906329ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae287045-ae2e-49b5-b8eb-9d3fbd0857dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e2dcfa-ee0b-489b-b838-286c86195009",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af88f365-0a7d-4bec-aef3-58e61de749ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4fb2b9-2bcd-4b6a-9d41-2c06425a85e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30cd550-3dc6-4e07-88c2-a457cfa541e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2746a0-4a08-4633-aeff-9828097e86e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b65f074-4391-45f8-b282-38fcfa08867e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51a06de7-48dd-4f6d-ae3e-195d1950b6aa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b742937-b880-43a7-9a6d-d6307b296d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4140141-b192-41d0-b4cc-a69637d1a942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e196ebc-9bfe-4e20-bce7-c6dea7102005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b23b6ea-8cfb-4141-8592-636c4cfa8901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0056b8-67d0-427a-baea-0588a9aca62e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee56cbc-8500-424f-b269-77e68af4b893",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e130b3a-8a79-4192-aa39-24745081db55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e354dc4-bd11-4b08-b178-5c927f2407d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58d36149-9bbc-40ae-8020-13860cfa964b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8934bbc7-e565-46af-a341-3ef7b924e1ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35183d51-0e1b-45dd-b083-70eaa6982447"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2583b54-d5cd-4081-b2ed-7cc90c3c4077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a32aa4b9-207c-479d-9b20-16dcdd00aa11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51f14b65-07cb-4eae-a9e5-86bd3228fa9d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b58f0d6-be5f-49cd-9a35-dcba50c627f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7b0d20f-ff27-4528-a257-2d059f8aef88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f761399a-a86d-4341-85aa-3f888b8d80fc"
            }
          }
        ]
      },
      {
        "id": "c817b8f2-6640-4d8c-806f-f7468f61369d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ebe7a4cc-6aca-4834-99cf-16a4f350c58f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4c05cd3-595d-4219-9468-c3092816185b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "08f3dd7a-9cd5-4447-8abd-2fe491de210e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6933d3c-fc8e-44f7-9f4c-9d21ff6d752f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cfe5c2-4bb9-4e98-9b71-89ea10db1936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a6c1dc-cbdd-405a-a2e2-477863fd3953",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a8f347-33d2-4664-96e6-13c47d4a8a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd57cc1-2c64-4573-a9af-837b4890732d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb8a036-a315-42e3-aec2-e2378621e399",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7157503c-b19a-4725-8d7e-8a3cccedec77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbb803f-e7fc-4255-a3eb-860872ea8e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3472be7a-e2b8-49ed-ba65-1b0baf13fb76",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af225c2-d74b-4482-9d6e-fdbf69c86cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736905d6-3c74-426f-9d5a-663c7da8ef6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e530600b-165a-4c4d-a74c-0de0f0217025",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba13af4-b3fd-4657-bf02-c257b0ea3fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2864a520-bd7a-4b83-8b68-e0d5abd1a745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76eaabd-790a-4567-9600-2a1d28e76f12",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef16b3ec-85ac-4560-a1f5-627ee9e01808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95bcef8-8a0e-42f2-8702-4f752b8034e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c3de6d-7370-4f81-9031-41b1d0d568b5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b48d66f-88f8-44aa-ac44-4c826626ad14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d52b1f6-0e9f-4f42-88bf-296f9089d3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fee01f-dfd5-498d-bce5-2c54608cbc2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcd0d68-30c6-45a9-bc80-f6710f642977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdc8209-8e27-42a5-8744-abe0b847e6d8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f591f6-2df4-4a3b-8f04-3143112a4336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf946a75-e87c-4a84-95b1-a5e6f11e586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f792563d-c595-4457-9fca-9ea3fdb17ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a079959-b76c-419d-a17f-2f33dc599772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9906e229-c28a-4121-b55d-49d4313317b0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8abc9b-1499-4dbc-966e-58dfeb42a2ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553ca60f-fab2-4c76-bd52-77ac0c42b49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad1379c-c014-4797-9893-1758dd58ea6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f202ff5b-3826-46a5-baaa-c9c5463a68eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9113201f-c7fe-4b70-8074-543ca4606ac2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0914ce32-490c-42f0-9ad7-1f08f895ccdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354aa03a-8c57-4322-9c06-cfc2e7808b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "330b6bb1-4e66-461e-949d-ac6f841fec15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65cb731-bbbd-4dc8-aff2-729cf202fde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34908b6-8f51-44ca-afd6-60d5e5371874",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c933d89-31a9-4c15-b29a-6db3035f29ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221ea39b-e9cf-4212-9132-e29cce7df4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d2efd5-242f-4b30-a112-452a825f526b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5799d52-e82c-417c-a6b3-8e2ae7a40e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c642b77-babb-4543-84c6-6e7ab137fa30",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685c0e8e-a948-4f6d-8e66-ad384a76d857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84b04ce-8a5f-4c15-a317-6d5053e3dd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0969e1-9f6b-4b46-b28f-36845a01be38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fba651-43b5-4df7-9290-b0825c9642a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ee58e6-7630-4716-8997-cf1c62f5d8c8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b72c99-b01d-41c9-9b89-e7c2ee6e2ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66bb4a3c-2278-4fed-8905-6d372e42d07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb828dd9-50dd-4de7-a1b4-c9e4bf5f2600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25c90ea-ffe9-4aa4-b42d-4c322329de59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc24694c-e73e-4d93-8b5b-5aa40e4c3475",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f50a523-f0a4-48cd-9369-9d9423631f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b309aa-b7a7-43da-9854-cba2d86f6008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f5a585-7938-44db-ad79-8f1770ad4a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400ed55c-d07f-474d-8ff0-2996b76adbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fcbb96-e966-4055-a5a0-e394deec1fbc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a29e27-60e8-4dce-ae06-c52d6831b206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26d1106-f05a-4e88-83f8-ecdcd6d19ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa7e7ea-5070-48eb-bb8d-8826517e6af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b844d3-a203-4355-9ae7-c3ae6a755fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756c98f0-6019-47b8-b52b-b755946b99b7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f93d85-8b24-472f-9963-50d46932b48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "707cd691-c659-4c46-88a6-c8961a70aa5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d7ed92-320f-4236-a666-3577a22aa4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d976acee-832f-42bc-9b94-1975eeed38b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a511cc-012a-4ee9-839f-adc28b017d98",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497dfa81-47fc-4591-8b4e-0d58c3f1631f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb626c18-f929-483a-9cec-8c28edc39a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab49fb3-11ef-4890-9591-6990a9f4ecf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce8a371-ef0d-478f-8112-69d8cf220184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6a4f61-606f-429d-95cd-3d355d5b99d8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1136bc55-5351-4ddf-9eb9-8df43829ed83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8567e2e0-706a-4f50-bb1b-6a17331c1a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d3d4b4-b3ec-40fb-af92-7b3e8b18077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a5d7f6-4e47-4a09-9dce-c35de23c84f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1144857e-9cb6-4acd-b298-0a3d30ab0e51",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9041649-ec6a-4b7e-94c8-33d905299047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026ef734-f6d4-4a9a-bf0d-0aeb5f359b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c5dedc-58a2-475b-ba7d-cc8a8b39e8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00b2719-2dc5-4a36-925c-94e34e44531a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0caea0-31b5-4f15-a363-08ba87c7b4d9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaa79cf-7ca9-46d4-a394-8750521e0491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cc10c2-8294-4032-bb8c-b3c51a1461f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e86d06-bd78-44dc-8056-efc82d70d8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d000d0-6fb3-4026-bfa9-3a575eef6bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d9d334-2aba-41ab-85a9-1013045fd29d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95096679-b4fb-480b-8842-4c2ff0a5ffa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638b313b-652b-40f2-b6c4-f2ed4543c7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab4ad6f-7fa4-4a75-aa4c-4c71af3a7a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1f922f-6021-43b3-ab94-e6effdd927a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be7a646-22f3-45b5-b3c8-bc4972119550",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6af7cdd-6842-4e90-bd3b-a127bedd2984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d3bd2c-2d30-484b-bd95-734703dfa3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44eb2f22-5733-486a-a97e-419270728aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8217282f-3331-4381-98cf-041d53bb96fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eeb30e-b883-42cc-ab4b-5c59f0e12919",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6c99eb-73ad-4dac-8ec3-e43b5c813d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7212a67-ebf3-4cc2-90c9-155c73621654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fc8568-d90b-4857-91fd-0b1e5771efff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3ce309-063b-49bf-a770-da877fb266a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052427ec-5a88-4fa5-80b1-92a0d4445d5d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c2971d-940a-4b9b-bb24-dbb68c16cc33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c82116-f42d-454e-8edd-154bccbdc793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9434f6-a502-40d6-8f68-1269cc2ec7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aba68b9-123f-493f-9442-be11a0303b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2ce924-cd22-4eb6-bf52-2be83d0df624",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf58391d-13ba-48d9-a9cc-9a49a71475c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d79a487-5b33-4284-91a4-4b7135b037c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9be5b87-31eb-4897-b46f-5cf2910e886b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ced7da-66c4-45d7-ac92-d891397aebce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd19cc5-f8e8-4b41-87dd-8e6a7e41aa86",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3839ef4-c87d-4ed6-b457-3612b42ebafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fcb10f9-2f39-41c2-ba92-7a902b18d1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eabb1fb-1744-4aed-a932-9e571bf3eba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d8b765-07d0-4a05-8385-913a87d8063d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a45a546-a8db-4677-8e56-4af74f0b1521",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6457cbb-5eec-4c33-92d6-c401a017e545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d0bb2a-d720-479b-b1f2-7718087b1ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f743777-5580-4256-9fdc-41d573b556c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a794afc-18cb-4ca8-90e9-6fcd379ba806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a871ae93-7b6e-4b95-98b6-976b9fcc9436",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da43f2c-d149-487d-a39d-f0af243fda63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d21eb8f-414e-4267-b2a1-60e03f28c008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1a3ddf-091a-4e0f-b62c-a1d9e5aa67e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e519084c-3eab-45d9-b0bf-9f95b2c7c9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c09201-10e7-42f6-93f9-f255f1d35d94",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60171702-b95b-41dc-8396-af7ba37d2162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342cec6e-dfa3-493e-b956-80da088a52bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b7a0bf-7df0-437f-a664-4257be0c2bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d7dff7-ab3e-40b4-9184-ada97d573699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdc5075-0cac-4da2-9d79-a08ef273577d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2504f6db-d620-48a4-bed4-1975a4d19fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89cf4f0c-9921-499a-ad9f-7bbb0ad782d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c576c9-1631-47b0-8f9a-891684e9713e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f01a5e9-63d7-498f-87ad-5b332dedc3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5993854-079d-4b1a-922f-254cd6581116",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce71675-8824-4f21-b18d-6c834c2008c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479457dd-fbd1-4d6f-9d41-65d250992292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed0d7fd-6674-42c3-9bc9-d856acaa881f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fd69e6-3306-4f4a-8735-89625682cc3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aae6338-725c-487c-b5ef-752ae35f9363",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c819a4ea-6bf8-44b4-bb14-c8c23b1c19c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f12fc749-34f6-4fb3-931b-80c6021d5164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03775009-b46f-4246-8471-bd31f00e3416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf7e343-1d9f-4812-9976-625fa98d559e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6e5fb1-dc75-4c02-889c-8d11e9fa4dc8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade07e6f-137c-4a92-9d4b-db8ddd4bd0a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7613c0a1-b094-45b4-8d3c-7b379daf86af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b890e-6bfe-48ff-97b9-8dc29303a419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380e74bc-c41f-43f8-9990-05a6e0bebdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f701c9ac-f20c-4ce7-aacc-40cad784653f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5ed294-d63c-4e52-8453-a6aebdd4fe61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "707f598e-bfd6-47eb-82f7-30c7f9ab472b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f576262b-8b71-489a-8841-bb2e90a624de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59166ad5-1c81-4fd9-9db5-d230aba443aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722e5608-24d4-4b27-b721-c0a54e627f78",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2799fe-15f7-42e8-9cd7-f5fde95f6ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d49945-4559-4fa2-8d60-09018a5b5ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a61225-e9a8-4481-ba08-964c15566615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95671c1f-1bec-42a7-a2c8-0e27db418779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0306ec5-9009-41ac-b287-9aedeba392e1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd03995-b8a1-4bd8-a085-f05ba044ed6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3373e4d-3dac-4088-a63b-f6b825d72930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513a1f1d-9640-4da0-acfb-5605dd6ad16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758f6fd4-6944-4e46-b808-26e11dd84cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0f45e8-16e5-44bc-b28d-19e4fafd1e72",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b28d80-c731-4b32-81ec-04b1cbcccb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca02cb9-cd13-435d-9240-eb3c3082ea55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7aa7f4-376c-44e6-abb7-9f5750d8e2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9166a6e4-4e61-4ab8-a062-de9026c90e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391c7ccf-a9f9-491e-81de-430ed5e88b71",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66ab125-2051-4f40-b9cb-4bec6df3f17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9366c205-aca1-4b10-905a-21044c441ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759494e1-73ae-4ab8-95a6-2dcf201bcf05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d351639-ba41-438d-86a9-7573ec2ff390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfdb1a5-9b98-484a-af76-391dc7277d7f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75a2ac1-964b-44f5-b41c-f7bfe6ae6ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ae3c3d-2a33-4431-bceb-266c6d33ba95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87cbc24-38d9-45dd-bed0-aa5409809e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169601c2-d4bc-4314-9770-c3551a71b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b648ee5-c6a7-458e-93e2-d934427f14ac",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0d8720-f5ea-4db8-a53b-085a18fc9991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563a3747-bd91-4a9f-b5e6-747dff8788e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae023a-32ad-4467-a4ac-b3869fb0041b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a47227-8527-4c0f-80f9-08c3891edd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353ecf6a-986a-44ee-8f20-ed07ec3b0697",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbf1f51-a8ae-4c19-b5ca-978780ed5994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785397b7-4bb0-4180-86b6-69f769684b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103b48c9-e2fe-4f5c-be36-0f4daba417a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e161fc63-7307-4eb4-b4ee-02d981210b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7b561b-649d-466d-b551-397133677c85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af26cb1-4eab-4c3b-b805-af84ae8e49e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee147ea-652c-4b28-8966-4c4013d1f666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00ebfc5-cfec-4507-af19-db626659a26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055e119d-76b7-493f-99bc-b782f43ac63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96677523-41d6-4e93-b014-2159b0ca968c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8ee3e2-8225-4427-ae2b-48f98f3f2a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f333a85b-3dc4-4a53-8906-754f43c03be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d52dbb6-a0de-44f0-a2dc-e5cf5728a624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e670e655-2e2c-4c11-8d26-9769f33e0724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c6ffae-850a-4960-ba22-5cb88a0fd00e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee35817-3347-4fd6-8db8-80f454b0e0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c05fea2-11aa-414e-9e8f-1ae0ca4b328c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0fc501-4465-488a-841c-d2b462ddbe13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046af756-8d17-492e-a0be-5ab7247b01f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d601160-7431-4cc0-8d1e-f1e4cb839afa",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f30190e-5410-4863-835a-4fce9c52e7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58743019-c72d-4a32-87c0-7ebf910f74ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0b2269-edcd-47ed-98b1-10f61858ce1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aedad45-c8c0-4350-a97d-d470fb53b70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ccb5f0-81ea-4460-9b53-e101a234a070",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d1534e-df3d-4e94-992f-31ba889f6689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b082f0-402b-4a32-a7ae-df6880f3d505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa06a537-c897-4866-b32c-69ce18467ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5718ef6a-1eb7-43b0-92c7-b538e35ea7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b840d481-47af-4d2d-9ff4-ff1d84cea594",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b443fbd-db23-46a4-9558-96b5ea4f8465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4947ac7f-d8e8-45f3-ad6b-06caef07d877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a534e54b-6801-4c69-a866-a668a78a1f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac404c8-0815-4ba0-a92e-da0b680a0ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c572eb-ffc1-4bf7-88db-5bcc9722a44a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b49ff3-70e8-46a6-a87c-1c2b8e33c962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3064706-9829-42d9-88bf-11302b9de86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d01183d-c81e-4b08-bd88-3ebcf4a474de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796ef2f2-a52e-4629-94be-1128732f989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ff35ca-3a81-434e-b8be-bb5e8fdfc471",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c3b9de-4be0-442b-bc76-054eaa8413c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf328b27-8e0c-40b4-9713-183c3f852753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc989db-a59a-4f4c-b7fd-81a93a46c1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad65877-cc39-46f8-88db-9370b422294e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c263d928-6489-4ea0-aca4-5c53d78cae17",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c8b55-8805-42f1-8275-8ffa194ebb70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608b4232-e064-4728-85c2-1e9a906d032c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799ed081-e6d3-4e7e-8d0c-b617a26998c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7306b811-a955-4638-90b7-672c049ab3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60442aab-e7b9-40c1-aa64-bf6f71138482",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc79742-355a-4277-bb1f-0ae1473ffa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e3d069-b055-4d4a-8cd6-17f2f72c55fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9921f6-bde5-4b0d-8d4a-ff368646c349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0aab483-1699-4d55-93f5-1546807dfc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d118728a-3841-451b-a639-443e2c1c9686",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f74ec4-a4fe-4781-aded-b03df5c78206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5707b1-3148-42d5-98b3-197e212e1ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b0aa5d-451f-4eae-bc1a-3530c93e6aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25cbb3be-a097-415e-b60f-ec5f7f5b8316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcec9a0-c09e-4aa9-b3f9-c3c63c9a2ae4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62195209-1972-4955-bf34-4f20231e9d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f16236-7189-49e6-a264-d31de6aad722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafccb7c-a766-4423-8cc9-d38c4903cf1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d595fca-a4f5-4f8a-b4ae-deabf807c6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16410d95-df9a-4ecf-bade-1c0d417e4db4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec54f23-b1b6-4d5a-bac2-2df8f9b7e147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dd7164-681a-49d1-ab7b-12d15c3c7986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337fcb28-5c12-4ce0-81f3-7ad9a4f327c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be4b1524-a4d9-4a9e-ab9d-98e2d46a563e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff0ca5e-aa7c-480f-bfd8-abca5f5ca9e0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f950b359-8b24-4053-9938-5f240efd670c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3089a32-ffdd-4310-a124-c3177fbb5720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f606448-2eb6-4741-a85d-a0ed786ab7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d600f9d-a966-4dfe-8c89-74f3b1cf035c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9942c0f-2567-4047-86cb-0b9d442c64d9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c56bc4-e36c-4791-94f4-5652b6e28199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0f5829-a1e3-48c0-8394-f7fd6768b1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6058a4e-ec77-4645-a1bd-cfc0a9210143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e63cf8-b7ac-442d-9721-4d92c7e7573a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51df8c5-7b29-41ac-8350-2add648947b6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da64d03e-100a-49b1-b426-4347ca9c7b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fdb2b1e-5f06-45f0-b914-0f14c2e62da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ef1b62-a90c-42e9-82d0-035b8524fd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73674770-017c-4e91-be14-defb2922aec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6400352b-0a52-4f7e-a65e-f11f15efcc06",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4094db2-199d-4f67-ae98-386276a1bb4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1672887-c89d-4e72-bfbf-ed38e4cdcf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6d187b-e158-41c0-8f17-44d4b6e0a4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bb81e3-9024-4858-8386-88922a88009f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7763f463-6d46-4a35-bb2b-37b218bed390",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cf6d8c-bfb6-4569-a282-2fe0322191c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3116ca00-64df-4ae2-8a12-39a100813ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6758df-426a-4d2f-b72d-92b86927f5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948a3407-fbe4-4177-90b7-7250005f8c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efea4db-2304-4135-bb18-33e82b8358d3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b00826b-f8a7-4354-8465-46c49e5fcc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa818329-18ef-451a-b8df-e79d4d2f644d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7ccc5f-7a3c-468b-a790-53b8747b27c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9ecf94-ebf2-4ca2-83b1-be2daf7ab841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4ad55f-cd17-4568-b521-6528a117e185",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e8fedc-69e7-4b88-bcbe-cf471a4670b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2154f0de-005a-47f0-a99a-db721019d4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc02681-425d-49e3-849e-3d11968764fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e03a5ea-44b6-41b5-a7ea-0cc79abc8356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9058b2cd-f329-4a77-834a-ed0395a4b073",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c9ecca-46f2-4475-9091-d3616c1cdebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08517843-d949-4131-b232-a3a8a573762e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1ef07c-3939-44b0-aa0a-422c3c6121bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433d461e-cc81-44cd-8978-0ad09ef18df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bda3d3-3250-45ef-9781-03b3689c3922",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0e5567-ed6b-4f5c-ac14-000485537d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd514190-6533-4017-97ac-d68d8cb07932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d7f5b5-58aa-4d13-8906-95a81851ef96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692aaefe-c004-4c3c-a5a7-101613b17ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac9d099-b476-435a-8d9a-baf28cbbd6d3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c6af6e-68ae-41f5-b76c-b41612020653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4965a1d8-5655-467d-9e2d-bf779f577df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c03447d-0617-4159-bfff-6f93d6295242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d79bf6-680b-483f-a9f5-6b764a1984f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cd53a0-e663-41a3-bb19-5fcf8e23e2e3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebea74f-ffe0-4531-af26-3fb01339b63a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72aa69f4-37ab-457f-b7fa-e13bbefdea3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d61a91b-4b5e-4238-a667-7faf137f94c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f956198-9869-4c8e-a496-aa43561c453a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe499969-f68f-4fd5-b4ba-b40a919efb2b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a887c1-bf1b-4e02-b330-602e2fb166bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95af3eaa-6851-4c1b-9729-48789af7368f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a38701-333c-4238-be0f-ac1c704eff83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8384e5f-7b1a-48e3-848b-418b49df7931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd36ae6-1271-498f-b831-a2eedda5c895",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc11930c-2472-48db-9bde-d4daf8f4f0db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13046f39-af70-443a-b38f-744c2b831820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee89409-4789-47ab-bb3d-5f6e3f35a21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed071a5-a5b0-462b-8765-95457d894925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c98be4e-75a6-4c0b-9066-4dff9a7dfece",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d2155d-dd57-4c12-b9bf-84eebe5118cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ecfe93a-869a-4fc2-99e7-1258ade8e92e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e111d9d-b45e-4438-9947-e5ef3114c138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c94e27a-aeb3-474a-b9d3-8185063fbc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c3f87d-4da6-434b-afa5-08f0b8a0b2b7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95332228-852f-45e8-b940-9778522f0a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f5fef0-811d-4900-ac8c-28402b13fa55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b2c3c0-87f6-4966-90cc-8a8fd7c90bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a747211-b52e-4e75-b8a6-e6714924c565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5811456a-65ee-4dbf-9535-1640445e0871",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55bb6b6-53ee-4487-8ae6-d9c039d667b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5576409-2ef8-4734-822c-db01c0935dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f8dfef-ddae-4e79-a778-66029bf056d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b8fd50-2350-45dd-bfa7-6fadc42a123d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8890f61-33de-4e8a-b520-4f924407c00e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a41d2b-fc0f-4eb5-871f-9796300c5418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d14f4df-f7dc-4def-844d-4a0a216e0404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4081d2-cba0-44bd-af3a-57a658577bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cd967d-8249-44a7-bae2-3bae098dd26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4517512b-2e46-4ee0-909e-ed267679a775",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbb8b0d-2aa3-4508-bff7-8f0f7b0b3673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "815b92bb-d8cb-4245-a444-3e01838ab1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb657d79-2564-4fa5-8cba-6e1b9c849ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39e895a-f309-484c-9f5a-15a4b99aa188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e12bc35-2aa1-43f7-8233-31ea6d44d144",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb18c29b-8426-48b1-b5ba-f6ad15efbeab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80aa74d-4db0-48c6-b9d9-2922609957d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1821f311-9304-4f0a-8573-b1884e34b7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65dd83fc-0920-446d-a563-f9dc6196034e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541e8ff6-75f7-4f81-8ee5-5f163b97d5b4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a221ac-e3ec-4bea-a9f6-33ba36ca84a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfc55267-d2a4-4e82-a7f6-090c32482583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403d2b8c-92d5-4368-86e9-11081f95638e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34b48fe-3e29-499c-a456-c6a9173dffae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d03475-720c-4b23-9033-1c598ade748d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93fc140-903c-494d-bfea-791a1e245655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efcb0688-d79d-403b-98f4-5bda39926797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2a2b26-df6d-4096-913c-9a9c0ba48b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18b420b-b9f3-478d-8342-090185e532e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e57f1fd-d09a-470f-abb3-69de53b8306a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a08bfc-106f-425c-a32c-cd760029ecee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96819263-2de8-4cf6-9d69-80ffee469d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e1b856-8148-4091-8cf7-8ee7e60fade4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48960fe3-d3f6-457c-b8b9-306fc5b0ea7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf081b4-2f6c-4b27-a034-cf3241b08980",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81733e03-8bde-403b-ab87-c315b6511714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd772c1-beae-4c53-8b85-dc4b45cc2f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e713ded-9636-4ac4-abb2-f06c226afae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1faf23b2-f63f-4989-a700-2f27faf2e5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666162f3-8ea6-492c-a148-226ad1fae089",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a5ade7-e057-4ad6-a391-2e5bde8552ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b123d3e-7b7e-4052-b796-0ca97e2f6de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0ab92e-de5f-473a-8ac3-321d784cc6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53064c00-e985-4d54-99c7-a92ceb903509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2e5c91-a049-4365-930a-13efb1df5c01",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60cec73-bfb3-4885-a452-7b675ad81b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abbe76c-876c-48b2-a35c-1ed88b46b93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a8d500-7c1e-4581-9e0c-6843eca57fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fa64bf-5123-4fd4-8dae-71ef46e165fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d299a8d-1e93-4fed-a98b-43478a8d9fe4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ecaf1a-b2e7-45c5-8585-350366b28b54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae7871eb-e599-4671-b40f-aefd739ff801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cd3ef4-ecc8-4706-89dd-a1d863e52ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31cf4b5-45f8-4928-856b-ab7e8a2d5d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1430fd3c-2e0c-42c6-9a3d-0bde036948d6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dcb383-50a3-49f0-9e3e-848c4f233914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d569bf59-72e6-4cec-87b8-e52da1a4a43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b22ead-0900-4ce8-80e9-3ef8823bb02b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af861af-3f15-47b2-adcf-61ecfa092c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cb8ca5-e4b4-4768-97bb-457a5285ee7b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4818455-9c6e-4620-8ec4-a326f3d2d11a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556d69e8-a375-4f54-a401-7c1e48559ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bb895b-c840-47b9-8193-d1234c04d40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ca3ee0-62af-4190-8ddf-a72aec171387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea55013-d652-485f-b8fa-8aa198b864ce",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdea6050-abff-4365-8bb5-eccb695cd239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ba8916-5324-4229-bb2c-c91f186901ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea167cd-1c4d-4234-8c35-b89a81a6eac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9383e4d1-d977-44e7-b35e-dc2fcdc63bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae6a688-cae8-4c5f-a9d0-ba8cfcf283b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698c2669-2fe1-4106-b940-ad596b9abb46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f2ee21-8b03-45ea-a8e9-33bf33b25906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ea3850-d45d-41a4-802a-b486c04eb0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c532f9-b2eb-4347-bdc7-f4d396b3590c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b22c069-3350-449b-9c4a-b317f4443827",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9323f9a-7fe8-47dd-823c-0dd5ababfa90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f923a439-107f-4734-b5e8-78fa36e08e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abf5ee6-80e4-453e-a804-9111744256cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d768de5-0141-4bd4-858e-f0598bd50c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39b2795-f5c3-4841-933d-16d870622cfa",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7051912-d63c-4932-a71c-6f00d63e65dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f2fbb6-a5ed-40f0-ab7b-dd083847fc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c906156b-1105-4e02-b296-a9389e0b6534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa11c1d-93aa-40e4-b280-269078b303f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31da1ab-6deb-4fa7-9e8a-a1f61e6fb3ef",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcffd799-07a0-4304-ac9e-e1afccc2bea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b4da08-c2a0-40ee-939f-1ec486bdff89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212a684a-c467-4cf8-8a14-beb543ef44dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8652d753-3a3c-488b-a21b-75cc48a8b29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf87c461-f34f-446a-bfa2-bf348a17d21e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e44c12-4b70-4bd5-b753-06a1e795f229",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85bcd932-5215-4e61-aa98-f17dbb6189f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328df116-880b-406a-ac96-5fa0f696306e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e818d4-1f8a-4877-a82a-2d263f729ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd796943-d6e4-4a9d-b167-293ea6e063cd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b9cc88-78b2-4257-8322-22bb490fba14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eadb175-c321-4fe1-b3f7-0cafbdda6a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29eda3a2-0004-4e6b-ba06-3e8eb51c3946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6121f884-9a88-4446-98db-f2322e6c9ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f06b46-edce-404e-86c9-825efddf29a4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da846ce2-317f-4e17-aa4c-3e03672cd195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ed1e52-ca1d-4d2e-82bf-450cf7e752b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c87543-cbd7-4aa4-a4fc-bba760cf33fd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f926ff6-ca00-4377-9a42-e379b17aa83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d5d3ba-ca98-4f5e-8380-2a649bb24b87",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4d77c4-038c-46e0-beb2-482d13b71f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0569c281-1319-4b95-a2a7-a9c8bfa71841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f618da-c43a-4aa7-ba46-44d739f5d531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be0c1ac-2df9-4c39-9521-ae7d74b71712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3280558-724e-4d20-92e4-42264c2a53e5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e6e03f-d022-4970-ae89-ccb98607567a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7db3f137-2bad-42e3-b95f-7f3e45fe1869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee78f4d5-a98e-4482-9c0b-f6354e057ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1ae50c-8d9b-4631-a621-afca8695bbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae691717-414b-48ea-9a5a-cf68450a0ce1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c38cedb-566f-471a-9e29-a01e968e21d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "321816ff-c104-4be1-90a7-759782ca01ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179a4bec-a082-4616-a019-f1ae35798be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de13454-41e2-4640-9165-4af37366704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ad1273-10ae-4df0-abc6-6ea690ffab16",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329c72be-139d-42eb-b780-b28f2cb59410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7244d774-bb60-47b2-962f-fe1014ba7914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4abadb-e409-4037-bf8c-91d562f7eda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdc298b-3f44-4c32-a92b-78cbe1ea9c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba349fa4-4f90-47cd-a3ed-da805a8f3a69",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed761cb-0c4b-43e5-a94c-c2b2fa1c1671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c240af3b-3605-40b9-b990-8ba4744be876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870b1e87-b2d6-47de-8b42-2f2d49597155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d164cc59-9589-44f5-ac36-4d24f66c212d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eaf5e43-89a9-43b2-8f8d-b9046a5c28f6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0cad11-e05c-4f28-99d6-a854bc65963f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed01cc7-d9ac-4f6c-95f5-3e7630ef43f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a1ff9d-be60-41b5-a047-1de777d6bf80",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54aef2fb-ab84-4bb4-a710-2add01cff351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed380406-40d3-4326-8526-56f278cd87fc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4779a4e9-3727-43f0-aa21-3f21036a949e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32679010-476d-4917-969d-22f7fe04c999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fa2ab4-315a-4237-814e-b4ae1efb8ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4a958e-646d-4d6f-8ac6-d43acb5de2fe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73a28a40-53e8-41dd-8e40-89d610f2e461",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bd5b356-48e7-43ea-af04-f203291144f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74b233b0-4537-45f4-acbe-eee8117a9303",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4349f129-a131-43e0-813a-0b30d1e489aa"
                    }
                  }
                ]
              },
              {
                "id": "a73b04b0-0e21-4794-a889-aff43b91f506",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61da0b03-6c11-4f4a-9684-95d014c2b540",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8919e0e7-94d2-41f7-8a95-eb7b4f94ca9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5f239434-2e7e-4a08-b7ba-d0297c765326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7837bb6-7c5d-484c-a3b8-0e28e91eb2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8953a4f2-1ba6-4d9a-8d46-006a011348bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21002a61-4017-4fb9-addf-50748a503bd2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b9acd2-92d9-4f06-aeda-e5f75d96c485",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62433140-2826-41ea-b413-3b2d4039530d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68482c77-e252-41be-b489-7550255c2a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73c8f6f2-5132-4610-8009-ba6649333817"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcf1df08-985c-48be-ab81-e1700f18b64d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c03a85b5-53d3-473d-b540-c683fe875b70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96795cbe-766e-4776-9fac-3d8c896939e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bda569b2-efb5-4648-98c0-3749b9d274ad"
                    }
                  }
                ]
              },
              {
                "id": "92d07716-9652-4781-8a80-26b0073e3987",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9b993346-476a-4f9a-8044-f3d389b8838b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd4c45e-9ae2-4329-b6ec-c139b3e31741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "338ca5d3-afb0-47d6-8f4e-cfb089dd361a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea9ada6-dbea-4862-a4c6-19c2068a74e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea6a1d0-5b72-4e3d-9ff2-7f60f4349bc9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "60f54cee-dbc2-4492-9283-7026894e72b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9055011f-de44-4f53-b065-9265246fb6fb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "055ca4d7-c2f2-4b38-8392-1f0a81a544ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a15ad97-6ecf-4fa3-961e-788b24e1f075"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a9872ac-e2e7-4afd-9124-501b718fc0df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe616411-0503-40ff-8c2a-a0578e09a601"
                    }
                  }
                ]
              },
              {
                "id": "0ea66dea-eb06-4bbd-b9a4-eabeb295fb4b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8744cbf2-0c32-42dd-ab48-ab2e1ca44655",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4600d030-fd8a-4b20-bfd4-cd886354e1a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f608000d-bc78-47d8-8f5d-091ebeeda9dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd09b604-36c3-40df-bbd6-311795be7f0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de7fd84b-c410-4482-9989-1a56a6eb8c32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c57353e0-b346-4f64-8641-afd7bcdb1575"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e893c24-1b95-4998-86cb-ceda5f3e9879",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0e06440-7fd0-456e-b40d-55090c267aea"
            }
          }
        ]
      },
      {
        "id": "cff18aef-084f-4b5f-9daa-1c1f904ca274",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7bc0a2e2-ce61-417c-9e39-a4064610b21a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6401b10-14b9-414d-bc07-72e172365bc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba38e12f-0c2d-4a21-a963-2a857bef8c71",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "37620324-4d07-4acd-88fa-3154510d0157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379797a2-b6bd-4189-8260-9947095d8efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c582ea89-b66b-4dcd-bd32-a6128c0ef77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab1f64b-5139-4cc2-a11b-99b4cf0a2617",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff70e3be-31cd-4c3e-ac8b-37651c23753c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1a6c262-e970-4bf7-9de0-89588de53e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061134c2-f521-4755-84d9-87fe3f984d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d3c35af-da83-4571-8daf-203995b42752"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92341db1-ae0e-4f5b-bd7c-2434168824fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fcf1cb8-c3b8-4e4d-9374-80ef01b09d6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3995241e-a510-4b3b-acfd-ad4065437f86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaffb263-345b-4dd5-97fd-e4bd3e46f4b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca14cb49-4ce5-4484-9e06-08389a5f4d68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d03e9a96-452b-46fb-ba4e-34779a8e4633"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a03d7cd3-5534-4004-a1b8-a9762c120651",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd3bc4a2-aabf-4f4b-bb29-e327508ee849"
            }
          }
        ]
      },
      {
        "id": "2c998164-76ea-4784-95cb-8cae9a779b44",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0ead57f7-58a4-4905-832f-f9608a85b427",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3036fc29-b599-4ecb-9c5f-b426dbc509bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ab7fa1e-1e5c-4e2a-a823-257df02e948f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef247d0-6ab5-4c70-b42e-35946fd5435d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f2f82fe0-8e50-4fc5-9b38-a25bccc56851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fd5712-edbf-4bbf-98b4-80c92e8b9152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75f26499-56b2-4bed-b745-6a1212638797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac6848c-642b-498f-bbed-0028fc3d068b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea59a7bb-82a1-48b6-a927-8ee4f6bae3e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e97bdb7-2278-43ef-822b-9542dfcf25e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42454a10-0813-431c-9b26-100005990e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a87bcc0-2f22-465c-84ae-c267e8e6883e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c81da42d-2383-4ad2-b857-74011383fd7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "514f2f9f-45f9-44f4-93a6-d326640b568b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4f23820-5487-459d-a797-4121c7de0e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33fbd5f1-b41b-4c3d-ac0c-464734327d5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88336dde-e8f6-4f6b-8dab-76a25dea570a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7738f544-74de-4472-8a8e-99eb0aa1d3b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d6524b1-791a-47ed-8f7f-7a6702ca1265",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d612f583-e6f0-4a1a-8c87-0baa65b84762"
            }
          }
        ]
      },
      {
        "id": "d9cd6016-689d-429b-adfd-c1a7c4f78df7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2c49bd87-0980-4ccb-96e3-31e759695266",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b907984-ea44-4e63-91c8-520f1d3b8889",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2773779b-f31b-49c8-beb7-98449944b913",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d278c81c-bf35-4065-be23-ca24c6be2508",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a774bf3-f13f-48fe-9b7c-f52aec7e1698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f39425-0b07-422f-8e19-c7c3c2b611ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc72a056-c6b6-4caa-881d-54326567c7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b33d3be-1a51-414c-aff9-dea6b97719da",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed14153-efca-427c-aecd-ef57e2941df4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "807eb4b1-e3eb-4cf0-a6bd-b1b8c6532d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8924f8-11ab-440e-a109-23af97b306a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "308a7a02-4f9c-4cf6-8010-55285f23448d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2434b209-2839-4d17-a720-7946e49792bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17b2e690-247b-46a4-8d48-6febcfbe7532"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "befa1d45-efd1-4f22-b4a9-0ce553681253",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b2dc372-76ac-4ab4-9600-42b4e59c7bd5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c6c7a4d-51be-4f44-88b1-285ac6fc1766",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c8b9cde8-a758-4f0e-a86c-196169b3735b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d7a19b4-f2b1-4a09-b3c8-f235764f283a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f54f410-4f04-4c27-8446-09bd102d8b17"
            }
          }
        ]
      },
      {
        "id": "a978417d-0e39-460f-9105-4c251e1fdcee",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6d60d62-8a12-4f2e-bd9b-5717dd8eae50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ba03791-0e4d-48a7-be85-7b6e562112fa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d1d195a8-878e-4ff5-8dbd-9e6ea7c83382",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d628ecda-dfc1-4d41-8e57-ce1e70bdbb3d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "228d98bb-0a61-40dd-ac9e-b33e75d6ad48",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 234.1274131274129,
      "responseMin": 7,
      "responseMax": 4591,
      "responseSd": 630.816486281352,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676940186996,
      "completed": 1676940261109
    },
    "executions": [
      {
        "id": "3764e406-13ed-4fac-a98b-749a6909027a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "274c32d6-ad0d-45f4-aa21-09d8a174f4e5",
          "httpRequestId": "e493267f-e4c1-4d76-ba93-782bc8538a6f"
        },
        "item": {
          "id": "3764e406-13ed-4fac-a98b-749a6909027a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "09fde15e-e854-41b2-89eb-4836e701a7a2",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "a658c554-8701-48a5-b63a-4e1e67f753d1",
        "cursor": {
          "ref": "dfdd4348-15d7-4d63-b5f9-9edfb5389d3c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ee4d333b-3a72-43b0-b066-33a1df1d3193"
        },
        "item": {
          "id": "a658c554-8701-48a5-b63a-4e1e67f753d1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "53e71408-b835-4f3a-89f2-ad8cd383ed91",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "ef459982-35cb-4674-97f6-00613e1794a1",
        "cursor": {
          "ref": "17b1919e-8a98-4c8e-a210-769308300640",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c51a37a5-281e-4881-b8c9-ee466defb11c"
        },
        "item": {
          "id": "ef459982-35cb-4674-97f6-00613e1794a1",
          "name": "did_json"
        },
        "response": {
          "id": "f7f50fea-2bc8-4abd-a0e2-65149aa4357e",
          "status": "OK",
          "code": 200,
          "responseTime": 394,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ea045a-e7a6-43be-97e3-4c89346067ee",
        "cursor": {
          "ref": "03748f45-96f5-4ef3-b9e2-ce5eae1d6aeb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ecd685e0-dd5e-4545-af07-46d1d826cdcb"
        },
        "item": {
          "id": "d1ea045a-e7a6-43be-97e3-4c89346067ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3be2fa0-2c67-421e-9299-90ab5697257d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 687,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d1ea045a-e7a6-43be-97e3-4c89346067ee",
        "cursor": {
          "ref": "03748f45-96f5-4ef3-b9e2-ce5eae1d6aeb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ecd685e0-dd5e-4545-af07-46d1d826cdcb"
        },
        "item": {
          "id": "d1ea045a-e7a6-43be-97e3-4c89346067ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3be2fa0-2c67-421e-9299-90ab5697257d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 687,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8cc59ae7-20dc-4c81-9cc8-1b021565575d",
        "cursor": {
          "ref": "42d8b9d8-8077-482e-89a2-e50e829b7566",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4a1ecbc8-992e-4905-b711-3356c5d709e2"
        },
        "item": {
          "id": "8cc59ae7-20dc-4c81-9cc8-1b021565575d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "70f2c6f6-6203-4742-88bb-f2daada8dfd1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703d365f-9031-47a4-8059-9218abc470c2",
        "cursor": {
          "ref": "4b2f4033-4ccc-465c-a92a-d1269e040893",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be35806e-8bd9-4c69-989e-c467f7f66024"
        },
        "item": {
          "id": "703d365f-9031-47a4-8059-9218abc470c2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "956b1740-e15f-499b-831a-b8e5a376be47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd6eeb6-b3ec-412f-b825-f5b941fa795c",
        "cursor": {
          "ref": "0736ff9e-e5e8-407e-8208-0389a8ee8b24",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3c68bf24-acb4-4c86-baa2-396a81fd65c5"
        },
        "item": {
          "id": "3fd6eeb6-b3ec-412f-b825-f5b941fa795c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "61b762a0-38ec-46b9-adab-d31b78337a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f786727a-aa52-42b8-9bba-c0e8c293464b",
        "cursor": {
          "ref": "8bd66f35-ca63-47f2-989a-2e012d133bc5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5b72d47-4136-4d12-a347-f7b9708d79b8"
        },
        "item": {
          "id": "f786727a-aa52-42b8-9bba-c0e8c293464b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5f5ae56-a09a-4c19-923e-24632e48dfcb",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f786727a-aa52-42b8-9bba-c0e8c293464b",
        "cursor": {
          "ref": "8bd66f35-ca63-47f2-989a-2e012d133bc5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5b72d47-4136-4d12-a347-f7b9708d79b8"
        },
        "item": {
          "id": "f786727a-aa52-42b8-9bba-c0e8c293464b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5f5ae56-a09a-4c19-923e-24632e48dfcb",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6f513409-fdda-4eb5-8120-66d0c1e952e7",
        "cursor": {
          "ref": "0cd3e289-a753-44dd-a354-a3329e1603f9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4f06aafc-ab50-419b-aaa8-ff176d001090"
        },
        "item": {
          "id": "6f513409-fdda-4eb5-8120-66d0c1e952e7",
          "name": "identifiers"
        },
        "response": {
          "id": "6ceffbbe-8662-4749-85ee-3a0e3fbc0f24",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a022afe-faf2-409e-8b1e-256990c5fd6a",
        "cursor": {
          "ref": "fb7eef78-0e79-4f98-acda-28e6ca4b0cef",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e21c4cc-83c3-4f59-9499-793d30cad3bb"
        },
        "item": {
          "id": "2a022afe-faf2-409e-8b1e-256990c5fd6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5fa284e1-e36f-4704-84c2-cb4e0f08d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a022afe-faf2-409e-8b1e-256990c5fd6a",
        "cursor": {
          "ref": "fb7eef78-0e79-4f98-acda-28e6ca4b0cef",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e21c4cc-83c3-4f59-9499-793d30cad3bb"
        },
        "item": {
          "id": "2a022afe-faf2-409e-8b1e-256990c5fd6a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5fa284e1-e36f-4704-84c2-cb4e0f08d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98119c31-7053-4e77-a75f-1de8d9abb318",
        "cursor": {
          "ref": "9338e37b-7544-432f-9269-462fad967fe7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5ae3276d-d048-4b47-9a38-cb5e7fcc760d"
        },
        "item": {
          "id": "98119c31-7053-4e77-a75f-1de8d9abb318",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c0cbbcc2-c63e-495d-a34b-133c5241bf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764e8e64-6e6c-49a0-9dfc-2f268e7095a7",
        "cursor": {
          "ref": "8e135253-14cb-472c-a6aa-782c5a696450",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8fd01837-daf9-4411-b395-94569609332a"
        },
        "item": {
          "id": "764e8e64-6e6c-49a0-9dfc-2f268e7095a7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c188033d-4ef6-48ea-b790-a758bbcf229f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621036cf-f2d0-4fef-9545-1f51cb431f3c",
        "cursor": {
          "ref": "ffb468e5-3971-476c-bd0e-9823ba8c6df0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c547df61-d6b6-4e56-aaff-0b12165857cd"
        },
        "item": {
          "id": "621036cf-f2d0-4fef-9545-1f51cb431f3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dd748ab7-3f11-4bbd-98f5-12a29751850d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f18df4-2255-4487-8cb8-4b7f47d0025d",
        "cursor": {
          "ref": "822b3f0f-9bca-4ef4-b57a-8dd0f0d9feaf",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5abe4e3a-7b3c-4bad-a094-fb89b8a1f9b0"
        },
        "item": {
          "id": "a7f18df4-2255-4487-8cb8-4b7f47d0025d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "265ce816-067f-4a25-afe9-16e2589db5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d40f2f-e737-4819-8a09-d963ecc222d2",
        "cursor": {
          "ref": "bcdcdefc-0613-4cf8-830a-49c434f6194e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c9f6d59d-4d01-4134-9d62-5b6247b987f8"
        },
        "item": {
          "id": "54d40f2f-e737-4819-8a09-d963ecc222d2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "59ee2473-165d-45be-8c69-19ff4b7d9358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e316c60-4896-4cd5-a0a0-2a76f185acac",
        "cursor": {
          "ref": "7a27d717-11d1-4801-857b-2332bd7b5d5f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bf17cbdd-c826-4315-8092-226a332056b6"
        },
        "item": {
          "id": "4e316c60-4896-4cd5-a0a0-2a76f185acac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "55bff57f-fef1-4260-8703-2a3a1266c282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264f368d-6477-4b0b-a9ed-29a11f31b44d",
        "cursor": {
          "ref": "2d44dbde-1315-4af1-8bae-af162f085943",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cb8b8f0d-a8ad-409c-8149-698a6531998a"
        },
        "item": {
          "id": "264f368d-6477-4b0b-a9ed-29a11f31b44d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "385bfabf-7762-451e-bc55-3463e98cedb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4624a9c-9300-4376-89d3-a8eec7a69728",
        "cursor": {
          "ref": "5fe7485a-8429-4efd-b8c3-623f1a062c06",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "26fdeeba-f7a9-4610-8454-a2541d37ed94"
        },
        "item": {
          "id": "e4624a9c-9300-4376-89d3-a8eec7a69728",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "979be0e4-86ca-40e7-88b5-35b2276ccc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f148b972-978d-48c2-a8de-f903399e5b7f",
        "cursor": {
          "ref": "f5537706-bf40-44c7-937b-9dd70a38a6f9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "04a38c05-1fa6-4f64-8d44-7379203140f0"
        },
        "item": {
          "id": "f148b972-978d-48c2-a8de-f903399e5b7f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "caf1f205-397b-4014-8a88-2d13d9d952a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a3dbb6-f744-4b41-87d2-a0cff09971b1",
        "cursor": {
          "ref": "64e8cf3f-8d2c-48c4-b04a-ee31ac27f4ff",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f4bbfc95-4455-4ae3-b64b-d157ab11b160"
        },
        "item": {
          "id": "91a3dbb6-f744-4b41-87d2-a0cff09971b1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fdbdee00-114b-4cfa-83d6-9f7e9301d8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6fcb19-de5c-4789-88b7-06b83badaa4c",
        "cursor": {
          "ref": "55e151c3-899f-46eb-b4c6-2a6e0eab2adf",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9fbcccdf-7986-407e-833f-92df655cd83d"
        },
        "item": {
          "id": "7f6fcb19-de5c-4789-88b7-06b83badaa4c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "072004fc-35e2-46aa-bbe3-456fe09d0762",
          "status": "Created",
          "code": 201,
          "responseTime": 591,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "439cd47e-2db1-445d-99bd-ada04f8daaa1",
        "cursor": {
          "ref": "2d4d5d70-31c5-493f-8148-5c954585a74e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb617ece-6a3b-48f9-93bd-b026a285c49c"
        },
        "item": {
          "id": "439cd47e-2db1-445d-99bd-ada04f8daaa1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d6d43166-3671-4d2b-90c9-04d55f249fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea44aed-45ae-42b9-b23c-bb7b616e37eb",
        "cursor": {
          "ref": "8521d094-1074-4fca-b1f8-7d9d96f83166",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f8f09c9-6b81-486b-a7cd-e8fc9299dda7"
        },
        "item": {
          "id": "bea44aed-45ae-42b9-b23c-bb7b616e37eb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "89338d8b-93bd-448c-a815-33f7a612c89f",
          "status": "Created",
          "code": 201,
          "responseTime": 4057,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4c4062f0-19be-4b43-9583-e128a35c573d",
        "cursor": {
          "ref": "fedc0c4c-3ded-458f-91bb-bde87d33682c",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9b33b338-eea6-4d66-9f12-e32a7dc5a52c"
        },
        "item": {
          "id": "4c4062f0-19be-4b43-9583-e128a35c573d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9317aea3-1c9d-490e-99e4-5c2b5334bf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeba906-25fb-493c-a417-d50483887f7e",
        "cursor": {
          "ref": "48a52512-029c-4c0e-b539-48520b2b4e10",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "743cefb1-aa04-4e0d-8399-8e14409763ee"
        },
        "item": {
          "id": "edeba906-25fb-493c-a417-d50483887f7e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3d99c12c-b0c8-4905-9aaa-20a41a5a459a",
          "status": "Created",
          "code": 201,
          "responseTime": 4591,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1eda9451-7145-4563-8820-0408124740bd",
        "cursor": {
          "ref": "e023f80e-d63e-44cf-9724-038e98fcbb2b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c44a0e1-bef2-4ac0-866a-f6008fa83a44"
        },
        "item": {
          "id": "1eda9451-7145-4563-8820-0408124740bd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3c756af2-2499-47c8-9776-6fe81d06d176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c099db-3a12-41d1-a489-c62b6654c8dd",
        "cursor": {
          "ref": "78054610-5831-4e33-906f-f0c9e389f4f0",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b1fd2fce-ab38-4402-bfc3-23b2ba716e59"
        },
        "item": {
          "id": "26c099db-3a12-41d1-a489-c62b6654c8dd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3b87609a-39aa-406c-a761-899b313a01da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16d86d3-845c-4673-9a32-70912e3303e7",
        "cursor": {
          "ref": "a652dbaf-6c8a-4003-b1bd-b1cf4e3d97b4",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "efa6a34d-b3fd-4aeb-a37f-975566773de5"
        },
        "item": {
          "id": "e16d86d3-845c-4673-9a32-70912e3303e7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a6830633-84bd-4cd9-8ff7-fa57f7827a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12498c3-0a3a-4f2b-9fb7-c6f0de343c0a",
        "cursor": {
          "ref": "5812c008-c41a-4008-afc5-4627ea7f7bad",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f6320ae5-eb3d-4d47-9b69-536cf5d3358a"
        },
        "item": {
          "id": "f12498c3-0a3a-4f2b-9fb7-c6f0de343c0a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "db8a5a26-f047-4673-844b-4bf1f853569b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2045f4-2b72-489c-b3f0-668cf652c7bd",
        "cursor": {
          "ref": "bc457e55-2aad-4626-b9b5-7c6b8d9d6057",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "31dfc710-0a5f-4804-9412-b2a8c4e28840"
        },
        "item": {
          "id": "3e2045f4-2b72-489c-b3f0-668cf652c7bd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7d591141-abfd-4fde-ad99-e74b8c444cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8584620e-cb3a-479e-8537-6bdcfa28cf30",
        "cursor": {
          "ref": "fd2ba679-75eb-4105-a558-e4de382c9d1e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a4419235-51c7-4191-81a6-85c2977ff65e"
        },
        "item": {
          "id": "8584620e-cb3a-479e-8537-6bdcfa28cf30",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f09fa67c-32f4-474b-a856-e9eccc850252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cb1269-5729-42cd-b096-9ef4a71cafbb",
        "cursor": {
          "ref": "6fa3026d-666d-4b19-b9e6-f3ac9f93790a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4241caa7-4636-4195-9975-58a3d5af1730"
        },
        "item": {
          "id": "c2cb1269-5729-42cd-b096-9ef4a71cafbb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d5a272b9-ab60-4345-951c-336ee8f7e5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086dd76d-215a-44a6-a45c-0fcce2b3185e",
        "cursor": {
          "ref": "f6d3da16-0653-44db-a3b7-0e340ebe7ce6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "744df9ee-8a88-4537-a473-1d5891df48c1"
        },
        "item": {
          "id": "086dd76d-215a-44a6-a45c-0fcce2b3185e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e09b128c-4e4a-4f9a-8773-5c6e515a96e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de907da4-b3f7-47b8-a331-a7405e7fb847",
        "cursor": {
          "ref": "e8096106-6453-421c-9850-d9e539fec678",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "22624af2-0a6e-4b1a-a415-d984b48bd9f4"
        },
        "item": {
          "id": "de907da4-b3f7-47b8-a331-a7405e7fb847",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3e9059fd-17b2-4bfb-a3f4-e5b7d0d562a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c138a7-d759-4ce8-bb51-a5ddfdc1c251",
        "cursor": {
          "ref": "91ff886a-8a93-4d15-a06b-134fd2811969",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fcd3f8a7-5912-44d5-9347-c2fcc420dfe5"
        },
        "item": {
          "id": "95c138a7-d759-4ce8-bb51-a5ddfdc1c251",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "51e6c163-48fa-42ca-918d-90decf133062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ee0b66-26c5-4f3d-901c-75bcb2986657",
        "cursor": {
          "ref": "3a44451f-9847-4d55-b999-c50086bca012",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "90935979-be1d-4b3c-be9f-73dc2ecbd08d"
        },
        "item": {
          "id": "d5ee0b66-26c5-4f3d-901c-75bcb2986657",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2d074f08-e864-43c3-98a0-1397fb34c809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10257bf4-25d7-43e0-928d-6ef63bc3b525",
        "cursor": {
          "ref": "1ecaf7d5-d5cd-4f46-92dd-9a75f4702cd6",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "121bf1e9-c3f8-4d48-a431-20cde04ee3de"
        },
        "item": {
          "id": "10257bf4-25d7-43e0-928d-6ef63bc3b525",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6cd12b1b-bfdd-480a-b350-cc779fd2f316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae717a45-629d-419d-bdea-012374c9f655",
        "cursor": {
          "ref": "39fbbc84-1d13-407a-9466-dd8a8ccbd85e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c8a197d9-6f5f-4b61-b2ac-72764e5fb681"
        },
        "item": {
          "id": "ae717a45-629d-419d-bdea-012374c9f655",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3bdabf99-fbec-4308-9bbe-466d264e7456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5106e5-0b22-4c74-bbf9-f46274fc5265",
        "cursor": {
          "ref": "d2ba49d2-faab-4152-ab20-bde10c261461",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9e23b83b-bb0a-4b87-951e-35b19d434051"
        },
        "item": {
          "id": "2e5106e5-0b22-4c74-bbf9-f46274fc5265",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91d59ecc-6367-4828-b7d8-bc9ff51ec239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695dcd65-a3fc-4161-8595-5b8100be238e",
        "cursor": {
          "ref": "0666935a-cf85-4016-88be-47d0b82e253c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "78d7dee2-63bc-4718-a051-2c7a57c67f76"
        },
        "item": {
          "id": "695dcd65-a3fc-4161-8595-5b8100be238e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "91633235-a6ab-46d9-ba03-e0b1ffafd70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24c5b9e-757d-4ce9-9b3b-5f8794af3476",
        "cursor": {
          "ref": "e5a6a892-9201-48c7-ad94-073a051e6045",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "65d1effb-7a3a-4a94-9087-c03b31c221b5"
        },
        "item": {
          "id": "f24c5b9e-757d-4ce9-9b3b-5f8794af3476",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9ff0813c-ca32-4902-9dd2-20431bc61a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72667b09-799d-4cdb-bf1a-c61096996fb5",
        "cursor": {
          "ref": "ac9e0979-2b63-4f0f-86ca-5574367b27b2",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bb20a935-9ac2-4a1c-b149-0d95ece2498b"
        },
        "item": {
          "id": "72667b09-799d-4cdb-bf1a-c61096996fb5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "06b16fe3-56ef-4b00-a4bf-d9e9ffb5785a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e15a836-1f70-4ed2-8f91-bd54fa75fe63",
        "cursor": {
          "ref": "78164b77-6b6f-404c-9676-6aefe45ccbe5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b7f3f278-69ea-4f75-81d1-7535cba30802"
        },
        "item": {
          "id": "1e15a836-1f70-4ed2-8f91-bd54fa75fe63",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "500ea73d-7eca-44c7-8e4a-cfbb8fa88768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4253689d-201f-4b06-8939-2c59c18ca580",
        "cursor": {
          "ref": "f7d78ce5-c93d-4293-a243-9c37d03d5056",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "64e019a9-28af-4944-bed6-55bb81ae3338"
        },
        "item": {
          "id": "4253689d-201f-4b06-8939-2c59c18ca580",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1d7e00ab-5bea-4b17-907c-b5fc0f124886",
          "status": "Created",
          "code": 201,
          "responseTime": 2551,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d14e6004-700a-43ab-aa45-1b7a22e28cff",
        "cursor": {
          "ref": "f6812a46-6453-421e-864d-750eec55b922",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a63aea20-8600-43b4-a249-dcda47b5a3ee"
        },
        "item": {
          "id": "d14e6004-700a-43ab-aa45-1b7a22e28cff",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c1e3f8b0-2fdd-4ee8-a342-56bf73b112d2",
          "status": "Created",
          "code": 201,
          "responseTime": 2522,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "87eb40c7-a615-4661-99b3-3955e4d4aa02",
        "cursor": {
          "ref": "0c81245b-0a0a-43ab-acab-e6c079ff27f7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "edce167e-0f7c-4f1c-bc6e-30c53e435d6e"
        },
        "item": {
          "id": "87eb40c7-a615-4661-99b3-3955e4d4aa02",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ef5a3a40-0784-4d22-a168-03de2caf5b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28755ff6-fefe-47ba-846f-e8b75d0a7091",
        "cursor": {
          "ref": "08b8e9dd-83c4-4346-ae79-c0611e0861e0",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "444ee94e-c440-463e-ba5e-2a638555b054"
        },
        "item": {
          "id": "28755ff6-fefe-47ba-846f-e8b75d0a7091",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a9c60998-a81b-41d8-9457-35ee755be057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1af038-7408-48b0-a65e-475d1271e0e4",
        "cursor": {
          "ref": "9eb1ec77-a742-430e-bc8d-31337ae10c28",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "22ebe97d-42c8-46be-8ba0-73533d2f5f31"
        },
        "item": {
          "id": "0a1af038-7408-48b0-a65e-475d1271e0e4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fcef6e0a-89ef-44ea-ade7-59a695d0697b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87551f7-ac15-4a68-b8fc-fb59d59f9e55",
        "cursor": {
          "ref": "a037e6b8-8d08-4ff8-8208-e48c05b6efae",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ea5af539-dd9e-4691-98df-5d34aabe1292"
        },
        "item": {
          "id": "a87551f7-ac15-4a68-b8fc-fb59d59f9e55",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ee605be3-079b-414b-bd3a-2a3ab746c2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfe105b-e19f-4e27-bd58-dac76f85a8d6",
        "cursor": {
          "ref": "5ea8eebd-4c03-4653-8953-19f70f025316",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5444bd11-dfe7-4ce2-a160-a3169c781098"
        },
        "item": {
          "id": "8bfe105b-e19f-4e27-bd58-dac76f85a8d6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cea998a5-b1c6-4009-a801-e42e2635e64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fc4ab0-8edb-49e5-a0ec-4332b9461b5f",
        "cursor": {
          "ref": "b19c65be-adab-4ca8-adbd-d370aeb808db",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1a2d8212-1d9c-4007-8682-e9dc1f3fb238"
        },
        "item": {
          "id": "28fc4ab0-8edb-49e5-a0ec-4332b9461b5f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4502725e-3a85-459e-881b-2f8a05c065e0",
          "status": "Created",
          "code": 201,
          "responseTime": 2521,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4dcbd22f-0e39-4673-a856-ccef85698210",
        "cursor": {
          "ref": "bf77488c-4c42-4882-8151-61677a40fdb2",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4a40c636-38c5-45ec-9d61-7ba1eb9d1c9a"
        },
        "item": {
          "id": "4dcbd22f-0e39-4673-a856-ccef85698210",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "33677587-e195-4c0f-ade3-f4fb66d9d5dc",
          "status": "Created",
          "code": 201,
          "responseTime": 2927,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1eead044-eebe-49bb-b74e-823104260ee7",
        "cursor": {
          "ref": "d8ad47ff-8c13-48e3-94b0-d1d671386124",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bdbb1b8c-8252-4f09-affe-c6df55862e38"
        },
        "item": {
          "id": "1eead044-eebe-49bb-b74e-823104260ee7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9118529e-d840-4b63-a02d-72701acc39e0",
          "status": "Created",
          "code": 201,
          "responseTime": 2597,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "84ad3ec9-31fc-41f0-ab9f-bd3e0ba33714",
        "cursor": {
          "ref": "4f8d0831-e4e0-4614-955c-82d151d050a5",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e9ee5e0d-f403-451f-81e4-aa0d9985d40a"
        },
        "item": {
          "id": "84ad3ec9-31fc-41f0-ab9f-bd3e0ba33714",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "50f91f51-19af-4778-8dd9-7d15c4b9ca97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9c674a-396b-4bbf-9f22-18a56d9011c2",
        "cursor": {
          "ref": "cb85f8f3-5ce8-49a1-ad5f-85ddb4588162",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "df0616c8-8522-4c5d-903d-eec408f8fb6b"
        },
        "item": {
          "id": "1f9c674a-396b-4bbf-9f22-18a56d9011c2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c2cbcc2d-5fad-49b3-8716-633aa180f84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4b76f1-a374-4f6e-8d35-c0be8775fbc3",
        "cursor": {
          "ref": "6ace28d1-e0fa-442c-9d40-fe281d78610f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "219c0c63-cf0a-4139-a401-9075a2012eee"
        },
        "item": {
          "id": "eb4b76f1-a374-4f6e-8d35-c0be8775fbc3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c63b3828-365d-4cad-928d-71b8dc598211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5b10e6-95f4-4aba-ac1d-a6787b3c63a7",
        "cursor": {
          "ref": "aa7efb24-215c-41e9-b3ba-0d2cd023fdc2",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1ddc23c4-637c-42b9-ba0a-f0568e352179"
        },
        "item": {
          "id": "7c5b10e6-95f4-4aba-ac1d-a6787b3c63a7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "747d5e05-9c8e-4304-b030-c4a2cbb6f064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52bbac5-08ef-4cfd-861f-fab86bd23fa6",
        "cursor": {
          "ref": "1849541c-c807-4ff5-9f8b-2a9f7e319262",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3cbe0074-cdee-4b55-8dd5-c8bba0f7de0a"
        },
        "item": {
          "id": "c52bbac5-08ef-4cfd-861f-fab86bd23fa6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "01d2f74b-cbaa-4617-9e1e-4105d42eaf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17791cf-ebc9-4578-8b64-19fdb54070c7",
        "cursor": {
          "ref": "9bd99dff-7110-4d17-b79d-56a45ac9ea4a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "650f0114-da50-4fe3-a741-1030230cc98a"
        },
        "item": {
          "id": "e17791cf-ebc9-4578-8b64-19fdb54070c7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c66d37e3-c597-47f5-8f5c-fb977468cdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dba7d4-4c36-4cce-9801-a31dca09cba0",
        "cursor": {
          "ref": "21391270-0251-4061-8f64-b0c681f4c34d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a611ce98-acbc-4f02-bbe9-d739caca4431"
        },
        "item": {
          "id": "f0dba7d4-4c36-4cce-9801-a31dca09cba0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a3a51228-5a63-4e80-b43d-2a2e2d3bbb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da67d511-a7d0-44e4-be35-9913215e6c30",
        "cursor": {
          "ref": "74b19acf-54a1-4f51-90fa-767dbdf972da",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "aa789a2f-1db0-4f87-b1a1-7a4e88570cd7"
        },
        "item": {
          "id": "da67d511-a7d0-44e4-be35-9913215e6c30",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b3263180-b121-4947-bcb3-4e59da3043cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f148ea-5dfb-4343-a88e-ed15e2e40726",
        "cursor": {
          "ref": "f8e8d780-1401-4f28-b66f-685b28934f1c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "156af9e5-caff-49c2-aad3-69ae730f98f5"
        },
        "item": {
          "id": "93f148ea-5dfb-4343-a88e-ed15e2e40726",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "09bff2cb-f832-478c-aa2b-7eecf9c22a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f3479b-ec41-4b46-a3ae-92e0130a731c",
        "cursor": {
          "ref": "dbf55d21-a708-4287-93df-6c43ec4c3558",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d767b709-22cb-41ae-a68d-22c684e7d5b9"
        },
        "item": {
          "id": "94f3479b-ec41-4b46-a3ae-92e0130a731c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2ab7a35-bfd1-4a3a-84e8-530c3b966583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be332362-6ce1-44fd-9605-33f61c0eae8b",
        "cursor": {
          "ref": "eaee72fb-7bbe-4e1a-8822-18f0d4ee2ff4",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d2c3a35b-8680-46b5-8810-4fc524d13c43"
        },
        "item": {
          "id": "be332362-6ce1-44fd-9605-33f61c0eae8b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f30f7afd-62eb-4308-aa5d-461e315edc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9398bb3-ce7c-4a10-9ca6-396bacdcae9e",
        "cursor": {
          "ref": "8fcef5da-eb81-47b6-abdd-f129f3a65f6f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f62379b5-e929-4706-a458-e2ff88c19b0a"
        },
        "item": {
          "id": "e9398bb3-ce7c-4a10-9ca6-396bacdcae9e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8b8b3e7a-3a90-4759-85a2-d0edfcf36770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca292d1-c3ab-430c-b9ed-75cb3d4b8d15",
        "cursor": {
          "ref": "5ca24527-6b48-414e-8735-17d45160f496",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ec286679-060d-4561-b8d6-42a09bcee877"
        },
        "item": {
          "id": "aca292d1-c3ab-430c-b9ed-75cb3d4b8d15",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1e0bd332-3428-441b-abdf-7ea7b252bacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9a8b92-8a27-4f0e-b340-dc829df182f9",
        "cursor": {
          "ref": "a8118ba5-108d-4e84-b13d-462b707233c6",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4e99bb61-8a2a-4132-b9e3-81c44163e7f8"
        },
        "item": {
          "id": "dc9a8b92-8a27-4f0e-b340-dc829df182f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f81643bf-8835-49a3-92c7-fae7cea1bff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0e9405-fb10-4df5-a6df-7be5d0631c5e",
        "cursor": {
          "ref": "c38c02ea-ed6c-48a0-abb0-055f867a3e9d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b89c442c-b45d-40c3-9353-74c85dced087"
        },
        "item": {
          "id": "fc0e9405-fb10-4df5-a6df-7be5d0631c5e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f50c1f0-f359-497c-bf9e-ead5086cb0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e111cf57-de16-4a66-866a-ef7c790971c5",
        "cursor": {
          "ref": "8529003a-3af1-435a-84d8-dc4433c788b7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ec3b617b-8ba1-4d11-b02f-f6ae349cc92c"
        },
        "item": {
          "id": "e111cf57-de16-4a66-866a-ef7c790971c5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ee7f82d6-71b2-4216-9552-e623e6ab6546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73056e7-cad3-40cc-b21e-25fd5ffa8a9c",
        "cursor": {
          "ref": "a5660382-1f37-488d-a870-939549d65e38",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f38d61fe-4774-4d7d-908b-fd3fb74d960a"
        },
        "item": {
          "id": "a73056e7-cad3-40cc-b21e-25fd5ffa8a9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1b9cdea9-5265-4f42-987e-5dcdbac7a86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9462e350-339f-40ca-b67b-fdfdde287d4a",
        "cursor": {
          "ref": "5190097b-faef-4871-a755-87e77be23969",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fadd1eeb-4f52-4f75-84c0-4773a8960069"
        },
        "item": {
          "id": "9462e350-339f-40ca-b67b-fdfdde287d4a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b420232d-d8f7-4d3d-b222-efd087df5c85",
          "status": "Created",
          "code": 201,
          "responseTime": 2502,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "3f531cef-3a8a-4794-97f4-733319c8351b",
        "cursor": {
          "ref": "ac029b93-24d2-40e6-b4c9-f99eb5d7ed83",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66bf6649-22f1-484f-8825-3d2d943a236a"
        },
        "item": {
          "id": "3f531cef-3a8a-4794-97f4-733319c8351b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ac7dcb58-ff8d-40f8-b49b-72b0e1e389d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566e9d39-a85b-4aec-9c6a-6e6d064d9f9c",
        "cursor": {
          "ref": "5461cec3-1046-4f83-8fdc-63bf46ec857f",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e53e8c50-8f6c-4300-a18a-504af6981385"
        },
        "item": {
          "id": "566e9d39-a85b-4aec-9c6a-6e6d064d9f9c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0e7b049e-ea7e-43c5-98bc-067302fa5f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acd9394-1567-4877-8355-12df78662675",
        "cursor": {
          "ref": "0d6e330b-9fcc-48bd-b7b7-e32d7e03504c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c980724f-048f-455f-b890-235bd60eab5c"
        },
        "item": {
          "id": "6acd9394-1567-4877-8355-12df78662675",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6c174a7f-ace4-41f4-8fdc-395bb801a3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7277fec-b62d-49dc-a0a6-b015ba482d26",
        "cursor": {
          "ref": "cd841be3-364e-4799-899e-09af6924ea19",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cb630868-43a1-4134-9742-6979d59551da"
        },
        "item": {
          "id": "c7277fec-b62d-49dc-a0a6-b015ba482d26",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0b2fe49f-7c4b-46d2-966d-e387896c2a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bbeebc-b5f4-4dd2-8952-462272c56c6e",
        "cursor": {
          "ref": "a7b30fc8-7366-49a4-a411-b8e019d55f92",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1aa6ad1-1d93-4391-9204-aabc88fc2f83"
        },
        "item": {
          "id": "d8bbeebc-b5f4-4dd2-8952-462272c56c6e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ffcd1644-2f18-4452-ab32-d0dcdb59bf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8aa06b9-9cc6-47bf-982e-ac170e863f96",
        "cursor": {
          "ref": "5df0b4e8-7256-4af2-a9e3-ff9233eb4511",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5bf69a24-c53a-4ad1-ae93-5f806c56d30d"
        },
        "item": {
          "id": "d8aa06b9-9cc6-47bf-982e-ac170e863f96",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7d3568a7-b609-48e4-827b-ff99b4f5e824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fb4686-b7a6-4812-a1cb-83c9fd24c435",
        "cursor": {
          "ref": "f1c35637-6f91-4981-920b-8c3ec635e1c3",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b0923f0f-d8fb-4e7f-826c-d52718b847d9"
        },
        "item": {
          "id": "b1fb4686-b7a6-4812-a1cb-83c9fd24c435",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "30748c59-af33-47a0-b90f-3e9c80100e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bae4463-34f2-403b-8812-b8406708de48",
        "cursor": {
          "ref": "2f88cad8-3651-48c9-b7fa-dc71e8b79964",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d717236a-ae37-46ba-a826-0c588144b431"
        },
        "item": {
          "id": "9bae4463-34f2-403b-8812-b8406708de48",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ae021a29-60a5-4f95-9f03-6629c25371ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c7300e-3406-4857-83e0-ceb5bf3f72ac",
        "cursor": {
          "ref": "eae59004-3ec4-4038-aa03-393a0eb42c56",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "84df55ea-cdbd-4f19-901b-0de1980c409a"
        },
        "item": {
          "id": "d8c7300e-3406-4857-83e0-ceb5bf3f72ac",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a10b48d5-bba1-4e13-b135-e6387b4a9926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a7be54-d4fc-4d44-a9d1-831bdd1a6eb6",
        "cursor": {
          "ref": "5e04ba37-b3c7-47c5-86a1-3ea64418e2fb",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "26450db9-4082-4747-8a84-60ea7b1bc4e4"
        },
        "item": {
          "id": "13a7be54-d4fc-4d44-a9d1-831bdd1a6eb6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "12f465e4-a906-42f1-9125-b01c68bb52ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936b95d2-6170-4e0d-bcff-400d7083812e",
        "cursor": {
          "ref": "f221b8be-aefa-40e7-ac7c-6bd617eeccf1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7b536320-f594-4bee-a49a-8296e56fa08d"
        },
        "item": {
          "id": "936b95d2-6170-4e0d-bcff-400d7083812e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a65699a5-91b1-484b-bfd8-c1bfe829daaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2575a7-7627-4ab3-8d8d-408e3fa8dbd2",
        "cursor": {
          "ref": "810e4245-a8c6-4fb7-ba79-7d23f3f0b81a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3f587541-6cfc-47a4-a0b1-9de42438804b"
        },
        "item": {
          "id": "0c2575a7-7627-4ab3-8d8d-408e3fa8dbd2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b154e650-1fb4-47b4-8f84-090827353e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fa7b07-cc90-43bc-8d20-b9adedcd37e2",
        "cursor": {
          "ref": "2d2af950-30f4-41b2-a150-1ef89b347555",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f1b66aba-47fc-4dc4-8399-56965322d807"
        },
        "item": {
          "id": "34fa7b07-cc90-43bc-8d20-b9adedcd37e2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "def73a7f-90c1-43d1-b8e2-0b251113d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520a41b1-5eaf-403f-8dcd-faab34d25510",
        "cursor": {
          "ref": "cb5e76d7-f345-4b27-be4c-47b0e6edb0b7",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f4eb35ea-8c55-4798-8365-2376a684a2ec"
        },
        "item": {
          "id": "520a41b1-5eaf-403f-8dcd-faab34d25510",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8339955-e1b0-4ba6-bfab-ad90ba2f1e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3b078e-9a7f-46f2-b782-49f4b4e1ce23",
        "cursor": {
          "ref": "1367671f-f5a2-4481-a4b3-cd9989831db8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "27d2fd5c-dd88-44e2-b2af-faf490c3e923"
        },
        "item": {
          "id": "aa3b078e-9a7f-46f2-b782-49f4b4e1ce23",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "eb1a6d73-5d0c-4465-8cb3-accb821ab41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a1ffec-b951-4036-a8aa-058ef559a771",
        "cursor": {
          "ref": "dd6302c1-ca92-4630-8825-fbffbc516358",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d38ba861-956c-4b0d-8fa2-3149deef21fb"
        },
        "item": {
          "id": "88a1ffec-b951-4036-a8aa-058ef559a771",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9786eb38-53c0-4a3f-bec0-17512df265d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85463c32-1821-405a-b477-325b1b8fc409",
        "cursor": {
          "ref": "ae163617-e46f-4f61-95fb-521d1ee1bbf9",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4a8e066a-5aa5-4142-9803-3b01a313fdf6"
        },
        "item": {
          "id": "85463c32-1821-405a-b477-325b1b8fc409",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "99d8f8b2-26e2-47f3-94e7-77870eacdfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dec0ae-b74b-4747-9da7-018f89794ccb",
        "cursor": {
          "ref": "07b5ef6a-e980-47e9-893b-abc1e46996ed",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "45ccf15d-2f79-4bb2-a575-8b8907cb3f08"
        },
        "item": {
          "id": "01dec0ae-b74b-4747-9da7-018f89794ccb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "41c2f531-84f3-49b0-ad10-5f797693d045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b5b298-e6f2-43a3-b6bb-271466aa1ea3",
        "cursor": {
          "ref": "6d6874c4-0498-4f76-b3c9-b2adf3f19e69",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e23b839b-5b6f-47f2-bbf6-6554bd8d323a"
        },
        "item": {
          "id": "58b5b298-e6f2-43a3-b6bb-271466aa1ea3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1b5000a6-16f7-4f9c-ba01-17b9331cccf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5d7a12-0ee6-49af-b838-9945f33f3edd",
        "cursor": {
          "ref": "a9b07b04-a05f-4ec4-a7d7-62b0799c940d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "46cdba86-6e50-48a0-a7ef-400e9cca0921"
        },
        "item": {
          "id": "3b5d7a12-0ee6-49af-b838-9945f33f3edd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e44e355e-a141-46b7-b890-0c159a0c56d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e405274f-aedc-4a45-b894-2a3042f485e1",
        "cursor": {
          "ref": "9361683c-4d28-4436-a048-28a542a19c1c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ab21b605-73e4-4611-94da-36c072ab2b08"
        },
        "item": {
          "id": "e405274f-aedc-4a45-b894-2a3042f485e1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3829bce7-60ae-4159-865c-947173f950b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3a3b72-6315-44c3-8ef7-64cf002c4c4e",
        "cursor": {
          "ref": "3cb95626-4b5d-4f56-8241-3674cd0858bc",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ad476b9b-67cb-4993-86da-bde503c1d6ea"
        },
        "item": {
          "id": "5b3a3b72-6315-44c3-8ef7-64cf002c4c4e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bdf85496-ac29-4af2-9054-af66bbd8b827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316b737a-7507-4351-9b34-1dda5eb81501",
        "cursor": {
          "ref": "15598314-6aa2-43f6-b4f5-2ff22d2c54b7",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e35f221b-feba-4822-8546-de3db980064d"
        },
        "item": {
          "id": "316b737a-7507-4351-9b34-1dda5eb81501",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "83ff574a-a7b8-4932-9518-fc41f30e480a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be18689b-61dd-4155-9b16-fb12019cdc9a",
        "cursor": {
          "ref": "667fd980-7072-435e-9d4a-2f604331bfe4",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ec41974e-7625-47ca-949c-94ddff1918d7"
        },
        "item": {
          "id": "be18689b-61dd-4155-9b16-fb12019cdc9a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "84462d82-b53b-4d8e-9ef2-05d5bce7e1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634545ba-2d7e-4a8d-8444-f781ad32d95d",
        "cursor": {
          "ref": "b1df889b-426c-42e6-84eb-98c963851804",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e1ad054c-1806-4d78-8f3f-71c326224a2b"
        },
        "item": {
          "id": "634545ba-2d7e-4a8d-8444-f781ad32d95d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cbe5bb47-2cd4-4269-a0a0-1bc03ed63c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28310630-64c4-4b16-8c7d-f48135d18ef8",
        "cursor": {
          "ref": "dca6c33e-624b-4be5-bab6-6ecceaf5d7a8",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "88d0a46f-e1d4-403e-bdff-ab2e24de5d87"
        },
        "item": {
          "id": "28310630-64c4-4b16-8c7d-f48135d18ef8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c049e07e-9fd0-48e4-851e-3305f900fc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa6912c-fb1b-415c-ba6f-b5301d50f43d",
        "cursor": {
          "ref": "846229f7-c288-4ea1-b74c-67d5cd42f113",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2c74d915-d0a2-4354-a15e-4389aa2b5186"
        },
        "item": {
          "id": "daa6912c-fb1b-415c-ba6f-b5301d50f43d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2bdbc599-a37e-4731-91ac-71b70fa8547e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7998079b-283f-42ae-a975-a3895e1e47f6",
        "cursor": {
          "ref": "367805ad-1111-401b-be54-9f25bd4fc01f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c6d5a238-86c5-4296-9272-4108dce59464"
        },
        "item": {
          "id": "7998079b-283f-42ae-a975-a3895e1e47f6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1d2b16d2-bdef-441c-8082-1846d5257e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3f14d8-19f9-4b7a-9e93-ea83726027b3",
        "cursor": {
          "ref": "941ddfb6-9886-4cea-aeb1-4ea3c48b2981",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5fad45c8-2bd3-48dd-beb4-8f6b53be4273"
        },
        "item": {
          "id": "3d3f14d8-19f9-4b7a-9e93-ea83726027b3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "873d2bed-30d5-4a85-9622-849605612175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7058805-ab31-4f9c-8428-892d489a3deb",
        "cursor": {
          "ref": "e0f48682-ed38-4b23-940a-4d49a5f7980f",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f6fd5546-7c8d-43f8-ac74-175de0241a71"
        },
        "item": {
          "id": "e7058805-ab31-4f9c-8428-892d489a3deb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6305adb6-d363-42b5-9670-5dd19ae41882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378af8c8-de3c-41e2-a001-a3242c95f0cc",
        "cursor": {
          "ref": "0a73d477-11ef-4dbe-88c1-5f3f846cb44c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ffad8b07-2cd8-474f-8877-a98d42cc0018"
        },
        "item": {
          "id": "378af8c8-de3c-41e2-a001-a3242c95f0cc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "412623b7-1e2f-4eae-a98f-b64601a402a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "75901d16-3839-4776-9752-e740a3bb4069",
        "cursor": {
          "ref": "19082e3d-5184-4b1d-8121-6d47a95c53c5",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ac5f8437-16fe-4709-9726-42d2751c01b8"
        },
        "item": {
          "id": "75901d16-3839-4776-9752-e740a3bb4069",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f11361a1-027a-4b14-8bb8-1ccfa0d7a3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "27fa38ea-e31a-4634-9f39-df5355d83deb",
        "cursor": {
          "ref": "afa10e4c-bea2-486e-8a5d-995143cc0a6c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "eb2240d8-1987-47d6-8302-d7f79c5fbd0a"
        },
        "item": {
          "id": "27fa38ea-e31a-4634-9f39-df5355d83deb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7f33c5c5-50d2-40ef-8880-c669cf1bcb1b",
          "status": "Created",
          "code": 201,
          "responseTime": 2496,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bc6df4-0f4c-4759-9908-ff0826a8897f",
        "cursor": {
          "ref": "21ba6d6c-52eb-4dfe-9eb8-db3375c62f52",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8a113673-6a00-405d-aecc-fcc47b688506"
        },
        "item": {
          "id": "d2bc6df4-0f4c-4759-9908-ff0826a8897f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4ec91477-3475-4027-866b-38b5f4b9aafc",
          "status": "Created",
          "code": 201,
          "responseTime": 1843,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "72786329-c8b5-4f47-aece-879f2c209ab5",
        "cursor": {
          "ref": "14804bfd-b3c7-444b-ab95-6f656528a49b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9c52139a-647c-43eb-8536-9dc07ede93d9"
        },
        "item": {
          "id": "72786329-c8b5-4f47-aece-879f2c209ab5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d799f2e5-65d2-4b02-ba41-0bd12902ec71",
          "status": "Created",
          "code": 201,
          "responseTime": 2126,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16606d-f617-439c-a172-1952af10f037",
        "cursor": {
          "ref": "e20eeab5-5289-4169-bb38-e971ffc0ce8b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "366298e8-f96a-4002-bd4e-0538b77c35ad"
        },
        "item": {
          "id": "6a16606d-f617-439c-a172-1952af10f037",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5cb83b62-fee2-46ab-a605-42b628a22cec",
          "status": "Created",
          "code": 201,
          "responseTime": 2202,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-21T00:43:54Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-21T00:43:54Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9e4f58a3-6c90-4cb5-97da-c4c5ecb46314",
        "cursor": {
          "ref": "4802d23f-e1b2-41cf-813f-9655b449c874",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b7cb93f4-7504-46d8-b6ad-bb9233f8334b"
        },
        "item": {
          "id": "9e4f58a3-6c90-4cb5-97da-c4c5ecb46314",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "98aa4647-9075-4731-8f44-b81c9dfa2cc2",
          "status": "Created",
          "code": 201,
          "responseTime": 2217,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a30fdce-5627-42b2-a6df-9f48d456989a",
        "cursor": {
          "ref": "ae173759-ba12-4db2-b52b-487a32bc6f43",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ade36326-d65a-4d1f-89bc-266f576eb5a9"
        },
        "item": {
          "id": "6a30fdce-5627-42b2-a6df-9f48d456989a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7ff00c7e-ec66-47cc-b085-37d99401b35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a30fdce-5627-42b2-a6df-9f48d456989a",
        "cursor": {
          "ref": "ae173759-ba12-4db2-b52b-487a32bc6f43",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ade36326-d65a-4d1f-89bc-266f576eb5a9"
        },
        "item": {
          "id": "6a30fdce-5627-42b2-a6df-9f48d456989a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7ff00c7e-ec66-47cc-b085-37d99401b35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e53211-5518-49f8-92cb-9f8863ffc38f",
        "cursor": {
          "ref": "3f89a496-f2cf-4130-b3ce-4910a2c323a2",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b7835c34-6b79-4d60-97d8-e01871c0e395"
        },
        "item": {
          "id": "84e53211-5518-49f8-92cb-9f8863ffc38f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff3b7e4c-3ebc-4bdd-a386-2a4e80a76f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551197e3-bf21-48f3-bb90-1fa3cafdf923",
        "cursor": {
          "ref": "f9ac3cbb-7a1c-4cc5-ae68-3e25602d84c5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20302143-4fa0-4258-b653-caa5f311300d"
        },
        "item": {
          "id": "551197e3-bf21-48f3-bb90-1fa3cafdf923",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ba6f32fc-f329-474f-9c82-86fd102da3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5688bf-06ab-45ff-9ff0-1bc8839034cf",
        "cursor": {
          "ref": "436c5d26-a9f6-4949-a14c-41fa34e015ee",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d60308ec-81be-4479-ae95-eed2b324a6f3"
        },
        "item": {
          "id": "2f5688bf-06ab-45ff-9ff0-1bc8839034cf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ec4381c3-a09d-4dde-ad23-81eccf726622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc45f2d4-f0c8-49e6-a9db-ea438fdc3d9c",
        "cursor": {
          "ref": "109ea25e-3320-4888-b6e8-4d4cbfac2a3a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "deb3d242-ada6-466a-9f9a-51b81c08baf5"
        },
        "item": {
          "id": "fc45f2d4-f0c8-49e6-a9db-ea438fdc3d9c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f139a9ab-481f-4881-99fd-53755d3ca7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6d7491-5d91-454c-81ba-f17acb650bf9",
        "cursor": {
          "ref": "8b0830cb-a1a5-408c-bd00-5f8f1275c4be",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "148499b9-643a-4ef6-bb08-f1d79fcdcb4c"
        },
        "item": {
          "id": "8b6d7491-5d91-454c-81ba-f17acb650bf9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3bf9c8a1-0f99-4475-af8f-7a826138f6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263f4c23-82bd-49c5-9ac7-24bab99824e9",
        "cursor": {
          "ref": "97a3edd8-7dc4-4483-97b6-c59be4d5ed4b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "368d5435-7037-4d30-950b-de1da7fc5d9b"
        },
        "item": {
          "id": "263f4c23-82bd-49c5-9ac7-24bab99824e9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "06323825-ea06-4406-938b-b85abba250de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4026c0-5e39-497e-ab9a-5d51bc38a93f",
        "cursor": {
          "ref": "7dd24fb0-0fc3-4a3e-86a9-c47f1f222284",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d709e1e2-973c-4aba-8587-11f46908b940"
        },
        "item": {
          "id": "1c4026c0-5e39-497e-ab9a-5d51bc38a93f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5630ff87-1c25-48f9-9a19-c5684d88470b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f298a627-62a5-4d97-b82f-05a14596acf8",
        "cursor": {
          "ref": "9ba359da-2a8b-4ccf-8031-f3ab8424479e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "79f72eb4-a4a3-48ee-a130-20854eb89dc9"
        },
        "item": {
          "id": "f298a627-62a5-4d97-b82f-05a14596acf8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9ba5d1e1-6531-46e5-b86a-78a7453cf111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86b7dd3-e077-4318-8705-d1b07a7e5602",
        "cursor": {
          "ref": "1cba43f4-7f1e-4c61-8f27-75dc40d0efb7",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a88c9ce1-1f75-4dfb-a2fd-0adb3501e300"
        },
        "item": {
          "id": "f86b7dd3-e077-4318-8705-d1b07a7e5602",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "75ef6880-fa0d-4dc6-a635-de48448c7057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae9a12e-3c6a-4317-b8de-6094b26af11d",
        "cursor": {
          "ref": "982cfd05-be80-4e01-80d2-80b4cdc820b7",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "91f0bda6-1701-45d8-a708-b7aa8ed884f3"
        },
        "item": {
          "id": "0ae9a12e-3c6a-4317-b8de-6094b26af11d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8737692c-486f-46df-855a-5d85b8168a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07151820-bf34-457f-8a01-5edbb45c6a22",
        "cursor": {
          "ref": "29ba1cf6-53e1-4da3-8e87-8d30bc08511a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3cc0b0da-02ed-492d-b923-7e2b78a64df9"
        },
        "item": {
          "id": "07151820-bf34-457f-8a01-5edbb45c6a22",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "81d623be-3e1d-423c-a038-291c2070d2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ba2aa3-8a60-4de7-a477-7f74c83f948b",
        "cursor": {
          "ref": "23e6cfc9-acff-4c96-b50d-2ff100dca9d3",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e69085c9-d14e-4f49-a3ae-3bbe8b029e87"
        },
        "item": {
          "id": "16ba2aa3-8a60-4de7-a477-7f74c83f948b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d363f447-5683-4782-a22e-8404592b893f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abe80ce-0731-462e-82fb-7bd9a9a3af24",
        "cursor": {
          "ref": "9de0fa62-6296-4f41-8df3-fecc1533919a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9b016b7b-1fab-4dab-9566-6f9444c5241f"
        },
        "item": {
          "id": "0abe80ce-0731-462e-82fb-7bd9a9a3af24",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2b6fe3de-5b5e-4941-b7d0-741fa073a9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622e4aa9-eab1-4193-bd12-9ff3f3934f03",
        "cursor": {
          "ref": "2fd91b97-aae3-40ae-b374-d34ba2efe506",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2c7194d1-b724-4fa1-944e-77fdc9425575"
        },
        "item": {
          "id": "622e4aa9-eab1-4193-bd12-9ff3f3934f03",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc921196-7de4-40e4-945a-8fcd8d1fd939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72e94c5-05a9-48ec-95a8-3113f25d7dd9",
        "cursor": {
          "ref": "d468afd7-5a11-440c-bf71-cdd49ca20bbe",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3cf062c9-6fea-4918-9a2c-a805028bb721"
        },
        "item": {
          "id": "b72e94c5-05a9-48ec-95a8-3113f25d7dd9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "64737c12-77c5-486a-91f8-1a2782de49e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25af914b-4a04-4ea7-b263-6806ff362327",
        "cursor": {
          "ref": "e10a9d1c-f207-46ce-92ca-299a3c0ac4fe",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f6ca8e09-46ee-426a-8e79-f2bfdfe48295"
        },
        "item": {
          "id": "25af914b-4a04-4ea7-b263-6806ff362327",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d1f909ef-5b63-4d1e-ad33-1bc30ac85378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da30b4d2-2832-4a18-9fa3-45c2bee3df72",
        "cursor": {
          "ref": "48123390-5e50-4dfb-b68d-74b0fea8e14a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d4b5d50f-4e66-4ecd-8177-01259e0a4b90"
        },
        "item": {
          "id": "da30b4d2-2832-4a18-9fa3-45c2bee3df72",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "38047ea8-246d-4d1a-8c45-f0f495444de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549dc919-7aee-4a0e-b5ad-d7a996b8fa4b",
        "cursor": {
          "ref": "8fb8feb4-263e-4604-813e-03f17035f729",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "95e0f9f9-5fc0-4d67-8db6-be49bc50d64c"
        },
        "item": {
          "id": "549dc919-7aee-4a0e-b5ad-d7a996b8fa4b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "77045659-7ed6-4133-b6c8-6e4e014794c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4e92b3-6b52-4c01-80df-aad39576c2ab",
        "cursor": {
          "ref": "ecd74ddc-a128-4136-96da-66bfa7deac6b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e8f93306-89a0-4d5e-81c5-c950bd14d0d4"
        },
        "item": {
          "id": "9d4e92b3-6b52-4c01-80df-aad39576c2ab",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4ab2d30c-c998-46da-9ac4-db56fa4c26fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabdb73a-6e11-442b-9e89-b9a289f50f04",
        "cursor": {
          "ref": "0f41e5c8-423c-4901-84f2-0e06b5efba4b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d6e62013-306f-4c3d-9ab7-eff4003196bb"
        },
        "item": {
          "id": "cabdb73a-6e11-442b-9e89-b9a289f50f04",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "63f5695d-ecdd-42b7-9316-323c49f0d3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51933d97-79d4-45fa-9681-f0f28fec4d65",
        "cursor": {
          "ref": "56a7c340-e211-4955-a17d-a125a6f36881",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "93181765-dc7c-4956-858c-6fc841465397"
        },
        "item": {
          "id": "51933d97-79d4-45fa-9681-f0f28fec4d65",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f9a3c79e-cf56-437e-9a0b-21675e84ffd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bda7b1-e246-4f2d-9a28-05314827b7cf",
        "cursor": {
          "ref": "52269e73-0834-4bf0-84a1-1a08168cd1c8",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9a232309-dfa1-4bfe-aec2-510c7541a097"
        },
        "item": {
          "id": "d9bda7b1-e246-4f2d-9a28-05314827b7cf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3643b85e-39f0-43c0-a1b6-c60689315a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23672e2-8bc1-4d82-8c78-c919452c53d0",
        "cursor": {
          "ref": "800b874e-43ec-4e91-bdea-1b891275a39e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1c782929-2ac2-4160-97d5-40694d0bb11e"
        },
        "item": {
          "id": "f23672e2-8bc1-4d82-8c78-c919452c53d0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8fddff05-04fe-4f20-b155-13ac0f7072b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4da8e2-347b-4dbd-ba90-ae60bd37bb81",
        "cursor": {
          "ref": "b803f1a9-2e23-4762-9ed9-229627d78c58",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9c59be62-fd26-4d12-bd1e-54e84c1cf1dd"
        },
        "item": {
          "id": "af4da8e2-347b-4dbd-ba90-ae60bd37bb81",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2c6388d9-9b8b-465e-b3ea-41c9db005587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7c90d0-5290-4203-9376-c172bc0e98a7",
        "cursor": {
          "ref": "a875bc02-9656-458b-a304-2a88b0b43a5e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b882eb66-872f-4efc-b98e-f6a5b45c3d1a"
        },
        "item": {
          "id": "fc7c90d0-5290-4203-9376-c172bc0e98a7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "63ae2996-1379-413b-b1ce-9960fb838d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7c3510-df3d-4fc0-a1d0-d070d8eda56f",
        "cursor": {
          "ref": "fd430cf4-0044-4000-9e7a-cfd78bf5b4d1",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aa184025-5443-4562-bcd5-d537856238b1"
        },
        "item": {
          "id": "2b7c3510-df3d-4fc0-a1d0-d070d8eda56f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "db7a6ee3-9a99-4de3-870b-34a89e9bab29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3c69c1-f830-4e15-97ad-a18b625afa58",
        "cursor": {
          "ref": "2f992b93-efee-497b-908f-055fe727aeac",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2037c499-992c-4f93-9103-e4e566d50abd"
        },
        "item": {
          "id": "0e3c69c1-f830-4e15-97ad-a18b625afa58",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4ea2d8ae-98c9-4345-a289-717f6c2b0e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add354e0-eced-4633-bd6c-9356c07274a8",
        "cursor": {
          "ref": "b992d304-4907-431d-af5f-987e54fcb401",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8756fabc-61ff-49b1-87f3-281261e4e920"
        },
        "item": {
          "id": "add354e0-eced-4633-bd6c-9356c07274a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e92c43b1-be69-4f67-92b5-f328815f1646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55271fb5-abe1-49d4-ad96-397dcd5a0300",
        "cursor": {
          "ref": "b66ccd4b-1bd9-4067-a763-d3f68d1a9616",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "98886b63-5ded-4c7a-948e-e5c3cd1f6ed3"
        },
        "item": {
          "id": "55271fb5-abe1-49d4-ad96-397dcd5a0300",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "988450e8-750a-480e-b069-63b4c82eb2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb8028a-9d5e-46fb-ba17-7d8063a3d32f",
        "cursor": {
          "ref": "3fadd113-9eef-411e-8101-0e3ffb6b1435",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f25b7c17-87dc-4dc7-817e-974ccfff7d54"
        },
        "item": {
          "id": "9bb8028a-9d5e-46fb-ba17-7d8063a3d32f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d2b83257-d9f8-4b77-b6b9-961b3eb71fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e2dcfa-ee0b-489b-b838-286c86195009",
        "cursor": {
          "ref": "59ec47e3-2825-46d2-a5de-df8cd505e914",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e71a6d10-a16e-47aa-9fb3-f980a585dcd9"
        },
        "item": {
          "id": "e5e2dcfa-ee0b-489b-b838-286c86195009",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f1a02af-cf3d-4f46-9253-934133ff47d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a06de7-48dd-4f6d-ae3e-195d1950b6aa",
        "cursor": {
          "ref": "44c71075-91fc-4909-a76a-eea217c7260f",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ad78abab-200e-4a22-87fc-c69a0e391fc9"
        },
        "item": {
          "id": "51a06de7-48dd-4f6d-ae3e-195d1950b6aa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2ff8c82d-3bb3-41a3-852b-9380b341b802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "dc0056b8-67d0-427a-baea-0588a9aca62e",
        "cursor": {
          "ref": "3a346ebd-498c-49ff-9f6c-3953a618a71d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0c202898-5104-48d9-83d3-28b50aac9cf3"
        },
        "item": {
          "id": "dc0056b8-67d0-427a-baea-0588a9aca62e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "980eb39f-cd5a-4d0f-82a5-4fddac07b557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "08f3dd7a-9cd5-4447-8abd-2fe491de210e",
        "cursor": {
          "ref": "2921b4b3-ec22-4a79-9ec4-3be910a361aa",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6bec5f89-07d2-4ff5-9639-173f45bd2ec1"
        },
        "item": {
          "id": "08f3dd7a-9cd5-4447-8abd-2fe491de210e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "00aed591-d393-4a69-bc05-29181195fec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f3dd7a-9cd5-4447-8abd-2fe491de210e",
        "cursor": {
          "ref": "2921b4b3-ec22-4a79-9ec4-3be910a361aa",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6bec5f89-07d2-4ff5-9639-173f45bd2ec1"
        },
        "item": {
          "id": "08f3dd7a-9cd5-4447-8abd-2fe491de210e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "00aed591-d393-4a69-bc05-29181195fec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a6c1dc-cbdd-405a-a2e2-477863fd3953",
        "cursor": {
          "ref": "d1ec79be-9b23-439c-be6e-da4214fc9180",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "10690ac4-1936-4169-9ac8-9efa02319acc"
        },
        "item": {
          "id": "a0a6c1dc-cbdd-405a-a2e2-477863fd3953",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "23b374d2-f41c-42f9-984c-ba4ebc1677b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb8a036-a315-42e3-aec2-e2378621e399",
        "cursor": {
          "ref": "ab8b9075-fb5a-4a6d-9de1-5c5f8036d06d",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0abe3b74-2330-41e3-bf75-f718d8bbe217"
        },
        "item": {
          "id": "bcb8a036-a315-42e3-aec2-e2378621e399",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c4aa9d3-cbd7-4fb2-97fb-0abaf59e7266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3472be7a-e2b8-49ed-ba65-1b0baf13fb76",
        "cursor": {
          "ref": "a1618e0c-a334-46cc-af7d-19c4cd04b57a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "70eac1d9-5097-49d5-b91a-f2dba23f301f"
        },
        "item": {
          "id": "3472be7a-e2b8-49ed-ba65-1b0baf13fb76",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "66348dd7-05de-47e0-8bb1-f5b28c6d795a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e530600b-165a-4c4d-a74c-0de0f0217025",
        "cursor": {
          "ref": "f0002d5b-1fd5-4a0e-ac36-7585725c36fd",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9d34416d-5178-4ed6-92e3-8f1d8eb4336d"
        },
        "item": {
          "id": "e530600b-165a-4c4d-a74c-0de0f0217025",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "12b9374d-61a1-4644-8f7b-96795f3da29f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76eaabd-790a-4567-9600-2a1d28e76f12",
        "cursor": {
          "ref": "8ae89a1d-57c1-43eb-a88a-ab9da7baf216",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5729157b-b0f4-4abf-8a70-7d5f5173ee50"
        },
        "item": {
          "id": "f76eaabd-790a-4567-9600-2a1d28e76f12",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc2df8af-8fa6-4c83-96ea-fac511b210aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c3de6d-7370-4f81-9031-41b1d0d568b5",
        "cursor": {
          "ref": "b4d251bf-2948-4b1a-9310-cd613772d1fe",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5b2c4995-f827-477a-839f-2b448a3a47e4"
        },
        "item": {
          "id": "65c3de6d-7370-4f81-9031-41b1d0d568b5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "00e51a23-6aed-4014-a80d-c1f1c21196b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdc8209-8e27-42a5-8744-abe0b847e6d8",
        "cursor": {
          "ref": "401072ce-d0da-4ed0-867f-3992a9523aaa",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b900d254-2d1e-4d24-a73e-602e8120e126"
        },
        "item": {
          "id": "4bdc8209-8e27-42a5-8744-abe0b847e6d8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2ec0e756-a7a9-4420-b3a4-474cb46c8b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9906e229-c28a-4121-b55d-49d4313317b0",
        "cursor": {
          "ref": "81988bed-0920-419a-a35b-7d39fc27b292",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ce883ad-2eda-4836-9446-1f91fd6970cc"
        },
        "item": {
          "id": "9906e229-c28a-4121-b55d-49d4313317b0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b96d4ef8-fb9a-4f42-a254-a4fb6fa5bbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9113201f-c7fe-4b70-8074-543ca4606ac2",
        "cursor": {
          "ref": "f6da3b2d-23b7-479e-b4f4-bb38e06a7abf",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a95c3f62-4114-4603-9724-023d34fc8ff4"
        },
        "item": {
          "id": "9113201f-c7fe-4b70-8074-543ca4606ac2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4c387598-5162-490a-b342-596aa131d831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34908b6-8f51-44ca-afd6-60d5e5371874",
        "cursor": {
          "ref": "b3f27798-9020-4f10-815b-805dc58e1cde",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "24b0a9bf-b9ed-48ff-a1c1-426a62b17383"
        },
        "item": {
          "id": "f34908b6-8f51-44ca-afd6-60d5e5371874",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bb7ac2f4-cc71-4b08-ba33-b1080b5cca2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c642b77-babb-4543-84c6-6e7ab137fa30",
        "cursor": {
          "ref": "e71c617c-a160-42f7-9485-a82d7107ec70",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7b28b43c-ee5b-44fd-8355-d37372209d91"
        },
        "item": {
          "id": "5c642b77-babb-4543-84c6-6e7ab137fa30",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "70e5b9b1-0cce-44d9-a380-be5ebaafefc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ee58e6-7630-4716-8997-cf1c62f5d8c8",
        "cursor": {
          "ref": "f289120d-8236-487f-ba79-81630921e136",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "caab1a65-2bc2-410f-80a4-36ae4c85c680"
        },
        "item": {
          "id": "94ee58e6-7630-4716-8997-cf1c62f5d8c8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cb54b008-0cea-4b20-a787-5ba67d9cc735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc24694c-e73e-4d93-8b5b-5aa40e4c3475",
        "cursor": {
          "ref": "08d984c7-620f-4929-a006-3d62d277e586",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7a81d6c1-7892-4e11-8b8f-41bf99ff3e2f"
        },
        "item": {
          "id": "dc24694c-e73e-4d93-8b5b-5aa40e4c3475",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "da6f8492-808f-466d-a67c-dba0a6eb6e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fcbb96-e966-4055-a5a0-e394deec1fbc",
        "cursor": {
          "ref": "3fb7c3fa-cd6e-4056-86d3-9a705f8fbf65",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c0878c0b-2beb-4e69-bffb-43facd615964"
        },
        "item": {
          "id": "70fcbb96-e966-4055-a5a0-e394deec1fbc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eb1e4ea8-ab8b-483d-967b-930d2a2c21e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756c98f0-6019-47b8-b52b-b755946b99b7",
        "cursor": {
          "ref": "08e67d8a-6562-47ab-b0aa-bfa35f558921",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d4adc8ba-01c0-47e6-8322-e848ef5c7661"
        },
        "item": {
          "id": "756c98f0-6019-47b8-b52b-b755946b99b7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "373074e5-e2a5-4837-9f66-bb9b624f204e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a511cc-012a-4ee9-839f-adc28b017d98",
        "cursor": {
          "ref": "82e8c8b0-3b05-403c-b0e8-f18fedc46e31",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7962ba42-abba-47f2-8aa3-b7761cdb8af0"
        },
        "item": {
          "id": "91a511cc-012a-4ee9-839f-adc28b017d98",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8e265a98-0e68-4601-a92a-af746e86203b",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dd6a4f61-606f-429d-95cd-3d355d5b99d8",
        "cursor": {
          "ref": "cbac9235-611d-45a8-a304-d9a9e6e9238f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "52886bde-db0f-44b7-ac48-a615ead75c87"
        },
        "item": {
          "id": "dd6a4f61-606f-429d-95cd-3d355d5b99d8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "969144bb-8076-4185-aee6-609c4bd44153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1144857e-9cb6-4acd-b298-0a3d30ab0e51",
        "cursor": {
          "ref": "5221e698-94a6-411d-b736-c676873c4cba",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ddbad61e-89a2-4aab-8449-c05e789d8373"
        },
        "item": {
          "id": "1144857e-9cb6-4acd-b298-0a3d30ab0e51",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "495f9033-01ce-48c7-9580-4148782080c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0caea0-31b5-4f15-a363-08ba87c7b4d9",
        "cursor": {
          "ref": "2964c755-6e7a-462f-b816-370175d9eedd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bd363d96-d6fc-4fd5-9465-56ab981d1e4d"
        },
        "item": {
          "id": "7a0caea0-31b5-4f15-a363-08ba87c7b4d9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "01e132c4-a0cb-4d3a-a5f0-6341b3fa9d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d9d334-2aba-41ab-85a9-1013045fd29d",
        "cursor": {
          "ref": "b8181065-22cc-4a56-ae00-2b4ab1193868",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69e83ba2-bb3b-4248-ad94-955bed1080ee"
        },
        "item": {
          "id": "88d9d334-2aba-41ab-85a9-1013045fd29d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d0986bb8-2fce-40de-961e-483619a9ff77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be7a646-22f3-45b5-b3c8-bc4972119550",
        "cursor": {
          "ref": "99f28dbe-c38e-408a-be09-e8eacb395a4a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f7b14a5c-d951-4d19-88ad-f379086377f6"
        },
        "item": {
          "id": "5be7a646-22f3-45b5-b3c8-bc4972119550",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c8d727f-2715-4414-92d5-baf9fd28720c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94eeb30e-b883-42cc-ab4b-5c59f0e12919",
        "cursor": {
          "ref": "4291b48e-1997-4662-bae6-bd19ca21cc4e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9f36e32a-aaca-4f39-a804-555e096be4d3"
        },
        "item": {
          "id": "94eeb30e-b883-42cc-ab4b-5c59f0e12919",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a742519a-1c78-43af-a0e4-8f5e828a5b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052427ec-5a88-4fa5-80b1-92a0d4445d5d",
        "cursor": {
          "ref": "39e12661-22fb-42eb-9f7b-37536a36224c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "123ac8f3-9009-41d4-a0d3-87b9f0998925"
        },
        "item": {
          "id": "052427ec-5a88-4fa5-80b1-92a0d4445d5d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f9266e87-4c61-4d8a-8efd-34ca2ab50e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2ce924-cd22-4eb6-bf52-2be83d0df624",
        "cursor": {
          "ref": "3b1b9dca-0c37-4d8f-8601-33179d6285b9",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f79c5363-461c-4eef-804b-e9192a8fb0a3"
        },
        "item": {
          "id": "0b2ce924-cd22-4eb6-bf52-2be83d0df624",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "06863b44-b307-4d0a-a9a9-345697a1462d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd19cc5-f8e8-4b41-87dd-8e6a7e41aa86",
        "cursor": {
          "ref": "bbfe8c73-1a0d-4865-8b42-330a5e0c1e79",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fb80dca2-a412-49c9-b24e-b236fff31a07"
        },
        "item": {
          "id": "0fd19cc5-f8e8-4b41-87dd-8e6a7e41aa86",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6541cf21-e275-4696-b6a7-099107be26de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a45a546-a8db-4677-8e56-4af74f0b1521",
        "cursor": {
          "ref": "cb80fe37-2ee9-4808-bbd9-3b1c0e095657",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4409c6f9-8383-461f-a428-fcfcfd966661"
        },
        "item": {
          "id": "2a45a546-a8db-4677-8e56-4af74f0b1521",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9d59f2bc-b591-4ca4-a4af-30a494efa4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a871ae93-7b6e-4b95-98b6-976b9fcc9436",
        "cursor": {
          "ref": "50d510d6-c2e6-437b-9ef5-fc669b3d3557",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5af8d2a7-da3d-4cfc-bdf6-107abc6a402f"
        },
        "item": {
          "id": "a871ae93-7b6e-4b95-98b6-976b9fcc9436",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dccae975-10d6-4d02-9adf-a2ca9b8dc0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c09201-10e7-42f6-93f9-f255f1d35d94",
        "cursor": {
          "ref": "c6027b74-9fd2-473e-b975-32db3701e8c8",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6b84e85a-d79c-46c2-a302-5138d4591ffa"
        },
        "item": {
          "id": "66c09201-10e7-42f6-93f9-f255f1d35d94",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3ef24d74-cb53-4d15-97eb-88ed48769959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdc5075-0cac-4da2-9d79-a08ef273577d",
        "cursor": {
          "ref": "26ee2ab3-cdf9-4bef-8153-289cc232ed5a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "16702d47-8b24-4be3-abe4-1714388b30ec"
        },
        "item": {
          "id": "5cdc5075-0cac-4da2-9d79-a08ef273577d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "341766e4-6734-4241-8aea-39d0e66e7128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5993854-079d-4b1a-922f-254cd6581116",
        "cursor": {
          "ref": "1567077e-c655-44c3-887c-b26098d56f8e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "05d1442b-54be-45d7-9673-b517ffa2eac8"
        },
        "item": {
          "id": "d5993854-079d-4b1a-922f-254cd6581116",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cafae8a5-3ef0-4161-8a26-0f588c3c510d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aae6338-725c-487c-b5ef-752ae35f9363",
        "cursor": {
          "ref": "7e7873fd-3b62-46e3-ba26-4b33aa63f4d7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c76090a4-67d7-431a-ad27-31a38902c7ae"
        },
        "item": {
          "id": "8aae6338-725c-487c-b5ef-752ae35f9363",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5b0fa69c-1c68-4669-8922-a870df424c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6e5fb1-dc75-4c02-889c-8d11e9fa4dc8",
        "cursor": {
          "ref": "427be7ea-cbc1-4f47-8218-853bda474b82",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "552826f0-57ef-437f-8bd9-55903f824f5d"
        },
        "item": {
          "id": "ba6e5fb1-dc75-4c02-889c-8d11e9fa4dc8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75c2df92-cac6-4d68-adb1-55ecd27697c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f701c9ac-f20c-4ce7-aacc-40cad784653f",
        "cursor": {
          "ref": "7a07259f-1e72-4399-b0ad-39981dba7183",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "79b97cc4-313b-4199-8a56-17ba8bcc3680"
        },
        "item": {
          "id": "f701c9ac-f20c-4ce7-aacc-40cad784653f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5a49df0c-3c4a-4a7a-af05-3406598019f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722e5608-24d4-4b27-b721-c0a54e627f78",
        "cursor": {
          "ref": "3e53749f-1202-407b-a25d-17fb7ae9c02a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1172f46e-87fe-4183-a26d-cc2f6a2b7e78"
        },
        "item": {
          "id": "722e5608-24d4-4b27-b721-c0a54e627f78",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "14301a3c-7d15-4b77-8fbb-3e6aacb360bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0306ec5-9009-41ac-b287-9aedeba392e1",
        "cursor": {
          "ref": "afbcaf03-35ce-4946-8e86-e58631c3de30",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d884ce54-2744-4f5a-a6f2-576872b034f8"
        },
        "item": {
          "id": "a0306ec5-9009-41ac-b287-9aedeba392e1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5a573b1d-a9bb-4ee8-a302-77ae82b0f844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0f45e8-16e5-44bc-b28d-19e4fafd1e72",
        "cursor": {
          "ref": "23046627-436e-490b-b42d-916928c9ce80",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "43ef16e4-a1cc-46aa-a65f-e266cfb4ca58"
        },
        "item": {
          "id": "ad0f45e8-16e5-44bc-b28d-19e4fafd1e72",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6ff9a6a9-3682-4f5f-bad2-35392c4e06e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391c7ccf-a9f9-491e-81de-430ed5e88b71",
        "cursor": {
          "ref": "d0b8ecf2-5c7e-4e30-9f91-339b16ff73ff",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d7b8feb-49a4-41ac-990e-a290b0e68418"
        },
        "item": {
          "id": "391c7ccf-a9f9-491e-81de-430ed5e88b71",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2c8fea46-e60c-4892-9c1e-60accc7ad94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfdb1a5-9b98-484a-af76-391dc7277d7f",
        "cursor": {
          "ref": "e07a96c1-95a2-45cf-b3ba-5e7197a44a76",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "067d5875-af1c-4a8d-9a78-692ea38b5622"
        },
        "item": {
          "id": "abfdb1a5-9b98-484a-af76-391dc7277d7f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "74e661c0-1452-412f-a3fb-ca89f0a30e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b648ee5-c6a7-458e-93e2-d934427f14ac",
        "cursor": {
          "ref": "431c5572-2606-4070-931f-4d9d40fbf416",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5bad7282-54d5-4b05-a78f-050abac80235"
        },
        "item": {
          "id": "3b648ee5-c6a7-458e-93e2-d934427f14ac",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e572d817-2968-4591-a92c-544dfc248ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353ecf6a-986a-44ee-8f20-ed07ec3b0697",
        "cursor": {
          "ref": "73232395-20db-4d6a-a200-411b3ac47dc5",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "562419b1-dee8-4d69-aac2-5088efa417d9"
        },
        "item": {
          "id": "353ecf6a-986a-44ee-8f20-ed07ec3b0697",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "45e17ddc-77c2-44d7-9daf-14c8113a781b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7b561b-649d-466d-b551-397133677c85",
        "cursor": {
          "ref": "cb972847-6905-47d1-8763-ea64199397c6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5cbc94db-818c-40d6-9c38-77f83a38319f"
        },
        "item": {
          "id": "bd7b561b-649d-466d-b551-397133677c85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aa642660-e7ee-48f2-bd13-b047858cb0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96677523-41d6-4e93-b014-2159b0ca968c",
        "cursor": {
          "ref": "d2703e08-a9b3-4c8a-8dfd-ace29f9c6461",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cc704fa6-bf7c-4a9e-aa26-ba9b203dcf70"
        },
        "item": {
          "id": "96677523-41d6-4e93-b014-2159b0ca968c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1cb50606-1b3d-4f51-91fe-336ea8487213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c6ffae-850a-4960-ba22-5cb88a0fd00e",
        "cursor": {
          "ref": "1eff4eff-c6d0-48aa-be40-ef9fc409f24f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ccc38782-0bfa-47fe-b5f8-04a4a6b51d41"
        },
        "item": {
          "id": "42c6ffae-850a-4960-ba22-5cb88a0fd00e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aba6d012-b6e1-447e-a1ce-c5f90d310799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d601160-7431-4cc0-8d1e-f1e4cb839afa",
        "cursor": {
          "ref": "33d4d8f1-434a-4916-a50f-618082e6f31b",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9f1746f1-6226-4181-ad6f-641e51ea7a81"
        },
        "item": {
          "id": "0d601160-7431-4cc0-8d1e-f1e4cb839afa",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "572152dc-3f95-4674-b6d1-aace87fd226d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ccb5f0-81ea-4460-9b53-e101a234a070",
        "cursor": {
          "ref": "be5bc7fb-6deb-4072-bac1-39eeb3d5c0b9",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e6cd7f24-5064-4952-b897-0c9667c7f6a8"
        },
        "item": {
          "id": "64ccb5f0-81ea-4460-9b53-e101a234a070",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "09f536ce-03dd-4879-9865-351b6d3d1d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b840d481-47af-4d2d-9ff4-ff1d84cea594",
        "cursor": {
          "ref": "211d2c0b-1a7c-49dc-9b28-a6ca87938447",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "82cc8deb-6048-4dc9-bcc1-76a868e8fea8"
        },
        "item": {
          "id": "b840d481-47af-4d2d-9ff4-ff1d84cea594",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5482bf01-1dfa-48a4-9bce-8c4968e70b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c572eb-ffc1-4bf7-88db-5bcc9722a44a",
        "cursor": {
          "ref": "0d6c9548-1f9a-490c-8a5d-c2358e78f197",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1bcff73b-569f-4c35-ba62-9501ff4f644f"
        },
        "item": {
          "id": "77c572eb-ffc1-4bf7-88db-5bcc9722a44a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5a9ea00a-3814-48e3-baac-e825d9a8fc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ff35ca-3a81-434e-b8be-bb5e8fdfc471",
        "cursor": {
          "ref": "d38e5c6b-2c77-4b16-8b96-f72f07e366b6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dc7eb5f8-175e-4a9e-b7f3-775c6f42e32f"
        },
        "item": {
          "id": "a8ff35ca-3a81-434e-b8be-bb5e8fdfc471",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7ebe8f47-4e17-420b-a725-557ec42c4a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c263d928-6489-4ea0-aca4-5c53d78cae17",
        "cursor": {
          "ref": "590906fe-1834-4468-be13-5ff9a91ced2f",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dafd1f4e-3e14-4cb6-95ab-b1ef1945871f"
        },
        "item": {
          "id": "c263d928-6489-4ea0-aca4-5c53d78cae17",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "907e5fe3-e96e-4c14-bc5f-aee80d4615ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60442aab-e7b9-40c1-aa64-bf6f71138482",
        "cursor": {
          "ref": "8b5f7864-6b36-46ef-beba-4144eb2c0cc7",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2eaa52d5-64b2-4368-a940-bea0a4ceeec1"
        },
        "item": {
          "id": "60442aab-e7b9-40c1-aa64-bf6f71138482",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8f87c697-0c49-40e6-90ca-e8f5c7cbbad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d118728a-3841-451b-a639-443e2c1c9686",
        "cursor": {
          "ref": "54d46f96-ec50-4fee-a61e-aa3e920ee647",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "33b43068-a504-448c-8e84-b4734712ef11"
        },
        "item": {
          "id": "d118728a-3841-451b-a639-443e2c1c9686",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0a5cb937-ef18-4481-bf43-dd7564247fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcec9a0-c09e-4aa9-b3f9-c3c63c9a2ae4",
        "cursor": {
          "ref": "d7a19ab5-f0a8-4ffd-bfc0-2bf7ca85b39f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "56157360-dbc7-4579-9ade-3c7615635108"
        },
        "item": {
          "id": "0bcec9a0-c09e-4aa9-b3f9-c3c63c9a2ae4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a8178765-64fb-4bdb-a030-be439147d634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16410d95-df9a-4ecf-bade-1c0d417e4db4",
        "cursor": {
          "ref": "ebbbd5bc-d063-4fa6-9b11-24378e8d8453",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "32798dae-bfd0-4e5d-ba57-b16b6ad01ddc"
        },
        "item": {
          "id": "16410d95-df9a-4ecf-bade-1c0d417e4db4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d2a652b4-c127-4b0f-b0ef-95fbd0f13b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff0ca5e-aa7c-480f-bfd8-abca5f5ca9e0",
        "cursor": {
          "ref": "c70f396d-87bd-485b-a74c-3e7858886143",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fbc8dfcd-82e1-44a9-89ca-b53f3d7a81f9"
        },
        "item": {
          "id": "eff0ca5e-aa7c-480f-bfd8-abca5f5ca9e0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "aac8de72-b3a6-494d-b3ad-2914b5127ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9942c0f-2567-4047-86cb-0b9d442c64d9",
        "cursor": {
          "ref": "21abfdc6-9898-4498-810f-ebfce8ac565c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "97d96b36-6625-4e95-94cd-28ee2fc28957"
        },
        "item": {
          "id": "a9942c0f-2567-4047-86cb-0b9d442c64d9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9e911eca-d54a-4abb-9338-ec267af6779b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51df8c5-7b29-41ac-8350-2add648947b6",
        "cursor": {
          "ref": "59f6fc7e-febd-4aa3-a482-93b2a597fcf1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b71eca09-d055-466d-9736-049799cca6e9"
        },
        "item": {
          "id": "b51df8c5-7b29-41ac-8350-2add648947b6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1a8fac78-20dc-4def-9dd2-c30f99db5c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6400352b-0a52-4f7e-a65e-f11f15efcc06",
        "cursor": {
          "ref": "7f9ea7df-faa2-4ee0-adf2-590ce750d7b5",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1d484c31-eeec-4424-a40f-146206b1d81d"
        },
        "item": {
          "id": "6400352b-0a52-4f7e-a65e-f11f15efcc06",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "be1600bb-9859-46db-91b8-df469fe13fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7763f463-6d46-4a35-bb2b-37b218bed390",
        "cursor": {
          "ref": "b4ef70cb-9c01-458a-b330-fc503bde01e9",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "24d3d405-f29a-44d1-807b-16b37c05a0c9"
        },
        "item": {
          "id": "7763f463-6d46-4a35-bb2b-37b218bed390",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f2381855-384c-4b7d-ba07-6a660ba45b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efea4db-2304-4135-bb18-33e82b8358d3",
        "cursor": {
          "ref": "e7aa4ddd-4106-4f1c-89b7-97ad97e419ba",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bc109cd6-5db8-4602-8e10-b4d2886af54a"
        },
        "item": {
          "id": "2efea4db-2304-4135-bb18-33e82b8358d3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "16682ed1-0e50-4463-ba7a-b5bfaa1b8b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4ad55f-cd17-4568-b521-6528a117e185",
        "cursor": {
          "ref": "187fb537-6098-4a60-a15e-9c580cd67e4d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "41702c54-1e22-46b9-abd8-55a4e9c62821"
        },
        "item": {
          "id": "ac4ad55f-cd17-4568-b521-6528a117e185",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "dfbb565d-e97a-4bdb-af07-4ec7c1f01753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9058b2cd-f329-4a77-834a-ed0395a4b073",
        "cursor": {
          "ref": "13e344a3-05e4-43f7-a28c-60f136a7de9e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "170ceddf-1903-4a6d-990d-e7dae027d51e"
        },
        "item": {
          "id": "9058b2cd-f329-4a77-834a-ed0395a4b073",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fa4f6101-281f-4b79-98d7-83c85365f99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bda3d3-3250-45ef-9781-03b3689c3922",
        "cursor": {
          "ref": "70397ef7-591d-4602-acbb-47499be09c30",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "82fc7a4a-b66c-4bf9-8b85-3257ed814e27"
        },
        "item": {
          "id": "f6bda3d3-3250-45ef-9781-03b3689c3922",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6a617d33-aa22-4070-8f82-7bae919ce852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac9d099-b476-435a-8d9a-baf28cbbd6d3",
        "cursor": {
          "ref": "f5b584ed-9ee4-4009-8676-7f822955baf0",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6787ef4b-4fa6-4167-bbdf-097dcb9fb01f"
        },
        "item": {
          "id": "6ac9d099-b476-435a-8d9a-baf28cbbd6d3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8f2a6909-33af-4825-8ce1-c97bc1abba55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cd53a0-e663-41a3-bb19-5fcf8e23e2e3",
        "cursor": {
          "ref": "2306efbd-1acf-4936-911e-bc13adb0ccf2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c27b9167-2976-4859-8f1c-94fdc2477ae6"
        },
        "item": {
          "id": "f6cd53a0-e663-41a3-bb19-5fcf8e23e2e3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c3beb5ac-7420-485d-a25f-cda07b529fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe499969-f68f-4fd5-b4ba-b40a919efb2b",
        "cursor": {
          "ref": "1dcfc8e7-ebbe-4ab0-966c-677b08deed40",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6321823b-0301-4df4-a620-192bd04eaac9"
        },
        "item": {
          "id": "fe499969-f68f-4fd5-b4ba-b40a919efb2b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0ff5728e-ee8e-48fa-a7cf-930403863340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd36ae6-1271-498f-b831-a2eedda5c895",
        "cursor": {
          "ref": "bb6ff912-8fe8-4a15-9e1e-a564e44228ea",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ecfa8e66-5927-44a5-acaf-ea4def1c5e0e"
        },
        "item": {
          "id": "8dd36ae6-1271-498f-b831-a2eedda5c895",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0de4514f-3797-4ac3-9dc1-e20af6c4c050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c98be4e-75a6-4c0b-9066-4dff9a7dfece",
        "cursor": {
          "ref": "5e37be28-2201-44c1-8135-64a36edff209",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "88e64098-9dad-4a30-a93f-e3ca915b289f"
        },
        "item": {
          "id": "6c98be4e-75a6-4c0b-9066-4dff9a7dfece",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "12e59d02-c924-4cde-9794-8e83d2e0873d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c3f87d-4da6-434b-afa5-08f0b8a0b2b7",
        "cursor": {
          "ref": "c4366f17-2853-444e-aa80-61edacfbb960",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88a1a5d3-ab16-4558-a3d2-84a28a5e43f7"
        },
        "item": {
          "id": "64c3f87d-4da6-434b-afa5-08f0b8a0b2b7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c511d342-06b5-498f-9dee-f1f167764797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5811456a-65ee-4dbf-9535-1640445e0871",
        "cursor": {
          "ref": "39e995c0-60ac-4373-bf0d-52ecf2f1d828",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6bb74c3d-602d-442e-b5f5-36459e099dd2"
        },
        "item": {
          "id": "5811456a-65ee-4dbf-9535-1640445e0871",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "483dd36c-8c5c-4ee0-a133-aa2d65ce14c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8890f61-33de-4e8a-b520-4f924407c00e",
        "cursor": {
          "ref": "81c20577-519c-4a67-9d3e-a7187ef6a815",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "52e45e3a-7f0e-4d7a-91a8-e8719f8b6bea"
        },
        "item": {
          "id": "e8890f61-33de-4e8a-b520-4f924407c00e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2475cfad-9a3a-41f9-9e85-d836701c8025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4517512b-2e46-4ee0-909e-ed267679a775",
        "cursor": {
          "ref": "960d57a9-6163-4223-a9ea-05adf1443a46",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7341decc-1864-4438-9657-b740482e51b8"
        },
        "item": {
          "id": "4517512b-2e46-4ee0-909e-ed267679a775",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6a3109d4-6383-46ee-a28e-21fbaa304db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e12bc35-2aa1-43f7-8233-31ea6d44d144",
        "cursor": {
          "ref": "400f61b0-67f3-42a3-b17e-cc6f1f915e70",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ebaaea5b-3544-4f6b-a828-fa33564899b6"
        },
        "item": {
          "id": "9e12bc35-2aa1-43f7-8233-31ea6d44d144",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "30156a31-2d78-4689-b26e-4e809a0ce44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541e8ff6-75f7-4f81-8ee5-5f163b97d5b4",
        "cursor": {
          "ref": "bce320a9-a7d1-40e2-a439-a22586cb7366",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "84dc8972-74ef-4d84-aa51-2b16738f40b2"
        },
        "item": {
          "id": "541e8ff6-75f7-4f81-8ee5-5f163b97d5b4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4b95b923-9d11-484e-ba5a-16c55a81a9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d03475-720c-4b23-9033-1c598ade748d",
        "cursor": {
          "ref": "88f3121a-92c6-4dac-b0c2-97fd3a8b7ca4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8ceabfb9-50c8-4ff5-afba-c8609b8e3fdf"
        },
        "item": {
          "id": "41d03475-720c-4b23-9033-1c598ade748d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "193b3f29-79fc-42b5-95af-91f5038508c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e57f1fd-d09a-470f-abb3-69de53b8306a",
        "cursor": {
          "ref": "0030f54b-2d91-4b7c-aef3-7dbb8b5ad0f0",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4cf9d4e1-e13c-4466-a901-2693d49d9c63"
        },
        "item": {
          "id": "9e57f1fd-d09a-470f-abb3-69de53b8306a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3a65e831-9727-4204-b9c0-8d0d31787814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf081b4-2f6c-4b27-a034-cf3241b08980",
        "cursor": {
          "ref": "e6c550d9-b9cc-4927-b2f3-5f8d274a7b8f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fb56a253-3451-4e73-8fd2-b9d8a3d0b60e"
        },
        "item": {
          "id": "3cf081b4-2f6c-4b27-a034-cf3241b08980",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1e8600e1-5686-43d2-95ed-ae7e53be80fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666162f3-8ea6-492c-a148-226ad1fae089",
        "cursor": {
          "ref": "ace9b607-27d2-41e6-91f8-7e73e9f3fe97",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "523f595c-8da6-420d-b164-1108bb8bae3c"
        },
        "item": {
          "id": "666162f3-8ea6-492c-a148-226ad1fae089",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5fcfc873-32d7-41d3-a91d-44df89f53ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2e5c91-a049-4365-930a-13efb1df5c01",
        "cursor": {
          "ref": "8e5b59a8-f125-49c3-95bb-b0b7a3384d03",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ab9ad0ca-b1ea-43ea-8b5d-6e1b56dcf5f9"
        },
        "item": {
          "id": "9e2e5c91-a049-4365-930a-13efb1df5c01",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "61c36963-3aff-4d7a-88fe-3288768c3a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d299a8d-1e93-4fed-a98b-43478a8d9fe4",
        "cursor": {
          "ref": "14733478-da1f-42c0-97c9-9e5c60796dcc",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a082e5cb-ead5-42b2-a142-71d29d6015ea"
        },
        "item": {
          "id": "1d299a8d-1e93-4fed-a98b-43478a8d9fe4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "be951327-15b6-4502-9b25-8778081cc2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1430fd3c-2e0c-42c6-9a3d-0bde036948d6",
        "cursor": {
          "ref": "4c2c061c-ea9c-4af0-ab41-d4e311a9187b",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a6ab0639-e432-49fe-a97d-3e04c1f19061"
        },
        "item": {
          "id": "1430fd3c-2e0c-42c6-9a3d-0bde036948d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6f44634c-0d4d-49b0-8fdc-f3c1c8cf390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cb8ca5-e4b4-4768-97bb-457a5285ee7b",
        "cursor": {
          "ref": "83f9c587-a29e-4da5-a7c9-d6b12fe00b74",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "73e32295-60c9-4751-9148-92a10aaa5aeb"
        },
        "item": {
          "id": "21cb8ca5-e4b4-4768-97bb-457a5285ee7b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ad2c5fe9-664c-4940-abe5-35c3f3b2c2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea55013-d652-485f-b8fa-8aa198b864ce",
        "cursor": {
          "ref": "3dd1faf1-9bc9-4543-904b-9c0922833914",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8c2631cb-4a75-422c-9b1b-0529a7a4b509"
        },
        "item": {
          "id": "7ea55013-d652-485f-b8fa-8aa198b864ce",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7382c34e-e369-4132-ab51-3e18427760a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae6a688-cae8-4c5f-a9d0-ba8cfcf283b2",
        "cursor": {
          "ref": "523a0e5d-311f-44e6-b8ed-b0d1f414a24a",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "24140fbd-3688-4769-8afa-546c54302b95"
        },
        "item": {
          "id": "cae6a688-cae8-4c5f-a9d0-ba8cfcf283b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c041b455-8dd3-41d7-9e21-08d05f7c0066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b22c069-3350-449b-9c4a-b317f4443827",
        "cursor": {
          "ref": "526bc546-2999-4673-8e6e-ff4fc5f3f5bc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0f3c57d5-342e-4141-a1e1-010331a89962"
        },
        "item": {
          "id": "2b22c069-3350-449b-9c4a-b317f4443827",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0ea67e48-15de-4114-84f9-e70f17e29ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39b2795-f5c3-4841-933d-16d870622cfa",
        "cursor": {
          "ref": "1663f8ef-f199-4cc0-bec8-032fee875a42",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "911dcc48-e827-434a-9dbd-6885fcbcafb2"
        },
        "item": {
          "id": "a39b2795-f5c3-4841-933d-16d870622cfa",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "84b02528-5d9d-4d04-bc88-54be0cb6fd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31da1ab-6deb-4fa7-9e8a-a1f61e6fb3ef",
        "cursor": {
          "ref": "f12d867a-104b-4f06-b288-3797c68e47f9",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cca97062-6ab8-4da5-a92a-1002a44e7523"
        },
        "item": {
          "id": "f31da1ab-6deb-4fa7-9e8a-a1f61e6fb3ef",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bfe39def-4fa0-4022-8f9a-f47ddacb60eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf87c461-f34f-446a-bfa2-bf348a17d21e",
        "cursor": {
          "ref": "0deb28b8-97a9-4f65-938e-6c9c4b22648c",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "330aa698-b1b2-4808-aa0c-9fdcdfa0e7d3"
        },
        "item": {
          "id": "bf87c461-f34f-446a-bfa2-bf348a17d21e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "00a63751-df29-4b59-9f69-7c87b7570193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd796943-d6e4-4a9d-b167-293ea6e063cd",
        "cursor": {
          "ref": "02302266-9cb7-4bd7-bc5d-8dd9911e9928",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7205a276-bdc6-40c0-9196-aff1f1c858be"
        },
        "item": {
          "id": "bd796943-d6e4-4a9d-b167-293ea6e063cd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3fc15c4f-98ba-4c79-9db7-4f0f4105652c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f06b46-edce-404e-86c9-825efddf29a4",
        "cursor": {
          "ref": "9cdd781d-49bb-4cc3-a462-f9d2d716849c",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "298001a5-ca21-4c71-92fe-82553558e9c5"
        },
        "item": {
          "id": "46f06b46-edce-404e-86c9-825efddf29a4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "945df16b-7145-4395-bbed-60d2af68b94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d5d3ba-ca98-4f5e-8380-2a649bb24b87",
        "cursor": {
          "ref": "00d16ac6-9220-44ba-8dac-e94089bbbc61",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9526434a-9431-4199-bef8-3cb15c244c66"
        },
        "item": {
          "id": "44d5d3ba-ca98-4f5e-8380-2a649bb24b87",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a637e67c-86f6-4ed2-9118-bf9ffac94482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3280558-724e-4d20-92e4-42264c2a53e5",
        "cursor": {
          "ref": "e06f254a-ac48-45d2-8af0-8101f22dade5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6a28819a-636b-46fa-a4dd-c526caf573c1"
        },
        "item": {
          "id": "e3280558-724e-4d20-92e4-42264c2a53e5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1334fa40-cd3e-4fc1-85a1-9cc989a898a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae691717-414b-48ea-9a5a-cf68450a0ce1",
        "cursor": {
          "ref": "07ecb4f1-9479-42d7-92f3-2691638e566c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ffd0993-9f52-4b7a-b3b8-bb564c59c590"
        },
        "item": {
          "id": "ae691717-414b-48ea-9a5a-cf68450a0ce1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5c173a55-7089-41f1-a41c-c9f140c70985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ad1273-10ae-4df0-abc6-6ea690ffab16",
        "cursor": {
          "ref": "e642147b-51b5-4f6c-8667-666dfbd717a6",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5366ef00-1ea2-4e07-bd82-20347e57243e"
        },
        "item": {
          "id": "37ad1273-10ae-4df0-abc6-6ea690ffab16",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ccff0b1-bb76-4943-a8bd-3e1e92f9b10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba349fa4-4f90-47cd-a3ed-da805a8f3a69",
        "cursor": {
          "ref": "5bc05e12-b06c-43be-92b8-cbcc53a07a0d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "304141c1-1238-4416-a473-151aa60d882c"
        },
        "item": {
          "id": "ba349fa4-4f90-47cd-a3ed-da805a8f3a69",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9b51a0ef-c8c1-4ec0-868e-bd06c246ab3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eaf5e43-89a9-43b2-8f8d-b9046a5c28f6",
        "cursor": {
          "ref": "923eaf64-be6d-4093-a37a-fb37dc0512e2",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "05629d83-247a-4bdd-a31d-d1a10d0012ea"
        },
        "item": {
          "id": "7eaf5e43-89a9-43b2-8f8d-b9046a5c28f6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d8b0cc91-ec4e-4b0e-85e8-ded91953b319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed380406-40d3-4326-8526-56f278cd87fc",
        "cursor": {
          "ref": "31816e40-b7cc-417c-8c19-dc1a9dd6805c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "170be5dd-ef29-420d-8a98-b0156b0ae670"
        },
        "item": {
          "id": "ed380406-40d3-4326-8526-56f278cd87fc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "902b714e-7d27-4f06-9cee-45686f0f3f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61da0b03-6c11-4f4a-9684-95d014c2b540",
        "cursor": {
          "ref": "27170e59-3a30-468b-acfd-4fd46772cfac",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3c4586ed-d5a8-4a4d-b7c7-af050e9bcbfa"
        },
        "item": {
          "id": "61da0b03-6c11-4f4a-9684-95d014c2b540",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c97c1bbb-38b1-43e0-bdae-ba19e48fa617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "21002a61-4017-4fb9-addf-50748a503bd2",
        "cursor": {
          "ref": "a4275297-d415-462a-973f-b4ec90e415b4",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "567c9948-d440-4d1a-aec7-3f2af343859b"
        },
        "item": {
          "id": "21002a61-4017-4fb9-addf-50748a503bd2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c1718841-c014-48f9-80e3-2ebaa9f01c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9b993346-476a-4f9a-8044-f3d389b8838b",
        "cursor": {
          "ref": "0095482e-b7d3-49a8-9cac-2245944c1ab0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "42e935ac-6577-4f9f-bb27-8c46569e3be3"
        },
        "item": {
          "id": "9b993346-476a-4f9a-8044-f3d389b8838b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5de83348-6c44-450a-9d38-8e9f896d2404",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9055011f-de44-4f53-b065-9265246fb6fb",
        "cursor": {
          "ref": "e9860150-e1ef-4bfb-8db4-c10847dc84f6",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c5ff698e-2a3f-4023-b0ad-ee2b45a2e547"
        },
        "item": {
          "id": "9055011f-de44-4f53-b065-9265246fb6fb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f9984e3f-830a-456f-919f-fb388b8d8528",
          "status": "OK",
          "code": 200,
          "responseTime": 2132,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea66dea-eb06-4bbd-b9a4-eabeb295fb4b",
        "cursor": {
          "ref": "b5e2dc2f-f659-4fba-99e6-fe543e4da769",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "51f0b0c6-486b-444c-b98a-e2f7a3ec9bde"
        },
        "item": {
          "id": "0ea66dea-eb06-4bbd-b9a4-eabeb295fb4b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2f23af04-5396-426b-8124-25c35a854e68",
          "status": "OK",
          "code": 200,
          "responseTime": 2119,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
        "cursor": {
          "ref": "fb5096ed-7e54-45b4-9f62-bfb2a7353af9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "910ed8e6-d603-4db7-8eb3-4d5b5cc182e0"
        },
        "item": {
          "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51d356d3-4f63-4478-bc6c-ea687fb762dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
        "cursor": {
          "ref": "fb5096ed-7e54-45b4-9f62-bfb2a7353af9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "910ed8e6-d603-4db7-8eb3-4d5b5cc182e0"
        },
        "item": {
          "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51d356d3-4f63-4478-bc6c-ea687fb762dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
        "cursor": {
          "ref": "fb5096ed-7e54-45b4-9f62-bfb2a7353af9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "910ed8e6-d603-4db7-8eb3-4d5b5cc182e0"
        },
        "item": {
          "id": "28747a3e-be32-4f03-b5dd-447c28cb09f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51d356d3-4f63-4478-bc6c-ea687fb762dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7ab1f64b-5139-4cc2-a11b-99b4cf0a2617",
        "cursor": {
          "ref": "a750c80f-33c4-4116-bfd1-3a232e03465b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5dc445aa-ca5d-45de-bd6f-90877fce0797"
        },
        "item": {
          "id": "7ab1f64b-5139-4cc2-a11b-99b4cf0a2617",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5d8386a0-054b-42f0-880c-3b4ae49e8489",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1ab7fa1e-1e5c-4e2a-a823-257df02e948f",
        "cursor": {
          "ref": "b4884e83-ff24-4056-9262-175d99ab5995",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "deba66ce-4779-4003-9780-7c7ca09f149e"
        },
        "item": {
          "id": "1ab7fa1e-1e5c-4e2a-a823-257df02e948f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d33c9f9-9db5-4cb4-b72b-fbe5cc704683",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1ab7fa1e-1e5c-4e2a-a823-257df02e948f",
        "cursor": {
          "ref": "b4884e83-ff24-4056-9262-175d99ab5995",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "deba66ce-4779-4003-9780-7c7ca09f149e"
        },
        "item": {
          "id": "1ab7fa1e-1e5c-4e2a-a823-257df02e948f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3d33c9f9-9db5-4cb4-b72b-fbe5cc704683",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "4ac6848c-642b-498f-bbed-0028fc3d068b",
        "cursor": {
          "ref": "6b619d46-2951-4fd0-a870-95740ad91259",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1c1da364-b9e4-4590-b496-208e8203f1a7"
        },
        "item": {
          "id": "4ac6848c-642b-498f-bbed-0028fc3d068b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "16990f00-8a2e-4dad-994c-af81e70c9eca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 121,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2773779b-f31b-49c8-beb7-98449944b913",
        "cursor": {
          "ref": "739cc991-fb8a-48f0-9412-a756ba23f2fa",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "40ae544e-cb39-41c4-984f-c58368527b95"
        },
        "item": {
          "id": "2773779b-f31b-49c8-beb7-98449944b913",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab51981d-25e2-4a5f-8cf7-979a7dd02f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2773779b-f31b-49c8-beb7-98449944b913",
        "cursor": {
          "ref": "739cc991-fb8a-48f0-9412-a756ba23f2fa",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "40ae544e-cb39-41c4-984f-c58368527b95"
        },
        "item": {
          "id": "2773779b-f31b-49c8-beb7-98449944b913",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab51981d-25e2-4a5f-8cf7-979a7dd02f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5b33d3be-1a51-414c-aff9-dea6b97719da",
        "cursor": {
          "ref": "71c2e0f3-4772-4984-8571-d855ae255532",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a39c34f-66d6-4cac-97fd-b3f8123c3cd8"
        },
        "item": {
          "id": "5b33d3be-1a51-414c-aff9-dea6b97719da",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e803c514-c69a-44bc-8a6a-9beddd91b824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}